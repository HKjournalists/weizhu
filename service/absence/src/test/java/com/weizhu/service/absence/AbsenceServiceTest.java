package com.weizhu.service.absence;import com.google.common.collect.Lists;import com.google.common.util.concurrent.Futures;import com.google.inject.Guice;import com.google.inject.Inject;import com.google.inject.Injector;import com.weizhu.common.module.FakeExternalServiceModule;import com.weizhu.common.module.FakeProfileServiceModule;import com.weizhu.common.module.FakePushServiceModule;import com.weizhu.common.module.TestModule;import com.weizhu.common.utils.TestUtil;import com.weizhu.proto.AbsenceProtos.*;import com.weizhu.proto.AbsenceService;import com.weizhu.proto.AdminProtos.AdminHead;import com.weizhu.proto.WeizhuProtos.EmptyRequest;import com.weizhu.proto.WeizhuProtos.RequestHead;import com.weizhu.service.allow.AllowServiceModule;import com.weizhu.service.official.OfficialServiceModule;import com.weizhu.service.user.UserServiceModule;import com.weizhu.service.user.test.UserServiceTestModule;import org.junit.BeforeClass;import org.junit.Test;import java.text.ParseException;import java.text.SimpleDateFormat;import java.util.Date;import java.util.List;import static org.junit.Assert.assertTrue;public class AbsenceServiceTest {	static {		System.setProperty("logback.configurationFile", "com/weizhu/service/absence/test/logback.xml");	}	private static final Injector INJECTOR = Guice.createInjector(			new TestModule(),			new UserServiceTestModule(), new UserServiceModule(),			new FakePushServiceModule(), new FakeProfileServiceModule(), new FakeExternalServiceModule(),			new AbsenceServiceTestModule(), new AbsenceServiceModule(),			new OfficialServiceModule(), new AllowServiceModule());	@BeforeClass	public static void init() throws Exception {		TestUtil.clearCache(INJECTOR);		TestUtil.loadTestDataDB(INJECTOR);	}	private final RequestHead requestHead;	private final AdminHead adminHead;	private final AbsenceService absenceService;	@Inject	public AbsenceServiceTest() {		this.requestHead = INJECTOR.getInstance(RequestHead.class);		this.adminHead = INJECTOR.getInstance(AdminHead.class);		this.absenceService = INJECTOR.getInstance(AbsenceService.class);	}	@Test	public void testGetAbsenceById() {		List<Integer> list = Lists.newArrayList(1, 2, 3);		GetAbsenceByIdRequest request = GetAbsenceByIdRequest.newBuilder()				.addAllAbsenceId(list)				.build();		GetAbsenceByIdResponse response = Futures.getUnchecked(absenceService.getAbsenceById(requestHead, request));		assertTrue(response.getAbsenceCount() == 3);	}	@Test	public void testGetAbsenceNow() {		GetAbsenceNowResponse response = Futures.getUnchecked(absenceService.getAbsenceNow(requestHead, EmptyRequest.getDefaultInstance()));		assertTrue(response.getAbsence() != null);	}	@Test	public void testCreateAbsence() {		SimpleDateFormat df = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");		Date startTime = null;		Date endTime = null;		try {			startTime = df.parse("2020-02-22 00:00:00");			endTime = df.parse("2025-02-22 00:00:00");		} catch (ParseException e) {			e.printStackTrace();		}		CreateAbsenceRequest request = CreateAbsenceRequest.newBuilder()				.setDesc("有事请假")				.setType("事假")				.setStartTime((int) (startTime.getTime() / 1000L))				.setEndTime((int) (endTime.getTime() / 1000L))				.addUserId(100000081L)				.setDays("2")				.build();		CreateAbsenceResponse response = Futures.getUnchecked(absenceService.createAbsence(requestHead, request));		assertTrue(response.getResult().equals(CreateAbsenceResponse.Result.SUCC));	}	@Test	public void testCancelAbsence() {		CancelAbsenceRequest request = CancelAbsenceRequest.newBuilder()				.setAbsenceId(1)				.setDays("2")				.build();		CancelAbsenceResponse response = Futures.getUnchecked(absenceService.cancelAbsence(requestHead, request));		assertTrue(response.getResult().equals(CancelAbsenceResponse.Result.SUCC));	}	@Test	public void testGetAbsenceCli() {		GetAbsenceCliRequest request = GetAbsenceCliRequest.newBuilder()				.setSize(2)				.build();		GetAbsenceCliResponse response = Futures.getUnchecked(absenceService.getAbsenceCli(requestHead, request));		assertTrue(response.hasHasMore());	}	@Test	public void testGetAbsenceByIdAdmin() {		GetAbsenceByIdRequest request = GetAbsenceByIdRequest.newBuilder()				.addAbsenceId(1)				.build();		GetAbsenceByIdResponse response = Futures.getUnchecked(absenceService.getAbsenceById(adminHead, request));		assertTrue(response.getAbsenceCount() > 0);	}	@Test	public void testGetAbsenceSer() {		GetAbsenceSerRequest request = GetAbsenceSerRequest.newBuilder()				.setStart(0)				.setLength(10)				.build();		GetAbsenceSerResponse response = Futures.getUnchecked(absenceService.getAbsenceSer(adminHead, request));		assertTrue(response.getAbsenceCount() > 0);	}	@Test	public void testUpdateAbsence() {		SimpleDateFormat df = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");		Date startTime = null;		Date endTime = null;		try {			startTime = df.parse("2020-02-22 00:00:00");			endTime = df.parse("2025-02-23 00:00:00");		} catch (ParseException e) {			e.printStackTrace();		}		UpdateAbsenceRequest request = UpdateAbsenceRequest.newBuilder()				.setDesc("1122aaa")				.setType("111232123")				.setStartTime((int) (startTime.getTime() / 1000L))				.setPreEndTime((int) (endTime.getTime() / 1000L))				.setDays("2")				.setAbsenceId(1)				.build();		UpdateAbsenceResponse response = Futures.getUnchecked(absenceService.updateAbsence(adminHead, request));		assertTrue(response.getResult().equals(UpdateAbsenceResponse.Result.SUCC));	}}