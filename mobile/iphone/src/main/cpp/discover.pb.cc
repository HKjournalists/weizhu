// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: discover.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "discover.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)

namespace weizhu {
namespace discover {

void protobuf_ShutdownFile_discover_2eproto() {
  delete Banner::default_instance_;
  delete Module::default_instance_;
  delete Module_Category::default_instance_;
  delete Item::default_instance_;
  delete ItemContent::default_instance_;
  delete RecommendModule::default_instance_;
  delete Comment::default_instance_;
  delete GetDiscoverHomeResponse::default_instance_;
  delete GetModuleItemListRequest::default_instance_;
  delete GetModuleItemListResponse::default_instance_;
  delete GetItemByIdRequest::default_instance_;
  delete GetItemByIdResponse::default_instance_;
  delete GetItemContentRequest::default_instance_;
  delete GetItemContentResponse::default_instance_;
  delete SearchItemRequest::default_instance_;
  delete SearchItemResponse::default_instance_;
  delete GetItemPVRequest::default_instance_;
  delete GetItemPVResponse::default_instance_;
  delete GetItemScoreRequest::default_instance_;
  delete GetItemScoreResponse::default_instance_;
  delete ScoreItemRequest::default_instance_;
  delete ScoreItemResponse::default_instance_;
  delete GetItemCommentListRequest::default_instance_;
  delete GetItemCommentListResponse::default_instance_;
  delete CommentItemRequest::default_instance_;
  delete CommentItemResponse::default_instance_;
  delete DeleteCommentRequest::default_instance_;
  delete DeleteCommentResponse::default_instance_;
  delete GetItemListRequest::default_instance_;
  delete GetItemListResponse::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_discover_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_discover_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  ::weizhu::protobuf_AddDesc_weizhu_2eproto();
  Banner::default_instance_ = new Banner();
  Module::default_instance_ = new Module();
  Module_Category::default_instance_ = new Module_Category();
  Item::default_instance_ = new Item();
  ItemContent::default_instance_ = new ItemContent();
  RecommendModule::default_instance_ = new RecommendModule();
  Comment::default_instance_ = new Comment();
  GetDiscoverHomeResponse::default_instance_ = new GetDiscoverHomeResponse();
  GetModuleItemListRequest::default_instance_ = new GetModuleItemListRequest();
  GetModuleItemListResponse::default_instance_ = new GetModuleItemListResponse();
  GetItemByIdRequest::default_instance_ = new GetItemByIdRequest();
  GetItemByIdResponse::default_instance_ = new GetItemByIdResponse();
  GetItemContentRequest::default_instance_ = new GetItemContentRequest();
  GetItemContentResponse::default_instance_ = new GetItemContentResponse();
  SearchItemRequest::default_instance_ = new SearchItemRequest();
  SearchItemResponse::default_instance_ = new SearchItemResponse();
  GetItemPVRequest::default_instance_ = new GetItemPVRequest();
  GetItemPVResponse::default_instance_ = new GetItemPVResponse();
  GetItemScoreRequest::default_instance_ = new GetItemScoreRequest();
  GetItemScoreResponse::default_instance_ = new GetItemScoreResponse();
  ScoreItemRequest::default_instance_ = new ScoreItemRequest();
  ScoreItemResponse::default_instance_ = new ScoreItemResponse();
  GetItemCommentListRequest::default_instance_ = new GetItemCommentListRequest();
  GetItemCommentListResponse::default_instance_ = new GetItemCommentListResponse();
  CommentItemRequest::default_instance_ = new CommentItemRequest();
  CommentItemResponse::default_instance_ = new CommentItemResponse();
  DeleteCommentRequest::default_instance_ = new DeleteCommentRequest();
  DeleteCommentResponse::default_instance_ = new DeleteCommentResponse();
  GetItemListRequest::default_instance_ = new GetItemListRequest();
  GetItemListResponse::default_instance_ = new GetItemListResponse();
  Banner::default_instance_->InitAsDefaultInstance();
  Module::default_instance_->InitAsDefaultInstance();
  Module_Category::default_instance_->InitAsDefaultInstance();
  Item::default_instance_->InitAsDefaultInstance();
  ItemContent::default_instance_->InitAsDefaultInstance();
  RecommendModule::default_instance_->InitAsDefaultInstance();
  Comment::default_instance_->InitAsDefaultInstance();
  GetDiscoverHomeResponse::default_instance_->InitAsDefaultInstance();
  GetModuleItemListRequest::default_instance_->InitAsDefaultInstance();
  GetModuleItemListResponse::default_instance_->InitAsDefaultInstance();
  GetItemByIdRequest::default_instance_->InitAsDefaultInstance();
  GetItemByIdResponse::default_instance_->InitAsDefaultInstance();
  GetItemContentRequest::default_instance_->InitAsDefaultInstance();
  GetItemContentResponse::default_instance_->InitAsDefaultInstance();
  SearchItemRequest::default_instance_->InitAsDefaultInstance();
  SearchItemResponse::default_instance_->InitAsDefaultInstance();
  GetItemPVRequest::default_instance_->InitAsDefaultInstance();
  GetItemPVResponse::default_instance_->InitAsDefaultInstance();
  GetItemScoreRequest::default_instance_->InitAsDefaultInstance();
  GetItemScoreResponse::default_instance_->InitAsDefaultInstance();
  ScoreItemRequest::default_instance_->InitAsDefaultInstance();
  ScoreItemResponse::default_instance_->InitAsDefaultInstance();
  GetItemCommentListRequest::default_instance_->InitAsDefaultInstance();
  GetItemCommentListResponse::default_instance_->InitAsDefaultInstance();
  CommentItemRequest::default_instance_->InitAsDefaultInstance();
  CommentItemResponse::default_instance_->InitAsDefaultInstance();
  DeleteCommentRequest::default_instance_->InitAsDefaultInstance();
  DeleteCommentResponse::default_instance_->InitAsDefaultInstance();
  GetItemListRequest::default_instance_->InitAsDefaultInstance();
  GetItemListResponse::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_discover_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_discover_2eproto_once_);
void protobuf_AddDesc_discover_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_discover_2eproto_once_,
                 &protobuf_AddDesc_discover_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_discover_2eproto {
  StaticDescriptorInitializer_discover_2eproto() {
    protobuf_AddDesc_discover_2eproto();
  }
} static_descriptor_initializer_discover_2eproto_;
#endif

// ===================================================================

#ifndef _MSC_VER
const int Banner::kBannerIdFieldNumber;
const int Banner::kBannerNameFieldNumber;
const int Banner::kImageNameFieldNumber;
const int Banner::kItemIdFieldNumber;
const int Banner::kCreateTimeFieldNumber;
#endif  // !_MSC_VER

Banner::Banner()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:weizhu.discover.Banner)
}

void Banner::InitAsDefaultInstance() {
}

Banner::Banner(const Banner& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:weizhu.discover.Banner)
}

void Banner::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  banner_id_ = 0;
  banner_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  image_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  item_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  create_time_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Banner::~Banner() {
  // @@protoc_insertion_point(destructor:weizhu.discover.Banner)
  SharedDtor();
}

void Banner::SharedDtor() {
  if (banner_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete banner_name_;
  }
  if (image_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete image_name_;
  }
  if (item_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete item_id_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void Banner::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Banner& Banner::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_discover_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_discover_2eproto();
#endif
  return *default_instance_;
}

Banner* Banner::default_instance_ = NULL;

Banner* Banner::New() const {
  return new Banner;
}

void Banner::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Banner*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(banner_id_, create_time_);
    if (has_banner_name()) {
      if (banner_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        banner_name_->clear();
      }
    }
    if (has_image_name()) {
      if (image_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        image_name_->clear();
      }
    }
    if (has_item_id()) {
      if (item_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        item_id_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool Banner::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:weizhu.discover.Banner)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 banner_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &banner_id_)));
          set_has_banner_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_banner_name;
        break;
      }

      // required string banner_name = 2;
      case 2: {
        if (tag == 18) {
         parse_banner_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_banner_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_image_name;
        break;
      }

      // required string image_name = 3;
      case 3: {
        if (tag == 26) {
         parse_image_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_image_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_item_id;
        break;
      }

      // optional string item_id = 4;
      case 4: {
        if (tag == 34) {
         parse_item_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_item_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_create_time;
        break;
      }

      // required int32 create_time = 5;
      case 5: {
        if (tag == 40) {
         parse_create_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &create_time_)));
          set_has_create_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:weizhu.discover.Banner)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:weizhu.discover.Banner)
  return false;
#undef DO_
}

void Banner::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:weizhu.discover.Banner)
  // required int32 banner_id = 1;
  if (has_banner_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->banner_id(), output);
  }

  // required string banner_name = 2;
  if (has_banner_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->banner_name(), output);
  }

  // required string image_name = 3;
  if (has_image_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->image_name(), output);
  }

  // optional string item_id = 4;
  if (has_item_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->item_id(), output);
  }

  // required int32 create_time = 5;
  if (has_create_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->create_time(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:weizhu.discover.Banner)
}

int Banner::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 banner_id = 1;
    if (has_banner_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->banner_id());
    }

    // required string banner_name = 2;
    if (has_banner_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->banner_name());
    }

    // required string image_name = 3;
    if (has_image_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->image_name());
    }

    // optional string item_id = 4;
    if (has_item_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->item_id());
    }

    // required int32 create_time = 5;
    if (has_create_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->create_time());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Banner::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Banner*>(&from));
}

void Banner::MergeFrom(const Banner& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_banner_id()) {
      set_banner_id(from.banner_id());
    }
    if (from.has_banner_name()) {
      set_banner_name(from.banner_name());
    }
    if (from.has_image_name()) {
      set_image_name(from.image_name());
    }
    if (from.has_item_id()) {
      set_item_id(from.item_id());
    }
    if (from.has_create_time()) {
      set_create_time(from.create_time());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void Banner::CopyFrom(const Banner& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Banner::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000017) != 0x00000017) return false;

  return true;
}

void Banner::Swap(Banner* other) {
  if (other != this) {
    std::swap(banner_id_, other->banner_id_);
    std::swap(banner_name_, other->banner_name_);
    std::swap(image_name_, other->image_name_);
    std::swap(item_id_, other->item_id_);
    std::swap(create_time_, other->create_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string Banner::GetTypeName() const {
  return "weizhu.discover.Banner";
}


// ===================================================================

#ifndef _MSC_VER
const int Module_Category::kCategoryIdFieldNumber;
const int Module_Category::kCategoryNameFieldNumber;
#endif  // !_MSC_VER

Module_Category::Module_Category()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:weizhu.discover.Module.Category)
}

void Module_Category::InitAsDefaultInstance() {
}

Module_Category::Module_Category(const Module_Category& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:weizhu.discover.Module.Category)
}

void Module_Category::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  category_id_ = 0;
  category_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Module_Category::~Module_Category() {
  // @@protoc_insertion_point(destructor:weizhu.discover.Module.Category)
  SharedDtor();
}

void Module_Category::SharedDtor() {
  if (category_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete category_name_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void Module_Category::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Module_Category& Module_Category::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_discover_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_discover_2eproto();
#endif
  return *default_instance_;
}

Module_Category* Module_Category::default_instance_ = NULL;

Module_Category* Module_Category::New() const {
  return new Module_Category;
}

void Module_Category::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    category_id_ = 0;
    if (has_category_name()) {
      if (category_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        category_name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool Module_Category::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:weizhu.discover.Module.Category)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 category_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &category_id_)));
          set_has_category_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_category_name;
        break;
      }

      // required string category_name = 2;
      case 2: {
        if (tag == 18) {
         parse_category_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_category_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:weizhu.discover.Module.Category)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:weizhu.discover.Module.Category)
  return false;
#undef DO_
}

void Module_Category::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:weizhu.discover.Module.Category)
  // required int32 category_id = 1;
  if (has_category_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->category_id(), output);
  }

  // required string category_name = 2;
  if (has_category_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->category_name(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:weizhu.discover.Module.Category)
}

int Module_Category::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 category_id = 1;
    if (has_category_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->category_id());
    }

    // required string category_name = 2;
    if (has_category_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->category_name());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Module_Category::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Module_Category*>(&from));
}

void Module_Category::MergeFrom(const Module_Category& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_category_id()) {
      set_category_id(from.category_id());
    }
    if (from.has_category_name()) {
      set_category_name(from.category_name());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void Module_Category::CopyFrom(const Module_Category& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Module_Category::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Module_Category::Swap(Module_Category* other) {
  if (other != this) {
    std::swap(category_id_, other->category_id_);
    std::swap(category_name_, other->category_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string Module_Category::GetTypeName() const {
  return "weizhu.discover.Module.Category";
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Module::kModuleIdFieldNumber;
const int Module::kModuleNameFieldNumber;
const int Module::kIconNameFieldNumber;
const int Module::kCategoryFieldNumber;
#endif  // !_MSC_VER

Module::Module()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:weizhu.discover.Module)
}

void Module::InitAsDefaultInstance() {
}

Module::Module(const Module& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:weizhu.discover.Module)
}

void Module::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  module_id_ = 0;
  module_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  icon_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Module::~Module() {
  // @@protoc_insertion_point(destructor:weizhu.discover.Module)
  SharedDtor();
}

void Module::SharedDtor() {
  if (module_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete module_name_;
  }
  if (icon_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete icon_name_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void Module::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Module& Module::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_discover_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_discover_2eproto();
#endif
  return *default_instance_;
}

Module* Module::default_instance_ = NULL;

Module* Module::New() const {
  return new Module;
}

void Module::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    module_id_ = 0;
    if (has_module_name()) {
      if (module_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        module_name_->clear();
      }
    }
    if (has_icon_name()) {
      if (icon_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        icon_name_->clear();
      }
    }
  }
  category_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool Module::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:weizhu.discover.Module)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 module_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &module_id_)));
          set_has_module_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_module_name;
        break;
      }

      // required string module_name = 2;
      case 2: {
        if (tag == 18) {
         parse_module_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_module_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_icon_name;
        break;
      }

      // required string icon_name = 3;
      case 3: {
        if (tag == 26) {
         parse_icon_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_icon_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_category;
        break;
      }

      // repeated .weizhu.discover.Module.Category category = 4;
      case 4: {
        if (tag == 34) {
         parse_category:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_category()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_category;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:weizhu.discover.Module)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:weizhu.discover.Module)
  return false;
#undef DO_
}

void Module::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:weizhu.discover.Module)
  // required int32 module_id = 1;
  if (has_module_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->module_id(), output);
  }

  // required string module_name = 2;
  if (has_module_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->module_name(), output);
  }

  // required string icon_name = 3;
  if (has_icon_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->icon_name(), output);
  }

  // repeated .weizhu.discover.Module.Category category = 4;
  for (int i = 0; i < this->category_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, this->category(i), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:weizhu.discover.Module)
}

int Module::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 module_id = 1;
    if (has_module_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->module_id());
    }

    // required string module_name = 2;
    if (has_module_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->module_name());
    }

    // required string icon_name = 3;
    if (has_icon_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->icon_name());
    }

  }
  // repeated .weizhu.discover.Module.Category category = 4;
  total_size += 1 * this->category_size();
  for (int i = 0; i < this->category_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->category(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Module::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Module*>(&from));
}

void Module::MergeFrom(const Module& from) {
  GOOGLE_CHECK_NE(&from, this);
  category_.MergeFrom(from.category_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_module_id()) {
      set_module_id(from.module_id());
    }
    if (from.has_module_name()) {
      set_module_name(from.module_name());
    }
    if (from.has_icon_name()) {
      set_icon_name(from.icon_name());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void Module::CopyFrom(const Module& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Module::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->category())) return false;
  return true;
}

void Module::Swap(Module* other) {
  if (other != this) {
    std::swap(module_id_, other->module_id_);
    std::swap(module_name_, other->module_name_);
    std::swap(icon_name_, other->icon_name_);
    category_.Swap(&other->category_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string Module::GetTypeName() const {
  return "weizhu.discover.Module";
}


// ===================================================================

#ifndef _MSC_VER
const int Item::kItemIdFieldNumber;
const int Item::kItemNameFieldNumber;
const int Item::kIconNameFieldNumber;
const int Item::kCreateTimeFieldNumber;
const int Item::kItemDescFieldNumber;
const int Item::kEnableScoreFieldNumber;
const int Item::kEnableCommentFieldNumber;
#endif  // !_MSC_VER

Item::Item()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:weizhu.discover.Item)
}

void Item::InitAsDefaultInstance() {
}

Item::Item(const Item& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:weizhu.discover.Item)
}

void Item::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  item_id_ = GOOGLE_LONGLONG(0);
  item_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  icon_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  create_time_ = 0;
  item_desc_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  enable_score_ = false;
  enable_comment_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Item::~Item() {
  // @@protoc_insertion_point(destructor:weizhu.discover.Item)
  SharedDtor();
}

void Item::SharedDtor() {
  if (item_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete item_name_;
  }
  if (icon_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete icon_name_;
  }
  if (item_desc_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete item_desc_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void Item::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Item& Item::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_discover_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_discover_2eproto();
#endif
  return *default_instance_;
}

Item* Item::default_instance_ = NULL;

Item* Item::New() const {
  return new Item;
}

void Item::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Item*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(create_time_, enable_comment_);
    item_id_ = GOOGLE_LONGLONG(0);
    if (has_item_name()) {
      if (item_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        item_name_->clear();
      }
    }
    if (has_icon_name()) {
      if (icon_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        icon_name_->clear();
      }
    }
    if (has_item_desc()) {
      if (item_desc_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        item_desc_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool Item::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:weizhu.discover.Item)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 item_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &item_id_)));
          set_has_item_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_item_name;
        break;
      }

      // required string item_name = 2;
      case 2: {
        if (tag == 18) {
         parse_item_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_item_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_icon_name;
        break;
      }

      // optional string icon_name = 3;
      case 3: {
        if (tag == 26) {
         parse_icon_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_icon_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_create_time;
        break;
      }

      // required int32 create_time = 4;
      case 4: {
        if (tag == 32) {
         parse_create_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &create_time_)));
          set_has_create_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_item_desc;
        break;
      }

      // required string item_desc = 5;
      case 5: {
        if (tag == 42) {
         parse_item_desc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_item_desc()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_enable_score;
        break;
      }

      // optional bool enable_score = 6;
      case 6: {
        if (tag == 48) {
         parse_enable_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enable_score_)));
          set_has_enable_score();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_enable_comment;
        break;
      }

      // optional bool enable_comment = 7;
      case 7: {
        if (tag == 56) {
         parse_enable_comment:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enable_comment_)));
          set_has_enable_comment();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:weizhu.discover.Item)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:weizhu.discover.Item)
  return false;
#undef DO_
}

void Item::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:weizhu.discover.Item)
  // required int64 item_id = 1;
  if (has_item_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->item_id(), output);
  }

  // required string item_name = 2;
  if (has_item_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->item_name(), output);
  }

  // optional string icon_name = 3;
  if (has_icon_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->icon_name(), output);
  }

  // required int32 create_time = 4;
  if (has_create_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->create_time(), output);
  }

  // required string item_desc = 5;
  if (has_item_desc()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->item_desc(), output);
  }

  // optional bool enable_score = 6;
  if (has_enable_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->enable_score(), output);
  }

  // optional bool enable_comment = 7;
  if (has_enable_comment()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->enable_comment(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:weizhu.discover.Item)
}

int Item::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 item_id = 1;
    if (has_item_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->item_id());
    }

    // required string item_name = 2;
    if (has_item_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->item_name());
    }

    // optional string icon_name = 3;
    if (has_icon_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->icon_name());
    }

    // required int32 create_time = 4;
    if (has_create_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->create_time());
    }

    // required string item_desc = 5;
    if (has_item_desc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->item_desc());
    }

    // optional bool enable_score = 6;
    if (has_enable_score()) {
      total_size += 1 + 1;
    }

    // optional bool enable_comment = 7;
    if (has_enable_comment()) {
      total_size += 1 + 1;
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Item::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Item*>(&from));
}

void Item::MergeFrom(const Item& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_item_id()) {
      set_item_id(from.item_id());
    }
    if (from.has_item_name()) {
      set_item_name(from.item_name());
    }
    if (from.has_icon_name()) {
      set_icon_name(from.icon_name());
    }
    if (from.has_create_time()) {
      set_create_time(from.create_time());
    }
    if (from.has_item_desc()) {
      set_item_desc(from.item_desc());
    }
    if (from.has_enable_score()) {
      set_enable_score(from.enable_score());
    }
    if (from.has_enable_comment()) {
      set_enable_comment(from.enable_comment());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void Item::CopyFrom(const Item& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Item::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001b) != 0x0000001b) return false;

  return true;
}

void Item::Swap(Item* other) {
  if (other != this) {
    std::swap(item_id_, other->item_id_);
    std::swap(item_name_, other->item_name_);
    std::swap(icon_name_, other->icon_name_);
    std::swap(create_time_, other->create_time_);
    std::swap(item_desc_, other->item_desc_);
    std::swap(enable_score_, other->enable_score_);
    std::swap(enable_comment_, other->enable_comment_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string Item::GetTypeName() const {
  return "weizhu.discover.Item";
}


// ===================================================================

#ifndef _MSC_VER
const int ItemContent::kItemFieldNumber;
const int ItemContent::kRedirectUrlFieldNumber;
const int ItemContent::kExamIdFieldNumber;
#endif  // !_MSC_VER

ItemContent::ItemContent()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:weizhu.discover.ItemContent)
}

void ItemContent::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  item_ = const_cast< ::weizhu::discover::Item*>(
      ::weizhu::discover::Item::internal_default_instance());
#else
  item_ = const_cast< ::weizhu::discover::Item*>(&::weizhu::discover::Item::default_instance());
#endif
}

ItemContent::ItemContent(const ItemContent& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:weizhu.discover.ItemContent)
}

void ItemContent::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  item_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  clear_has_content_type();
}

ItemContent::~ItemContent() {
  // @@protoc_insertion_point(destructor:weizhu.discover.ItemContent)
  SharedDtor();
}

void ItemContent::SharedDtor() {
  if (has_content_type()) {
    clear_content_type();
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete item_;
  }
}

void ItemContent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ItemContent& ItemContent::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_discover_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_discover_2eproto();
#endif
  return *default_instance_;
}

ItemContent* ItemContent::default_instance_ = NULL;

ItemContent* ItemContent::New() const {
  return new ItemContent;
}

void ItemContent::clear_content_type() {
  switch(content_type_case()) {
    case kRedirectUrl: {
      delete content_type_.redirect_url_;
      break;
    }
    case kExamId: {
      // No need to clear
      break;
    }
    case CONTENT_TYPE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = CONTENT_TYPE_NOT_SET;
}


void ItemContent::Clear() {
  if (has_item()) {
    if (item_ != NULL) item_->::weizhu::discover::Item::Clear();
  }
  clear_content_type();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool ItemContent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:weizhu.discover.ItemContent)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .weizhu.discover.Item item = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_item()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(810)) goto parse_redirect_url;
        break;
      }

      // optional string redirect_url = 101;
      case 101: {
        if (tag == 810) {
         parse_redirect_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_redirect_url()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(816)) goto parse_exam_id;
        break;
      }

      // optional int32 exam_id = 102;
      case 102: {
        if (tag == 816) {
         parse_exam_id:
          clear_content_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &content_type_.exam_id_)));
          set_has_exam_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:weizhu.discover.ItemContent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:weizhu.discover.ItemContent)
  return false;
#undef DO_
}

void ItemContent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:weizhu.discover.ItemContent)
  // required .weizhu.discover.Item item = 1;
  if (has_item()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->item(), output);
  }

  // optional string redirect_url = 101;
  if (has_redirect_url()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      101, this->redirect_url(), output);
  }

  // optional int32 exam_id = 102;
  if (has_exam_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(102, this->exam_id(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:weizhu.discover.ItemContent)
}

int ItemContent::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .weizhu.discover.Item item = 1;
    if (has_item()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->item());
    }

  }
  switch (content_type_case()) {
    // optional string redirect_url = 101;
    case kRedirectUrl: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->redirect_url());
      break;
    }
    // optional int32 exam_id = 102;
    case kExamId: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->exam_id());
      break;
    }
    case CONTENT_TYPE_NOT_SET: {
      break;
    }
  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ItemContent::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ItemContent*>(&from));
}

void ItemContent::MergeFrom(const ItemContent& from) {
  GOOGLE_CHECK_NE(&from, this);
  switch (from.content_type_case()) {
    case kRedirectUrl: {
      set_redirect_url(from.redirect_url());
      break;
    }
    case kExamId: {
      set_exam_id(from.exam_id());
      break;
    }
    case CONTENT_TYPE_NOT_SET: {
      break;
    }
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_item()) {
      mutable_item()->::weizhu::discover::Item::MergeFrom(from.item());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void ItemContent::CopyFrom(const ItemContent& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ItemContent::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_item()) {
    if (!this->item().IsInitialized()) return false;
  }
  return true;
}

void ItemContent::Swap(ItemContent* other) {
  if (other != this) {
    std::swap(item_, other->item_);
    std::swap(content_type_, other->content_type_);
    std::swap(_oneof_case_[0], other->_oneof_case_[0]);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string ItemContent::GetTypeName() const {
  return "weizhu.discover.ItemContent";
}


// ===================================================================

#ifndef _MSC_VER
const int RecommendModule::kModuleFieldNumber;
const int RecommendModule::kCategoryIdFieldNumber;
const int RecommendModule::kItemFieldNumber;
#endif  // !_MSC_VER

RecommendModule::RecommendModule()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:weizhu.discover.RecommendModule)
}

void RecommendModule::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  module_ = const_cast< ::weizhu::discover::Module*>(
      ::weizhu::discover::Module::internal_default_instance());
#else
  module_ = const_cast< ::weizhu::discover::Module*>(&::weizhu::discover::Module::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  item_ = const_cast< ::weizhu::discover::Item*>(
      ::weizhu::discover::Item::internal_default_instance());
#else
  item_ = const_cast< ::weizhu::discover::Item*>(&::weizhu::discover::Item::default_instance());
#endif
}

RecommendModule::RecommendModule(const RecommendModule& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:weizhu.discover.RecommendModule)
}

void RecommendModule::SharedCtor() {
  _cached_size_ = 0;
  module_ = NULL;
  category_id_ = 0;
  item_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RecommendModule::~RecommendModule() {
  // @@protoc_insertion_point(destructor:weizhu.discover.RecommendModule)
  SharedDtor();
}

void RecommendModule::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete module_;
    delete item_;
  }
}

void RecommendModule::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const RecommendModule& RecommendModule::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_discover_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_discover_2eproto();
#endif
  return *default_instance_;
}

RecommendModule* RecommendModule::default_instance_ = NULL;

RecommendModule* RecommendModule::New() const {
  return new RecommendModule;
}

void RecommendModule::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    if (has_module()) {
      if (module_ != NULL) module_->::weizhu::discover::Module::Clear();
    }
    category_id_ = 0;
    if (has_item()) {
      if (item_ != NULL) item_->::weizhu::discover::Item::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool RecommendModule::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:weizhu.discover.RecommendModule)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .weizhu.discover.Module module = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_module()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_category_id;
        break;
      }

      // required int32 category_id = 2;
      case 2: {
        if (tag == 16) {
         parse_category_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &category_id_)));
          set_has_category_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_item;
        break;
      }

      // required .weizhu.discover.Item item = 3;
      case 3: {
        if (tag == 26) {
         parse_item:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_item()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:weizhu.discover.RecommendModule)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:weizhu.discover.RecommendModule)
  return false;
#undef DO_
}

void RecommendModule::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:weizhu.discover.RecommendModule)
  // required .weizhu.discover.Module module = 1;
  if (has_module()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->module(), output);
  }

  // required int32 category_id = 2;
  if (has_category_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->category_id(), output);
  }

  // required .weizhu.discover.Item item = 3;
  if (has_item()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->item(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:weizhu.discover.RecommendModule)
}

int RecommendModule::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .weizhu.discover.Module module = 1;
    if (has_module()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->module());
    }

    // required int32 category_id = 2;
    if (has_category_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->category_id());
    }

    // required .weizhu.discover.Item item = 3;
    if (has_item()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->item());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RecommendModule::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const RecommendModule*>(&from));
}

void RecommendModule::MergeFrom(const RecommendModule& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_module()) {
      mutable_module()->::weizhu::discover::Module::MergeFrom(from.module());
    }
    if (from.has_category_id()) {
      set_category_id(from.category_id());
    }
    if (from.has_item()) {
      mutable_item()->::weizhu::discover::Item::MergeFrom(from.item());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void RecommendModule::CopyFrom(const RecommendModule& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RecommendModule::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_module()) {
    if (!this->module().IsInitialized()) return false;
  }
  if (has_item()) {
    if (!this->item().IsInitialized()) return false;
  }
  return true;
}

void RecommendModule::Swap(RecommendModule* other) {
  if (other != this) {
    std::swap(module_, other->module_);
    std::swap(category_id_, other->category_id_);
    std::swap(item_, other->item_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string RecommendModule::GetTypeName() const {
  return "weizhu.discover.RecommendModule";
}


// ===================================================================

#ifndef _MSC_VER
const int Comment::kCommentIdFieldNumber;
const int Comment::kCommentTimeFieldNumber;
const int Comment::kUserIdFieldNumber;
const int Comment::kContentFieldNumber;
#endif  // !_MSC_VER

Comment::Comment()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:weizhu.discover.Comment)
}

void Comment::InitAsDefaultInstance() {
}

Comment::Comment(const Comment& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:weizhu.discover.Comment)
}

void Comment::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  comment_id_ = GOOGLE_LONGLONG(0);
  comment_time_ = 0;
  user_id_ = GOOGLE_LONGLONG(0);
  content_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Comment::~Comment() {
  // @@protoc_insertion_point(destructor:weizhu.discover.Comment)
  SharedDtor();
}

void Comment::SharedDtor() {
  if (content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete content_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void Comment::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Comment& Comment::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_discover_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_discover_2eproto();
#endif
  return *default_instance_;
}

Comment* Comment::default_instance_ = NULL;

Comment* Comment::New() const {
  return new Comment;
}

void Comment::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Comment*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(comment_id_, user_id_);
    comment_time_ = 0;
    if (has_content()) {
      if (content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        content_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool Comment::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:weizhu.discover.Comment)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 comment_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &comment_id_)));
          set_has_comment_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_comment_time;
        break;
      }

      // required int32 comment_time = 2;
      case 2: {
        if (tag == 16) {
         parse_comment_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &comment_time_)));
          set_has_comment_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_user_id;
        break;
      }

      // required int64 user_id = 3;
      case 3: {
        if (tag == 24) {
         parse_user_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_content;
        break;
      }

      // required string content = 4;
      case 4: {
        if (tag == 34) {
         parse_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_content()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:weizhu.discover.Comment)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:weizhu.discover.Comment)
  return false;
#undef DO_
}

void Comment::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:weizhu.discover.Comment)
  // required int64 comment_id = 1;
  if (has_comment_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->comment_id(), output);
  }

  // required int32 comment_time = 2;
  if (has_comment_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->comment_time(), output);
  }

  // required int64 user_id = 3;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->user_id(), output);
  }

  // required string content = 4;
  if (has_content()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->content(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:weizhu.discover.Comment)
}

int Comment::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 comment_id = 1;
    if (has_comment_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->comment_id());
    }

    // required int32 comment_time = 2;
    if (has_comment_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->comment_time());
    }

    // required int64 user_id = 3;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->user_id());
    }

    // required string content = 4;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->content());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Comment::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Comment*>(&from));
}

void Comment::MergeFrom(const Comment& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_comment_id()) {
      set_comment_id(from.comment_id());
    }
    if (from.has_comment_time()) {
      set_comment_time(from.comment_time());
    }
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_content()) {
      set_content(from.content());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void Comment::CopyFrom(const Comment& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Comment::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void Comment::Swap(Comment* other) {
  if (other != this) {
    std::swap(comment_id_, other->comment_id_);
    std::swap(comment_time_, other->comment_time_);
    std::swap(user_id_, other->user_id_);
    std::swap(content_, other->content_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string Comment::GetTypeName() const {
  return "weizhu.discover.Comment";
}


// ===================================================================

#ifndef _MSC_VER
const int GetDiscoverHomeResponse::kBannerFieldNumber;
const int GetDiscoverHomeResponse::kRecommendModuleFieldNumber;
const int GetDiscoverHomeResponse::kModuleFieldNumber;
#endif  // !_MSC_VER

GetDiscoverHomeResponse::GetDiscoverHomeResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:weizhu.discover.GetDiscoverHomeResponse)
}

void GetDiscoverHomeResponse::InitAsDefaultInstance() {
}

GetDiscoverHomeResponse::GetDiscoverHomeResponse(const GetDiscoverHomeResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:weizhu.discover.GetDiscoverHomeResponse)
}

void GetDiscoverHomeResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetDiscoverHomeResponse::~GetDiscoverHomeResponse() {
  // @@protoc_insertion_point(destructor:weizhu.discover.GetDiscoverHomeResponse)
  SharedDtor();
}

void GetDiscoverHomeResponse::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void GetDiscoverHomeResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GetDiscoverHomeResponse& GetDiscoverHomeResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_discover_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_discover_2eproto();
#endif
  return *default_instance_;
}

GetDiscoverHomeResponse* GetDiscoverHomeResponse::default_instance_ = NULL;

GetDiscoverHomeResponse* GetDiscoverHomeResponse::New() const {
  return new GetDiscoverHomeResponse;
}

void GetDiscoverHomeResponse::Clear() {
  banner_.Clear();
  recommend_module_.Clear();
  module_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool GetDiscoverHomeResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:weizhu.discover.GetDiscoverHomeResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .weizhu.discover.Banner banner = 1;
      case 1: {
        if (tag == 10) {
         parse_banner:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_banner()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_banner;
        if (input->ExpectTag(18)) goto parse_recommend_module;
        break;
      }

      // repeated .weizhu.discover.RecommendModule recommend_module = 2;
      case 2: {
        if (tag == 18) {
         parse_recommend_module:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_recommend_module()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_recommend_module;
        if (input->ExpectTag(26)) goto parse_module;
        break;
      }

      // repeated .weizhu.discover.Module module = 3;
      case 3: {
        if (tag == 26) {
         parse_module:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_module()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_module;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:weizhu.discover.GetDiscoverHomeResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:weizhu.discover.GetDiscoverHomeResponse)
  return false;
#undef DO_
}

void GetDiscoverHomeResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:weizhu.discover.GetDiscoverHomeResponse)
  // repeated .weizhu.discover.Banner banner = 1;
  for (int i = 0; i < this->banner_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->banner(i), output);
  }

  // repeated .weizhu.discover.RecommendModule recommend_module = 2;
  for (int i = 0; i < this->recommend_module_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->recommend_module(i), output);
  }

  // repeated .weizhu.discover.Module module = 3;
  for (int i = 0; i < this->module_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->module(i), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:weizhu.discover.GetDiscoverHomeResponse)
}

int GetDiscoverHomeResponse::ByteSize() const {
  int total_size = 0;

  // repeated .weizhu.discover.Banner banner = 1;
  total_size += 1 * this->banner_size();
  for (int i = 0; i < this->banner_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->banner(i));
  }

  // repeated .weizhu.discover.RecommendModule recommend_module = 2;
  total_size += 1 * this->recommend_module_size();
  for (int i = 0; i < this->recommend_module_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->recommend_module(i));
  }

  // repeated .weizhu.discover.Module module = 3;
  total_size += 1 * this->module_size();
  for (int i = 0; i < this->module_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->module(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetDiscoverHomeResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GetDiscoverHomeResponse*>(&from));
}

void GetDiscoverHomeResponse::MergeFrom(const GetDiscoverHomeResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  banner_.MergeFrom(from.banner_);
  recommend_module_.MergeFrom(from.recommend_module_);
  module_.MergeFrom(from.module_);
  mutable_unknown_fields()->append(from.unknown_fields());
}

void GetDiscoverHomeResponse::CopyFrom(const GetDiscoverHomeResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetDiscoverHomeResponse::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->banner())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->recommend_module())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->module())) return false;
  return true;
}

void GetDiscoverHomeResponse::Swap(GetDiscoverHomeResponse* other) {
  if (other != this) {
    banner_.Swap(&other->banner_);
    recommend_module_.Swap(&other->recommend_module_);
    module_.Swap(&other->module_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string GetDiscoverHomeResponse::GetTypeName() const {
  return "weizhu.discover.GetDiscoverHomeResponse";
}


// ===================================================================

#ifndef _MSC_VER
const int GetModuleItemListRequest::kModuleIdFieldNumber;
const int GetModuleItemListRequest::kCategoryIdFieldNumber;
const int GetModuleItemListRequest::kListIndexBeginFieldNumber;
const int GetModuleItemListRequest::kListIndexEndFieldNumber;
const int GetModuleItemListRequest::kItemSizeFieldNumber;
#endif  // !_MSC_VER

GetModuleItemListRequest::GetModuleItemListRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:weizhu.discover.GetModuleItemListRequest)
}

void GetModuleItemListRequest::InitAsDefaultInstance() {
}

GetModuleItemListRequest::GetModuleItemListRequest(const GetModuleItemListRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:weizhu.discover.GetModuleItemListRequest)
}

void GetModuleItemListRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  module_id_ = 0;
  category_id_ = 0;
  list_index_begin_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  list_index_end_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  item_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetModuleItemListRequest::~GetModuleItemListRequest() {
  // @@protoc_insertion_point(destructor:weizhu.discover.GetModuleItemListRequest)
  SharedDtor();
}

void GetModuleItemListRequest::SharedDtor() {
  if (list_index_begin_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete list_index_begin_;
  }
  if (list_index_end_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete list_index_end_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void GetModuleItemListRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GetModuleItemListRequest& GetModuleItemListRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_discover_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_discover_2eproto();
#endif
  return *default_instance_;
}

GetModuleItemListRequest* GetModuleItemListRequest::default_instance_ = NULL;

GetModuleItemListRequest* GetModuleItemListRequest::New() const {
  return new GetModuleItemListRequest;
}

void GetModuleItemListRequest::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GetModuleItemListRequest*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(module_id_, category_id_);
    if (has_list_index_begin()) {
      if (list_index_begin_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        list_index_begin_->clear();
      }
    }
    if (has_list_index_end()) {
      if (list_index_end_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        list_index_end_->clear();
      }
    }
    item_size_ = 0;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool GetModuleItemListRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:weizhu.discover.GetModuleItemListRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 module_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &module_id_)));
          set_has_module_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_category_id;
        break;
      }

      // required int32 category_id = 2;
      case 2: {
        if (tag == 16) {
         parse_category_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &category_id_)));
          set_has_category_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_list_index_begin;
        break;
      }

      // optional bytes list_index_begin = 3;
      case 3: {
        if (tag == 26) {
         parse_list_index_begin:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_list_index_begin()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_list_index_end;
        break;
      }

      // optional bytes list_index_end = 4;
      case 4: {
        if (tag == 34) {
         parse_list_index_end:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_list_index_end()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_item_size;
        break;
      }

      // required int32 item_size = 5;
      case 5: {
        if (tag == 40) {
         parse_item_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &item_size_)));
          set_has_item_size();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:weizhu.discover.GetModuleItemListRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:weizhu.discover.GetModuleItemListRequest)
  return false;
#undef DO_
}

void GetModuleItemListRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:weizhu.discover.GetModuleItemListRequest)
  // required int32 module_id = 1;
  if (has_module_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->module_id(), output);
  }

  // required int32 category_id = 2;
  if (has_category_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->category_id(), output);
  }

  // optional bytes list_index_begin = 3;
  if (has_list_index_begin()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->list_index_begin(), output);
  }

  // optional bytes list_index_end = 4;
  if (has_list_index_end()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->list_index_end(), output);
  }

  // required int32 item_size = 5;
  if (has_item_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->item_size(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:weizhu.discover.GetModuleItemListRequest)
}

int GetModuleItemListRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 module_id = 1;
    if (has_module_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->module_id());
    }

    // required int32 category_id = 2;
    if (has_category_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->category_id());
    }

    // optional bytes list_index_begin = 3;
    if (has_list_index_begin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->list_index_begin());
    }

    // optional bytes list_index_end = 4;
    if (has_list_index_end()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->list_index_end());
    }

    // required int32 item_size = 5;
    if (has_item_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->item_size());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetModuleItemListRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GetModuleItemListRequest*>(&from));
}

void GetModuleItemListRequest::MergeFrom(const GetModuleItemListRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_module_id()) {
      set_module_id(from.module_id());
    }
    if (from.has_category_id()) {
      set_category_id(from.category_id());
    }
    if (from.has_list_index_begin()) {
      set_list_index_begin(from.list_index_begin());
    }
    if (from.has_list_index_end()) {
      set_list_index_end(from.list_index_end());
    }
    if (from.has_item_size()) {
      set_item_size(from.item_size());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void GetModuleItemListRequest::CopyFrom(const GetModuleItemListRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetModuleItemListRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000013) != 0x00000013) return false;

  return true;
}

void GetModuleItemListRequest::Swap(GetModuleItemListRequest* other) {
  if (other != this) {
    std::swap(module_id_, other->module_id_);
    std::swap(category_id_, other->category_id_);
    std::swap(list_index_begin_, other->list_index_begin_);
    std::swap(list_index_end_, other->list_index_end_);
    std::swap(item_size_, other->item_size_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string GetModuleItemListRequest::GetTypeName() const {
  return "weizhu.discover.GetModuleItemListRequest";
}


// ===================================================================

#ifndef _MSC_VER
const int GetModuleItemListResponse::kClearOldListFieldNumber;
const int GetModuleItemListResponse::kItemFieldNumber;
const int GetModuleItemListResponse::kHasMoreFieldNumber;
const int GetModuleItemListResponse::kListIndexBeginFieldNumber;
const int GetModuleItemListResponse::kListIndexEndFieldNumber;
#endif  // !_MSC_VER

GetModuleItemListResponse::GetModuleItemListResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:weizhu.discover.GetModuleItemListResponse)
}

void GetModuleItemListResponse::InitAsDefaultInstance() {
}

GetModuleItemListResponse::GetModuleItemListResponse(const GetModuleItemListResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:weizhu.discover.GetModuleItemListResponse)
}

void GetModuleItemListResponse::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  clear_old_list_ = false;
  has_more_ = false;
  list_index_begin_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  list_index_end_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetModuleItemListResponse::~GetModuleItemListResponse() {
  // @@protoc_insertion_point(destructor:weizhu.discover.GetModuleItemListResponse)
  SharedDtor();
}

void GetModuleItemListResponse::SharedDtor() {
  if (list_index_begin_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete list_index_begin_;
  }
  if (list_index_end_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete list_index_end_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void GetModuleItemListResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GetModuleItemListResponse& GetModuleItemListResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_discover_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_discover_2eproto();
#endif
  return *default_instance_;
}

GetModuleItemListResponse* GetModuleItemListResponse::default_instance_ = NULL;

GetModuleItemListResponse* GetModuleItemListResponse::New() const {
  return new GetModuleItemListResponse;
}

void GetModuleItemListResponse::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GetModuleItemListResponse*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 29) {
    ZR_(clear_old_list_, has_more_);
    if (has_list_index_begin()) {
      if (list_index_begin_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        list_index_begin_->clear();
      }
    }
    if (has_list_index_end()) {
      if (list_index_end_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        list_index_end_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  item_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool GetModuleItemListResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:weizhu.discover.GetModuleItemListResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool clear_old_list = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &clear_old_list_)));
          set_has_clear_old_list();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_item;
        break;
      }

      // repeated .weizhu.discover.Item item = 2;
      case 2: {
        if (tag == 18) {
         parse_item:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_item()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_item;
        if (input->ExpectTag(24)) goto parse_has_more;
        break;
      }

      // required bool has_more = 3;
      case 3: {
        if (tag == 24) {
         parse_has_more:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &has_more_)));
          set_has_has_more();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_list_index_begin;
        break;
      }

      // required bytes list_index_begin = 4;
      case 4: {
        if (tag == 34) {
         parse_list_index_begin:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_list_index_begin()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_list_index_end;
        break;
      }

      // required bytes list_index_end = 5;
      case 5: {
        if (tag == 42) {
         parse_list_index_end:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_list_index_end()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:weizhu.discover.GetModuleItemListResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:weizhu.discover.GetModuleItemListResponse)
  return false;
#undef DO_
}

void GetModuleItemListResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:weizhu.discover.GetModuleItemListResponse)
  // required bool clear_old_list = 1;
  if (has_clear_old_list()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->clear_old_list(), output);
  }

  // repeated .weizhu.discover.Item item = 2;
  for (int i = 0; i < this->item_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->item(i), output);
  }

  // required bool has_more = 3;
  if (has_has_more()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->has_more(), output);
  }

  // required bytes list_index_begin = 4;
  if (has_list_index_begin()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->list_index_begin(), output);
  }

  // required bytes list_index_end = 5;
  if (has_list_index_end()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->list_index_end(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:weizhu.discover.GetModuleItemListResponse)
}

int GetModuleItemListResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool clear_old_list = 1;
    if (has_clear_old_list()) {
      total_size += 1 + 1;
    }

    // required bool has_more = 3;
    if (has_has_more()) {
      total_size += 1 + 1;
    }

    // required bytes list_index_begin = 4;
    if (has_list_index_begin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->list_index_begin());
    }

    // required bytes list_index_end = 5;
    if (has_list_index_end()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->list_index_end());
    }

  }
  // repeated .weizhu.discover.Item item = 2;
  total_size += 1 * this->item_size();
  for (int i = 0; i < this->item_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->item(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetModuleItemListResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GetModuleItemListResponse*>(&from));
}

void GetModuleItemListResponse::MergeFrom(const GetModuleItemListResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  item_.MergeFrom(from.item_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_clear_old_list()) {
      set_clear_old_list(from.clear_old_list());
    }
    if (from.has_has_more()) {
      set_has_more(from.has_more());
    }
    if (from.has_list_index_begin()) {
      set_list_index_begin(from.list_index_begin());
    }
    if (from.has_list_index_end()) {
      set_list_index_end(from.list_index_end());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void GetModuleItemListResponse::CopyFrom(const GetModuleItemListResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetModuleItemListResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001d) != 0x0000001d) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->item())) return false;
  return true;
}

void GetModuleItemListResponse::Swap(GetModuleItemListResponse* other) {
  if (other != this) {
    std::swap(clear_old_list_, other->clear_old_list_);
    item_.Swap(&other->item_);
    std::swap(has_more_, other->has_more_);
    std::swap(list_index_begin_, other->list_index_begin_);
    std::swap(list_index_end_, other->list_index_end_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string GetModuleItemListResponse::GetTypeName() const {
  return "weizhu.discover.GetModuleItemListResponse";
}


// ===================================================================

#ifndef _MSC_VER
const int GetItemByIdRequest::kItemIdFieldNumber;
#endif  // !_MSC_VER

GetItemByIdRequest::GetItemByIdRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:weizhu.discover.GetItemByIdRequest)
}

void GetItemByIdRequest::InitAsDefaultInstance() {
}

GetItemByIdRequest::GetItemByIdRequest(const GetItemByIdRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:weizhu.discover.GetItemByIdRequest)
}

void GetItemByIdRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetItemByIdRequest::~GetItemByIdRequest() {
  // @@protoc_insertion_point(destructor:weizhu.discover.GetItemByIdRequest)
  SharedDtor();
}

void GetItemByIdRequest::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void GetItemByIdRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GetItemByIdRequest& GetItemByIdRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_discover_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_discover_2eproto();
#endif
  return *default_instance_;
}

GetItemByIdRequest* GetItemByIdRequest::default_instance_ = NULL;

GetItemByIdRequest* GetItemByIdRequest::New() const {
  return new GetItemByIdRequest;
}

void GetItemByIdRequest::Clear() {
  item_id_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool GetItemByIdRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:weizhu.discover.GetItemByIdRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int64 item_id = 1;
      case 1: {
        if (tag == 8) {
         parse_item_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 8, input, this->mutable_item_id())));
        } else if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_item_id())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8)) goto parse_item_id;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:weizhu.discover.GetItemByIdRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:weizhu.discover.GetItemByIdRequest)
  return false;
#undef DO_
}

void GetItemByIdRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:weizhu.discover.GetItemByIdRequest)
  // repeated int64 item_id = 1;
  for (int i = 0; i < this->item_id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      1, this->item_id(i), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:weizhu.discover.GetItemByIdRequest)
}

int GetItemByIdRequest::ByteSize() const {
  int total_size = 0;

  // repeated int64 item_id = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->item_id_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->item_id(i));
    }
    total_size += 1 * this->item_id_size() + data_size;
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetItemByIdRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GetItemByIdRequest*>(&from));
}

void GetItemByIdRequest::MergeFrom(const GetItemByIdRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  item_id_.MergeFrom(from.item_id_);
  mutable_unknown_fields()->append(from.unknown_fields());
}

void GetItemByIdRequest::CopyFrom(const GetItemByIdRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetItemByIdRequest::IsInitialized() const {

  return true;
}

void GetItemByIdRequest::Swap(GetItemByIdRequest* other) {
  if (other != this) {
    item_id_.Swap(&other->item_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string GetItemByIdRequest::GetTypeName() const {
  return "weizhu.discover.GetItemByIdRequest";
}


// ===================================================================

#ifndef _MSC_VER
const int GetItemByIdResponse::kItemFieldNumber;
#endif  // !_MSC_VER

GetItemByIdResponse::GetItemByIdResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:weizhu.discover.GetItemByIdResponse)
}

void GetItemByIdResponse::InitAsDefaultInstance() {
}

GetItemByIdResponse::GetItemByIdResponse(const GetItemByIdResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:weizhu.discover.GetItemByIdResponse)
}

void GetItemByIdResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetItemByIdResponse::~GetItemByIdResponse() {
  // @@protoc_insertion_point(destructor:weizhu.discover.GetItemByIdResponse)
  SharedDtor();
}

void GetItemByIdResponse::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void GetItemByIdResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GetItemByIdResponse& GetItemByIdResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_discover_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_discover_2eproto();
#endif
  return *default_instance_;
}

GetItemByIdResponse* GetItemByIdResponse::default_instance_ = NULL;

GetItemByIdResponse* GetItemByIdResponse::New() const {
  return new GetItemByIdResponse;
}

void GetItemByIdResponse::Clear() {
  item_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool GetItemByIdResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:weizhu.discover.GetItemByIdResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .weizhu.discover.Item item = 1;
      case 1: {
        if (tag == 10) {
         parse_item:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_item()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_item;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:weizhu.discover.GetItemByIdResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:weizhu.discover.GetItemByIdResponse)
  return false;
#undef DO_
}

void GetItemByIdResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:weizhu.discover.GetItemByIdResponse)
  // repeated .weizhu.discover.Item item = 1;
  for (int i = 0; i < this->item_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->item(i), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:weizhu.discover.GetItemByIdResponse)
}

int GetItemByIdResponse::ByteSize() const {
  int total_size = 0;

  // repeated .weizhu.discover.Item item = 1;
  total_size += 1 * this->item_size();
  for (int i = 0; i < this->item_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->item(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetItemByIdResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GetItemByIdResponse*>(&from));
}

void GetItemByIdResponse::MergeFrom(const GetItemByIdResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  item_.MergeFrom(from.item_);
  mutable_unknown_fields()->append(from.unknown_fields());
}

void GetItemByIdResponse::CopyFrom(const GetItemByIdResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetItemByIdResponse::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->item())) return false;
  return true;
}

void GetItemByIdResponse::Swap(GetItemByIdResponse* other) {
  if (other != this) {
    item_.Swap(&other->item_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string GetItemByIdResponse::GetTypeName() const {
  return "weizhu.discover.GetItemByIdResponse";
}


// ===================================================================

#ifndef _MSC_VER
const int GetItemContentRequest::kItemIdFieldNumber;
#endif  // !_MSC_VER

GetItemContentRequest::GetItemContentRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:weizhu.discover.GetItemContentRequest)
}

void GetItemContentRequest::InitAsDefaultInstance() {
}

GetItemContentRequest::GetItemContentRequest(const GetItemContentRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:weizhu.discover.GetItemContentRequest)
}

void GetItemContentRequest::SharedCtor() {
  _cached_size_ = 0;
  item_id_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetItemContentRequest::~GetItemContentRequest() {
  // @@protoc_insertion_point(destructor:weizhu.discover.GetItemContentRequest)
  SharedDtor();
}

void GetItemContentRequest::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void GetItemContentRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GetItemContentRequest& GetItemContentRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_discover_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_discover_2eproto();
#endif
  return *default_instance_;
}

GetItemContentRequest* GetItemContentRequest::default_instance_ = NULL;

GetItemContentRequest* GetItemContentRequest::New() const {
  return new GetItemContentRequest;
}

void GetItemContentRequest::Clear() {
  item_id_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool GetItemContentRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:weizhu.discover.GetItemContentRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 item_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &item_id_)));
          set_has_item_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:weizhu.discover.GetItemContentRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:weizhu.discover.GetItemContentRequest)
  return false;
#undef DO_
}

void GetItemContentRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:weizhu.discover.GetItemContentRequest)
  // required int64 item_id = 1;
  if (has_item_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->item_id(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:weizhu.discover.GetItemContentRequest)
}

int GetItemContentRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 item_id = 1;
    if (has_item_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->item_id());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetItemContentRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GetItemContentRequest*>(&from));
}

void GetItemContentRequest::MergeFrom(const GetItemContentRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_item_id()) {
      set_item_id(from.item_id());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void GetItemContentRequest::CopyFrom(const GetItemContentRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetItemContentRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GetItemContentRequest::Swap(GetItemContentRequest* other) {
  if (other != this) {
    std::swap(item_id_, other->item_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string GetItemContentRequest::GetTypeName() const {
  return "weizhu.discover.GetItemContentRequest";
}


// ===================================================================

#ifndef _MSC_VER
const int GetItemContentResponse::kItemContentFieldNumber;
#endif  // !_MSC_VER

GetItemContentResponse::GetItemContentResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:weizhu.discover.GetItemContentResponse)
}

void GetItemContentResponse::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  item_content_ = const_cast< ::weizhu::discover::ItemContent*>(
      ::weizhu::discover::ItemContent::internal_default_instance());
#else
  item_content_ = const_cast< ::weizhu::discover::ItemContent*>(&::weizhu::discover::ItemContent::default_instance());
#endif
}

GetItemContentResponse::GetItemContentResponse(const GetItemContentResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:weizhu.discover.GetItemContentResponse)
}

void GetItemContentResponse::SharedCtor() {
  _cached_size_ = 0;
  item_content_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetItemContentResponse::~GetItemContentResponse() {
  // @@protoc_insertion_point(destructor:weizhu.discover.GetItemContentResponse)
  SharedDtor();
}

void GetItemContentResponse::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete item_content_;
  }
}

void GetItemContentResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GetItemContentResponse& GetItemContentResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_discover_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_discover_2eproto();
#endif
  return *default_instance_;
}

GetItemContentResponse* GetItemContentResponse::default_instance_ = NULL;

GetItemContentResponse* GetItemContentResponse::New() const {
  return new GetItemContentResponse;
}

void GetItemContentResponse::Clear() {
  if (has_item_content()) {
    if (item_content_ != NULL) item_content_->::weizhu::discover::ItemContent::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool GetItemContentResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:weizhu.discover.GetItemContentResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .weizhu.discover.ItemContent item_content = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_item_content()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:weizhu.discover.GetItemContentResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:weizhu.discover.GetItemContentResponse)
  return false;
#undef DO_
}

void GetItemContentResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:weizhu.discover.GetItemContentResponse)
  // optional .weizhu.discover.ItemContent item_content = 1;
  if (has_item_content()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->item_content(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:weizhu.discover.GetItemContentResponse)
}

int GetItemContentResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .weizhu.discover.ItemContent item_content = 1;
    if (has_item_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->item_content());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetItemContentResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GetItemContentResponse*>(&from));
}

void GetItemContentResponse::MergeFrom(const GetItemContentResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_item_content()) {
      mutable_item_content()->::weizhu::discover::ItemContent::MergeFrom(from.item_content());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void GetItemContentResponse::CopyFrom(const GetItemContentResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetItemContentResponse::IsInitialized() const {

  if (has_item_content()) {
    if (!this->item_content().IsInitialized()) return false;
  }
  return true;
}

void GetItemContentResponse::Swap(GetItemContentResponse* other) {
  if (other != this) {
    std::swap(item_content_, other->item_content_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string GetItemContentResponse::GetTypeName() const {
  return "weizhu.discover.GetItemContentResponse";
}


// ===================================================================

#ifndef _MSC_VER
const int SearchItemRequest::kKeywordFieldNumber;
#endif  // !_MSC_VER

SearchItemRequest::SearchItemRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:weizhu.discover.SearchItemRequest)
}

void SearchItemRequest::InitAsDefaultInstance() {
}

SearchItemRequest::SearchItemRequest(const SearchItemRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:weizhu.discover.SearchItemRequest)
}

void SearchItemRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  keyword_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SearchItemRequest::~SearchItemRequest() {
  // @@protoc_insertion_point(destructor:weizhu.discover.SearchItemRequest)
  SharedDtor();
}

void SearchItemRequest::SharedDtor() {
  if (keyword_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete keyword_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void SearchItemRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const SearchItemRequest& SearchItemRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_discover_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_discover_2eproto();
#endif
  return *default_instance_;
}

SearchItemRequest* SearchItemRequest::default_instance_ = NULL;

SearchItemRequest* SearchItemRequest::New() const {
  return new SearchItemRequest;
}

void SearchItemRequest::Clear() {
  if (has_keyword()) {
    if (keyword_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      keyword_->clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool SearchItemRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:weizhu.discover.SearchItemRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string keyword = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_keyword()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:weizhu.discover.SearchItemRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:weizhu.discover.SearchItemRequest)
  return false;
#undef DO_
}

void SearchItemRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:weizhu.discover.SearchItemRequest)
  // required string keyword = 1;
  if (has_keyword()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->keyword(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:weizhu.discover.SearchItemRequest)
}

int SearchItemRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string keyword = 1;
    if (has_keyword()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->keyword());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SearchItemRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const SearchItemRequest*>(&from));
}

void SearchItemRequest::MergeFrom(const SearchItemRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_keyword()) {
      set_keyword(from.keyword());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void SearchItemRequest::CopyFrom(const SearchItemRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SearchItemRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void SearchItemRequest::Swap(SearchItemRequest* other) {
  if (other != this) {
    std::swap(keyword_, other->keyword_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string SearchItemRequest::GetTypeName() const {
  return "weizhu.discover.SearchItemRequest";
}


// ===================================================================

#ifndef _MSC_VER
const int SearchItemResponse::kItemFieldNumber;
#endif  // !_MSC_VER

SearchItemResponse::SearchItemResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:weizhu.discover.SearchItemResponse)
}

void SearchItemResponse::InitAsDefaultInstance() {
}

SearchItemResponse::SearchItemResponse(const SearchItemResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:weizhu.discover.SearchItemResponse)
}

void SearchItemResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SearchItemResponse::~SearchItemResponse() {
  // @@protoc_insertion_point(destructor:weizhu.discover.SearchItemResponse)
  SharedDtor();
}

void SearchItemResponse::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void SearchItemResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const SearchItemResponse& SearchItemResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_discover_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_discover_2eproto();
#endif
  return *default_instance_;
}

SearchItemResponse* SearchItemResponse::default_instance_ = NULL;

SearchItemResponse* SearchItemResponse::New() const {
  return new SearchItemResponse;
}

void SearchItemResponse::Clear() {
  item_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool SearchItemResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:weizhu.discover.SearchItemResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .weizhu.discover.Item item = 1;
      case 1: {
        if (tag == 10) {
         parse_item:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_item()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_item;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:weizhu.discover.SearchItemResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:weizhu.discover.SearchItemResponse)
  return false;
#undef DO_
}

void SearchItemResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:weizhu.discover.SearchItemResponse)
  // repeated .weizhu.discover.Item item = 1;
  for (int i = 0; i < this->item_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->item(i), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:weizhu.discover.SearchItemResponse)
}

int SearchItemResponse::ByteSize() const {
  int total_size = 0;

  // repeated .weizhu.discover.Item item = 1;
  total_size += 1 * this->item_size();
  for (int i = 0; i < this->item_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->item(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SearchItemResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const SearchItemResponse*>(&from));
}

void SearchItemResponse::MergeFrom(const SearchItemResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  item_.MergeFrom(from.item_);
  mutable_unknown_fields()->append(from.unknown_fields());
}

void SearchItemResponse::CopyFrom(const SearchItemResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SearchItemResponse::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->item())) return false;
  return true;
}

void SearchItemResponse::Swap(SearchItemResponse* other) {
  if (other != this) {
    item_.Swap(&other->item_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string SearchItemResponse::GetTypeName() const {
  return "weizhu.discover.SearchItemResponse";
}


// ===================================================================

#ifndef _MSC_VER
const int GetItemPVRequest::kItemIdFieldNumber;
const int GetItemPVRequest::kIsIncrePvFieldNumber;
#endif  // !_MSC_VER

GetItemPVRequest::GetItemPVRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:weizhu.discover.GetItemPVRequest)
}

void GetItemPVRequest::InitAsDefaultInstance() {
}

GetItemPVRequest::GetItemPVRequest(const GetItemPVRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:weizhu.discover.GetItemPVRequest)
}

void GetItemPVRequest::SharedCtor() {
  _cached_size_ = 0;
  item_id_ = GOOGLE_LONGLONG(0);
  is_incre_pv_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetItemPVRequest::~GetItemPVRequest() {
  // @@protoc_insertion_point(destructor:weizhu.discover.GetItemPVRequest)
  SharedDtor();
}

void GetItemPVRequest::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void GetItemPVRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GetItemPVRequest& GetItemPVRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_discover_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_discover_2eproto();
#endif
  return *default_instance_;
}

GetItemPVRequest* GetItemPVRequest::default_instance_ = NULL;

GetItemPVRequest* GetItemPVRequest::New() const {
  return new GetItemPVRequest;
}

void GetItemPVRequest::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GetItemPVRequest*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(item_id_, is_incre_pv_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool GetItemPVRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:weizhu.discover.GetItemPVRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 item_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &item_id_)));
          set_has_item_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_is_incre_pv;
        break;
      }

      // required bool is_incre_pv = 2;
      case 2: {
        if (tag == 16) {
         parse_is_incre_pv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_incre_pv_)));
          set_has_is_incre_pv();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:weizhu.discover.GetItemPVRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:weizhu.discover.GetItemPVRequest)
  return false;
#undef DO_
}

void GetItemPVRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:weizhu.discover.GetItemPVRequest)
  // required int64 item_id = 1;
  if (has_item_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->item_id(), output);
  }

  // required bool is_incre_pv = 2;
  if (has_is_incre_pv()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->is_incre_pv(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:weizhu.discover.GetItemPVRequest)
}

int GetItemPVRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 item_id = 1;
    if (has_item_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->item_id());
    }

    // required bool is_incre_pv = 2;
    if (has_is_incre_pv()) {
      total_size += 1 + 1;
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetItemPVRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GetItemPVRequest*>(&from));
}

void GetItemPVRequest::MergeFrom(const GetItemPVRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_item_id()) {
      set_item_id(from.item_id());
    }
    if (from.has_is_incre_pv()) {
      set_is_incre_pv(from.is_incre_pv());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void GetItemPVRequest::CopyFrom(const GetItemPVRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetItemPVRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void GetItemPVRequest::Swap(GetItemPVRequest* other) {
  if (other != this) {
    std::swap(item_id_, other->item_id_);
    std::swap(is_incre_pv_, other->is_incre_pv_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string GetItemPVRequest::GetTypeName() const {
  return "weizhu.discover.GetItemPVRequest";
}


// ===================================================================

#ifndef _MSC_VER
const int GetItemPVResponse::kPvFieldNumber;
#endif  // !_MSC_VER

GetItemPVResponse::GetItemPVResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:weizhu.discover.GetItemPVResponse)
}

void GetItemPVResponse::InitAsDefaultInstance() {
}

GetItemPVResponse::GetItemPVResponse(const GetItemPVResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:weizhu.discover.GetItemPVResponse)
}

void GetItemPVResponse::SharedCtor() {
  _cached_size_ = 0;
  pv_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetItemPVResponse::~GetItemPVResponse() {
  // @@protoc_insertion_point(destructor:weizhu.discover.GetItemPVResponse)
  SharedDtor();
}

void GetItemPVResponse::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void GetItemPVResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GetItemPVResponse& GetItemPVResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_discover_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_discover_2eproto();
#endif
  return *default_instance_;
}

GetItemPVResponse* GetItemPVResponse::default_instance_ = NULL;

GetItemPVResponse* GetItemPVResponse::New() const {
  return new GetItemPVResponse;
}

void GetItemPVResponse::Clear() {
  pv_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool GetItemPVResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:weizhu.discover.GetItemPVResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 pv = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pv_)));
          set_has_pv();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:weizhu.discover.GetItemPVResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:weizhu.discover.GetItemPVResponse)
  return false;
#undef DO_
}

void GetItemPVResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:weizhu.discover.GetItemPVResponse)
  // required int32 pv = 1;
  if (has_pv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->pv(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:weizhu.discover.GetItemPVResponse)
}

int GetItemPVResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 pv = 1;
    if (has_pv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pv());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetItemPVResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GetItemPVResponse*>(&from));
}

void GetItemPVResponse::MergeFrom(const GetItemPVResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pv()) {
      set_pv(from.pv());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void GetItemPVResponse::CopyFrom(const GetItemPVResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetItemPVResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GetItemPVResponse::Swap(GetItemPVResponse* other) {
  if (other != this) {
    std::swap(pv_, other->pv_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string GetItemPVResponse::GetTypeName() const {
  return "weizhu.discover.GetItemPVResponse";
}


// ===================================================================

#ifndef _MSC_VER
const int GetItemScoreRequest::kItemIdFieldNumber;
#endif  // !_MSC_VER

GetItemScoreRequest::GetItemScoreRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:weizhu.discover.GetItemScoreRequest)
}

void GetItemScoreRequest::InitAsDefaultInstance() {
}

GetItemScoreRequest::GetItemScoreRequest(const GetItemScoreRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:weizhu.discover.GetItemScoreRequest)
}

void GetItemScoreRequest::SharedCtor() {
  _cached_size_ = 0;
  item_id_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetItemScoreRequest::~GetItemScoreRequest() {
  // @@protoc_insertion_point(destructor:weizhu.discover.GetItemScoreRequest)
  SharedDtor();
}

void GetItemScoreRequest::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void GetItemScoreRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GetItemScoreRequest& GetItemScoreRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_discover_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_discover_2eproto();
#endif
  return *default_instance_;
}

GetItemScoreRequest* GetItemScoreRequest::default_instance_ = NULL;

GetItemScoreRequest* GetItemScoreRequest::New() const {
  return new GetItemScoreRequest;
}

void GetItemScoreRequest::Clear() {
  item_id_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool GetItemScoreRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:weizhu.discover.GetItemScoreRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 item_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &item_id_)));
          set_has_item_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:weizhu.discover.GetItemScoreRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:weizhu.discover.GetItemScoreRequest)
  return false;
#undef DO_
}

void GetItemScoreRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:weizhu.discover.GetItemScoreRequest)
  // required int64 item_id = 1;
  if (has_item_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->item_id(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:weizhu.discover.GetItemScoreRequest)
}

int GetItemScoreRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 item_id = 1;
    if (has_item_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->item_id());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetItemScoreRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GetItemScoreRequest*>(&from));
}

void GetItemScoreRequest::MergeFrom(const GetItemScoreRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_item_id()) {
      set_item_id(from.item_id());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void GetItemScoreRequest::CopyFrom(const GetItemScoreRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetItemScoreRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GetItemScoreRequest::Swap(GetItemScoreRequest* other) {
  if (other != this) {
    std::swap(item_id_, other->item_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string GetItemScoreRequest::GetTypeName() const {
  return "weizhu.discover.GetItemScoreRequest";
}


// ===================================================================

#ifndef _MSC_VER
const int GetItemScoreResponse::kScoreFieldNumber;
const int GetItemScoreResponse::kTotalScoreFieldNumber;
const int GetItemScoreResponse::kTotalUserFieldNumber;
#endif  // !_MSC_VER

GetItemScoreResponse::GetItemScoreResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:weizhu.discover.GetItemScoreResponse)
}

void GetItemScoreResponse::InitAsDefaultInstance() {
}

GetItemScoreResponse::GetItemScoreResponse(const GetItemScoreResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:weizhu.discover.GetItemScoreResponse)
}

void GetItemScoreResponse::SharedCtor() {
  _cached_size_ = 0;
  score_ = 0;
  total_score_ = 0;
  total_user_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetItemScoreResponse::~GetItemScoreResponse() {
  // @@protoc_insertion_point(destructor:weizhu.discover.GetItemScoreResponse)
  SharedDtor();
}

void GetItemScoreResponse::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void GetItemScoreResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GetItemScoreResponse& GetItemScoreResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_discover_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_discover_2eproto();
#endif
  return *default_instance_;
}

GetItemScoreResponse* GetItemScoreResponse::default_instance_ = NULL;

GetItemScoreResponse* GetItemScoreResponse::New() const {
  return new GetItemScoreResponse;
}

void GetItemScoreResponse::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GetItemScoreResponse*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(score_, total_user_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool GetItemScoreResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:weizhu.discover.GetItemScoreResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 score = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &score_)));
          set_has_score();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_total_score;
        break;
      }

      // required int32 total_score = 2;
      case 2: {
        if (tag == 16) {
         parse_total_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &total_score_)));
          set_has_total_score();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_total_user;
        break;
      }

      // required int32 total_user = 3;
      case 3: {
        if (tag == 24) {
         parse_total_user:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &total_user_)));
          set_has_total_user();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:weizhu.discover.GetItemScoreResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:weizhu.discover.GetItemScoreResponse)
  return false;
#undef DO_
}

void GetItemScoreResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:weizhu.discover.GetItemScoreResponse)
  // optional int32 score = 1;
  if (has_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->score(), output);
  }

  // required int32 total_score = 2;
  if (has_total_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->total_score(), output);
  }

  // required int32 total_user = 3;
  if (has_total_user()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->total_user(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:weizhu.discover.GetItemScoreResponse)
}

int GetItemScoreResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 score = 1;
    if (has_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->score());
    }

    // required int32 total_score = 2;
    if (has_total_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->total_score());
    }

    // required int32 total_user = 3;
    if (has_total_user()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->total_user());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetItemScoreResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GetItemScoreResponse*>(&from));
}

void GetItemScoreResponse::MergeFrom(const GetItemScoreResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_score()) {
      set_score(from.score());
    }
    if (from.has_total_score()) {
      set_total_score(from.total_score());
    }
    if (from.has_total_user()) {
      set_total_user(from.total_user());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void GetItemScoreResponse::CopyFrom(const GetItemScoreResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetItemScoreResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000006) != 0x00000006) return false;

  return true;
}

void GetItemScoreResponse::Swap(GetItemScoreResponse* other) {
  if (other != this) {
    std::swap(score_, other->score_);
    std::swap(total_score_, other->total_score_);
    std::swap(total_user_, other->total_user_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string GetItemScoreResponse::GetTypeName() const {
  return "weizhu.discover.GetItemScoreResponse";
}


// ===================================================================

#ifndef _MSC_VER
const int ScoreItemRequest::kItemIdFieldNumber;
const int ScoreItemRequest::kScoreFieldNumber;
#endif  // !_MSC_VER

ScoreItemRequest::ScoreItemRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:weizhu.discover.ScoreItemRequest)
}

void ScoreItemRequest::InitAsDefaultInstance() {
}

ScoreItemRequest::ScoreItemRequest(const ScoreItemRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:weizhu.discover.ScoreItemRequest)
}

void ScoreItemRequest::SharedCtor() {
  _cached_size_ = 0;
  item_id_ = GOOGLE_LONGLONG(0);
  score_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ScoreItemRequest::~ScoreItemRequest() {
  // @@protoc_insertion_point(destructor:weizhu.discover.ScoreItemRequest)
  SharedDtor();
}

void ScoreItemRequest::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void ScoreItemRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ScoreItemRequest& ScoreItemRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_discover_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_discover_2eproto();
#endif
  return *default_instance_;
}

ScoreItemRequest* ScoreItemRequest::default_instance_ = NULL;

ScoreItemRequest* ScoreItemRequest::New() const {
  return new ScoreItemRequest;
}

void ScoreItemRequest::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ScoreItemRequest*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(item_id_, score_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool ScoreItemRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:weizhu.discover.ScoreItemRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 item_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &item_id_)));
          set_has_item_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_score;
        break;
      }

      // required int32 score = 2;
      case 2: {
        if (tag == 16) {
         parse_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &score_)));
          set_has_score();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:weizhu.discover.ScoreItemRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:weizhu.discover.ScoreItemRequest)
  return false;
#undef DO_
}

void ScoreItemRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:weizhu.discover.ScoreItemRequest)
  // required int64 item_id = 1;
  if (has_item_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->item_id(), output);
  }

  // required int32 score = 2;
  if (has_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->score(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:weizhu.discover.ScoreItemRequest)
}

int ScoreItemRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 item_id = 1;
    if (has_item_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->item_id());
    }

    // required int32 score = 2;
    if (has_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->score());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ScoreItemRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ScoreItemRequest*>(&from));
}

void ScoreItemRequest::MergeFrom(const ScoreItemRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_item_id()) {
      set_item_id(from.item_id());
    }
    if (from.has_score()) {
      set_score(from.score());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void ScoreItemRequest::CopyFrom(const ScoreItemRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScoreItemRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void ScoreItemRequest::Swap(ScoreItemRequest* other) {
  if (other != this) {
    std::swap(item_id_, other->item_id_);
    std::swap(score_, other->score_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string ScoreItemRequest::GetTypeName() const {
  return "weizhu.discover.ScoreItemRequest";
}


// ===================================================================

bool ScoreItemResponse_Result_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 99:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ScoreItemResponse_Result ScoreItemResponse::SUCC;
const ScoreItemResponse_Result ScoreItemResponse::FAIL_SCORE_INVALID;
const ScoreItemResponse_Result ScoreItemResponse::FAIL_ITEM_NOT_EXSIT;
const ScoreItemResponse_Result ScoreItemResponse::FAIL_ITEM_DISABLE;
const ScoreItemResponse_Result ScoreItemResponse::FAIL_ITEM_IS_SCORED;
const ScoreItemResponse_Result ScoreItemResponse::FAIL_UNKNOWN;
const ScoreItemResponse_Result ScoreItemResponse::Result_MIN;
const ScoreItemResponse_Result ScoreItemResponse::Result_MAX;
const int ScoreItemResponse::Result_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ScoreItemResponse::kResultFieldNumber;
const int ScoreItemResponse::kFailTextFieldNumber;
#endif  // !_MSC_VER

ScoreItemResponse::ScoreItemResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:weizhu.discover.ScoreItemResponse)
}

void ScoreItemResponse::InitAsDefaultInstance() {
}

ScoreItemResponse::ScoreItemResponse(const ScoreItemResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:weizhu.discover.ScoreItemResponse)
}

void ScoreItemResponse::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  result_ = 99;
  fail_text_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ScoreItemResponse::~ScoreItemResponse() {
  // @@protoc_insertion_point(destructor:weizhu.discover.ScoreItemResponse)
  SharedDtor();
}

void ScoreItemResponse::SharedDtor() {
  if (fail_text_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete fail_text_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void ScoreItemResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ScoreItemResponse& ScoreItemResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_discover_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_discover_2eproto();
#endif
  return *default_instance_;
}

ScoreItemResponse* ScoreItemResponse::default_instance_ = NULL;

ScoreItemResponse* ScoreItemResponse::New() const {
  return new ScoreItemResponse;
}

void ScoreItemResponse::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    result_ = 99;
    if (has_fail_text()) {
      if (fail_text_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        fail_text_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool ScoreItemResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:weizhu.discover.ScoreItemResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .weizhu.discover.ScoreItemResponse.Result result = 1 [default = FAIL_UNKNOWN];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::weizhu::discover::ScoreItemResponse_Result_IsValid(value)) {
            set_result(static_cast< ::weizhu::discover::ScoreItemResponse_Result >(value));
          } else {
            unknown_fields_stream.WriteVarint32(tag);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_fail_text;
        break;
      }

      // optional string fail_text = 2;
      case 2: {
        if (tag == 18) {
         parse_fail_text:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fail_text()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:weizhu.discover.ScoreItemResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:weizhu.discover.ScoreItemResponse)
  return false;
#undef DO_
}

void ScoreItemResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:weizhu.discover.ScoreItemResponse)
  // optional .weizhu.discover.ScoreItemResponse.Result result = 1 [default = FAIL_UNKNOWN];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  // optional string fail_text = 2;
  if (has_fail_text()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->fail_text(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:weizhu.discover.ScoreItemResponse)
}

int ScoreItemResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .weizhu.discover.ScoreItemResponse.Result result = 1 [default = FAIL_UNKNOWN];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

    // optional string fail_text = 2;
    if (has_fail_text()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->fail_text());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ScoreItemResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ScoreItemResponse*>(&from));
}

void ScoreItemResponse::MergeFrom(const ScoreItemResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_fail_text()) {
      set_fail_text(from.fail_text());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void ScoreItemResponse::CopyFrom(const ScoreItemResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScoreItemResponse::IsInitialized() const {

  return true;
}

void ScoreItemResponse::Swap(ScoreItemResponse* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(fail_text_, other->fail_text_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string ScoreItemResponse::GetTypeName() const {
  return "weizhu.discover.ScoreItemResponse";
}


// ===================================================================

#ifndef _MSC_VER
const int GetItemCommentListRequest::kItemIdFieldNumber;
const int GetItemCommentListRequest::kLastCommentIdFieldNumber;
const int GetItemCommentListRequest::kLastCommentTimeFieldNumber;
const int GetItemCommentListRequest::kSizeFieldNumber;
#endif  // !_MSC_VER

GetItemCommentListRequest::GetItemCommentListRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:weizhu.discover.GetItemCommentListRequest)
}

void GetItemCommentListRequest::InitAsDefaultInstance() {
}

GetItemCommentListRequest::GetItemCommentListRequest(const GetItemCommentListRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:weizhu.discover.GetItemCommentListRequest)
}

void GetItemCommentListRequest::SharedCtor() {
  _cached_size_ = 0;
  item_id_ = GOOGLE_LONGLONG(0);
  last_comment_id_ = GOOGLE_LONGLONG(0);
  last_comment_time_ = 0;
  size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetItemCommentListRequest::~GetItemCommentListRequest() {
  // @@protoc_insertion_point(destructor:weizhu.discover.GetItemCommentListRequest)
  SharedDtor();
}

void GetItemCommentListRequest::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void GetItemCommentListRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GetItemCommentListRequest& GetItemCommentListRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_discover_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_discover_2eproto();
#endif
  return *default_instance_;
}

GetItemCommentListRequest* GetItemCommentListRequest::default_instance_ = NULL;

GetItemCommentListRequest* GetItemCommentListRequest::New() const {
  return new GetItemCommentListRequest;
}

void GetItemCommentListRequest::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GetItemCommentListRequest*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(item_id_, size_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool GetItemCommentListRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:weizhu.discover.GetItemCommentListRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 item_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &item_id_)));
          set_has_item_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_last_comment_id;
        break;
      }

      // optional int64 last_comment_id = 2;
      case 2: {
        if (tag == 16) {
         parse_last_comment_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &last_comment_id_)));
          set_has_last_comment_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_last_comment_time;
        break;
      }

      // optional int32 last_comment_time = 3;
      case 3: {
        if (tag == 24) {
         parse_last_comment_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &last_comment_time_)));
          set_has_last_comment_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_size;
        break;
      }

      // required int32 size = 4;
      case 4: {
        if (tag == 32) {
         parse_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &size_)));
          set_has_size();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:weizhu.discover.GetItemCommentListRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:weizhu.discover.GetItemCommentListRequest)
  return false;
#undef DO_
}

void GetItemCommentListRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:weizhu.discover.GetItemCommentListRequest)
  // required int64 item_id = 1;
  if (has_item_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->item_id(), output);
  }

  // optional int64 last_comment_id = 2;
  if (has_last_comment_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->last_comment_id(), output);
  }

  // optional int32 last_comment_time = 3;
  if (has_last_comment_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->last_comment_time(), output);
  }

  // required int32 size = 4;
  if (has_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->size(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:weizhu.discover.GetItemCommentListRequest)
}

int GetItemCommentListRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 item_id = 1;
    if (has_item_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->item_id());
    }

    // optional int64 last_comment_id = 2;
    if (has_last_comment_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->last_comment_id());
    }

    // optional int32 last_comment_time = 3;
    if (has_last_comment_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->last_comment_time());
    }

    // required int32 size = 4;
    if (has_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->size());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetItemCommentListRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GetItemCommentListRequest*>(&from));
}

void GetItemCommentListRequest::MergeFrom(const GetItemCommentListRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_item_id()) {
      set_item_id(from.item_id());
    }
    if (from.has_last_comment_id()) {
      set_last_comment_id(from.last_comment_id());
    }
    if (from.has_last_comment_time()) {
      set_last_comment_time(from.last_comment_time());
    }
    if (from.has_size()) {
      set_size(from.size());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void GetItemCommentListRequest::CopyFrom(const GetItemCommentListRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetItemCommentListRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000009) != 0x00000009) return false;

  return true;
}

void GetItemCommentListRequest::Swap(GetItemCommentListRequest* other) {
  if (other != this) {
    std::swap(item_id_, other->item_id_);
    std::swap(last_comment_id_, other->last_comment_id_);
    std::swap(last_comment_time_, other->last_comment_time_);
    std::swap(size_, other->size_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string GetItemCommentListRequest::GetTypeName() const {
  return "weizhu.discover.GetItemCommentListRequest";
}


// ===================================================================

#ifndef _MSC_VER
const int GetItemCommentListResponse::kCommentFieldNumber;
const int GetItemCommentListResponse::kHasMoreFieldNumber;
const int GetItemCommentListResponse::kTotalFieldNumber;
#endif  // !_MSC_VER

GetItemCommentListResponse::GetItemCommentListResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:weizhu.discover.GetItemCommentListResponse)
}

void GetItemCommentListResponse::InitAsDefaultInstance() {
}

GetItemCommentListResponse::GetItemCommentListResponse(const GetItemCommentListResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:weizhu.discover.GetItemCommentListResponse)
}

void GetItemCommentListResponse::SharedCtor() {
  _cached_size_ = 0;
  has_more_ = false;
  total_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetItemCommentListResponse::~GetItemCommentListResponse() {
  // @@protoc_insertion_point(destructor:weizhu.discover.GetItemCommentListResponse)
  SharedDtor();
}

void GetItemCommentListResponse::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void GetItemCommentListResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GetItemCommentListResponse& GetItemCommentListResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_discover_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_discover_2eproto();
#endif
  return *default_instance_;
}

GetItemCommentListResponse* GetItemCommentListResponse::default_instance_ = NULL;

GetItemCommentListResponse* GetItemCommentListResponse::New() const {
  return new GetItemCommentListResponse;
}

void GetItemCommentListResponse::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GetItemCommentListResponse*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(has_more_, total_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  comment_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool GetItemCommentListResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:weizhu.discover.GetItemCommentListResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .weizhu.discover.Comment comment = 1;
      case 1: {
        if (tag == 10) {
         parse_comment:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_comment()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_comment;
        if (input->ExpectTag(16)) goto parse_has_more;
        break;
      }

      // required bool has_more = 2;
      case 2: {
        if (tag == 16) {
         parse_has_more:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &has_more_)));
          set_has_has_more();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_total;
        break;
      }

      // required int32 total = 3;
      case 3: {
        if (tag == 24) {
         parse_total:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &total_)));
          set_has_total();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:weizhu.discover.GetItemCommentListResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:weizhu.discover.GetItemCommentListResponse)
  return false;
#undef DO_
}

void GetItemCommentListResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:weizhu.discover.GetItemCommentListResponse)
  // repeated .weizhu.discover.Comment comment = 1;
  for (int i = 0; i < this->comment_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->comment(i), output);
  }

  // required bool has_more = 2;
  if (has_has_more()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->has_more(), output);
  }

  // required int32 total = 3;
  if (has_total()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->total(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:weizhu.discover.GetItemCommentListResponse)
}

int GetItemCommentListResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // required bool has_more = 2;
    if (has_has_more()) {
      total_size += 1 + 1;
    }

    // required int32 total = 3;
    if (has_total()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->total());
    }

  }
  // repeated .weizhu.discover.Comment comment = 1;
  total_size += 1 * this->comment_size();
  for (int i = 0; i < this->comment_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->comment(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetItemCommentListResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GetItemCommentListResponse*>(&from));
}

void GetItemCommentListResponse::MergeFrom(const GetItemCommentListResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  comment_.MergeFrom(from.comment_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_has_more()) {
      set_has_more(from.has_more());
    }
    if (from.has_total()) {
      set_total(from.total());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void GetItemCommentListResponse::CopyFrom(const GetItemCommentListResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetItemCommentListResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000006) != 0x00000006) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->comment())) return false;
  return true;
}

void GetItemCommentListResponse::Swap(GetItemCommentListResponse* other) {
  if (other != this) {
    comment_.Swap(&other->comment_);
    std::swap(has_more_, other->has_more_);
    std::swap(total_, other->total_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string GetItemCommentListResponse::GetTypeName() const {
  return "weizhu.discover.GetItemCommentListResponse";
}


// ===================================================================

#ifndef _MSC_VER
const int CommentItemRequest::kItemIdFieldNumber;
const int CommentItemRequest::kCommentContentFieldNumber;
#endif  // !_MSC_VER

CommentItemRequest::CommentItemRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:weizhu.discover.CommentItemRequest)
}

void CommentItemRequest::InitAsDefaultInstance() {
}

CommentItemRequest::CommentItemRequest(const CommentItemRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:weizhu.discover.CommentItemRequest)
}

void CommentItemRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  item_id_ = GOOGLE_LONGLONG(0);
  comment_content_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CommentItemRequest::~CommentItemRequest() {
  // @@protoc_insertion_point(destructor:weizhu.discover.CommentItemRequest)
  SharedDtor();
}

void CommentItemRequest::SharedDtor() {
  if (comment_content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete comment_content_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CommentItemRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CommentItemRequest& CommentItemRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_discover_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_discover_2eproto();
#endif
  return *default_instance_;
}

CommentItemRequest* CommentItemRequest::default_instance_ = NULL;

CommentItemRequest* CommentItemRequest::New() const {
  return new CommentItemRequest;
}

void CommentItemRequest::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    item_id_ = GOOGLE_LONGLONG(0);
    if (has_comment_content()) {
      if (comment_content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        comment_content_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool CommentItemRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:weizhu.discover.CommentItemRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 item_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &item_id_)));
          set_has_item_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_comment_content;
        break;
      }

      // required string comment_content = 2;
      case 2: {
        if (tag == 18) {
         parse_comment_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_comment_content()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:weizhu.discover.CommentItemRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:weizhu.discover.CommentItemRequest)
  return false;
#undef DO_
}

void CommentItemRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:weizhu.discover.CommentItemRequest)
  // required int64 item_id = 1;
  if (has_item_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->item_id(), output);
  }

  // required string comment_content = 2;
  if (has_comment_content()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->comment_content(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:weizhu.discover.CommentItemRequest)
}

int CommentItemRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 item_id = 1;
    if (has_item_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->item_id());
    }

    // required string comment_content = 2;
    if (has_comment_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->comment_content());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CommentItemRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CommentItemRequest*>(&from));
}

void CommentItemRequest::MergeFrom(const CommentItemRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_item_id()) {
      set_item_id(from.item_id());
    }
    if (from.has_comment_content()) {
      set_comment_content(from.comment_content());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void CommentItemRequest::CopyFrom(const CommentItemRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommentItemRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void CommentItemRequest::Swap(CommentItemRequest* other) {
  if (other != this) {
    std::swap(item_id_, other->item_id_);
    std::swap(comment_content_, other->comment_content_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CommentItemRequest::GetTypeName() const {
  return "weizhu.discover.CommentItemRequest";
}


// ===================================================================

bool CommentItemResponse_Result_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 99:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const CommentItemResponse_Result CommentItemResponse::SUCC;
const CommentItemResponse_Result CommentItemResponse::FAIL_CONTENT_INVALID;
const CommentItemResponse_Result CommentItemResponse::FAIL_ITEM_NOT_EXSIT;
const CommentItemResponse_Result CommentItemResponse::FAIL_ITEM_DISABLE;
const CommentItemResponse_Result CommentItemResponse::FAIL_UNKNOWN;
const CommentItemResponse_Result CommentItemResponse::Result_MIN;
const CommentItemResponse_Result CommentItemResponse::Result_MAX;
const int CommentItemResponse::Result_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int CommentItemResponse::kResultFieldNumber;
const int CommentItemResponse::kFailTextFieldNumber;
const int CommentItemResponse::kCommentIdFieldNumber;
#endif  // !_MSC_VER

CommentItemResponse::CommentItemResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:weizhu.discover.CommentItemResponse)
}

void CommentItemResponse::InitAsDefaultInstance() {
}

CommentItemResponse::CommentItemResponse(const CommentItemResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:weizhu.discover.CommentItemResponse)
}

void CommentItemResponse::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  result_ = 99;
  fail_text_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  comment_id_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CommentItemResponse::~CommentItemResponse() {
  // @@protoc_insertion_point(destructor:weizhu.discover.CommentItemResponse)
  SharedDtor();
}

void CommentItemResponse::SharedDtor() {
  if (fail_text_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete fail_text_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CommentItemResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CommentItemResponse& CommentItemResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_discover_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_discover_2eproto();
#endif
  return *default_instance_;
}

CommentItemResponse* CommentItemResponse::default_instance_ = NULL;

CommentItemResponse* CommentItemResponse::New() const {
  return new CommentItemResponse;
}

void CommentItemResponse::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    result_ = 99;
    if (has_fail_text()) {
      if (fail_text_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        fail_text_->clear();
      }
    }
    comment_id_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool CommentItemResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:weizhu.discover.CommentItemResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .weizhu.discover.CommentItemResponse.Result result = 1 [default = FAIL_UNKNOWN];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::weizhu::discover::CommentItemResponse_Result_IsValid(value)) {
            set_result(static_cast< ::weizhu::discover::CommentItemResponse_Result >(value));
          } else {
            unknown_fields_stream.WriteVarint32(tag);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_fail_text;
        break;
      }

      // optional string fail_text = 2;
      case 2: {
        if (tag == 18) {
         parse_fail_text:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fail_text()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_comment_id;
        break;
      }

      // optional int64 comment_id = 3;
      case 3: {
        if (tag == 24) {
         parse_comment_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &comment_id_)));
          set_has_comment_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:weizhu.discover.CommentItemResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:weizhu.discover.CommentItemResponse)
  return false;
#undef DO_
}

void CommentItemResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:weizhu.discover.CommentItemResponse)
  // optional .weizhu.discover.CommentItemResponse.Result result = 1 [default = FAIL_UNKNOWN];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  // optional string fail_text = 2;
  if (has_fail_text()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->fail_text(), output);
  }

  // optional int64 comment_id = 3;
  if (has_comment_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->comment_id(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:weizhu.discover.CommentItemResponse)
}

int CommentItemResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .weizhu.discover.CommentItemResponse.Result result = 1 [default = FAIL_UNKNOWN];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

    // optional string fail_text = 2;
    if (has_fail_text()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->fail_text());
    }

    // optional int64 comment_id = 3;
    if (has_comment_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->comment_id());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CommentItemResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CommentItemResponse*>(&from));
}

void CommentItemResponse::MergeFrom(const CommentItemResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_fail_text()) {
      set_fail_text(from.fail_text());
    }
    if (from.has_comment_id()) {
      set_comment_id(from.comment_id());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void CommentItemResponse::CopyFrom(const CommentItemResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommentItemResponse::IsInitialized() const {

  return true;
}

void CommentItemResponse::Swap(CommentItemResponse* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(fail_text_, other->fail_text_);
    std::swap(comment_id_, other->comment_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CommentItemResponse::GetTypeName() const {
  return "weizhu.discover.CommentItemResponse";
}


// ===================================================================

#ifndef _MSC_VER
const int DeleteCommentRequest::kCommentIdFieldNumber;
#endif  // !_MSC_VER

DeleteCommentRequest::DeleteCommentRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:weizhu.discover.DeleteCommentRequest)
}

void DeleteCommentRequest::InitAsDefaultInstance() {
}

DeleteCommentRequest::DeleteCommentRequest(const DeleteCommentRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:weizhu.discover.DeleteCommentRequest)
}

void DeleteCommentRequest::SharedCtor() {
  _cached_size_ = 0;
  comment_id_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DeleteCommentRequest::~DeleteCommentRequest() {
  // @@protoc_insertion_point(destructor:weizhu.discover.DeleteCommentRequest)
  SharedDtor();
}

void DeleteCommentRequest::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void DeleteCommentRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const DeleteCommentRequest& DeleteCommentRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_discover_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_discover_2eproto();
#endif
  return *default_instance_;
}

DeleteCommentRequest* DeleteCommentRequest::default_instance_ = NULL;

DeleteCommentRequest* DeleteCommentRequest::New() const {
  return new DeleteCommentRequest;
}

void DeleteCommentRequest::Clear() {
  comment_id_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool DeleteCommentRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:weizhu.discover.DeleteCommentRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 comment_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &comment_id_)));
          set_has_comment_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:weizhu.discover.DeleteCommentRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:weizhu.discover.DeleteCommentRequest)
  return false;
#undef DO_
}

void DeleteCommentRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:weizhu.discover.DeleteCommentRequest)
  // required int64 comment_id = 1;
  if (has_comment_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->comment_id(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:weizhu.discover.DeleteCommentRequest)
}

int DeleteCommentRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 comment_id = 1;
    if (has_comment_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->comment_id());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeleteCommentRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const DeleteCommentRequest*>(&from));
}

void DeleteCommentRequest::MergeFrom(const DeleteCommentRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_comment_id()) {
      set_comment_id(from.comment_id());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void DeleteCommentRequest::CopyFrom(const DeleteCommentRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteCommentRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void DeleteCommentRequest::Swap(DeleteCommentRequest* other) {
  if (other != this) {
    std::swap(comment_id_, other->comment_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string DeleteCommentRequest::GetTypeName() const {
  return "weizhu.discover.DeleteCommentRequest";
}


// ===================================================================

bool DeleteCommentResponse_Result_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 99:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const DeleteCommentResponse_Result DeleteCommentResponse::SUCC;
const DeleteCommentResponse_Result DeleteCommentResponse::FAIL_COMMENT_NOT_EXSIT;
const DeleteCommentResponse_Result DeleteCommentResponse::FAIL_COMMENT_OTHER;
const DeleteCommentResponse_Result DeleteCommentResponse::FAIL_UNKNOWN;
const DeleteCommentResponse_Result DeleteCommentResponse::Result_MIN;
const DeleteCommentResponse_Result DeleteCommentResponse::Result_MAX;
const int DeleteCommentResponse::Result_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int DeleteCommentResponse::kResultFieldNumber;
const int DeleteCommentResponse::kFailTextFieldNumber;
#endif  // !_MSC_VER

DeleteCommentResponse::DeleteCommentResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:weizhu.discover.DeleteCommentResponse)
}

void DeleteCommentResponse::InitAsDefaultInstance() {
}

DeleteCommentResponse::DeleteCommentResponse(const DeleteCommentResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:weizhu.discover.DeleteCommentResponse)
}

void DeleteCommentResponse::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  result_ = 99;
  fail_text_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DeleteCommentResponse::~DeleteCommentResponse() {
  // @@protoc_insertion_point(destructor:weizhu.discover.DeleteCommentResponse)
  SharedDtor();
}

void DeleteCommentResponse::SharedDtor() {
  if (fail_text_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete fail_text_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void DeleteCommentResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const DeleteCommentResponse& DeleteCommentResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_discover_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_discover_2eproto();
#endif
  return *default_instance_;
}

DeleteCommentResponse* DeleteCommentResponse::default_instance_ = NULL;

DeleteCommentResponse* DeleteCommentResponse::New() const {
  return new DeleteCommentResponse;
}

void DeleteCommentResponse::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    result_ = 99;
    if (has_fail_text()) {
      if (fail_text_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        fail_text_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool DeleteCommentResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:weizhu.discover.DeleteCommentResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .weizhu.discover.DeleteCommentResponse.Result result = 1 [default = FAIL_UNKNOWN];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::weizhu::discover::DeleteCommentResponse_Result_IsValid(value)) {
            set_result(static_cast< ::weizhu::discover::DeleteCommentResponse_Result >(value));
          } else {
            unknown_fields_stream.WriteVarint32(tag);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_fail_text;
        break;
      }

      // optional string fail_text = 2;
      case 2: {
        if (tag == 18) {
         parse_fail_text:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fail_text()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:weizhu.discover.DeleteCommentResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:weizhu.discover.DeleteCommentResponse)
  return false;
#undef DO_
}

void DeleteCommentResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:weizhu.discover.DeleteCommentResponse)
  // optional .weizhu.discover.DeleteCommentResponse.Result result = 1 [default = FAIL_UNKNOWN];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  // optional string fail_text = 2;
  if (has_fail_text()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->fail_text(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:weizhu.discover.DeleteCommentResponse)
}

int DeleteCommentResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .weizhu.discover.DeleteCommentResponse.Result result = 1 [default = FAIL_UNKNOWN];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

    // optional string fail_text = 2;
    if (has_fail_text()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->fail_text());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeleteCommentResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const DeleteCommentResponse*>(&from));
}

void DeleteCommentResponse::MergeFrom(const DeleteCommentResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_fail_text()) {
      set_fail_text(from.fail_text());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void DeleteCommentResponse::CopyFrom(const DeleteCommentResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteCommentResponse::IsInitialized() const {

  return true;
}

void DeleteCommentResponse::Swap(DeleteCommentResponse* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(fail_text_, other->fail_text_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string DeleteCommentResponse::GetTypeName() const {
  return "weizhu.discover.DeleteCommentResponse";
}


// ===================================================================

#ifndef _MSC_VER
const int GetItemListRequest::kLastItemIdFieldNumber;
const int GetItemListRequest::kSizeFieldNumber;
#endif  // !_MSC_VER

GetItemListRequest::GetItemListRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:weizhu.discover.GetItemListRequest)
}

void GetItemListRequest::InitAsDefaultInstance() {
}

GetItemListRequest::GetItemListRequest(const GetItemListRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:weizhu.discover.GetItemListRequest)
}

void GetItemListRequest::SharedCtor() {
  _cached_size_ = 0;
  last_item_id_ = GOOGLE_LONGLONG(0);
  size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetItemListRequest::~GetItemListRequest() {
  // @@protoc_insertion_point(destructor:weizhu.discover.GetItemListRequest)
  SharedDtor();
}

void GetItemListRequest::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void GetItemListRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GetItemListRequest& GetItemListRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_discover_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_discover_2eproto();
#endif
  return *default_instance_;
}

GetItemListRequest* GetItemListRequest::default_instance_ = NULL;

GetItemListRequest* GetItemListRequest::New() const {
  return new GetItemListRequest;
}

void GetItemListRequest::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GetItemListRequest*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(last_item_id_, size_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool GetItemListRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:weizhu.discover.GetItemListRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 last_item_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &last_item_id_)));
          set_has_last_item_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_size;
        break;
      }

      // required int32 size = 2;
      case 2: {
        if (tag == 16) {
         parse_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &size_)));
          set_has_size();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:weizhu.discover.GetItemListRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:weizhu.discover.GetItemListRequest)
  return false;
#undef DO_
}

void GetItemListRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:weizhu.discover.GetItemListRequest)
  // optional int64 last_item_id = 1;
  if (has_last_item_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->last_item_id(), output);
  }

  // required int32 size = 2;
  if (has_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->size(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:weizhu.discover.GetItemListRequest)
}

int GetItemListRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 last_item_id = 1;
    if (has_last_item_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->last_item_id());
    }

    // required int32 size = 2;
    if (has_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->size());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetItemListRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GetItemListRequest*>(&from));
}

void GetItemListRequest::MergeFrom(const GetItemListRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_last_item_id()) {
      set_last_item_id(from.last_item_id());
    }
    if (from.has_size()) {
      set_size(from.size());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void GetItemListRequest::CopyFrom(const GetItemListRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetItemListRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;

  return true;
}

void GetItemListRequest::Swap(GetItemListRequest* other) {
  if (other != this) {
    std::swap(last_item_id_, other->last_item_id_);
    std::swap(size_, other->size_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string GetItemListRequest::GetTypeName() const {
  return "weizhu.discover.GetItemListRequest";
}


// ===================================================================

#ifndef _MSC_VER
const int GetItemListResponse::kItemFieldNumber;
const int GetItemListResponse::kHasMoreFieldNumber;
#endif  // !_MSC_VER

GetItemListResponse::GetItemListResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:weizhu.discover.GetItemListResponse)
}

void GetItemListResponse::InitAsDefaultInstance() {
}

GetItemListResponse::GetItemListResponse(const GetItemListResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:weizhu.discover.GetItemListResponse)
}

void GetItemListResponse::SharedCtor() {
  _cached_size_ = 0;
  has_more_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetItemListResponse::~GetItemListResponse() {
  // @@protoc_insertion_point(destructor:weizhu.discover.GetItemListResponse)
  SharedDtor();
}

void GetItemListResponse::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void GetItemListResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GetItemListResponse& GetItemListResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_discover_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_discover_2eproto();
#endif
  return *default_instance_;
}

GetItemListResponse* GetItemListResponse::default_instance_ = NULL;

GetItemListResponse* GetItemListResponse::New() const {
  return new GetItemListResponse;
}

void GetItemListResponse::Clear() {
  has_more_ = false;
  item_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool GetItemListResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:weizhu.discover.GetItemListResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .weizhu.discover.Item item = 1;
      case 1: {
        if (tag == 10) {
         parse_item:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_item()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_item;
        if (input->ExpectTag(16)) goto parse_has_more;
        break;
      }

      // required bool has_more = 2;
      case 2: {
        if (tag == 16) {
         parse_has_more:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &has_more_)));
          set_has_has_more();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:weizhu.discover.GetItemListResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:weizhu.discover.GetItemListResponse)
  return false;
#undef DO_
}

void GetItemListResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:weizhu.discover.GetItemListResponse)
  // repeated .weizhu.discover.Item item = 1;
  for (int i = 0; i < this->item_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->item(i), output);
  }

  // required bool has_more = 2;
  if (has_has_more()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->has_more(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:weizhu.discover.GetItemListResponse)
}

int GetItemListResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // required bool has_more = 2;
    if (has_has_more()) {
      total_size += 1 + 1;
    }

  }
  // repeated .weizhu.discover.Item item = 1;
  total_size += 1 * this->item_size();
  for (int i = 0; i < this->item_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->item(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetItemListResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GetItemListResponse*>(&from));
}

void GetItemListResponse::MergeFrom(const GetItemListResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  item_.MergeFrom(from.item_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_has_more()) {
      set_has_more(from.has_more());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void GetItemListResponse::CopyFrom(const GetItemListResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetItemListResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->item())) return false;
  return true;
}

void GetItemListResponse::Swap(GetItemListResponse* other) {
  if (other != this) {
    item_.Swap(&other->item_);
    std::swap(has_more_, other->has_more_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string GetItemListResponse::GetTypeName() const {
  return "weizhu.discover.GetItemListResponse";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace discover
}  // namespace weizhu

// @@protoc_insertion_point(global_scope)
