// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tag.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "tag.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)

namespace weizhu {
namespace tag {

void protobuf_ShutdownFile_tag_2eproto() {
  delete Category::default_instance_;
  delete Tag::default_instance_;
  delete Resource::default_instance_;
  delete GetRecommendTagResponse::default_instance_;
  delete GetCategoryResponse::default_instance_;
  delete GetCategoryTagListRequest::default_instance_;
  delete GetCategoryTagListResponse::default_instance_;
  delete GetUserTagListRequest::default_instance_;
  delete GetUserTagListResponse::default_instance_;
  delete GetResourceTagListRequest::default_instance_;
  delete GetResourceTagListResponse::default_instance_;
  delete CreateSubscribeTagRequest::default_instance_;
  delete CreateSubscribeTagResponse::default_instance_;
  delete DeleteSubscribeTagRequest::default_instance_;
  delete DeleteSubscribeTagResponse::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_tag_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_tag_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  ::weizhu::protobuf_AddDesc_weizhu_2eproto();
  Category::default_instance_ = new Category();
  Tag::default_instance_ = new Tag();
  Resource::default_instance_ = new Resource();
  GetRecommendTagResponse::default_instance_ = new GetRecommendTagResponse();
  GetCategoryResponse::default_instance_ = new GetCategoryResponse();
  GetCategoryTagListRequest::default_instance_ = new GetCategoryTagListRequest();
  GetCategoryTagListResponse::default_instance_ = new GetCategoryTagListResponse();
  GetUserTagListRequest::default_instance_ = new GetUserTagListRequest();
  GetUserTagListResponse::default_instance_ = new GetUserTagListResponse();
  GetResourceTagListRequest::default_instance_ = new GetResourceTagListRequest();
  GetResourceTagListResponse::default_instance_ = new GetResourceTagListResponse();
  CreateSubscribeTagRequest::default_instance_ = new CreateSubscribeTagRequest();
  CreateSubscribeTagResponse::default_instance_ = new CreateSubscribeTagResponse();
  DeleteSubscribeTagRequest::default_instance_ = new DeleteSubscribeTagRequest();
  DeleteSubscribeTagResponse::default_instance_ = new DeleteSubscribeTagResponse();
  Category::default_instance_->InitAsDefaultInstance();
  Tag::default_instance_->InitAsDefaultInstance();
  Resource::default_instance_->InitAsDefaultInstance();
  GetRecommendTagResponse::default_instance_->InitAsDefaultInstance();
  GetCategoryResponse::default_instance_->InitAsDefaultInstance();
  GetCategoryTagListRequest::default_instance_->InitAsDefaultInstance();
  GetCategoryTagListResponse::default_instance_->InitAsDefaultInstance();
  GetUserTagListRequest::default_instance_->InitAsDefaultInstance();
  GetUserTagListResponse::default_instance_->InitAsDefaultInstance();
  GetResourceTagListRequest::default_instance_->InitAsDefaultInstance();
  GetResourceTagListResponse::default_instance_->InitAsDefaultInstance();
  CreateSubscribeTagRequest::default_instance_->InitAsDefaultInstance();
  CreateSubscribeTagResponse::default_instance_->InitAsDefaultInstance();
  DeleteSubscribeTagRequest::default_instance_->InitAsDefaultInstance();
  DeleteSubscribeTagResponse::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_tag_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_tag_2eproto_once_);
void protobuf_AddDesc_tag_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_tag_2eproto_once_,
                 &protobuf_AddDesc_tag_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_tag_2eproto {
  StaticDescriptorInitializer_tag_2eproto() {
    protobuf_AddDesc_tag_2eproto();
  }
} static_descriptor_initializer_tag_2eproto_;
#endif
bool State_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int Category::kCategoryIdFieldNumber;
const int Category::kCategoryNameFieldNumber;
const int Category::kStateFieldNumber;
const int Category::kCreateAdminIdFieldNumber;
const int Category::kCreateTimeFieldNumber;
const int Category::kUpdateAdminIdFieldNumber;
const int Category::kUpdateTimeFieldNumber;
#endif  // !_MSC_VER

Category::Category()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:weizhu.tag.Category)
}

void Category::InitAsDefaultInstance() {
}

Category::Category(const Category& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:weizhu.tag.Category)
}

void Category::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  category_id_ = 0;
  category_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  state_ = 0;
  create_admin_id_ = GOOGLE_LONGLONG(0);
  create_time_ = 0;
  update_admin_id_ = GOOGLE_LONGLONG(0);
  update_time_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Category::~Category() {
  // @@protoc_insertion_point(destructor:weizhu.tag.Category)
  SharedDtor();
}

void Category::SharedDtor() {
  if (category_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete category_name_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void Category::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Category& Category::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_tag_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_tag_2eproto();
#endif
  return *default_instance_;
}

Category* Category::default_instance_ = NULL;

Category* Category::New() const {
  return new Category;
}

void Category::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Category*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(category_id_, update_time_);
    if (has_category_name()) {
      if (category_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        category_name_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool Category::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:weizhu.tag.Category)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 category_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &category_id_)));
          set_has_category_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_category_name;
        break;
      }

      // required string category_name = 2;
      case 2: {
        if (tag == 18) {
         parse_category_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_category_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(760)) goto parse_state;
        break;
      }

      // optional .weizhu.tag.State state = 95 [default = NORMAL];
      case 95: {
        if (tag == 760) {
         parse_state:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::weizhu::tag::State_IsValid(value)) {
            set_state(static_cast< ::weizhu::tag::State >(value));
          } else {
            unknown_fields_stream.WriteVarint32(tag);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(768)) goto parse_create_admin_id;
        break;
      }

      // optional int64 create_admin_id = 96;
      case 96: {
        if (tag == 768) {
         parse_create_admin_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &create_admin_id_)));
          set_has_create_admin_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(776)) goto parse_create_time;
        break;
      }

      // optional int32 create_time = 97;
      case 97: {
        if (tag == 776) {
         parse_create_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &create_time_)));
          set_has_create_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(784)) goto parse_update_admin_id;
        break;
      }

      // optional int64 update_admin_id = 98;
      case 98: {
        if (tag == 784) {
         parse_update_admin_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &update_admin_id_)));
          set_has_update_admin_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(792)) goto parse_update_time;
        break;
      }

      // optional int32 update_time = 99;
      case 99: {
        if (tag == 792) {
         parse_update_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &update_time_)));
          set_has_update_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:weizhu.tag.Category)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:weizhu.tag.Category)
  return false;
#undef DO_
}

void Category::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:weizhu.tag.Category)
  // required int32 category_id = 1;
  if (has_category_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->category_id(), output);
  }

  // required string category_name = 2;
  if (has_category_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->category_name(), output);
  }

  // optional .weizhu.tag.State state = 95 [default = NORMAL];
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      95, this->state(), output);
  }

  // optional int64 create_admin_id = 96;
  if (has_create_admin_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(96, this->create_admin_id(), output);
  }

  // optional int32 create_time = 97;
  if (has_create_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(97, this->create_time(), output);
  }

  // optional int64 update_admin_id = 98;
  if (has_update_admin_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(98, this->update_admin_id(), output);
  }

  // optional int32 update_time = 99;
  if (has_update_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(99, this->update_time(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:weizhu.tag.Category)
}

int Category::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 category_id = 1;
    if (has_category_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->category_id());
    }

    // required string category_name = 2;
    if (has_category_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->category_name());
    }

    // optional .weizhu.tag.State state = 95 [default = NORMAL];
    if (has_state()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->state());
    }

    // optional int64 create_admin_id = 96;
    if (has_create_admin_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->create_admin_id());
    }

    // optional int32 create_time = 97;
    if (has_create_time()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->create_time());
    }

    // optional int64 update_admin_id = 98;
    if (has_update_admin_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->update_admin_id());
    }

    // optional int32 update_time = 99;
    if (has_update_time()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->update_time());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Category::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Category*>(&from));
}

void Category::MergeFrom(const Category& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_category_id()) {
      set_category_id(from.category_id());
    }
    if (from.has_category_name()) {
      set_category_name(from.category_name());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_create_admin_id()) {
      set_create_admin_id(from.create_admin_id());
    }
    if (from.has_create_time()) {
      set_create_time(from.create_time());
    }
    if (from.has_update_admin_id()) {
      set_update_admin_id(from.update_admin_id());
    }
    if (from.has_update_time()) {
      set_update_time(from.update_time());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void Category::CopyFrom(const Category& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Category::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Category::Swap(Category* other) {
  if (other != this) {
    std::swap(category_id_, other->category_id_);
    std::swap(category_name_, other->category_name_);
    std::swap(state_, other->state_);
    std::swap(create_admin_id_, other->create_admin_id_);
    std::swap(create_time_, other->create_time_);
    std::swap(update_admin_id_, other->update_admin_id_);
    std::swap(update_time_, other->update_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string Category::GetTypeName() const {
  return "weizhu.tag.Category";
}


// ===================================================================

#ifndef _MSC_VER
const int Tag::kTagIdFieldNumber;
const int Tag::kTagNameFieldNumber;
const int Tag::kIsRecommendFieldNumber;
const int Tag::kCategoryIdFieldNumber;
const int Tag::kUserCountFieldNumber;
const int Tag::kIsSubscribeFieldNumber;
const int Tag::kCreateAdminIdFieldNumber;
const int Tag::kCreateTimeFieldNumber;
const int Tag::kUpdateAdminIdFieldNumber;
const int Tag::kUpdateTimeFieldNumber;
#endif  // !_MSC_VER

Tag::Tag()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:weizhu.tag.Tag)
}

void Tag::InitAsDefaultInstance() {
}

Tag::Tag(const Tag& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:weizhu.tag.Tag)
}

void Tag::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  tag_id_ = 0;
  tag_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  is_recommend_ = false;
  user_count_ = 0;
  is_subscribe_ = false;
  create_admin_id_ = GOOGLE_LONGLONG(0);
  create_time_ = 0;
  update_admin_id_ = GOOGLE_LONGLONG(0);
  update_time_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Tag::~Tag() {
  // @@protoc_insertion_point(destructor:weizhu.tag.Tag)
  SharedDtor();
}

void Tag::SharedDtor() {
  if (tag_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete tag_name_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void Tag::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Tag& Tag::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_tag_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_tag_2eproto();
#endif
  return *default_instance_;
}

Tag* Tag::default_instance_ = NULL;

Tag* Tag::New() const {
  return new Tag;
}

void Tag::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Tag*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 247) {
    ZR_(tag_id_, is_subscribe_);
    ZR_(user_count_, create_admin_id_);
    if (has_tag_name()) {
      if (tag_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        tag_name_->clear();
      }
    }
  }
  ZR_(update_admin_id_, update_time_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  category_id_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool Tag::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:weizhu.tag.Tag)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 tag_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tag_id_)));
          set_has_tag_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_tag_name;
        break;
      }

      // required string tag_name = 2;
      case 2: {
        if (tag == 18) {
         parse_tag_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tag_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_is_recommend;
        break;
      }

      // required bool is_recommend = 3;
      case 3: {
        if (tag == 24) {
         parse_is_recommend:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_recommend_)));
          set_has_is_recommend();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_category_id;
        break;
      }

      // repeated int32 category_id = 4;
      case 4: {
        if (tag == 32) {
         parse_category_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 32, input, this->mutable_category_id())));
        } else if (tag == 34) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_category_id())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_category_id;
        if (input->ExpectTag(168)) goto parse_user_count;
        break;
      }

      // optional int32 user_count = 21;
      case 21: {
        if (tag == 168) {
         parse_user_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &user_count_)));
          set_has_user_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(176)) goto parse_is_subscribe;
        break;
      }

      // optional bool is_subscribe = 22;
      case 22: {
        if (tag == 176) {
         parse_is_subscribe:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_subscribe_)));
          set_has_is_subscribe();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(768)) goto parse_create_admin_id;
        break;
      }

      // optional int64 create_admin_id = 96;
      case 96: {
        if (tag == 768) {
         parse_create_admin_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &create_admin_id_)));
          set_has_create_admin_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(776)) goto parse_create_time;
        break;
      }

      // optional int32 create_time = 97;
      case 97: {
        if (tag == 776) {
         parse_create_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &create_time_)));
          set_has_create_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(784)) goto parse_update_admin_id;
        break;
      }

      // optional int64 update_admin_id = 98;
      case 98: {
        if (tag == 784) {
         parse_update_admin_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &update_admin_id_)));
          set_has_update_admin_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(792)) goto parse_update_time;
        break;
      }

      // optional int32 update_time = 99;
      case 99: {
        if (tag == 792) {
         parse_update_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &update_time_)));
          set_has_update_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:weizhu.tag.Tag)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:weizhu.tag.Tag)
  return false;
#undef DO_
}

void Tag::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:weizhu.tag.Tag)
  // required int32 tag_id = 1;
  if (has_tag_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->tag_id(), output);
  }

  // required string tag_name = 2;
  if (has_tag_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->tag_name(), output);
  }

  // required bool is_recommend = 3;
  if (has_is_recommend()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->is_recommend(), output);
  }

  // repeated int32 category_id = 4;
  for (int i = 0; i < this->category_id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      4, this->category_id(i), output);
  }

  // optional int32 user_count = 21;
  if (has_user_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(21, this->user_count(), output);
  }

  // optional bool is_subscribe = 22;
  if (has_is_subscribe()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(22, this->is_subscribe(), output);
  }

  // optional int64 create_admin_id = 96;
  if (has_create_admin_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(96, this->create_admin_id(), output);
  }

  // optional int32 create_time = 97;
  if (has_create_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(97, this->create_time(), output);
  }

  // optional int64 update_admin_id = 98;
  if (has_update_admin_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(98, this->update_admin_id(), output);
  }

  // optional int32 update_time = 99;
  if (has_update_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(99, this->update_time(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:weizhu.tag.Tag)
}

int Tag::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 tag_id = 1;
    if (has_tag_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tag_id());
    }

    // required string tag_name = 2;
    if (has_tag_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->tag_name());
    }

    // required bool is_recommend = 3;
    if (has_is_recommend()) {
      total_size += 1 + 1;
    }

    // optional int32 user_count = 21;
    if (has_user_count()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->user_count());
    }

    // optional bool is_subscribe = 22;
    if (has_is_subscribe()) {
      total_size += 2 + 1;
    }

    // optional int64 create_admin_id = 96;
    if (has_create_admin_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->create_admin_id());
    }

    // optional int32 create_time = 97;
    if (has_create_time()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->create_time());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int64 update_admin_id = 98;
    if (has_update_admin_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->update_admin_id());
    }

    // optional int32 update_time = 99;
    if (has_update_time()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->update_time());
    }

  }
  // repeated int32 category_id = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->category_id_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->category_id(i));
    }
    total_size += 1 * this->category_id_size() + data_size;
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Tag::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Tag*>(&from));
}

void Tag::MergeFrom(const Tag& from) {
  GOOGLE_CHECK_NE(&from, this);
  category_id_.MergeFrom(from.category_id_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tag_id()) {
      set_tag_id(from.tag_id());
    }
    if (from.has_tag_name()) {
      set_tag_name(from.tag_name());
    }
    if (from.has_is_recommend()) {
      set_is_recommend(from.is_recommend());
    }
    if (from.has_user_count()) {
      set_user_count(from.user_count());
    }
    if (from.has_is_subscribe()) {
      set_is_subscribe(from.is_subscribe());
    }
    if (from.has_create_admin_id()) {
      set_create_admin_id(from.create_admin_id());
    }
    if (from.has_create_time()) {
      set_create_time(from.create_time());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_update_admin_id()) {
      set_update_admin_id(from.update_admin_id());
    }
    if (from.has_update_time()) {
      set_update_time(from.update_time());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void Tag::CopyFrom(const Tag& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Tag::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void Tag::Swap(Tag* other) {
  if (other != this) {
    std::swap(tag_id_, other->tag_id_);
    std::swap(tag_name_, other->tag_name_);
    std::swap(is_recommend_, other->is_recommend_);
    category_id_.Swap(&other->category_id_);
    std::swap(user_count_, other->user_count_);
    std::swap(is_subscribe_, other->is_subscribe_);
    std::swap(create_admin_id_, other->create_admin_id_);
    std::swap(create_time_, other->create_time_);
    std::swap(update_admin_id_, other->update_admin_id_);
    std::swap(update_time_, other->update_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string Tag::GetTypeName() const {
  return "weizhu.tag.Tag";
}


// ===================================================================

#ifndef _MSC_VER
const int Resource::kResourceTypeFieldNumber;
const int Resource::kResourceIdFieldNumber;
#endif  // !_MSC_VER

Resource::Resource()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:weizhu.tag.Resource)
}

void Resource::InitAsDefaultInstance() {
}

Resource::Resource(const Resource& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:weizhu.tag.Resource)
}

void Resource::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  resource_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  resource_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Resource::~Resource() {
  // @@protoc_insertion_point(destructor:weizhu.tag.Resource)
  SharedDtor();
}

void Resource::SharedDtor() {
  if (resource_type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete resource_type_;
  }
  if (resource_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete resource_id_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void Resource::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Resource& Resource::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_tag_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_tag_2eproto();
#endif
  return *default_instance_;
}

Resource* Resource::default_instance_ = NULL;

Resource* Resource::New() const {
  return new Resource;
}

void Resource::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_resource_type()) {
      if (resource_type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        resource_type_->clear();
      }
    }
    if (has_resource_id()) {
      if (resource_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        resource_id_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool Resource::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:weizhu.tag.Resource)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string resource_type = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_resource_type()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_resource_id;
        break;
      }

      // required string resource_id = 2;
      case 2: {
        if (tag == 18) {
         parse_resource_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_resource_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:weizhu.tag.Resource)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:weizhu.tag.Resource)
  return false;
#undef DO_
}

void Resource::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:weizhu.tag.Resource)
  // required string resource_type = 1;
  if (has_resource_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->resource_type(), output);
  }

  // required string resource_id = 2;
  if (has_resource_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->resource_id(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:weizhu.tag.Resource)
}

int Resource::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string resource_type = 1;
    if (has_resource_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->resource_type());
    }

    // required string resource_id = 2;
    if (has_resource_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->resource_id());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Resource::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Resource*>(&from));
}

void Resource::MergeFrom(const Resource& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_resource_type()) {
      set_resource_type(from.resource_type());
    }
    if (from.has_resource_id()) {
      set_resource_id(from.resource_id());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void Resource::CopyFrom(const Resource& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Resource::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Resource::Swap(Resource* other) {
  if (other != this) {
    std::swap(resource_type_, other->resource_type_);
    std::swap(resource_id_, other->resource_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string Resource::GetTypeName() const {
  return "weizhu.tag.Resource";
}


// ===================================================================

#ifndef _MSC_VER
const int GetRecommendTagResponse::kRecommendTagFieldNumber;
#endif  // !_MSC_VER

GetRecommendTagResponse::GetRecommendTagResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:weizhu.tag.GetRecommendTagResponse)
}

void GetRecommendTagResponse::InitAsDefaultInstance() {
}

GetRecommendTagResponse::GetRecommendTagResponse(const GetRecommendTagResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:weizhu.tag.GetRecommendTagResponse)
}

void GetRecommendTagResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetRecommendTagResponse::~GetRecommendTagResponse() {
  // @@protoc_insertion_point(destructor:weizhu.tag.GetRecommendTagResponse)
  SharedDtor();
}

void GetRecommendTagResponse::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void GetRecommendTagResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GetRecommendTagResponse& GetRecommendTagResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_tag_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_tag_2eproto();
#endif
  return *default_instance_;
}

GetRecommendTagResponse* GetRecommendTagResponse::default_instance_ = NULL;

GetRecommendTagResponse* GetRecommendTagResponse::New() const {
  return new GetRecommendTagResponse;
}

void GetRecommendTagResponse::Clear() {
  recommend_tag_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool GetRecommendTagResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:weizhu.tag.GetRecommendTagResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .weizhu.tag.Tag recommend_tag = 1;
      case 1: {
        if (tag == 10) {
         parse_recommend_tag:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_recommend_tag()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_recommend_tag;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:weizhu.tag.GetRecommendTagResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:weizhu.tag.GetRecommendTagResponse)
  return false;
#undef DO_
}

void GetRecommendTagResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:weizhu.tag.GetRecommendTagResponse)
  // repeated .weizhu.tag.Tag recommend_tag = 1;
  for (int i = 0; i < this->recommend_tag_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->recommend_tag(i), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:weizhu.tag.GetRecommendTagResponse)
}

int GetRecommendTagResponse::ByteSize() const {
  int total_size = 0;

  // repeated .weizhu.tag.Tag recommend_tag = 1;
  total_size += 1 * this->recommend_tag_size();
  for (int i = 0; i < this->recommend_tag_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->recommend_tag(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetRecommendTagResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GetRecommendTagResponse*>(&from));
}

void GetRecommendTagResponse::MergeFrom(const GetRecommendTagResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  recommend_tag_.MergeFrom(from.recommend_tag_);
  mutable_unknown_fields()->append(from.unknown_fields());
}

void GetRecommendTagResponse::CopyFrom(const GetRecommendTagResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetRecommendTagResponse::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->recommend_tag())) return false;
  return true;
}

void GetRecommendTagResponse::Swap(GetRecommendTagResponse* other) {
  if (other != this) {
    recommend_tag_.Swap(&other->recommend_tag_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string GetRecommendTagResponse::GetTypeName() const {
  return "weizhu.tag.GetRecommendTagResponse";
}


// ===================================================================

#ifndef _MSC_VER
const int GetCategoryResponse::kCategoryFieldNumber;
#endif  // !_MSC_VER

GetCategoryResponse::GetCategoryResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:weizhu.tag.GetCategoryResponse)
}

void GetCategoryResponse::InitAsDefaultInstance() {
}

GetCategoryResponse::GetCategoryResponse(const GetCategoryResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:weizhu.tag.GetCategoryResponse)
}

void GetCategoryResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetCategoryResponse::~GetCategoryResponse() {
  // @@protoc_insertion_point(destructor:weizhu.tag.GetCategoryResponse)
  SharedDtor();
}

void GetCategoryResponse::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void GetCategoryResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GetCategoryResponse& GetCategoryResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_tag_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_tag_2eproto();
#endif
  return *default_instance_;
}

GetCategoryResponse* GetCategoryResponse::default_instance_ = NULL;

GetCategoryResponse* GetCategoryResponse::New() const {
  return new GetCategoryResponse;
}

void GetCategoryResponse::Clear() {
  category_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool GetCategoryResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:weizhu.tag.GetCategoryResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .weizhu.tag.Category category = 1;
      case 1: {
        if (tag == 10) {
         parse_category:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_category()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_category;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:weizhu.tag.GetCategoryResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:weizhu.tag.GetCategoryResponse)
  return false;
#undef DO_
}

void GetCategoryResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:weizhu.tag.GetCategoryResponse)
  // repeated .weizhu.tag.Category category = 1;
  for (int i = 0; i < this->category_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->category(i), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:weizhu.tag.GetCategoryResponse)
}

int GetCategoryResponse::ByteSize() const {
  int total_size = 0;

  // repeated .weizhu.tag.Category category = 1;
  total_size += 1 * this->category_size();
  for (int i = 0; i < this->category_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->category(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetCategoryResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GetCategoryResponse*>(&from));
}

void GetCategoryResponse::MergeFrom(const GetCategoryResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  category_.MergeFrom(from.category_);
  mutable_unknown_fields()->append(from.unknown_fields());
}

void GetCategoryResponse::CopyFrom(const GetCategoryResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetCategoryResponse::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->category())) return false;
  return true;
}

void GetCategoryResponse::Swap(GetCategoryResponse* other) {
  if (other != this) {
    category_.Swap(&other->category_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string GetCategoryResponse::GetTypeName() const {
  return "weizhu.tag.GetCategoryResponse";
}


// ===================================================================

#ifndef _MSC_VER
const int GetCategoryTagListRequest::kCategoryIdFieldNumber;
const int GetCategoryTagListRequest::kTagSizeFieldNumber;
const int GetCategoryTagListRequest::kOffsetIndexFieldNumber;
#endif  // !_MSC_VER

GetCategoryTagListRequest::GetCategoryTagListRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:weizhu.tag.GetCategoryTagListRequest)
}

void GetCategoryTagListRequest::InitAsDefaultInstance() {
}

GetCategoryTagListRequest::GetCategoryTagListRequest(const GetCategoryTagListRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:weizhu.tag.GetCategoryTagListRequest)
}

void GetCategoryTagListRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  category_id_ = 0;
  tag_size_ = 0;
  offset_index_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetCategoryTagListRequest::~GetCategoryTagListRequest() {
  // @@protoc_insertion_point(destructor:weizhu.tag.GetCategoryTagListRequest)
  SharedDtor();
}

void GetCategoryTagListRequest::SharedDtor() {
  if (offset_index_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete offset_index_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void GetCategoryTagListRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GetCategoryTagListRequest& GetCategoryTagListRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_tag_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_tag_2eproto();
#endif
  return *default_instance_;
}

GetCategoryTagListRequest* GetCategoryTagListRequest::default_instance_ = NULL;

GetCategoryTagListRequest* GetCategoryTagListRequest::New() const {
  return new GetCategoryTagListRequest;
}

void GetCategoryTagListRequest::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GetCategoryTagListRequest*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(category_id_, tag_size_);
    if (has_offset_index()) {
      if (offset_index_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        offset_index_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool GetCategoryTagListRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:weizhu.tag.GetCategoryTagListRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 category_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &category_id_)));
          set_has_category_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_tag_size;
        break;
      }

      // required int32 tag_size = 2;
      case 2: {
        if (tag == 16) {
         parse_tag_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tag_size_)));
          set_has_tag_size();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_offset_index;
        break;
      }

      // optional bytes offset_index = 3;
      case 3: {
        if (tag == 26) {
         parse_offset_index:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_offset_index()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:weizhu.tag.GetCategoryTagListRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:weizhu.tag.GetCategoryTagListRequest)
  return false;
#undef DO_
}

void GetCategoryTagListRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:weizhu.tag.GetCategoryTagListRequest)
  // required int32 category_id = 1;
  if (has_category_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->category_id(), output);
  }

  // required int32 tag_size = 2;
  if (has_tag_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->tag_size(), output);
  }

  // optional bytes offset_index = 3;
  if (has_offset_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->offset_index(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:weizhu.tag.GetCategoryTagListRequest)
}

int GetCategoryTagListRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 category_id = 1;
    if (has_category_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->category_id());
    }

    // required int32 tag_size = 2;
    if (has_tag_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tag_size());
    }

    // optional bytes offset_index = 3;
    if (has_offset_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->offset_index());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetCategoryTagListRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GetCategoryTagListRequest*>(&from));
}

void GetCategoryTagListRequest::MergeFrom(const GetCategoryTagListRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_category_id()) {
      set_category_id(from.category_id());
    }
    if (from.has_tag_size()) {
      set_tag_size(from.tag_size());
    }
    if (from.has_offset_index()) {
      set_offset_index(from.offset_index());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void GetCategoryTagListRequest::CopyFrom(const GetCategoryTagListRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetCategoryTagListRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void GetCategoryTagListRequest::Swap(GetCategoryTagListRequest* other) {
  if (other != this) {
    std::swap(category_id_, other->category_id_);
    std::swap(tag_size_, other->tag_size_);
    std::swap(offset_index_, other->offset_index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string GetCategoryTagListRequest::GetTypeName() const {
  return "weizhu.tag.GetCategoryTagListRequest";
}


// ===================================================================

#ifndef _MSC_VER
const int GetCategoryTagListResponse::kTagFieldNumber;
const int GetCategoryTagListResponse::kHasMoreFieldNumber;
const int GetCategoryTagListResponse::kOffsetIndexFieldNumber;
#endif  // !_MSC_VER

GetCategoryTagListResponse::GetCategoryTagListResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:weizhu.tag.GetCategoryTagListResponse)
}

void GetCategoryTagListResponse::InitAsDefaultInstance() {
}

GetCategoryTagListResponse::GetCategoryTagListResponse(const GetCategoryTagListResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:weizhu.tag.GetCategoryTagListResponse)
}

void GetCategoryTagListResponse::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  has_more_ = false;
  offset_index_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetCategoryTagListResponse::~GetCategoryTagListResponse() {
  // @@protoc_insertion_point(destructor:weizhu.tag.GetCategoryTagListResponse)
  SharedDtor();
}

void GetCategoryTagListResponse::SharedDtor() {
  if (offset_index_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete offset_index_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void GetCategoryTagListResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GetCategoryTagListResponse& GetCategoryTagListResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_tag_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_tag_2eproto();
#endif
  return *default_instance_;
}

GetCategoryTagListResponse* GetCategoryTagListResponse::default_instance_ = NULL;

GetCategoryTagListResponse* GetCategoryTagListResponse::New() const {
  return new GetCategoryTagListResponse;
}

void GetCategoryTagListResponse::Clear() {
  if (_has_bits_[0 / 32] & 6) {
    has_more_ = false;
    if (has_offset_index()) {
      if (offset_index_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        offset_index_->clear();
      }
    }
  }
  tag_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool GetCategoryTagListResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:weizhu.tag.GetCategoryTagListResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .weizhu.tag.Tag tag = 1;
      case 1: {
        if (tag == 10) {
         parse_tag:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_tag()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_tag;
        if (input->ExpectTag(16)) goto parse_has_more;
        break;
      }

      // required bool has_more = 2;
      case 2: {
        if (tag == 16) {
         parse_has_more:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &has_more_)));
          set_has_has_more();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_offset_index;
        break;
      }

      // required bytes offset_index = 3;
      case 3: {
        if (tag == 26) {
         parse_offset_index:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_offset_index()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:weizhu.tag.GetCategoryTagListResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:weizhu.tag.GetCategoryTagListResponse)
  return false;
#undef DO_
}

void GetCategoryTagListResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:weizhu.tag.GetCategoryTagListResponse)
  // repeated .weizhu.tag.Tag tag = 1;
  for (int i = 0; i < this->tag_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->tag(i), output);
  }

  // required bool has_more = 2;
  if (has_has_more()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->has_more(), output);
  }

  // required bytes offset_index = 3;
  if (has_offset_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->offset_index(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:weizhu.tag.GetCategoryTagListResponse)
}

int GetCategoryTagListResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // required bool has_more = 2;
    if (has_has_more()) {
      total_size += 1 + 1;
    }

    // required bytes offset_index = 3;
    if (has_offset_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->offset_index());
    }

  }
  // repeated .weizhu.tag.Tag tag = 1;
  total_size += 1 * this->tag_size();
  for (int i = 0; i < this->tag_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->tag(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetCategoryTagListResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GetCategoryTagListResponse*>(&from));
}

void GetCategoryTagListResponse::MergeFrom(const GetCategoryTagListResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  tag_.MergeFrom(from.tag_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_has_more()) {
      set_has_more(from.has_more());
    }
    if (from.has_offset_index()) {
      set_offset_index(from.offset_index());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void GetCategoryTagListResponse::CopyFrom(const GetCategoryTagListResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetCategoryTagListResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000006) != 0x00000006) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->tag())) return false;
  return true;
}

void GetCategoryTagListResponse::Swap(GetCategoryTagListResponse* other) {
  if (other != this) {
    tag_.Swap(&other->tag_);
    std::swap(has_more_, other->has_more_);
    std::swap(offset_index_, other->offset_index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string GetCategoryTagListResponse::GetTypeName() const {
  return "weizhu.tag.GetCategoryTagListResponse";
}


// ===================================================================

#ifndef _MSC_VER
const int GetUserTagListRequest::kUserIdFieldNumber;
const int GetUserTagListRequest::kTagSizeFieldNumber;
const int GetUserTagListRequest::kOffsetIndexFieldNumber;
#endif  // !_MSC_VER

GetUserTagListRequest::GetUserTagListRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:weizhu.tag.GetUserTagListRequest)
}

void GetUserTagListRequest::InitAsDefaultInstance() {
}

GetUserTagListRequest::GetUserTagListRequest(const GetUserTagListRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:weizhu.tag.GetUserTagListRequest)
}

void GetUserTagListRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  user_id_ = GOOGLE_LONGLONG(0);
  tag_size_ = 0;
  offset_index_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetUserTagListRequest::~GetUserTagListRequest() {
  // @@protoc_insertion_point(destructor:weizhu.tag.GetUserTagListRequest)
  SharedDtor();
}

void GetUserTagListRequest::SharedDtor() {
  if (offset_index_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete offset_index_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void GetUserTagListRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GetUserTagListRequest& GetUserTagListRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_tag_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_tag_2eproto();
#endif
  return *default_instance_;
}

GetUserTagListRequest* GetUserTagListRequest::default_instance_ = NULL;

GetUserTagListRequest* GetUserTagListRequest::New() const {
  return new GetUserTagListRequest;
}

void GetUserTagListRequest::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    user_id_ = GOOGLE_LONGLONG(0);
    tag_size_ = 0;
    if (has_offset_index()) {
      if (offset_index_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        offset_index_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool GetUserTagListRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:weizhu.tag.GetUserTagListRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 user_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_tag_size;
        break;
      }

      // required int32 tag_size = 2;
      case 2: {
        if (tag == 16) {
         parse_tag_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tag_size_)));
          set_has_tag_size();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_offset_index;
        break;
      }

      // optional bytes offset_index = 3;
      case 3: {
        if (tag == 26) {
         parse_offset_index:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_offset_index()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:weizhu.tag.GetUserTagListRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:weizhu.tag.GetUserTagListRequest)
  return false;
#undef DO_
}

void GetUserTagListRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:weizhu.tag.GetUserTagListRequest)
  // required int64 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->user_id(), output);
  }

  // required int32 tag_size = 2;
  if (has_tag_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->tag_size(), output);
  }

  // optional bytes offset_index = 3;
  if (has_offset_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->offset_index(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:weizhu.tag.GetUserTagListRequest)
}

int GetUserTagListRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->user_id());
    }

    // required int32 tag_size = 2;
    if (has_tag_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tag_size());
    }

    // optional bytes offset_index = 3;
    if (has_offset_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->offset_index());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetUserTagListRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GetUserTagListRequest*>(&from));
}

void GetUserTagListRequest::MergeFrom(const GetUserTagListRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_tag_size()) {
      set_tag_size(from.tag_size());
    }
    if (from.has_offset_index()) {
      set_offset_index(from.offset_index());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void GetUserTagListRequest::CopyFrom(const GetUserTagListRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetUserTagListRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void GetUserTagListRequest::Swap(GetUserTagListRequest* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(tag_size_, other->tag_size_);
    std::swap(offset_index_, other->offset_index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string GetUserTagListRequest::GetTypeName() const {
  return "weizhu.tag.GetUserTagListRequest";
}


// ===================================================================

#ifndef _MSC_VER
const int GetUserTagListResponse::kTagFieldNumber;
const int GetUserTagListResponse::kHasMoreFieldNumber;
const int GetUserTagListResponse::kOffsetIndexFieldNumber;
#endif  // !_MSC_VER

GetUserTagListResponse::GetUserTagListResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:weizhu.tag.GetUserTagListResponse)
}

void GetUserTagListResponse::InitAsDefaultInstance() {
}

GetUserTagListResponse::GetUserTagListResponse(const GetUserTagListResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:weizhu.tag.GetUserTagListResponse)
}

void GetUserTagListResponse::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  has_more_ = false;
  offset_index_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetUserTagListResponse::~GetUserTagListResponse() {
  // @@protoc_insertion_point(destructor:weizhu.tag.GetUserTagListResponse)
  SharedDtor();
}

void GetUserTagListResponse::SharedDtor() {
  if (offset_index_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete offset_index_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void GetUserTagListResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GetUserTagListResponse& GetUserTagListResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_tag_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_tag_2eproto();
#endif
  return *default_instance_;
}

GetUserTagListResponse* GetUserTagListResponse::default_instance_ = NULL;

GetUserTagListResponse* GetUserTagListResponse::New() const {
  return new GetUserTagListResponse;
}

void GetUserTagListResponse::Clear() {
  if (_has_bits_[0 / 32] & 6) {
    has_more_ = false;
    if (has_offset_index()) {
      if (offset_index_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        offset_index_->clear();
      }
    }
  }
  tag_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool GetUserTagListResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:weizhu.tag.GetUserTagListResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .weizhu.tag.Tag tag = 1;
      case 1: {
        if (tag == 10) {
         parse_tag:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_tag()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_tag;
        if (input->ExpectTag(16)) goto parse_has_more;
        break;
      }

      // required bool has_more = 2;
      case 2: {
        if (tag == 16) {
         parse_has_more:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &has_more_)));
          set_has_has_more();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_offset_index;
        break;
      }

      // required bytes offset_index = 3;
      case 3: {
        if (tag == 26) {
         parse_offset_index:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_offset_index()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:weizhu.tag.GetUserTagListResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:weizhu.tag.GetUserTagListResponse)
  return false;
#undef DO_
}

void GetUserTagListResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:weizhu.tag.GetUserTagListResponse)
  // repeated .weizhu.tag.Tag tag = 1;
  for (int i = 0; i < this->tag_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->tag(i), output);
  }

  // required bool has_more = 2;
  if (has_has_more()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->has_more(), output);
  }

  // required bytes offset_index = 3;
  if (has_offset_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->offset_index(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:weizhu.tag.GetUserTagListResponse)
}

int GetUserTagListResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // required bool has_more = 2;
    if (has_has_more()) {
      total_size += 1 + 1;
    }

    // required bytes offset_index = 3;
    if (has_offset_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->offset_index());
    }

  }
  // repeated .weizhu.tag.Tag tag = 1;
  total_size += 1 * this->tag_size();
  for (int i = 0; i < this->tag_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->tag(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetUserTagListResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GetUserTagListResponse*>(&from));
}

void GetUserTagListResponse::MergeFrom(const GetUserTagListResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  tag_.MergeFrom(from.tag_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_has_more()) {
      set_has_more(from.has_more());
    }
    if (from.has_offset_index()) {
      set_offset_index(from.offset_index());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void GetUserTagListResponse::CopyFrom(const GetUserTagListResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetUserTagListResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000006) != 0x00000006) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->tag())) return false;
  return true;
}

void GetUserTagListResponse::Swap(GetUserTagListResponse* other) {
  if (other != this) {
    tag_.Swap(&other->tag_);
    std::swap(has_more_, other->has_more_);
    std::swap(offset_index_, other->offset_index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string GetUserTagListResponse::GetTypeName() const {
  return "weizhu.tag.GetUserTagListResponse";
}


// ===================================================================

#ifndef _MSC_VER
const int GetResourceTagListRequest::kResourceFieldNumber;
const int GetResourceTagListRequest::kTagSizeFieldNumber;
const int GetResourceTagListRequest::kOffsetIndexFieldNumber;
#endif  // !_MSC_VER

GetResourceTagListRequest::GetResourceTagListRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:weizhu.tag.GetResourceTagListRequest)
}

void GetResourceTagListRequest::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  resource_ = const_cast< ::weizhu::tag::Resource*>(
      ::weizhu::tag::Resource::internal_default_instance());
#else
  resource_ = const_cast< ::weizhu::tag::Resource*>(&::weizhu::tag::Resource::default_instance());
#endif
}

GetResourceTagListRequest::GetResourceTagListRequest(const GetResourceTagListRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:weizhu.tag.GetResourceTagListRequest)
}

void GetResourceTagListRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  resource_ = NULL;
  tag_size_ = 0;
  offset_index_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetResourceTagListRequest::~GetResourceTagListRequest() {
  // @@protoc_insertion_point(destructor:weizhu.tag.GetResourceTagListRequest)
  SharedDtor();
}

void GetResourceTagListRequest::SharedDtor() {
  if (offset_index_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete offset_index_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete resource_;
  }
}

void GetResourceTagListRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GetResourceTagListRequest& GetResourceTagListRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_tag_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_tag_2eproto();
#endif
  return *default_instance_;
}

GetResourceTagListRequest* GetResourceTagListRequest::default_instance_ = NULL;

GetResourceTagListRequest* GetResourceTagListRequest::New() const {
  return new GetResourceTagListRequest;
}

void GetResourceTagListRequest::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    if (has_resource()) {
      if (resource_ != NULL) resource_->::weizhu::tag::Resource::Clear();
    }
    tag_size_ = 0;
    if (has_offset_index()) {
      if (offset_index_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        offset_index_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool GetResourceTagListRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:weizhu.tag.GetResourceTagListRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .weizhu.tag.Resource resource = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_resource()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_tag_size;
        break;
      }

      // required int32 tag_size = 2;
      case 2: {
        if (tag == 16) {
         parse_tag_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tag_size_)));
          set_has_tag_size();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_offset_index;
        break;
      }

      // optional bytes offset_index = 3;
      case 3: {
        if (tag == 26) {
         parse_offset_index:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_offset_index()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:weizhu.tag.GetResourceTagListRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:weizhu.tag.GetResourceTagListRequest)
  return false;
#undef DO_
}

void GetResourceTagListRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:weizhu.tag.GetResourceTagListRequest)
  // required .weizhu.tag.Resource resource = 1;
  if (has_resource()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->resource(), output);
  }

  // required int32 tag_size = 2;
  if (has_tag_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->tag_size(), output);
  }

  // optional bytes offset_index = 3;
  if (has_offset_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->offset_index(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:weizhu.tag.GetResourceTagListRequest)
}

int GetResourceTagListRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .weizhu.tag.Resource resource = 1;
    if (has_resource()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->resource());
    }

    // required int32 tag_size = 2;
    if (has_tag_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tag_size());
    }

    // optional bytes offset_index = 3;
    if (has_offset_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->offset_index());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetResourceTagListRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GetResourceTagListRequest*>(&from));
}

void GetResourceTagListRequest::MergeFrom(const GetResourceTagListRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_resource()) {
      mutable_resource()->::weizhu::tag::Resource::MergeFrom(from.resource());
    }
    if (from.has_tag_size()) {
      set_tag_size(from.tag_size());
    }
    if (from.has_offset_index()) {
      set_offset_index(from.offset_index());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void GetResourceTagListRequest::CopyFrom(const GetResourceTagListRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetResourceTagListRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_resource()) {
    if (!this->resource().IsInitialized()) return false;
  }
  return true;
}

void GetResourceTagListRequest::Swap(GetResourceTagListRequest* other) {
  if (other != this) {
    std::swap(resource_, other->resource_);
    std::swap(tag_size_, other->tag_size_);
    std::swap(offset_index_, other->offset_index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string GetResourceTagListRequest::GetTypeName() const {
  return "weizhu.tag.GetResourceTagListRequest";
}


// ===================================================================

#ifndef _MSC_VER
const int GetResourceTagListResponse::kTagFieldNumber;
const int GetResourceTagListResponse::kHasMoreFieldNumber;
const int GetResourceTagListResponse::kOffsetIndexFieldNumber;
#endif  // !_MSC_VER

GetResourceTagListResponse::GetResourceTagListResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:weizhu.tag.GetResourceTagListResponse)
}

void GetResourceTagListResponse::InitAsDefaultInstance() {
}

GetResourceTagListResponse::GetResourceTagListResponse(const GetResourceTagListResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:weizhu.tag.GetResourceTagListResponse)
}

void GetResourceTagListResponse::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  has_more_ = false;
  offset_index_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetResourceTagListResponse::~GetResourceTagListResponse() {
  // @@protoc_insertion_point(destructor:weizhu.tag.GetResourceTagListResponse)
  SharedDtor();
}

void GetResourceTagListResponse::SharedDtor() {
  if (offset_index_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete offset_index_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void GetResourceTagListResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GetResourceTagListResponse& GetResourceTagListResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_tag_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_tag_2eproto();
#endif
  return *default_instance_;
}

GetResourceTagListResponse* GetResourceTagListResponse::default_instance_ = NULL;

GetResourceTagListResponse* GetResourceTagListResponse::New() const {
  return new GetResourceTagListResponse;
}

void GetResourceTagListResponse::Clear() {
  if (_has_bits_[0 / 32] & 6) {
    has_more_ = false;
    if (has_offset_index()) {
      if (offset_index_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        offset_index_->clear();
      }
    }
  }
  tag_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool GetResourceTagListResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:weizhu.tag.GetResourceTagListResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .weizhu.tag.Tag tag = 1;
      case 1: {
        if (tag == 10) {
         parse_tag:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_tag()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_tag;
        if (input->ExpectTag(16)) goto parse_has_more;
        break;
      }

      // required bool has_more = 2;
      case 2: {
        if (tag == 16) {
         parse_has_more:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &has_more_)));
          set_has_has_more();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_offset_index;
        break;
      }

      // required bytes offset_index = 3;
      case 3: {
        if (tag == 26) {
         parse_offset_index:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_offset_index()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:weizhu.tag.GetResourceTagListResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:weizhu.tag.GetResourceTagListResponse)
  return false;
#undef DO_
}

void GetResourceTagListResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:weizhu.tag.GetResourceTagListResponse)
  // repeated .weizhu.tag.Tag tag = 1;
  for (int i = 0; i < this->tag_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->tag(i), output);
  }

  // required bool has_more = 2;
  if (has_has_more()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->has_more(), output);
  }

  // required bytes offset_index = 3;
  if (has_offset_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->offset_index(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:weizhu.tag.GetResourceTagListResponse)
}

int GetResourceTagListResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // required bool has_more = 2;
    if (has_has_more()) {
      total_size += 1 + 1;
    }

    // required bytes offset_index = 3;
    if (has_offset_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->offset_index());
    }

  }
  // repeated .weizhu.tag.Tag tag = 1;
  total_size += 1 * this->tag_size();
  for (int i = 0; i < this->tag_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->tag(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetResourceTagListResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GetResourceTagListResponse*>(&from));
}

void GetResourceTagListResponse::MergeFrom(const GetResourceTagListResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  tag_.MergeFrom(from.tag_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_has_more()) {
      set_has_more(from.has_more());
    }
    if (from.has_offset_index()) {
      set_offset_index(from.offset_index());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void GetResourceTagListResponse::CopyFrom(const GetResourceTagListResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetResourceTagListResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000006) != 0x00000006) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->tag())) return false;
  return true;
}

void GetResourceTagListResponse::Swap(GetResourceTagListResponse* other) {
  if (other != this) {
    tag_.Swap(&other->tag_);
    std::swap(has_more_, other->has_more_);
    std::swap(offset_index_, other->offset_index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string GetResourceTagListResponse::GetTypeName() const {
  return "weizhu.tag.GetResourceTagListResponse";
}


// ===================================================================

#ifndef _MSC_VER
const int CreateSubscribeTagRequest::kTagIdFieldNumber;
#endif  // !_MSC_VER

CreateSubscribeTagRequest::CreateSubscribeTagRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:weizhu.tag.CreateSubscribeTagRequest)
}

void CreateSubscribeTagRequest::InitAsDefaultInstance() {
}

CreateSubscribeTagRequest::CreateSubscribeTagRequest(const CreateSubscribeTagRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:weizhu.tag.CreateSubscribeTagRequest)
}

void CreateSubscribeTagRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CreateSubscribeTagRequest::~CreateSubscribeTagRequest() {
  // @@protoc_insertion_point(destructor:weizhu.tag.CreateSubscribeTagRequest)
  SharedDtor();
}

void CreateSubscribeTagRequest::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CreateSubscribeTagRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CreateSubscribeTagRequest& CreateSubscribeTagRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_tag_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_tag_2eproto();
#endif
  return *default_instance_;
}

CreateSubscribeTagRequest* CreateSubscribeTagRequest::default_instance_ = NULL;

CreateSubscribeTagRequest* CreateSubscribeTagRequest::New() const {
  return new CreateSubscribeTagRequest;
}

void CreateSubscribeTagRequest::Clear() {
  tag_id_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool CreateSubscribeTagRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:weizhu.tag.CreateSubscribeTagRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 tag_id = 1;
      case 1: {
        if (tag == 8) {
         parse_tag_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8, input, this->mutable_tag_id())));
        } else if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_tag_id())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8)) goto parse_tag_id;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:weizhu.tag.CreateSubscribeTagRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:weizhu.tag.CreateSubscribeTagRequest)
  return false;
#undef DO_
}

void CreateSubscribeTagRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:weizhu.tag.CreateSubscribeTagRequest)
  // repeated int32 tag_id = 1;
  for (int i = 0; i < this->tag_id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->tag_id(i), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:weizhu.tag.CreateSubscribeTagRequest)
}

int CreateSubscribeTagRequest::ByteSize() const {
  int total_size = 0;

  // repeated int32 tag_id = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->tag_id_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->tag_id(i));
    }
    total_size += 1 * this->tag_id_size() + data_size;
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CreateSubscribeTagRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CreateSubscribeTagRequest*>(&from));
}

void CreateSubscribeTagRequest::MergeFrom(const CreateSubscribeTagRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  tag_id_.MergeFrom(from.tag_id_);
  mutable_unknown_fields()->append(from.unknown_fields());
}

void CreateSubscribeTagRequest::CopyFrom(const CreateSubscribeTagRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateSubscribeTagRequest::IsInitialized() const {

  return true;
}

void CreateSubscribeTagRequest::Swap(CreateSubscribeTagRequest* other) {
  if (other != this) {
    tag_id_.Swap(&other->tag_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CreateSubscribeTagRequest::GetTypeName() const {
  return "weizhu.tag.CreateSubscribeTagRequest";
}


// ===================================================================

bool CreateSubscribeTagResponse_Result_IsValid(int value) {
  switch(value) {
    case 0:
    case 99:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const CreateSubscribeTagResponse_Result CreateSubscribeTagResponse::SUCC;
const CreateSubscribeTagResponse_Result CreateSubscribeTagResponse::FAIL_UNKNOWN;
const CreateSubscribeTagResponse_Result CreateSubscribeTagResponse::Result_MIN;
const CreateSubscribeTagResponse_Result CreateSubscribeTagResponse::Result_MAX;
const int CreateSubscribeTagResponse::Result_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int CreateSubscribeTagResponse::kResultFieldNumber;
const int CreateSubscribeTagResponse::kFailTextFieldNumber;
#endif  // !_MSC_VER

CreateSubscribeTagResponse::CreateSubscribeTagResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:weizhu.tag.CreateSubscribeTagResponse)
}

void CreateSubscribeTagResponse::InitAsDefaultInstance() {
}

CreateSubscribeTagResponse::CreateSubscribeTagResponse(const CreateSubscribeTagResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:weizhu.tag.CreateSubscribeTagResponse)
}

void CreateSubscribeTagResponse::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  result_ = 99;
  fail_text_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CreateSubscribeTagResponse::~CreateSubscribeTagResponse() {
  // @@protoc_insertion_point(destructor:weizhu.tag.CreateSubscribeTagResponse)
  SharedDtor();
}

void CreateSubscribeTagResponse::SharedDtor() {
  if (fail_text_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete fail_text_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CreateSubscribeTagResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CreateSubscribeTagResponse& CreateSubscribeTagResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_tag_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_tag_2eproto();
#endif
  return *default_instance_;
}

CreateSubscribeTagResponse* CreateSubscribeTagResponse::default_instance_ = NULL;

CreateSubscribeTagResponse* CreateSubscribeTagResponse::New() const {
  return new CreateSubscribeTagResponse;
}

void CreateSubscribeTagResponse::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    result_ = 99;
    if (has_fail_text()) {
      if (fail_text_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        fail_text_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool CreateSubscribeTagResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:weizhu.tag.CreateSubscribeTagResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .weizhu.tag.CreateSubscribeTagResponse.Result result = 1 [default = FAIL_UNKNOWN];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::weizhu::tag::CreateSubscribeTagResponse_Result_IsValid(value)) {
            set_result(static_cast< ::weizhu::tag::CreateSubscribeTagResponse_Result >(value));
          } else {
            unknown_fields_stream.WriteVarint32(tag);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_fail_text;
        break;
      }

      // optional string fail_text = 2;
      case 2: {
        if (tag == 18) {
         parse_fail_text:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fail_text()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:weizhu.tag.CreateSubscribeTagResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:weizhu.tag.CreateSubscribeTagResponse)
  return false;
#undef DO_
}

void CreateSubscribeTagResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:weizhu.tag.CreateSubscribeTagResponse)
  // optional .weizhu.tag.CreateSubscribeTagResponse.Result result = 1 [default = FAIL_UNKNOWN];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  // optional string fail_text = 2;
  if (has_fail_text()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->fail_text(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:weizhu.tag.CreateSubscribeTagResponse)
}

int CreateSubscribeTagResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .weizhu.tag.CreateSubscribeTagResponse.Result result = 1 [default = FAIL_UNKNOWN];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

    // optional string fail_text = 2;
    if (has_fail_text()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->fail_text());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CreateSubscribeTagResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CreateSubscribeTagResponse*>(&from));
}

void CreateSubscribeTagResponse::MergeFrom(const CreateSubscribeTagResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_fail_text()) {
      set_fail_text(from.fail_text());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void CreateSubscribeTagResponse::CopyFrom(const CreateSubscribeTagResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateSubscribeTagResponse::IsInitialized() const {

  return true;
}

void CreateSubscribeTagResponse::Swap(CreateSubscribeTagResponse* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(fail_text_, other->fail_text_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CreateSubscribeTagResponse::GetTypeName() const {
  return "weizhu.tag.CreateSubscribeTagResponse";
}


// ===================================================================

#ifndef _MSC_VER
const int DeleteSubscribeTagRequest::kTagIdFieldNumber;
#endif  // !_MSC_VER

DeleteSubscribeTagRequest::DeleteSubscribeTagRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:weizhu.tag.DeleteSubscribeTagRequest)
}

void DeleteSubscribeTagRequest::InitAsDefaultInstance() {
}

DeleteSubscribeTagRequest::DeleteSubscribeTagRequest(const DeleteSubscribeTagRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:weizhu.tag.DeleteSubscribeTagRequest)
}

void DeleteSubscribeTagRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DeleteSubscribeTagRequest::~DeleteSubscribeTagRequest() {
  // @@protoc_insertion_point(destructor:weizhu.tag.DeleteSubscribeTagRequest)
  SharedDtor();
}

void DeleteSubscribeTagRequest::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void DeleteSubscribeTagRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const DeleteSubscribeTagRequest& DeleteSubscribeTagRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_tag_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_tag_2eproto();
#endif
  return *default_instance_;
}

DeleteSubscribeTagRequest* DeleteSubscribeTagRequest::default_instance_ = NULL;

DeleteSubscribeTagRequest* DeleteSubscribeTagRequest::New() const {
  return new DeleteSubscribeTagRequest;
}

void DeleteSubscribeTagRequest::Clear() {
  tag_id_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool DeleteSubscribeTagRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:weizhu.tag.DeleteSubscribeTagRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 tag_id = 2;
      case 2: {
        if (tag == 16) {
         parse_tag_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_tag_id())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_tag_id())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_tag_id;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:weizhu.tag.DeleteSubscribeTagRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:weizhu.tag.DeleteSubscribeTagRequest)
  return false;
#undef DO_
}

void DeleteSubscribeTagRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:weizhu.tag.DeleteSubscribeTagRequest)
  // repeated int32 tag_id = 2;
  for (int i = 0; i < this->tag_id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->tag_id(i), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:weizhu.tag.DeleteSubscribeTagRequest)
}

int DeleteSubscribeTagRequest::ByteSize() const {
  int total_size = 0;

  // repeated int32 tag_id = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->tag_id_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->tag_id(i));
    }
    total_size += 1 * this->tag_id_size() + data_size;
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeleteSubscribeTagRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const DeleteSubscribeTagRequest*>(&from));
}

void DeleteSubscribeTagRequest::MergeFrom(const DeleteSubscribeTagRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  tag_id_.MergeFrom(from.tag_id_);
  mutable_unknown_fields()->append(from.unknown_fields());
}

void DeleteSubscribeTagRequest::CopyFrom(const DeleteSubscribeTagRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteSubscribeTagRequest::IsInitialized() const {

  return true;
}

void DeleteSubscribeTagRequest::Swap(DeleteSubscribeTagRequest* other) {
  if (other != this) {
    tag_id_.Swap(&other->tag_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string DeleteSubscribeTagRequest::GetTypeName() const {
  return "weizhu.tag.DeleteSubscribeTagRequest";
}


// ===================================================================

bool DeleteSubscribeTagResponse_Result_IsValid(int value) {
  switch(value) {
    case 0:
    case 99:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const DeleteSubscribeTagResponse_Result DeleteSubscribeTagResponse::SUCC;
const DeleteSubscribeTagResponse_Result DeleteSubscribeTagResponse::FAIL_UNKNOWN;
const DeleteSubscribeTagResponse_Result DeleteSubscribeTagResponse::Result_MIN;
const DeleteSubscribeTagResponse_Result DeleteSubscribeTagResponse::Result_MAX;
const int DeleteSubscribeTagResponse::Result_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int DeleteSubscribeTagResponse::kResultFieldNumber;
const int DeleteSubscribeTagResponse::kFailTextFieldNumber;
#endif  // !_MSC_VER

DeleteSubscribeTagResponse::DeleteSubscribeTagResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:weizhu.tag.DeleteSubscribeTagResponse)
}

void DeleteSubscribeTagResponse::InitAsDefaultInstance() {
}

DeleteSubscribeTagResponse::DeleteSubscribeTagResponse(const DeleteSubscribeTagResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:weizhu.tag.DeleteSubscribeTagResponse)
}

void DeleteSubscribeTagResponse::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  result_ = 99;
  fail_text_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DeleteSubscribeTagResponse::~DeleteSubscribeTagResponse() {
  // @@protoc_insertion_point(destructor:weizhu.tag.DeleteSubscribeTagResponse)
  SharedDtor();
}

void DeleteSubscribeTagResponse::SharedDtor() {
  if (fail_text_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete fail_text_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void DeleteSubscribeTagResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const DeleteSubscribeTagResponse& DeleteSubscribeTagResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_tag_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_tag_2eproto();
#endif
  return *default_instance_;
}

DeleteSubscribeTagResponse* DeleteSubscribeTagResponse::default_instance_ = NULL;

DeleteSubscribeTagResponse* DeleteSubscribeTagResponse::New() const {
  return new DeleteSubscribeTagResponse;
}

void DeleteSubscribeTagResponse::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    result_ = 99;
    if (has_fail_text()) {
      if (fail_text_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        fail_text_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool DeleteSubscribeTagResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:weizhu.tag.DeleteSubscribeTagResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .weizhu.tag.DeleteSubscribeTagResponse.Result result = 1 [default = FAIL_UNKNOWN];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::weizhu::tag::DeleteSubscribeTagResponse_Result_IsValid(value)) {
            set_result(static_cast< ::weizhu::tag::DeleteSubscribeTagResponse_Result >(value));
          } else {
            unknown_fields_stream.WriteVarint32(tag);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_fail_text;
        break;
      }

      // optional string fail_text = 2;
      case 2: {
        if (tag == 18) {
         parse_fail_text:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fail_text()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:weizhu.tag.DeleteSubscribeTagResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:weizhu.tag.DeleteSubscribeTagResponse)
  return false;
#undef DO_
}

void DeleteSubscribeTagResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:weizhu.tag.DeleteSubscribeTagResponse)
  // optional .weizhu.tag.DeleteSubscribeTagResponse.Result result = 1 [default = FAIL_UNKNOWN];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  // optional string fail_text = 2;
  if (has_fail_text()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->fail_text(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:weizhu.tag.DeleteSubscribeTagResponse)
}

int DeleteSubscribeTagResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .weizhu.tag.DeleteSubscribeTagResponse.Result result = 1 [default = FAIL_UNKNOWN];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

    // optional string fail_text = 2;
    if (has_fail_text()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->fail_text());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeleteSubscribeTagResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const DeleteSubscribeTagResponse*>(&from));
}

void DeleteSubscribeTagResponse::MergeFrom(const DeleteSubscribeTagResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_fail_text()) {
      set_fail_text(from.fail_text());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void DeleteSubscribeTagResponse::CopyFrom(const DeleteSubscribeTagResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteSubscribeTagResponse::IsInitialized() const {

  return true;
}

void DeleteSubscribeTagResponse::Swap(DeleteSubscribeTagResponse* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(fail_text_, other->fail_text_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string DeleteSubscribeTagResponse::GetTypeName() const {
  return "weizhu.tag.DeleteSubscribeTagResponse";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace tag
}  // namespace weizhu

// @@protoc_insertion_point(global_scope)
