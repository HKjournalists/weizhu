// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: community.proto

#ifndef PROTOBUF_community_2eproto__INCLUDED
#define PROTOBUF_community_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include "weizhu.pb.h"
// @@protoc_insertion_point(includes)

namespace weizhu {
namespace community {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_community_2eproto();
void protobuf_AssignDesc_community_2eproto();
void protobuf_ShutdownFile_community_2eproto();

class Board;
class Post;
class Post_Part;
class Comment;
class PostLike;
class CommunityPostMessagePush;
class CommunityCommentMessagePush;
class GetCommunityRequest;
class GetCommunityResponse;
class GetBoardListRequest;
class GetBoardListResponse;
class GetPostListRequest;
class GetPostListResponse;
class GetCommentListRequest;
class GetCommentListResponse;
class GetHotCommentListRequest;
class GetHotCommentListResponse;
class CreatePostRequest;
class CreatePostResponse;
class DeletePostRequest;
class DeletePostResponse;
class LikePostRequest;
class LikePostResponse;
class CreateCommentRequest;
class CreateCommentResponse;
class DeleteCommentRequest;
class DeleteCommentResponse;
class GetMyPostListRequest;
class GetMyPostListResponse;
class GetMyCommentListRequest;
class GetMyCommentListResponse;
class GetRecommendPostResponse;
class LikeCommentRequest;
class LikeCommentResponse;
class GetPostCommentByIdRequest;
class GetPostCommentByIdRequest_PostCommentId;
class GetPostCommentByIdResponse;
class GetPostByIdsRequest;
class GetPostByIdsResponse;

enum Post_State {
  Post_State_NORMAL = 0,
  Post_State_DELETE = 1
};
bool Post_State_IsValid(int value);
const Post_State Post_State_State_MIN = Post_State_NORMAL;
const Post_State Post_State_State_MAX = Post_State_DELETE;
const int Post_State_State_ARRAYSIZE = Post_State_State_MAX + 1;

enum Comment_State {
  Comment_State_NORMAL = 0,
  Comment_State_DELETE = 1
};
bool Comment_State_IsValid(int value);
const Comment_State Comment_State_State_MIN = Comment_State_NORMAL;
const Comment_State Comment_State_State_MAX = Comment_State_DELETE;
const int Comment_State_State_ARRAYSIZE = Comment_State_State_MAX + 1;

enum GetPostListRequest_ListType {
  GetPostListRequest_ListType_CREATE_TIME = 0,
  GetPostListRequest_ListType_TOP_HOT = 1
};
bool GetPostListRequest_ListType_IsValid(int value);
const GetPostListRequest_ListType GetPostListRequest_ListType_ListType_MIN = GetPostListRequest_ListType_CREATE_TIME;
const GetPostListRequest_ListType GetPostListRequest_ListType_ListType_MAX = GetPostListRequest_ListType_TOP_HOT;
const int GetPostListRequest_ListType_ListType_ARRAYSIZE = GetPostListRequest_ListType_ListType_MAX + 1;

enum CreatePostResponse_Result {
  CreatePostResponse_Result_SUCC = 0,
  CreatePostResponse_Result_FAIL_BOARD_INVALID = 1,
  CreatePostResponse_Result_FAIL_TITLE_INVALID = 2,
  CreatePostResponse_Result_FAIL_TEXT_INVALID = 3,
  CreatePostResponse_Result_FAIL_IMAGE_INVALID = 4,
  CreatePostResponse_Result_FAIL_TAG_INVALID = 5,
  CreatePostResponse_Result_FAIL_UNKNOWN = 99
};
bool CreatePostResponse_Result_IsValid(int value);
const CreatePostResponse_Result CreatePostResponse_Result_Result_MIN = CreatePostResponse_Result_SUCC;
const CreatePostResponse_Result CreatePostResponse_Result_Result_MAX = CreatePostResponse_Result_FAIL_UNKNOWN;
const int CreatePostResponse_Result_Result_ARRAYSIZE = CreatePostResponse_Result_Result_MAX + 1;

enum DeletePostResponse_Result {
  DeletePostResponse_Result_SUCC = 0,
  DeletePostResponse_Result_FAIL_POST_NOT_EXIST = 1,
  DeletePostResponse_Result_FAIL_POST_OTHER = 2,
  DeletePostResponse_Result_FAIL_UNKNOWN = 99
};
bool DeletePostResponse_Result_IsValid(int value);
const DeletePostResponse_Result DeletePostResponse_Result_Result_MIN = DeletePostResponse_Result_SUCC;
const DeletePostResponse_Result DeletePostResponse_Result_Result_MAX = DeletePostResponse_Result_FAIL_UNKNOWN;
const int DeletePostResponse_Result_Result_ARRAYSIZE = DeletePostResponse_Result_Result_MAX + 1;

enum LikePostResponse_Result {
  LikePostResponse_Result_SUCC = 0,
  LikePostResponse_Result_FAIL_POST_NOT_EXIST = 1,
  LikePostResponse_Result_FAIL_UNKNOWN = 99
};
bool LikePostResponse_Result_IsValid(int value);
const LikePostResponse_Result LikePostResponse_Result_Result_MIN = LikePostResponse_Result_SUCC;
const LikePostResponse_Result LikePostResponse_Result_Result_MAX = LikePostResponse_Result_FAIL_UNKNOWN;
const int LikePostResponse_Result_Result_ARRAYSIZE = LikePostResponse_Result_Result_MAX + 1;

enum CreateCommentResponse_Result {
  CreateCommentResponse_Result_SUCC = 0,
  CreateCommentResponse_Result_FAIL_POST_NOT_EXIST = 1,
  CreateCommentResponse_Result_FAIL_REPLY_COMMENT_NOT_EXIST = 2,
  CreateCommentResponse_Result_FAIL_CONTENT_INVALID = 3,
  CreateCommentResponse_Result_FAIL_UNKNOWN = 99
};
bool CreateCommentResponse_Result_IsValid(int value);
const CreateCommentResponse_Result CreateCommentResponse_Result_Result_MIN = CreateCommentResponse_Result_SUCC;
const CreateCommentResponse_Result CreateCommentResponse_Result_Result_MAX = CreateCommentResponse_Result_FAIL_UNKNOWN;
const int CreateCommentResponse_Result_Result_ARRAYSIZE = CreateCommentResponse_Result_Result_MAX + 1;

enum DeleteCommentResponse_Result {
  DeleteCommentResponse_Result_SUCC = 0,
  DeleteCommentResponse_Result_FAIL_COMMENT_NOT_EXIST = 1,
  DeleteCommentResponse_Result_FAIL_COMMENT_OTHER = 2,
  DeleteCommentResponse_Result_FAIL_UNKNOWN = 99
};
bool DeleteCommentResponse_Result_IsValid(int value);
const DeleteCommentResponse_Result DeleteCommentResponse_Result_Result_MIN = DeleteCommentResponse_Result_SUCC;
const DeleteCommentResponse_Result DeleteCommentResponse_Result_Result_MAX = DeleteCommentResponse_Result_FAIL_UNKNOWN;
const int DeleteCommentResponse_Result_Result_ARRAYSIZE = DeleteCommentResponse_Result_Result_MAX + 1;

enum LikeCommentResponse_Result {
  LikeCommentResponse_Result_SUCC = 0,
  LikeCommentResponse_Result_FAIL_POST_NOT_EXIST = 1,
  LikeCommentResponse_Result_FAIL_COMMENT_NOT_EXIST = 2,
  LikeCommentResponse_Result_FAIL_UNKNOWN = 99
};
bool LikeCommentResponse_Result_IsValid(int value);
const LikeCommentResponse_Result LikeCommentResponse_Result_Result_MIN = LikeCommentResponse_Result_SUCC;
const LikeCommentResponse_Result LikeCommentResponse_Result_Result_MAX = LikeCommentResponse_Result_FAIL_UNKNOWN;
const int LikeCommentResponse_Result_Result_ARRAYSIZE = LikeCommentResponse_Result_Result_MAX + 1;

// ===================================================================

class Board : public ::google::protobuf::MessageLite {
 public:
  Board();
  virtual ~Board();

  Board(const Board& from);

  inline Board& operator=(const Board& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const Board& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const Board* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(Board* other);

  // implements Message ----------------------------------------------

  Board* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const Board& from);
  void MergeFrom(const Board& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 board_id = 1;
  inline bool has_board_id() const;
  inline void clear_board_id();
  static const int kBoardIdFieldNumber = 1;
  inline ::google::protobuf::int32 board_id() const;
  inline void set_board_id(::google::protobuf::int32 value);

  // required string board_name = 2;
  inline bool has_board_name() const;
  inline void clear_board_name();
  static const int kBoardNameFieldNumber = 2;
  inline const ::std::string& board_name() const;
  inline void set_board_name(const ::std::string& value);
  inline void set_board_name(const char* value);
  inline void set_board_name(const char* value, size_t size);
  inline ::std::string* mutable_board_name();
  inline ::std::string* release_board_name();
  inline void set_allocated_board_name(::std::string* board_name);

  // required string board_icon = 3;
  inline bool has_board_icon() const;
  inline void clear_board_icon();
  static const int kBoardIconFieldNumber = 3;
  inline const ::std::string& board_icon() const;
  inline void set_board_icon(const ::std::string& value);
  inline void set_board_icon(const char* value);
  inline void set_board_icon(const char* value, size_t size);
  inline ::std::string* mutable_board_icon();
  inline ::std::string* release_board_icon();
  inline void set_allocated_board_icon(::std::string* board_icon);

  // required string board_desc = 4;
  inline bool has_board_desc() const;
  inline void clear_board_desc();
  static const int kBoardDescFieldNumber = 4;
  inline const ::std::string& board_desc() const;
  inline void set_board_desc(const ::std::string& value);
  inline void set_board_desc(const char* value);
  inline void set_board_desc(const char* value, size_t size);
  inline ::std::string* mutable_board_desc();
  inline ::std::string* release_board_desc();
  inline void set_allocated_board_desc(::std::string* board_desc);

  // optional int32 parent_board_id = 5;
  inline bool has_parent_board_id() const;
  inline void clear_parent_board_id();
  static const int kParentBoardIdFieldNumber = 5;
  inline ::google::protobuf::int32 parent_board_id() const;
  inline void set_parent_board_id(::google::protobuf::int32 value);

  // required bool is_leaf_board = 6;
  inline bool has_is_leaf_board() const;
  inline void clear_is_leaf_board();
  static const int kIsLeafBoardFieldNumber = 6;
  inline bool is_leaf_board() const;
  inline void set_is_leaf_board(bool value);

  // required bool is_hot = 7;
  inline bool has_is_hot() const;
  inline void clear_is_hot();
  static const int kIsHotFieldNumber = 7;
  inline bool is_hot() const;
  inline void set_is_hot(bool value);

  // required int32 post_total_count = 8;
  inline bool has_post_total_count() const;
  inline void clear_post_total_count();
  static const int kPostTotalCountFieldNumber = 8;
  inline ::google::protobuf::int32 post_total_count() const;
  inline void set_post_total_count(::google::protobuf::int32 value);

  // required int32 post_new_count = 9;
  inline bool has_post_new_count() const;
  inline void clear_post_new_count();
  static const int kPostNewCountFieldNumber = 9;
  inline ::google::protobuf::int32 post_new_count() const;
  inline void set_post_new_count(::google::protobuf::int32 value);

  // optional int32 allow_model_id = 10;
  inline bool has_allow_model_id() const;
  inline void clear_allow_model_id();
  static const int kAllowModelIdFieldNumber = 10;
  inline ::google::protobuf::int32 allow_model_id() const;
  inline void set_allow_model_id(::google::protobuf::int32 value);

  // repeated string tag = 11;
  inline int tag_size() const;
  inline void clear_tag();
  static const int kTagFieldNumber = 11;
  inline const ::std::string& tag(int index) const;
  inline ::std::string* mutable_tag(int index);
  inline void set_tag(int index, const ::std::string& value);
  inline void set_tag(int index, const char* value);
  inline void set_tag(int index, const char* value, size_t size);
  inline ::std::string* add_tag();
  inline void add_tag(const ::std::string& value);
  inline void add_tag(const char* value);
  inline void add_tag(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& tag() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_tag();

  // @@protoc_insertion_point(class_scope:weizhu.community.Board)
 private:
  inline void set_has_board_id();
  inline void clear_has_board_id();
  inline void set_has_board_name();
  inline void clear_has_board_name();
  inline void set_has_board_icon();
  inline void clear_has_board_icon();
  inline void set_has_board_desc();
  inline void clear_has_board_desc();
  inline void set_has_parent_board_id();
  inline void clear_has_parent_board_id();
  inline void set_has_is_leaf_board();
  inline void clear_has_is_leaf_board();
  inline void set_has_is_hot();
  inline void clear_has_is_hot();
  inline void set_has_post_total_count();
  inline void clear_has_post_total_count();
  inline void set_has_post_new_count();
  inline void clear_has_post_new_count();
  inline void set_has_allow_model_id();
  inline void clear_has_allow_model_id();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* board_name_;
  ::std::string* board_icon_;
  ::google::protobuf::int32 board_id_;
  ::google::protobuf::int32 parent_board_id_;
  ::std::string* board_desc_;
  bool is_leaf_board_;
  bool is_hot_;
  ::google::protobuf::int32 post_total_count_;
  ::google::protobuf::int32 post_new_count_;
  ::google::protobuf::int32 allow_model_id_;
  ::google::protobuf::RepeatedPtrField< ::std::string> tag_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_community_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_community_2eproto();
  #endif
  friend void protobuf_AssignDesc_community_2eproto();
  friend void protobuf_ShutdownFile_community_2eproto();

  void InitAsDefaultInstance();
  static Board* default_instance_;
};
// -------------------------------------------------------------------

class Post_Part : public ::google::protobuf::MessageLite {
 public:
  Post_Part();
  virtual ~Post_Part();

  Post_Part(const Post_Part& from);

  inline Post_Part& operator=(const Post_Part& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const Post_Part& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const Post_Part* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(Post_Part* other);

  // implements Message ----------------------------------------------

  Post_Part* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const Post_Part& from);
  void MergeFrom(const Post_Part& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 part_id = 1;
  inline bool has_part_id() const;
  inline void clear_part_id();
  static const int kPartIdFieldNumber = 1;
  inline ::google::protobuf::int32 part_id() const;
  inline void set_part_id(::google::protobuf::int32 value);

  // optional string text = 2;
  inline bool has_text() const;
  inline void clear_text();
  static const int kTextFieldNumber = 2;
  inline const ::std::string& text() const;
  inline void set_text(const ::std::string& value);
  inline void set_text(const char* value);
  inline void set_text(const char* value, size_t size);
  inline ::std::string* mutable_text();
  inline ::std::string* release_text();
  inline void set_allocated_text(::std::string* text);

  // optional string image_name = 3;
  inline bool has_image_name() const;
  inline void clear_image_name();
  static const int kImageNameFieldNumber = 3;
  inline const ::std::string& image_name() const;
  inline void set_image_name(const ::std::string& value);
  inline void set_image_name(const char* value);
  inline void set_image_name(const char* value, size_t size);
  inline ::std::string* mutable_image_name();
  inline ::std::string* release_image_name();
  inline void set_allocated_image_name(::std::string* image_name);

  // @@protoc_insertion_point(class_scope:weizhu.community.Post.Part)
 private:
  inline void set_has_part_id();
  inline void clear_has_part_id();
  inline void set_has_text();
  inline void clear_has_text();
  inline void set_has_image_name();
  inline void clear_has_image_name();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* text_;
  ::std::string* image_name_;
  ::google::protobuf::int32 part_id_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_community_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_community_2eproto();
  #endif
  friend void protobuf_AssignDesc_community_2eproto();
  friend void protobuf_ShutdownFile_community_2eproto();

  void InitAsDefaultInstance();
  static Post_Part* default_instance_;
};
// -------------------------------------------------------------------

class Post : public ::google::protobuf::MessageLite {
 public:
  Post();
  virtual ~Post();

  Post(const Post& from);

  inline Post& operator=(const Post& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const Post& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const Post* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(Post* other);

  // implements Message ----------------------------------------------

  Post* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const Post& from);
  void MergeFrom(const Post& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  typedef Post_Part Part;

  typedef Post_State State;
  static const State NORMAL = Post_State_NORMAL;
  static const State DELETE = Post_State_DELETE;
  static inline bool State_IsValid(int value) {
    return Post_State_IsValid(value);
  }
  static const State State_MIN =
    Post_State_State_MIN;
  static const State State_MAX =
    Post_State_State_MAX;
  static const int State_ARRAYSIZE =
    Post_State_State_ARRAYSIZE;

  // accessors -------------------------------------------------------

  // required int32 post_id = 1;
  inline bool has_post_id() const;
  inline void clear_post_id();
  static const int kPostIdFieldNumber = 1;
  inline ::google::protobuf::int32 post_id() const;
  inline void set_post_id(::google::protobuf::int32 value);

  // required string post_title = 2;
  inline bool has_post_title() const;
  inline void clear_post_title();
  static const int kPostTitleFieldNumber = 2;
  inline const ::std::string& post_title() const;
  inline void set_post_title(const ::std::string& value);
  inline void set_post_title(const char* value);
  inline void set_post_title(const char* value, size_t size);
  inline ::std::string* mutable_post_title();
  inline ::std::string* release_post_title();
  inline void set_allocated_post_title(::std::string* post_title);

  // repeated .weizhu.community.Post.Part post_part = 3;
  inline int post_part_size() const;
  inline void clear_post_part();
  static const int kPostPartFieldNumber = 3;
  inline const ::weizhu::community::Post_Part& post_part(int index) const;
  inline ::weizhu::community::Post_Part* mutable_post_part(int index);
  inline ::weizhu::community::Post_Part* add_post_part();
  inline const ::google::protobuf::RepeatedPtrField< ::weizhu::community::Post_Part >&
      post_part() const;
  inline ::google::protobuf::RepeatedPtrField< ::weizhu::community::Post_Part >*
      mutable_post_part();

  // required int32 board_id = 4;
  inline bool has_board_id() const;
  inline void clear_board_id();
  static const int kBoardIdFieldNumber = 4;
  inline ::google::protobuf::int32 board_id() const;
  inline void set_board_id(::google::protobuf::int32 value);

  // required int64 create_user_id = 5;
  inline bool has_create_user_id() const;
  inline void clear_create_user_id();
  static const int kCreateUserIdFieldNumber = 5;
  inline ::google::protobuf::int64 create_user_id() const;
  inline void set_create_user_id(::google::protobuf::int64 value);

  // required int32 create_time = 6;
  inline bool has_create_time() const;
  inline void clear_create_time();
  static const int kCreateTimeFieldNumber = 6;
  inline ::google::protobuf::int32 create_time() const;
  inline void set_create_time(::google::protobuf::int32 value);

  // required bool is_hot = 7;
  inline bool has_is_hot() const;
  inline void clear_is_hot();
  static const int kIsHotFieldNumber = 7;
  inline bool is_hot() const;
  inline void set_is_hot(bool value);

  // optional .weizhu.community.Post.State state = 8 [default = NORMAL];
  inline bool has_state() const;
  inline void clear_state();
  static const int kStateFieldNumber = 8;
  inline ::weizhu::community::Post_State state() const;
  inline void set_state(::weizhu::community::Post_State value);

  // required int32 comment_count = 9;
  inline bool has_comment_count() const;
  inline void clear_comment_count();
  static const int kCommentCountFieldNumber = 9;
  inline ::google::protobuf::int32 comment_count() const;
  inline void set_comment_count(::google::protobuf::int32 value);

  // required int32 like_count = 10;
  inline bool has_like_count() const;
  inline void clear_like_count();
  static const int kLikeCountFieldNumber = 10;
  inline ::google::protobuf::int32 like_count() const;
  inline void set_like_count(::google::protobuf::int32 value);

  // required bool is_like = 11;
  inline bool has_is_like() const;
  inline void clear_is_like();
  static const int kIsLikeFieldNumber = 11;
  inline bool is_like() const;
  inline void set_is_like(bool value);

  // optional bool is_sticky = 12;
  inline bool has_is_sticky() const;
  inline void clear_is_sticky();
  static const int kIsStickyFieldNumber = 12;
  inline bool is_sticky() const;
  inline void set_is_sticky(bool value);

  // optional int32 sticky_time = 13;
  inline bool has_sticky_time() const;
  inline void clear_sticky_time();
  static const int kStickyTimeFieldNumber = 13;
  inline ::google::protobuf::int32 sticky_time() const;
  inline void set_sticky_time(::google::protobuf::int32 value);

  // optional bool is_recommend = 14;
  inline bool has_is_recommend() const;
  inline void clear_is_recommend();
  static const int kIsRecommendFieldNumber = 14;
  inline bool is_recommend() const;
  inline void set_is_recommend(bool value);

  // optional int32 recommend_time = 15;
  inline bool has_recommend_time() const;
  inline void clear_recommend_time();
  static const int kRecommendTimeFieldNumber = 15;
  inline ::google::protobuf::int32 recommend_time() const;
  inline void set_recommend_time(::google::protobuf::int32 value);

  // repeated string tag = 16;
  inline int tag_size() const;
  inline void clear_tag();
  static const int kTagFieldNumber = 16;
  inline const ::std::string& tag(int index) const;
  inline ::std::string* mutable_tag(int index);
  inline void set_tag(int index, const ::std::string& value);
  inline void set_tag(int index, const char* value);
  inline void set_tag(int index, const char* value, size_t size);
  inline ::std::string* add_tag();
  inline void add_tag(const ::std::string& value);
  inline void add_tag(const char* value);
  inline void add_tag(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& tag() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_tag();

  // @@protoc_insertion_point(class_scope:weizhu.community.Post)
 private:
  inline void set_has_post_id();
  inline void clear_has_post_id();
  inline void set_has_post_title();
  inline void clear_has_post_title();
  inline void set_has_board_id();
  inline void clear_has_board_id();
  inline void set_has_create_user_id();
  inline void clear_has_create_user_id();
  inline void set_has_create_time();
  inline void clear_has_create_time();
  inline void set_has_is_hot();
  inline void clear_has_is_hot();
  inline void set_has_state();
  inline void clear_has_state();
  inline void set_has_comment_count();
  inline void clear_has_comment_count();
  inline void set_has_like_count();
  inline void clear_has_like_count();
  inline void set_has_is_like();
  inline void clear_has_is_like();
  inline void set_has_is_sticky();
  inline void clear_has_is_sticky();
  inline void set_has_sticky_time();
  inline void clear_has_sticky_time();
  inline void set_has_is_recommend();
  inline void clear_has_is_recommend();
  inline void set_has_recommend_time();
  inline void clear_has_recommend_time();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* post_title_;
  ::google::protobuf::int32 post_id_;
  ::google::protobuf::int32 board_id_;
  ::google::protobuf::RepeatedPtrField< ::weizhu::community::Post_Part > post_part_;
  ::google::protobuf::int64 create_user_id_;
  ::google::protobuf::int32 create_time_;
  int state_;
  ::google::protobuf::int32 comment_count_;
  ::google::protobuf::int32 like_count_;
  bool is_hot_;
  bool is_like_;
  bool is_sticky_;
  bool is_recommend_;
  ::google::protobuf::int32 sticky_time_;
  ::google::protobuf::RepeatedPtrField< ::std::string> tag_;
  ::google::protobuf::int32 recommend_time_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_community_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_community_2eproto();
  #endif
  friend void protobuf_AssignDesc_community_2eproto();
  friend void protobuf_ShutdownFile_community_2eproto();

  void InitAsDefaultInstance();
  static Post* default_instance_;
};
// -------------------------------------------------------------------

class Comment : public ::google::protobuf::MessageLite {
 public:
  Comment();
  virtual ~Comment();

  Comment(const Comment& from);

  inline Comment& operator=(const Comment& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const Comment& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const Comment* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(Comment* other);

  // implements Message ----------------------------------------------

  Comment* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const Comment& from);
  void MergeFrom(const Comment& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  typedef Comment_State State;
  static const State NORMAL = Comment_State_NORMAL;
  static const State DELETE = Comment_State_DELETE;
  static inline bool State_IsValid(int value) {
    return Comment_State_IsValid(value);
  }
  static const State State_MIN =
    Comment_State_State_MIN;
  static const State State_MAX =
    Comment_State_State_MAX;
  static const int State_ARRAYSIZE =
    Comment_State_State_ARRAYSIZE;

  // accessors -------------------------------------------------------

  // required int32 post_id = 1;
  inline bool has_post_id() const;
  inline void clear_post_id();
  static const int kPostIdFieldNumber = 1;
  inline ::google::protobuf::int32 post_id() const;
  inline void set_post_id(::google::protobuf::int32 value);

  // required int32 comment_id = 2;
  inline bool has_comment_id() const;
  inline void clear_comment_id();
  static const int kCommentIdFieldNumber = 2;
  inline ::google::protobuf::int32 comment_id() const;
  inline void set_comment_id(::google::protobuf::int32 value);

  // optional int32 reply_comment_id = 3;
  inline bool has_reply_comment_id() const;
  inline void clear_reply_comment_id();
  static const int kReplyCommentIdFieldNumber = 3;
  inline ::google::protobuf::int32 reply_comment_id() const;
  inline void set_reply_comment_id(::google::protobuf::int32 value);

  // required string content = 4;
  inline bool has_content() const;
  inline void clear_content();
  static const int kContentFieldNumber = 4;
  inline const ::std::string& content() const;
  inline void set_content(const ::std::string& value);
  inline void set_content(const char* value);
  inline void set_content(const char* value, size_t size);
  inline ::std::string* mutable_content();
  inline ::std::string* release_content();
  inline void set_allocated_content(::std::string* content);

  // required int64 create_user_id = 5;
  inline bool has_create_user_id() const;
  inline void clear_create_user_id();
  static const int kCreateUserIdFieldNumber = 5;
  inline ::google::protobuf::int64 create_user_id() const;
  inline void set_create_user_id(::google::protobuf::int64 value);

  // required int32 create_time = 6;
  inline bool has_create_time() const;
  inline void clear_create_time();
  static const int kCreateTimeFieldNumber = 6;
  inline ::google::protobuf::int32 create_time() const;
  inline void set_create_time(::google::protobuf::int32 value);

  // optional .weizhu.community.Comment.State state = 7 [default = NORMAL];
  inline bool has_state() const;
  inline void clear_state();
  static const int kStateFieldNumber = 7;
  inline ::weizhu::community::Comment_State state() const;
  inline void set_state(::weizhu::community::Comment_State value);

  // optional int32 like_count = 8;
  inline bool has_like_count() const;
  inline void clear_like_count();
  static const int kLikeCountFieldNumber = 8;
  inline ::google::protobuf::int32 like_count() const;
  inline void set_like_count(::google::protobuf::int32 value);

  // optional bool is_like = 9;
  inline bool has_is_like() const;
  inline void clear_is_like();
  static const int kIsLikeFieldNumber = 9;
  inline bool is_like() const;
  inline void set_is_like(bool value);

  // @@protoc_insertion_point(class_scope:weizhu.community.Comment)
 private:
  inline void set_has_post_id();
  inline void clear_has_post_id();
  inline void set_has_comment_id();
  inline void clear_has_comment_id();
  inline void set_has_reply_comment_id();
  inline void clear_has_reply_comment_id();
  inline void set_has_content();
  inline void clear_has_content();
  inline void set_has_create_user_id();
  inline void clear_has_create_user_id();
  inline void set_has_create_time();
  inline void clear_has_create_time();
  inline void set_has_state();
  inline void clear_has_state();
  inline void set_has_like_count();
  inline void clear_has_like_count();
  inline void set_has_is_like();
  inline void clear_has_is_like();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 post_id_;
  ::google::protobuf::int32 comment_id_;
  ::std::string* content_;
  ::google::protobuf::int32 reply_comment_id_;
  ::google::protobuf::int32 create_time_;
  ::google::protobuf::int64 create_user_id_;
  int state_;
  ::google::protobuf::int32 like_count_;
  bool is_like_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_community_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_community_2eproto();
  #endif
  friend void protobuf_AssignDesc_community_2eproto();
  friend void protobuf_ShutdownFile_community_2eproto();

  void InitAsDefaultInstance();
  static Comment* default_instance_;
};
// -------------------------------------------------------------------

class PostLike : public ::google::protobuf::MessageLite {
 public:
  PostLike();
  virtual ~PostLike();

  PostLike(const PostLike& from);

  inline PostLike& operator=(const PostLike& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const PostLike& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const PostLike* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(PostLike* other);

  // implements Message ----------------------------------------------

  PostLike* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const PostLike& from);
  void MergeFrom(const PostLike& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 post_id = 1;
  inline bool has_post_id() const;
  inline void clear_post_id();
  static const int kPostIdFieldNumber = 1;
  inline ::google::protobuf::int32 post_id() const;
  inline void set_post_id(::google::protobuf::int32 value);

  // required int64 user_id = 2;
  inline bool has_user_id() const;
  inline void clear_user_id();
  static const int kUserIdFieldNumber = 2;
  inline ::google::protobuf::int64 user_id() const;
  inline void set_user_id(::google::protobuf::int64 value);

  // required int32 create_time = 3;
  inline bool has_create_time() const;
  inline void clear_create_time();
  static const int kCreateTimeFieldNumber = 3;
  inline ::google::protobuf::int32 create_time() const;
  inline void set_create_time(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:weizhu.community.PostLike)
 private:
  inline void set_has_post_id();
  inline void clear_has_post_id();
  inline void set_has_user_id();
  inline void clear_has_user_id();
  inline void set_has_create_time();
  inline void clear_has_create_time();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int64 user_id_;
  ::google::protobuf::int32 post_id_;
  ::google::protobuf::int32 create_time_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_community_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_community_2eproto();
  #endif
  friend void protobuf_AssignDesc_community_2eproto();
  friend void protobuf_ShutdownFile_community_2eproto();

  void InitAsDefaultInstance();
  static PostLike* default_instance_;
};
// -------------------------------------------------------------------

class CommunityPostMessagePush : public ::google::protobuf::MessageLite {
 public:
  CommunityPostMessagePush();
  virtual ~CommunityPostMessagePush();

  CommunityPostMessagePush(const CommunityPostMessagePush& from);

  inline CommunityPostMessagePush& operator=(const CommunityPostMessagePush& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const CommunityPostMessagePush& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const CommunityPostMessagePush* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(CommunityPostMessagePush* other);

  // implements Message ----------------------------------------------

  CommunityPostMessagePush* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const CommunityPostMessagePush& from);
  void MergeFrom(const CommunityPostMessagePush& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 post_id = 1;
  inline bool has_post_id() const;
  inline void clear_post_id();
  static const int kPostIdFieldNumber = 1;
  inline ::google::protobuf::int32 post_id() const;
  inline void set_post_id(::google::protobuf::int32 value);

  // required int32 comment_id = 2;
  inline bool has_comment_id() const;
  inline void clear_comment_id();
  static const int kCommentIdFieldNumber = 2;
  inline ::google::protobuf::int32 comment_id() const;
  inline void set_comment_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:weizhu.community.CommunityPostMessagePush)
 private:
  inline void set_has_post_id();
  inline void clear_has_post_id();
  inline void set_has_comment_id();
  inline void clear_has_comment_id();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 post_id_;
  ::google::protobuf::int32 comment_id_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_community_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_community_2eproto();
  #endif
  friend void protobuf_AssignDesc_community_2eproto();
  friend void protobuf_ShutdownFile_community_2eproto();

  void InitAsDefaultInstance();
  static CommunityPostMessagePush* default_instance_;
};
// -------------------------------------------------------------------

class CommunityCommentMessagePush : public ::google::protobuf::MessageLite {
 public:
  CommunityCommentMessagePush();
  virtual ~CommunityCommentMessagePush();

  CommunityCommentMessagePush(const CommunityCommentMessagePush& from);

  inline CommunityCommentMessagePush& operator=(const CommunityCommentMessagePush& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const CommunityCommentMessagePush& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const CommunityCommentMessagePush* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(CommunityCommentMessagePush* other);

  // implements Message ----------------------------------------------

  CommunityCommentMessagePush* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const CommunityCommentMessagePush& from);
  void MergeFrom(const CommunityCommentMessagePush& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 post_id = 1;
  inline bool has_post_id() const;
  inline void clear_post_id();
  static const int kPostIdFieldNumber = 1;
  inline ::google::protobuf::int32 post_id() const;
  inline void set_post_id(::google::protobuf::int32 value);

  // required int32 comment_id = 2;
  inline bool has_comment_id() const;
  inline void clear_comment_id();
  static const int kCommentIdFieldNumber = 2;
  inline ::google::protobuf::int32 comment_id() const;
  inline void set_comment_id(::google::protobuf::int32 value);

  // required int32 reply_comment_id = 3;
  inline bool has_reply_comment_id() const;
  inline void clear_reply_comment_id();
  static const int kReplyCommentIdFieldNumber = 3;
  inline ::google::protobuf::int32 reply_comment_id() const;
  inline void set_reply_comment_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:weizhu.community.CommunityCommentMessagePush)
 private:
  inline void set_has_post_id();
  inline void clear_has_post_id();
  inline void set_has_comment_id();
  inline void clear_has_comment_id();
  inline void set_has_reply_comment_id();
  inline void clear_has_reply_comment_id();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 post_id_;
  ::google::protobuf::int32 comment_id_;
  ::google::protobuf::int32 reply_comment_id_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_community_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_community_2eproto();
  #endif
  friend void protobuf_AssignDesc_community_2eproto();
  friend void protobuf_ShutdownFile_community_2eproto();

  void InitAsDefaultInstance();
  static CommunityCommentMessagePush* default_instance_;
};
// -------------------------------------------------------------------

class GetCommunityRequest : public ::google::protobuf::MessageLite {
 public:
  GetCommunityRequest();
  virtual ~GetCommunityRequest();

  GetCommunityRequest(const GetCommunityRequest& from);

  inline GetCommunityRequest& operator=(const GetCommunityRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const GetCommunityRequest& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const GetCommunityRequest* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(GetCommunityRequest* other);

  // implements Message ----------------------------------------------

  GetCommunityRequest* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const GetCommunityRequest& from);
  void MergeFrom(const GetCommunityRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int32 board_latest_post_id = 1;
  inline int board_latest_post_id_size() const;
  inline void clear_board_latest_post_id();
  static const int kBoardLatestPostIdFieldNumber = 1;
  inline ::google::protobuf::int32 board_latest_post_id(int index) const;
  inline void set_board_latest_post_id(int index, ::google::protobuf::int32 value);
  inline void add_board_latest_post_id(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      board_latest_post_id() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_board_latest_post_id();

  // @@protoc_insertion_point(class_scope:weizhu.community.GetCommunityRequest)
 private:

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > board_latest_post_id_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_community_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_community_2eproto();
  #endif
  friend void protobuf_AssignDesc_community_2eproto();
  friend void protobuf_ShutdownFile_community_2eproto();

  void InitAsDefaultInstance();
  static GetCommunityRequest* default_instance_;
};
// -------------------------------------------------------------------

class GetCommunityResponse : public ::google::protobuf::MessageLite {
 public:
  GetCommunityResponse();
  virtual ~GetCommunityResponse();

  GetCommunityResponse(const GetCommunityResponse& from);

  inline GetCommunityResponse& operator=(const GetCommunityResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const GetCommunityResponse& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const GetCommunityResponse* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(GetCommunityResponse* other);

  // implements Message ----------------------------------------------

  GetCommunityResponse* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const GetCommunityResponse& from);
  void MergeFrom(const GetCommunityResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string community_name = 1;
  inline bool has_community_name() const;
  inline void clear_community_name();
  static const int kCommunityNameFieldNumber = 1;
  inline const ::std::string& community_name() const;
  inline void set_community_name(const ::std::string& value);
  inline void set_community_name(const char* value);
  inline void set_community_name(const char* value, size_t size);
  inline ::std::string* mutable_community_name();
  inline ::std::string* release_community_name();
  inline void set_allocated_community_name(::std::string* community_name);

  // required int32 post_new_count = 2;
  inline bool has_post_new_count() const;
  inline void clear_post_new_count();
  static const int kPostNewCountFieldNumber = 2;
  inline ::google::protobuf::int32 post_new_count() const;
  inline void set_post_new_count(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:weizhu.community.GetCommunityResponse)
 private:
  inline void set_has_community_name();
  inline void clear_has_community_name();
  inline void set_has_post_new_count();
  inline void clear_has_post_new_count();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* community_name_;
  ::google::protobuf::int32 post_new_count_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_community_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_community_2eproto();
  #endif
  friend void protobuf_AssignDesc_community_2eproto();
  friend void protobuf_ShutdownFile_community_2eproto();

  void InitAsDefaultInstance();
  static GetCommunityResponse* default_instance_;
};
// -------------------------------------------------------------------

class GetBoardListRequest : public ::google::protobuf::MessageLite {
 public:
  GetBoardListRequest();
  virtual ~GetBoardListRequest();

  GetBoardListRequest(const GetBoardListRequest& from);

  inline GetBoardListRequest& operator=(const GetBoardListRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const GetBoardListRequest& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const GetBoardListRequest* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(GetBoardListRequest* other);

  // implements Message ----------------------------------------------

  GetBoardListRequest* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const GetBoardListRequest& from);
  void MergeFrom(const GetBoardListRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int32 board_latest_post_id = 1;
  inline int board_latest_post_id_size() const;
  inline void clear_board_latest_post_id();
  static const int kBoardLatestPostIdFieldNumber = 1;
  inline ::google::protobuf::int32 board_latest_post_id(int index) const;
  inline void set_board_latest_post_id(int index, ::google::protobuf::int32 value);
  inline void add_board_latest_post_id(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      board_latest_post_id() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_board_latest_post_id();

  // @@protoc_insertion_point(class_scope:weizhu.community.GetBoardListRequest)
 private:

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > board_latest_post_id_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_community_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_community_2eproto();
  #endif
  friend void protobuf_AssignDesc_community_2eproto();
  friend void protobuf_ShutdownFile_community_2eproto();

  void InitAsDefaultInstance();
  static GetBoardListRequest* default_instance_;
};
// -------------------------------------------------------------------

class GetBoardListResponse : public ::google::protobuf::MessageLite {
 public:
  GetBoardListResponse();
  virtual ~GetBoardListResponse();

  GetBoardListResponse(const GetBoardListResponse& from);

  inline GetBoardListResponse& operator=(const GetBoardListResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const GetBoardListResponse& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const GetBoardListResponse* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(GetBoardListResponse* other);

  // implements Message ----------------------------------------------

  GetBoardListResponse* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const GetBoardListResponse& from);
  void MergeFrom(const GetBoardListResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .weizhu.community.Board board = 1;
  inline int board_size() const;
  inline void clear_board();
  static const int kBoardFieldNumber = 1;
  inline const ::weizhu::community::Board& board(int index) const;
  inline ::weizhu::community::Board* mutable_board(int index);
  inline ::weizhu::community::Board* add_board();
  inline const ::google::protobuf::RepeatedPtrField< ::weizhu::community::Board >&
      board() const;
  inline ::google::protobuf::RepeatedPtrField< ::weizhu::community::Board >*
      mutable_board();

  // @@protoc_insertion_point(class_scope:weizhu.community.GetBoardListResponse)
 private:

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::weizhu::community::Board > board_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_community_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_community_2eproto();
  #endif
  friend void protobuf_AssignDesc_community_2eproto();
  friend void protobuf_ShutdownFile_community_2eproto();

  void InitAsDefaultInstance();
  static GetBoardListResponse* default_instance_;
};
// -------------------------------------------------------------------

class GetPostListRequest : public ::google::protobuf::MessageLite {
 public:
  GetPostListRequest();
  virtual ~GetPostListRequest();

  GetPostListRequest(const GetPostListRequest& from);

  inline GetPostListRequest& operator=(const GetPostListRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const GetPostListRequest& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const GetPostListRequest* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(GetPostListRequest* other);

  // implements Message ----------------------------------------------

  GetPostListRequest* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const GetPostListRequest& from);
  void MergeFrom(const GetPostListRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  typedef GetPostListRequest_ListType ListType;
  static const ListType CREATE_TIME = GetPostListRequest_ListType_CREATE_TIME;
  static const ListType TOP_HOT = GetPostListRequest_ListType_TOP_HOT;
  static inline bool ListType_IsValid(int value) {
    return GetPostListRequest_ListType_IsValid(value);
  }
  static const ListType ListType_MIN =
    GetPostListRequest_ListType_ListType_MIN;
  static const ListType ListType_MAX =
    GetPostListRequest_ListType_ListType_MAX;
  static const int ListType_ARRAYSIZE =
    GetPostListRequest_ListType_ListType_ARRAYSIZE;

  // accessors -------------------------------------------------------

  // required int32 board_id = 1;
  inline bool has_board_id() const;
  inline void clear_board_id();
  static const int kBoardIdFieldNumber = 1;
  inline ::google::protobuf::int32 board_id() const;
  inline void set_board_id(::google::protobuf::int32 value);

  // required .weizhu.community.GetPostListRequest.ListType list_type = 2;
  inline bool has_list_type() const;
  inline void clear_list_type();
  static const int kListTypeFieldNumber = 2;
  inline ::weizhu::community::GetPostListRequest_ListType list_type() const;
  inline void set_list_type(::weizhu::community::GetPostListRequest_ListType value);

  // required int32 size = 3;
  inline bool has_size() const;
  inline void clear_size();
  static const int kSizeFieldNumber = 3;
  inline ::google::protobuf::int32 size() const;
  inline void set_size(::google::protobuf::int32 value);

  // optional bytes offset_index = 4;
  inline bool has_offset_index() const;
  inline void clear_offset_index();
  static const int kOffsetIndexFieldNumber = 4;
  inline const ::std::string& offset_index() const;
  inline void set_offset_index(const ::std::string& value);
  inline void set_offset_index(const char* value);
  inline void set_offset_index(const void* value, size_t size);
  inline ::std::string* mutable_offset_index();
  inline ::std::string* release_offset_index();
  inline void set_allocated_offset_index(::std::string* offset_index);

  // @@protoc_insertion_point(class_scope:weizhu.community.GetPostListRequest)
 private:
  inline void set_has_board_id();
  inline void clear_has_board_id();
  inline void set_has_list_type();
  inline void clear_has_list_type();
  inline void set_has_size();
  inline void clear_has_size();
  inline void set_has_offset_index();
  inline void clear_has_offset_index();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 board_id_;
  int list_type_;
  ::std::string* offset_index_;
  ::google::protobuf::int32 size_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_community_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_community_2eproto();
  #endif
  friend void protobuf_AssignDesc_community_2eproto();
  friend void protobuf_ShutdownFile_community_2eproto();

  void InitAsDefaultInstance();
  static GetPostListRequest* default_instance_;
};
// -------------------------------------------------------------------

class GetPostListResponse : public ::google::protobuf::MessageLite {
 public:
  GetPostListResponse();
  virtual ~GetPostListResponse();

  GetPostListResponse(const GetPostListResponse& from);

  inline GetPostListResponse& operator=(const GetPostListResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const GetPostListResponse& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const GetPostListResponse* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(GetPostListResponse* other);

  // implements Message ----------------------------------------------

  GetPostListResponse* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const GetPostListResponse& from);
  void MergeFrom(const GetPostListResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .weizhu.community.Post post = 1;
  inline int post_size() const;
  inline void clear_post();
  static const int kPostFieldNumber = 1;
  inline const ::weizhu::community::Post& post(int index) const;
  inline ::weizhu::community::Post* mutable_post(int index);
  inline ::weizhu::community::Post* add_post();
  inline const ::google::protobuf::RepeatedPtrField< ::weizhu::community::Post >&
      post() const;
  inline ::google::protobuf::RepeatedPtrField< ::weizhu::community::Post >*
      mutable_post();

  // required bool has_more = 2;
  inline bool has_has_more() const;
  inline void clear_has_more();
  static const int kHasMoreFieldNumber = 2;
  inline bool has_more() const;
  inline void set_has_more(bool value);

  // required bytes offset_index = 3;
  inline bool has_offset_index() const;
  inline void clear_offset_index();
  static const int kOffsetIndexFieldNumber = 3;
  inline const ::std::string& offset_index() const;
  inline void set_offset_index(const ::std::string& value);
  inline void set_offset_index(const char* value);
  inline void set_offset_index(const void* value, size_t size);
  inline ::std::string* mutable_offset_index();
  inline ::std::string* release_offset_index();
  inline void set_allocated_offset_index(::std::string* offset_index);

  // @@protoc_insertion_point(class_scope:weizhu.community.GetPostListResponse)
 private:
  inline void set_has_has_more();
  inline void clear_has_has_more();
  inline void set_has_offset_index();
  inline void clear_has_offset_index();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::weizhu::community::Post > post_;
  ::std::string* offset_index_;
  bool has_more_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_community_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_community_2eproto();
  #endif
  friend void protobuf_AssignDesc_community_2eproto();
  friend void protobuf_ShutdownFile_community_2eproto();

  void InitAsDefaultInstance();
  static GetPostListResponse* default_instance_;
};
// -------------------------------------------------------------------

class GetCommentListRequest : public ::google::protobuf::MessageLite {
 public:
  GetCommentListRequest();
  virtual ~GetCommentListRequest();

  GetCommentListRequest(const GetCommentListRequest& from);

  inline GetCommentListRequest& operator=(const GetCommentListRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const GetCommentListRequest& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const GetCommentListRequest* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(GetCommentListRequest* other);

  // implements Message ----------------------------------------------

  GetCommentListRequest* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const GetCommentListRequest& from);
  void MergeFrom(const GetCommentListRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 post_id = 1;
  inline bool has_post_id() const;
  inline void clear_post_id();
  static const int kPostIdFieldNumber = 1;
  inline ::google::protobuf::int32 post_id() const;
  inline void set_post_id(::google::protobuf::int32 value);

  // required int32 size = 2;
  inline bool has_size() const;
  inline void clear_size();
  static const int kSizeFieldNumber = 2;
  inline ::google::protobuf::int32 size() const;
  inline void set_size(::google::protobuf::int32 value);

  // optional bytes offset_index = 3;
  inline bool has_offset_index() const;
  inline void clear_offset_index();
  static const int kOffsetIndexFieldNumber = 3;
  inline const ::std::string& offset_index() const;
  inline void set_offset_index(const ::std::string& value);
  inline void set_offset_index(const char* value);
  inline void set_offset_index(const void* value, size_t size);
  inline ::std::string* mutable_offset_index();
  inline ::std::string* release_offset_index();
  inline void set_allocated_offset_index(::std::string* offset_index);

  // @@protoc_insertion_point(class_scope:weizhu.community.GetCommentListRequest)
 private:
  inline void set_has_post_id();
  inline void clear_has_post_id();
  inline void set_has_size();
  inline void clear_has_size();
  inline void set_has_offset_index();
  inline void clear_has_offset_index();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 post_id_;
  ::google::protobuf::int32 size_;
  ::std::string* offset_index_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_community_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_community_2eproto();
  #endif
  friend void protobuf_AssignDesc_community_2eproto();
  friend void protobuf_ShutdownFile_community_2eproto();

  void InitAsDefaultInstance();
  static GetCommentListRequest* default_instance_;
};
// -------------------------------------------------------------------

class GetCommentListResponse : public ::google::protobuf::MessageLite {
 public:
  GetCommentListResponse();
  virtual ~GetCommentListResponse();

  GetCommentListResponse(const GetCommentListResponse& from);

  inline GetCommentListResponse& operator=(const GetCommentListResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const GetCommentListResponse& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const GetCommentListResponse* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(GetCommentListResponse* other);

  // implements Message ----------------------------------------------

  GetCommentListResponse* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const GetCommentListResponse& from);
  void MergeFrom(const GetCommentListResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .weizhu.community.Comment comment = 1;
  inline int comment_size() const;
  inline void clear_comment();
  static const int kCommentFieldNumber = 1;
  inline const ::weizhu::community::Comment& comment(int index) const;
  inline ::weizhu::community::Comment* mutable_comment(int index);
  inline ::weizhu::community::Comment* add_comment();
  inline const ::google::protobuf::RepeatedPtrField< ::weizhu::community::Comment >&
      comment() const;
  inline ::google::protobuf::RepeatedPtrField< ::weizhu::community::Comment >*
      mutable_comment();

  // required bool has_more = 2;
  inline bool has_has_more() const;
  inline void clear_has_more();
  static const int kHasMoreFieldNumber = 2;
  inline bool has_more() const;
  inline void set_has_more(bool value);

  // required bytes offset_index = 3;
  inline bool has_offset_index() const;
  inline void clear_offset_index();
  static const int kOffsetIndexFieldNumber = 3;
  inline const ::std::string& offset_index() const;
  inline void set_offset_index(const ::std::string& value);
  inline void set_offset_index(const char* value);
  inline void set_offset_index(const void* value, size_t size);
  inline ::std::string* mutable_offset_index();
  inline ::std::string* release_offset_index();
  inline void set_allocated_offset_index(::std::string* offset_index);

  // @@protoc_insertion_point(class_scope:weizhu.community.GetCommentListResponse)
 private:
  inline void set_has_has_more();
  inline void clear_has_has_more();
  inline void set_has_offset_index();
  inline void clear_has_offset_index();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::weizhu::community::Comment > comment_;
  ::std::string* offset_index_;
  bool has_more_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_community_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_community_2eproto();
  #endif
  friend void protobuf_AssignDesc_community_2eproto();
  friend void protobuf_ShutdownFile_community_2eproto();

  void InitAsDefaultInstance();
  static GetCommentListResponse* default_instance_;
};
// -------------------------------------------------------------------

class GetHotCommentListRequest : public ::google::protobuf::MessageLite {
 public:
  GetHotCommentListRequest();
  virtual ~GetHotCommentListRequest();

  GetHotCommentListRequest(const GetHotCommentListRequest& from);

  inline GetHotCommentListRequest& operator=(const GetHotCommentListRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const GetHotCommentListRequest& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const GetHotCommentListRequest* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(GetHotCommentListRequest* other);

  // implements Message ----------------------------------------------

  GetHotCommentListRequest* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const GetHotCommentListRequest& from);
  void MergeFrom(const GetHotCommentListRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 post_id = 1;
  inline bool has_post_id() const;
  inline void clear_post_id();
  static const int kPostIdFieldNumber = 1;
  inline ::google::protobuf::int32 post_id() const;
  inline void set_post_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:weizhu.community.GetHotCommentListRequest)
 private:
  inline void set_has_post_id();
  inline void clear_has_post_id();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 post_id_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_community_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_community_2eproto();
  #endif
  friend void protobuf_AssignDesc_community_2eproto();
  friend void protobuf_ShutdownFile_community_2eproto();

  void InitAsDefaultInstance();
  static GetHotCommentListRequest* default_instance_;
};
// -------------------------------------------------------------------

class GetHotCommentListResponse : public ::google::protobuf::MessageLite {
 public:
  GetHotCommentListResponse();
  virtual ~GetHotCommentListResponse();

  GetHotCommentListResponse(const GetHotCommentListResponse& from);

  inline GetHotCommentListResponse& operator=(const GetHotCommentListResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const GetHotCommentListResponse& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const GetHotCommentListResponse* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(GetHotCommentListResponse* other);

  // implements Message ----------------------------------------------

  GetHotCommentListResponse* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const GetHotCommentListResponse& from);
  void MergeFrom(const GetHotCommentListResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .weizhu.community.Comment comment = 1;
  inline int comment_size() const;
  inline void clear_comment();
  static const int kCommentFieldNumber = 1;
  inline const ::weizhu::community::Comment& comment(int index) const;
  inline ::weizhu::community::Comment* mutable_comment(int index);
  inline ::weizhu::community::Comment* add_comment();
  inline const ::google::protobuf::RepeatedPtrField< ::weizhu::community::Comment >&
      comment() const;
  inline ::google::protobuf::RepeatedPtrField< ::weizhu::community::Comment >*
      mutable_comment();

  // @@protoc_insertion_point(class_scope:weizhu.community.GetHotCommentListResponse)
 private:

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::weizhu::community::Comment > comment_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_community_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_community_2eproto();
  #endif
  friend void protobuf_AssignDesc_community_2eproto();
  friend void protobuf_ShutdownFile_community_2eproto();

  void InitAsDefaultInstance();
  static GetHotCommentListResponse* default_instance_;
};
// -------------------------------------------------------------------

class CreatePostRequest : public ::google::protobuf::MessageLite {
 public:
  CreatePostRequest();
  virtual ~CreatePostRequest();

  CreatePostRequest(const CreatePostRequest& from);

  inline CreatePostRequest& operator=(const CreatePostRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const CreatePostRequest& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const CreatePostRequest* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(CreatePostRequest* other);

  // implements Message ----------------------------------------------

  CreatePostRequest* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const CreatePostRequest& from);
  void MergeFrom(const CreatePostRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 board_id = 1;
  inline bool has_board_id() const;
  inline void clear_board_id();
  static const int kBoardIdFieldNumber = 1;
  inline ::google::protobuf::int32 board_id() const;
  inline void set_board_id(::google::protobuf::int32 value);

  // required string title = 2;
  inline bool has_title() const;
  inline void clear_title();
  static const int kTitleFieldNumber = 2;
  inline const ::std::string& title() const;
  inline void set_title(const ::std::string& value);
  inline void set_title(const char* value);
  inline void set_title(const char* value, size_t size);
  inline ::std::string* mutable_title();
  inline ::std::string* release_title();
  inline void set_allocated_title(::std::string* title);

  // optional string text = 3;
  inline bool has_text() const;
  inline void clear_text();
  static const int kTextFieldNumber = 3;
  inline const ::std::string& text() const;
  inline void set_text(const ::std::string& value);
  inline void set_text(const char* value);
  inline void set_text(const char* value, size_t size);
  inline ::std::string* mutable_text();
  inline ::std::string* release_text();
  inline void set_allocated_text(::std::string* text);

  // optional string image_name = 4;
  inline bool has_image_name() const;
  inline void clear_image_name();
  static const int kImageNameFieldNumber = 4;
  inline const ::std::string& image_name() const;
  inline void set_image_name(const ::std::string& value);
  inline void set_image_name(const char* value);
  inline void set_image_name(const char* value, size_t size);
  inline ::std::string* mutable_image_name();
  inline ::std::string* release_image_name();
  inline void set_allocated_image_name(::std::string* image_name);

  // repeated string tag = 5;
  inline int tag_size() const;
  inline void clear_tag();
  static const int kTagFieldNumber = 5;
  inline const ::std::string& tag(int index) const;
  inline ::std::string* mutable_tag(int index);
  inline void set_tag(int index, const ::std::string& value);
  inline void set_tag(int index, const char* value);
  inline void set_tag(int index, const char* value, size_t size);
  inline ::std::string* add_tag();
  inline void add_tag(const ::std::string& value);
  inline void add_tag(const char* value);
  inline void add_tag(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& tag() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_tag();

  // @@protoc_insertion_point(class_scope:weizhu.community.CreatePostRequest)
 private:
  inline void set_has_board_id();
  inline void clear_has_board_id();
  inline void set_has_title();
  inline void clear_has_title();
  inline void set_has_text();
  inline void clear_has_text();
  inline void set_has_image_name();
  inline void clear_has_image_name();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* title_;
  ::std::string* text_;
  ::std::string* image_name_;
  ::google::protobuf::RepeatedPtrField< ::std::string> tag_;
  ::google::protobuf::int32 board_id_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_community_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_community_2eproto();
  #endif
  friend void protobuf_AssignDesc_community_2eproto();
  friend void protobuf_ShutdownFile_community_2eproto();

  void InitAsDefaultInstance();
  static CreatePostRequest* default_instance_;
};
// -------------------------------------------------------------------

class CreatePostResponse : public ::google::protobuf::MessageLite {
 public:
  CreatePostResponse();
  virtual ~CreatePostResponse();

  CreatePostResponse(const CreatePostResponse& from);

  inline CreatePostResponse& operator=(const CreatePostResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const CreatePostResponse& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const CreatePostResponse* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(CreatePostResponse* other);

  // implements Message ----------------------------------------------

  CreatePostResponse* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const CreatePostResponse& from);
  void MergeFrom(const CreatePostResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  typedef CreatePostResponse_Result Result;
  static const Result SUCC = CreatePostResponse_Result_SUCC;
  static const Result FAIL_BOARD_INVALID = CreatePostResponse_Result_FAIL_BOARD_INVALID;
  static const Result FAIL_TITLE_INVALID = CreatePostResponse_Result_FAIL_TITLE_INVALID;
  static const Result FAIL_TEXT_INVALID = CreatePostResponse_Result_FAIL_TEXT_INVALID;
  static const Result FAIL_IMAGE_INVALID = CreatePostResponse_Result_FAIL_IMAGE_INVALID;
  static const Result FAIL_TAG_INVALID = CreatePostResponse_Result_FAIL_TAG_INVALID;
  static const Result FAIL_UNKNOWN = CreatePostResponse_Result_FAIL_UNKNOWN;
  static inline bool Result_IsValid(int value) {
    return CreatePostResponse_Result_IsValid(value);
  }
  static const Result Result_MIN =
    CreatePostResponse_Result_Result_MIN;
  static const Result Result_MAX =
    CreatePostResponse_Result_Result_MAX;
  static const int Result_ARRAYSIZE =
    CreatePostResponse_Result_Result_ARRAYSIZE;

  // accessors -------------------------------------------------------

  // optional .weizhu.community.CreatePostResponse.Result result = 1 [default = FAIL_UNKNOWN];
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::weizhu::community::CreatePostResponse_Result result() const;
  inline void set_result(::weizhu::community::CreatePostResponse_Result value);

  // optional string fail_text = 2;
  inline bool has_fail_text() const;
  inline void clear_fail_text();
  static const int kFailTextFieldNumber = 2;
  inline const ::std::string& fail_text() const;
  inline void set_fail_text(const ::std::string& value);
  inline void set_fail_text(const char* value);
  inline void set_fail_text(const char* value, size_t size);
  inline ::std::string* mutable_fail_text();
  inline ::std::string* release_fail_text();
  inline void set_allocated_fail_text(::std::string* fail_text);

  // optional int32 post_id = 3;
  inline bool has_post_id() const;
  inline void clear_post_id();
  static const int kPostIdFieldNumber = 3;
  inline ::google::protobuf::int32 post_id() const;
  inline void set_post_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:weizhu.community.CreatePostResponse)
 private:
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_fail_text();
  inline void clear_has_fail_text();
  inline void set_has_post_id();
  inline void clear_has_post_id();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* fail_text_;
  int result_;
  ::google::protobuf::int32 post_id_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_community_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_community_2eproto();
  #endif
  friend void protobuf_AssignDesc_community_2eproto();
  friend void protobuf_ShutdownFile_community_2eproto();

  void InitAsDefaultInstance();
  static CreatePostResponse* default_instance_;
};
// -------------------------------------------------------------------

class DeletePostRequest : public ::google::protobuf::MessageLite {
 public:
  DeletePostRequest();
  virtual ~DeletePostRequest();

  DeletePostRequest(const DeletePostRequest& from);

  inline DeletePostRequest& operator=(const DeletePostRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const DeletePostRequest& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const DeletePostRequest* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(DeletePostRequest* other);

  // implements Message ----------------------------------------------

  DeletePostRequest* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const DeletePostRequest& from);
  void MergeFrom(const DeletePostRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 post_id = 1;
  inline bool has_post_id() const;
  inline void clear_post_id();
  static const int kPostIdFieldNumber = 1;
  inline ::google::protobuf::int32 post_id() const;
  inline void set_post_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:weizhu.community.DeletePostRequest)
 private:
  inline void set_has_post_id();
  inline void clear_has_post_id();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 post_id_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_community_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_community_2eproto();
  #endif
  friend void protobuf_AssignDesc_community_2eproto();
  friend void protobuf_ShutdownFile_community_2eproto();

  void InitAsDefaultInstance();
  static DeletePostRequest* default_instance_;
};
// -------------------------------------------------------------------

class DeletePostResponse : public ::google::protobuf::MessageLite {
 public:
  DeletePostResponse();
  virtual ~DeletePostResponse();

  DeletePostResponse(const DeletePostResponse& from);

  inline DeletePostResponse& operator=(const DeletePostResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const DeletePostResponse& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const DeletePostResponse* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(DeletePostResponse* other);

  // implements Message ----------------------------------------------

  DeletePostResponse* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const DeletePostResponse& from);
  void MergeFrom(const DeletePostResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  typedef DeletePostResponse_Result Result;
  static const Result SUCC = DeletePostResponse_Result_SUCC;
  static const Result FAIL_POST_NOT_EXIST = DeletePostResponse_Result_FAIL_POST_NOT_EXIST;
  static const Result FAIL_POST_OTHER = DeletePostResponse_Result_FAIL_POST_OTHER;
  static const Result FAIL_UNKNOWN = DeletePostResponse_Result_FAIL_UNKNOWN;
  static inline bool Result_IsValid(int value) {
    return DeletePostResponse_Result_IsValid(value);
  }
  static const Result Result_MIN =
    DeletePostResponse_Result_Result_MIN;
  static const Result Result_MAX =
    DeletePostResponse_Result_Result_MAX;
  static const int Result_ARRAYSIZE =
    DeletePostResponse_Result_Result_ARRAYSIZE;

  // accessors -------------------------------------------------------

  // optional .weizhu.community.DeletePostResponse.Result result = 1 [default = FAIL_UNKNOWN];
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::weizhu::community::DeletePostResponse_Result result() const;
  inline void set_result(::weizhu::community::DeletePostResponse_Result value);

  // optional string fail_text = 2;
  inline bool has_fail_text() const;
  inline void clear_fail_text();
  static const int kFailTextFieldNumber = 2;
  inline const ::std::string& fail_text() const;
  inline void set_fail_text(const ::std::string& value);
  inline void set_fail_text(const char* value);
  inline void set_fail_text(const char* value, size_t size);
  inline ::std::string* mutable_fail_text();
  inline ::std::string* release_fail_text();
  inline void set_allocated_fail_text(::std::string* fail_text);

  // @@protoc_insertion_point(class_scope:weizhu.community.DeletePostResponse)
 private:
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_fail_text();
  inline void clear_has_fail_text();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* fail_text_;
  int result_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_community_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_community_2eproto();
  #endif
  friend void protobuf_AssignDesc_community_2eproto();
  friend void protobuf_ShutdownFile_community_2eproto();

  void InitAsDefaultInstance();
  static DeletePostResponse* default_instance_;
};
// -------------------------------------------------------------------

class LikePostRequest : public ::google::protobuf::MessageLite {
 public:
  LikePostRequest();
  virtual ~LikePostRequest();

  LikePostRequest(const LikePostRequest& from);

  inline LikePostRequest& operator=(const LikePostRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const LikePostRequest& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const LikePostRequest* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(LikePostRequest* other);

  // implements Message ----------------------------------------------

  LikePostRequest* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const LikePostRequest& from);
  void MergeFrom(const LikePostRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 post_id = 1;
  inline bool has_post_id() const;
  inline void clear_post_id();
  static const int kPostIdFieldNumber = 1;
  inline ::google::protobuf::int32 post_id() const;
  inline void set_post_id(::google::protobuf::int32 value);

  // required bool is_like = 2;
  inline bool has_is_like() const;
  inline void clear_is_like();
  static const int kIsLikeFieldNumber = 2;
  inline bool is_like() const;
  inline void set_is_like(bool value);

  // @@protoc_insertion_point(class_scope:weizhu.community.LikePostRequest)
 private:
  inline void set_has_post_id();
  inline void clear_has_post_id();
  inline void set_has_is_like();
  inline void clear_has_is_like();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 post_id_;
  bool is_like_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_community_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_community_2eproto();
  #endif
  friend void protobuf_AssignDesc_community_2eproto();
  friend void protobuf_ShutdownFile_community_2eproto();

  void InitAsDefaultInstance();
  static LikePostRequest* default_instance_;
};
// -------------------------------------------------------------------

class LikePostResponse : public ::google::protobuf::MessageLite {
 public:
  LikePostResponse();
  virtual ~LikePostResponse();

  LikePostResponse(const LikePostResponse& from);

  inline LikePostResponse& operator=(const LikePostResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const LikePostResponse& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const LikePostResponse* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(LikePostResponse* other);

  // implements Message ----------------------------------------------

  LikePostResponse* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const LikePostResponse& from);
  void MergeFrom(const LikePostResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  typedef LikePostResponse_Result Result;
  static const Result SUCC = LikePostResponse_Result_SUCC;
  static const Result FAIL_POST_NOT_EXIST = LikePostResponse_Result_FAIL_POST_NOT_EXIST;
  static const Result FAIL_UNKNOWN = LikePostResponse_Result_FAIL_UNKNOWN;
  static inline bool Result_IsValid(int value) {
    return LikePostResponse_Result_IsValid(value);
  }
  static const Result Result_MIN =
    LikePostResponse_Result_Result_MIN;
  static const Result Result_MAX =
    LikePostResponse_Result_Result_MAX;
  static const int Result_ARRAYSIZE =
    LikePostResponse_Result_Result_ARRAYSIZE;

  // accessors -------------------------------------------------------

  // optional .weizhu.community.LikePostResponse.Result result = 1 [default = FAIL_UNKNOWN];
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::weizhu::community::LikePostResponse_Result result() const;
  inline void set_result(::weizhu::community::LikePostResponse_Result value);

  // optional string fail_text = 2;
  inline bool has_fail_text() const;
  inline void clear_fail_text();
  static const int kFailTextFieldNumber = 2;
  inline const ::std::string& fail_text() const;
  inline void set_fail_text(const ::std::string& value);
  inline void set_fail_text(const char* value);
  inline void set_fail_text(const char* value, size_t size);
  inline ::std::string* mutable_fail_text();
  inline ::std::string* release_fail_text();
  inline void set_allocated_fail_text(::std::string* fail_text);

  // @@protoc_insertion_point(class_scope:weizhu.community.LikePostResponse)
 private:
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_fail_text();
  inline void clear_has_fail_text();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* fail_text_;
  int result_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_community_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_community_2eproto();
  #endif
  friend void protobuf_AssignDesc_community_2eproto();
  friend void protobuf_ShutdownFile_community_2eproto();

  void InitAsDefaultInstance();
  static LikePostResponse* default_instance_;
};
// -------------------------------------------------------------------

class CreateCommentRequest : public ::google::protobuf::MessageLite {
 public:
  CreateCommentRequest();
  virtual ~CreateCommentRequest();

  CreateCommentRequest(const CreateCommentRequest& from);

  inline CreateCommentRequest& operator=(const CreateCommentRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const CreateCommentRequest& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const CreateCommentRequest* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(CreateCommentRequest* other);

  // implements Message ----------------------------------------------

  CreateCommentRequest* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const CreateCommentRequest& from);
  void MergeFrom(const CreateCommentRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 post_id = 1;
  inline bool has_post_id() const;
  inline void clear_post_id();
  static const int kPostIdFieldNumber = 1;
  inline ::google::protobuf::int32 post_id() const;
  inline void set_post_id(::google::protobuf::int32 value);

  // optional int32 reply_comment_id = 2;
  inline bool has_reply_comment_id() const;
  inline void clear_reply_comment_id();
  static const int kReplyCommentIdFieldNumber = 2;
  inline ::google::protobuf::int32 reply_comment_id() const;
  inline void set_reply_comment_id(::google::protobuf::int32 value);

  // required string content = 3;
  inline bool has_content() const;
  inline void clear_content();
  static const int kContentFieldNumber = 3;
  inline const ::std::string& content() const;
  inline void set_content(const ::std::string& value);
  inline void set_content(const char* value);
  inline void set_content(const char* value, size_t size);
  inline ::std::string* mutable_content();
  inline ::std::string* release_content();
  inline void set_allocated_content(::std::string* content);

  // @@protoc_insertion_point(class_scope:weizhu.community.CreateCommentRequest)
 private:
  inline void set_has_post_id();
  inline void clear_has_post_id();
  inline void set_has_reply_comment_id();
  inline void clear_has_reply_comment_id();
  inline void set_has_content();
  inline void clear_has_content();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 post_id_;
  ::google::protobuf::int32 reply_comment_id_;
  ::std::string* content_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_community_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_community_2eproto();
  #endif
  friend void protobuf_AssignDesc_community_2eproto();
  friend void protobuf_ShutdownFile_community_2eproto();

  void InitAsDefaultInstance();
  static CreateCommentRequest* default_instance_;
};
// -------------------------------------------------------------------

class CreateCommentResponse : public ::google::protobuf::MessageLite {
 public:
  CreateCommentResponse();
  virtual ~CreateCommentResponse();

  CreateCommentResponse(const CreateCommentResponse& from);

  inline CreateCommentResponse& operator=(const CreateCommentResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const CreateCommentResponse& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const CreateCommentResponse* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(CreateCommentResponse* other);

  // implements Message ----------------------------------------------

  CreateCommentResponse* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const CreateCommentResponse& from);
  void MergeFrom(const CreateCommentResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  typedef CreateCommentResponse_Result Result;
  static const Result SUCC = CreateCommentResponse_Result_SUCC;
  static const Result FAIL_POST_NOT_EXIST = CreateCommentResponse_Result_FAIL_POST_NOT_EXIST;
  static const Result FAIL_REPLY_COMMENT_NOT_EXIST = CreateCommentResponse_Result_FAIL_REPLY_COMMENT_NOT_EXIST;
  static const Result FAIL_CONTENT_INVALID = CreateCommentResponse_Result_FAIL_CONTENT_INVALID;
  static const Result FAIL_UNKNOWN = CreateCommentResponse_Result_FAIL_UNKNOWN;
  static inline bool Result_IsValid(int value) {
    return CreateCommentResponse_Result_IsValid(value);
  }
  static const Result Result_MIN =
    CreateCommentResponse_Result_Result_MIN;
  static const Result Result_MAX =
    CreateCommentResponse_Result_Result_MAX;
  static const int Result_ARRAYSIZE =
    CreateCommentResponse_Result_Result_ARRAYSIZE;

  // accessors -------------------------------------------------------

  // optional .weizhu.community.CreateCommentResponse.Result result = 1 [default = FAIL_UNKNOWN];
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::weizhu::community::CreateCommentResponse_Result result() const;
  inline void set_result(::weizhu::community::CreateCommentResponse_Result value);

  // optional string fail_text = 2;
  inline bool has_fail_text() const;
  inline void clear_fail_text();
  static const int kFailTextFieldNumber = 2;
  inline const ::std::string& fail_text() const;
  inline void set_fail_text(const ::std::string& value);
  inline void set_fail_text(const char* value);
  inline void set_fail_text(const char* value, size_t size);
  inline ::std::string* mutable_fail_text();
  inline ::std::string* release_fail_text();
  inline void set_allocated_fail_text(::std::string* fail_text);

  // optional int32 comment_id = 3;
  inline bool has_comment_id() const;
  inline void clear_comment_id();
  static const int kCommentIdFieldNumber = 3;
  inline ::google::protobuf::int32 comment_id() const;
  inline void set_comment_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:weizhu.community.CreateCommentResponse)
 private:
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_fail_text();
  inline void clear_has_fail_text();
  inline void set_has_comment_id();
  inline void clear_has_comment_id();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* fail_text_;
  int result_;
  ::google::protobuf::int32 comment_id_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_community_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_community_2eproto();
  #endif
  friend void protobuf_AssignDesc_community_2eproto();
  friend void protobuf_ShutdownFile_community_2eproto();

  void InitAsDefaultInstance();
  static CreateCommentResponse* default_instance_;
};
// -------------------------------------------------------------------

class DeleteCommentRequest : public ::google::protobuf::MessageLite {
 public:
  DeleteCommentRequest();
  virtual ~DeleteCommentRequest();

  DeleteCommentRequest(const DeleteCommentRequest& from);

  inline DeleteCommentRequest& operator=(const DeleteCommentRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const DeleteCommentRequest& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const DeleteCommentRequest* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(DeleteCommentRequest* other);

  // implements Message ----------------------------------------------

  DeleteCommentRequest* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const DeleteCommentRequest& from);
  void MergeFrom(const DeleteCommentRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 post_id = 1;
  inline bool has_post_id() const;
  inline void clear_post_id();
  static const int kPostIdFieldNumber = 1;
  inline ::google::protobuf::int32 post_id() const;
  inline void set_post_id(::google::protobuf::int32 value);

  // required int32 comment_id = 2;
  inline bool has_comment_id() const;
  inline void clear_comment_id();
  static const int kCommentIdFieldNumber = 2;
  inline ::google::protobuf::int32 comment_id() const;
  inline void set_comment_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:weizhu.community.DeleteCommentRequest)
 private:
  inline void set_has_post_id();
  inline void clear_has_post_id();
  inline void set_has_comment_id();
  inline void clear_has_comment_id();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 post_id_;
  ::google::protobuf::int32 comment_id_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_community_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_community_2eproto();
  #endif
  friend void protobuf_AssignDesc_community_2eproto();
  friend void protobuf_ShutdownFile_community_2eproto();

  void InitAsDefaultInstance();
  static DeleteCommentRequest* default_instance_;
};
// -------------------------------------------------------------------

class DeleteCommentResponse : public ::google::protobuf::MessageLite {
 public:
  DeleteCommentResponse();
  virtual ~DeleteCommentResponse();

  DeleteCommentResponse(const DeleteCommentResponse& from);

  inline DeleteCommentResponse& operator=(const DeleteCommentResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const DeleteCommentResponse& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const DeleteCommentResponse* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(DeleteCommentResponse* other);

  // implements Message ----------------------------------------------

  DeleteCommentResponse* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const DeleteCommentResponse& from);
  void MergeFrom(const DeleteCommentResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  typedef DeleteCommentResponse_Result Result;
  static const Result SUCC = DeleteCommentResponse_Result_SUCC;
  static const Result FAIL_COMMENT_NOT_EXIST = DeleteCommentResponse_Result_FAIL_COMMENT_NOT_EXIST;
  static const Result FAIL_COMMENT_OTHER = DeleteCommentResponse_Result_FAIL_COMMENT_OTHER;
  static const Result FAIL_UNKNOWN = DeleteCommentResponse_Result_FAIL_UNKNOWN;
  static inline bool Result_IsValid(int value) {
    return DeleteCommentResponse_Result_IsValid(value);
  }
  static const Result Result_MIN =
    DeleteCommentResponse_Result_Result_MIN;
  static const Result Result_MAX =
    DeleteCommentResponse_Result_Result_MAX;
  static const int Result_ARRAYSIZE =
    DeleteCommentResponse_Result_Result_ARRAYSIZE;

  // accessors -------------------------------------------------------

  // optional .weizhu.community.DeleteCommentResponse.Result result = 1 [default = FAIL_UNKNOWN];
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::weizhu::community::DeleteCommentResponse_Result result() const;
  inline void set_result(::weizhu::community::DeleteCommentResponse_Result value);

  // optional string fail_text = 2;
  inline bool has_fail_text() const;
  inline void clear_fail_text();
  static const int kFailTextFieldNumber = 2;
  inline const ::std::string& fail_text() const;
  inline void set_fail_text(const ::std::string& value);
  inline void set_fail_text(const char* value);
  inline void set_fail_text(const char* value, size_t size);
  inline ::std::string* mutable_fail_text();
  inline ::std::string* release_fail_text();
  inline void set_allocated_fail_text(::std::string* fail_text);

  // @@protoc_insertion_point(class_scope:weizhu.community.DeleteCommentResponse)
 private:
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_fail_text();
  inline void clear_has_fail_text();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* fail_text_;
  int result_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_community_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_community_2eproto();
  #endif
  friend void protobuf_AssignDesc_community_2eproto();
  friend void protobuf_ShutdownFile_community_2eproto();

  void InitAsDefaultInstance();
  static DeleteCommentResponse* default_instance_;
};
// -------------------------------------------------------------------

class GetMyPostListRequest : public ::google::protobuf::MessageLite {
 public:
  GetMyPostListRequest();
  virtual ~GetMyPostListRequest();

  GetMyPostListRequest(const GetMyPostListRequest& from);

  inline GetMyPostListRequest& operator=(const GetMyPostListRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const GetMyPostListRequest& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const GetMyPostListRequest* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(GetMyPostListRequest* other);

  // implements Message ----------------------------------------------

  GetMyPostListRequest* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const GetMyPostListRequest& from);
  void MergeFrom(const GetMyPostListRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 size = 1;
  inline bool has_size() const;
  inline void clear_size();
  static const int kSizeFieldNumber = 1;
  inline ::google::protobuf::int32 size() const;
  inline void set_size(::google::protobuf::int32 value);

  // optional bytes offset_index = 2;
  inline bool has_offset_index() const;
  inline void clear_offset_index();
  static const int kOffsetIndexFieldNumber = 2;
  inline const ::std::string& offset_index() const;
  inline void set_offset_index(const ::std::string& value);
  inline void set_offset_index(const char* value);
  inline void set_offset_index(const void* value, size_t size);
  inline ::std::string* mutable_offset_index();
  inline ::std::string* release_offset_index();
  inline void set_allocated_offset_index(::std::string* offset_index);

  // @@protoc_insertion_point(class_scope:weizhu.community.GetMyPostListRequest)
 private:
  inline void set_has_size();
  inline void clear_has_size();
  inline void set_has_offset_index();
  inline void clear_has_offset_index();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* offset_index_;
  ::google::protobuf::int32 size_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_community_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_community_2eproto();
  #endif
  friend void protobuf_AssignDesc_community_2eproto();
  friend void protobuf_ShutdownFile_community_2eproto();

  void InitAsDefaultInstance();
  static GetMyPostListRequest* default_instance_;
};
// -------------------------------------------------------------------

class GetMyPostListResponse : public ::google::protobuf::MessageLite {
 public:
  GetMyPostListResponse();
  virtual ~GetMyPostListResponse();

  GetMyPostListResponse(const GetMyPostListResponse& from);

  inline GetMyPostListResponse& operator=(const GetMyPostListResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const GetMyPostListResponse& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const GetMyPostListResponse* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(GetMyPostListResponse* other);

  // implements Message ----------------------------------------------

  GetMyPostListResponse* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const GetMyPostListResponse& from);
  void MergeFrom(const GetMyPostListResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .weizhu.community.Post post = 1;
  inline int post_size() const;
  inline void clear_post();
  static const int kPostFieldNumber = 1;
  inline const ::weizhu::community::Post& post(int index) const;
  inline ::weizhu::community::Post* mutable_post(int index);
  inline ::weizhu::community::Post* add_post();
  inline const ::google::protobuf::RepeatedPtrField< ::weizhu::community::Post >&
      post() const;
  inline ::google::protobuf::RepeatedPtrField< ::weizhu::community::Post >*
      mutable_post();

  // required bool has_more = 2;
  inline bool has_has_more() const;
  inline void clear_has_more();
  static const int kHasMoreFieldNumber = 2;
  inline bool has_more() const;
  inline void set_has_more(bool value);

  // required bytes offset_index = 3;
  inline bool has_offset_index() const;
  inline void clear_offset_index();
  static const int kOffsetIndexFieldNumber = 3;
  inline const ::std::string& offset_index() const;
  inline void set_offset_index(const ::std::string& value);
  inline void set_offset_index(const char* value);
  inline void set_offset_index(const void* value, size_t size);
  inline ::std::string* mutable_offset_index();
  inline ::std::string* release_offset_index();
  inline void set_allocated_offset_index(::std::string* offset_index);

  // @@protoc_insertion_point(class_scope:weizhu.community.GetMyPostListResponse)
 private:
  inline void set_has_has_more();
  inline void clear_has_has_more();
  inline void set_has_offset_index();
  inline void clear_has_offset_index();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::weizhu::community::Post > post_;
  ::std::string* offset_index_;
  bool has_more_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_community_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_community_2eproto();
  #endif
  friend void protobuf_AssignDesc_community_2eproto();
  friend void protobuf_ShutdownFile_community_2eproto();

  void InitAsDefaultInstance();
  static GetMyPostListResponse* default_instance_;
};
// -------------------------------------------------------------------

class GetMyCommentListRequest : public ::google::protobuf::MessageLite {
 public:
  GetMyCommentListRequest();
  virtual ~GetMyCommentListRequest();

  GetMyCommentListRequest(const GetMyCommentListRequest& from);

  inline GetMyCommentListRequest& operator=(const GetMyCommentListRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const GetMyCommentListRequest& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const GetMyCommentListRequest* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(GetMyCommentListRequest* other);

  // implements Message ----------------------------------------------

  GetMyCommentListRequest* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const GetMyCommentListRequest& from);
  void MergeFrom(const GetMyCommentListRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 size = 1;
  inline bool has_size() const;
  inline void clear_size();
  static const int kSizeFieldNumber = 1;
  inline ::google::protobuf::int32 size() const;
  inline void set_size(::google::protobuf::int32 value);

  // optional bytes offset_index = 2;
  inline bool has_offset_index() const;
  inline void clear_offset_index();
  static const int kOffsetIndexFieldNumber = 2;
  inline const ::std::string& offset_index() const;
  inline void set_offset_index(const ::std::string& value);
  inline void set_offset_index(const char* value);
  inline void set_offset_index(const void* value, size_t size);
  inline ::std::string* mutable_offset_index();
  inline ::std::string* release_offset_index();
  inline void set_allocated_offset_index(::std::string* offset_index);

  // @@protoc_insertion_point(class_scope:weizhu.community.GetMyCommentListRequest)
 private:
  inline void set_has_size();
  inline void clear_has_size();
  inline void set_has_offset_index();
  inline void clear_has_offset_index();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* offset_index_;
  ::google::protobuf::int32 size_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_community_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_community_2eproto();
  #endif
  friend void protobuf_AssignDesc_community_2eproto();
  friend void protobuf_ShutdownFile_community_2eproto();

  void InitAsDefaultInstance();
  static GetMyCommentListRequest* default_instance_;
};
// -------------------------------------------------------------------

class GetMyCommentListResponse : public ::google::protobuf::MessageLite {
 public:
  GetMyCommentListResponse();
  virtual ~GetMyCommentListResponse();

  GetMyCommentListResponse(const GetMyCommentListResponse& from);

  inline GetMyCommentListResponse& operator=(const GetMyCommentListResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const GetMyCommentListResponse& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const GetMyCommentListResponse* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(GetMyCommentListResponse* other);

  // implements Message ----------------------------------------------

  GetMyCommentListResponse* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const GetMyCommentListResponse& from);
  void MergeFrom(const GetMyCommentListResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .weizhu.community.Comment comment = 1;
  inline int comment_size() const;
  inline void clear_comment();
  static const int kCommentFieldNumber = 1;
  inline const ::weizhu::community::Comment& comment(int index) const;
  inline ::weizhu::community::Comment* mutable_comment(int index);
  inline ::weizhu::community::Comment* add_comment();
  inline const ::google::protobuf::RepeatedPtrField< ::weizhu::community::Comment >&
      comment() const;
  inline ::google::protobuf::RepeatedPtrField< ::weizhu::community::Comment >*
      mutable_comment();

  // required bool has_more = 2;
  inline bool has_has_more() const;
  inline void clear_has_more();
  static const int kHasMoreFieldNumber = 2;
  inline bool has_more() const;
  inline void set_has_more(bool value);

  // required bytes offset_index = 3;
  inline bool has_offset_index() const;
  inline void clear_offset_index();
  static const int kOffsetIndexFieldNumber = 3;
  inline const ::std::string& offset_index() const;
  inline void set_offset_index(const ::std::string& value);
  inline void set_offset_index(const char* value);
  inline void set_offset_index(const void* value, size_t size);
  inline ::std::string* mutable_offset_index();
  inline ::std::string* release_offset_index();
  inline void set_allocated_offset_index(::std::string* offset_index);

  // repeated .weizhu.community.Post ref_post = 4;
  inline int ref_post_size() const;
  inline void clear_ref_post();
  static const int kRefPostFieldNumber = 4;
  inline const ::weizhu::community::Post& ref_post(int index) const;
  inline ::weizhu::community::Post* mutable_ref_post(int index);
  inline ::weizhu::community::Post* add_ref_post();
  inline const ::google::protobuf::RepeatedPtrField< ::weizhu::community::Post >&
      ref_post() const;
  inline ::google::protobuf::RepeatedPtrField< ::weizhu::community::Post >*
      mutable_ref_post();

  // @@protoc_insertion_point(class_scope:weizhu.community.GetMyCommentListResponse)
 private:
  inline void set_has_has_more();
  inline void clear_has_has_more();
  inline void set_has_offset_index();
  inline void clear_has_offset_index();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::weizhu::community::Comment > comment_;
  ::std::string* offset_index_;
  ::google::protobuf::RepeatedPtrField< ::weizhu::community::Post > ref_post_;
  bool has_more_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_community_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_community_2eproto();
  #endif
  friend void protobuf_AssignDesc_community_2eproto();
  friend void protobuf_ShutdownFile_community_2eproto();

  void InitAsDefaultInstance();
  static GetMyCommentListResponse* default_instance_;
};
// -------------------------------------------------------------------

class GetRecommendPostResponse : public ::google::protobuf::MessageLite {
 public:
  GetRecommendPostResponse();
  virtual ~GetRecommendPostResponse();

  GetRecommendPostResponse(const GetRecommendPostResponse& from);

  inline GetRecommendPostResponse& operator=(const GetRecommendPostResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const GetRecommendPostResponse& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const GetRecommendPostResponse* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(GetRecommendPostResponse* other);

  // implements Message ----------------------------------------------

  GetRecommendPostResponse* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const GetRecommendPostResponse& from);
  void MergeFrom(const GetRecommendPostResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .weizhu.community.Post post = 1;
  inline int post_size() const;
  inline void clear_post();
  static const int kPostFieldNumber = 1;
  inline const ::weizhu::community::Post& post(int index) const;
  inline ::weizhu::community::Post* mutable_post(int index);
  inline ::weizhu::community::Post* add_post();
  inline const ::google::protobuf::RepeatedPtrField< ::weizhu::community::Post >&
      post() const;
  inline ::google::protobuf::RepeatedPtrField< ::weizhu::community::Post >*
      mutable_post();

  // repeated .weizhu.community.Board ref_board = 2;
  inline int ref_board_size() const;
  inline void clear_ref_board();
  static const int kRefBoardFieldNumber = 2;
  inline const ::weizhu::community::Board& ref_board(int index) const;
  inline ::weizhu::community::Board* mutable_ref_board(int index);
  inline ::weizhu::community::Board* add_ref_board();
  inline const ::google::protobuf::RepeatedPtrField< ::weizhu::community::Board >&
      ref_board() const;
  inline ::google::protobuf::RepeatedPtrField< ::weizhu::community::Board >*
      mutable_ref_board();

  // @@protoc_insertion_point(class_scope:weizhu.community.GetRecommendPostResponse)
 private:

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::weizhu::community::Post > post_;
  ::google::protobuf::RepeatedPtrField< ::weizhu::community::Board > ref_board_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_community_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_community_2eproto();
  #endif
  friend void protobuf_AssignDesc_community_2eproto();
  friend void protobuf_ShutdownFile_community_2eproto();

  void InitAsDefaultInstance();
  static GetRecommendPostResponse* default_instance_;
};
// -------------------------------------------------------------------

class LikeCommentRequest : public ::google::protobuf::MessageLite {
 public:
  LikeCommentRequest();
  virtual ~LikeCommentRequest();

  LikeCommentRequest(const LikeCommentRequest& from);

  inline LikeCommentRequest& operator=(const LikeCommentRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const LikeCommentRequest& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const LikeCommentRequest* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(LikeCommentRequest* other);

  // implements Message ----------------------------------------------

  LikeCommentRequest* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const LikeCommentRequest& from);
  void MergeFrom(const LikeCommentRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 post_id = 1;
  inline bool has_post_id() const;
  inline void clear_post_id();
  static const int kPostIdFieldNumber = 1;
  inline ::google::protobuf::int32 post_id() const;
  inline void set_post_id(::google::protobuf::int32 value);

  // required int32 comment_id = 2;
  inline bool has_comment_id() const;
  inline void clear_comment_id();
  static const int kCommentIdFieldNumber = 2;
  inline ::google::protobuf::int32 comment_id() const;
  inline void set_comment_id(::google::protobuf::int32 value);

  // required bool is_like = 3;
  inline bool has_is_like() const;
  inline void clear_is_like();
  static const int kIsLikeFieldNumber = 3;
  inline bool is_like() const;
  inline void set_is_like(bool value);

  // @@protoc_insertion_point(class_scope:weizhu.community.LikeCommentRequest)
 private:
  inline void set_has_post_id();
  inline void clear_has_post_id();
  inline void set_has_comment_id();
  inline void clear_has_comment_id();
  inline void set_has_is_like();
  inline void clear_has_is_like();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 post_id_;
  ::google::protobuf::int32 comment_id_;
  bool is_like_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_community_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_community_2eproto();
  #endif
  friend void protobuf_AssignDesc_community_2eproto();
  friend void protobuf_ShutdownFile_community_2eproto();

  void InitAsDefaultInstance();
  static LikeCommentRequest* default_instance_;
};
// -------------------------------------------------------------------

class LikeCommentResponse : public ::google::protobuf::MessageLite {
 public:
  LikeCommentResponse();
  virtual ~LikeCommentResponse();

  LikeCommentResponse(const LikeCommentResponse& from);

  inline LikeCommentResponse& operator=(const LikeCommentResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const LikeCommentResponse& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const LikeCommentResponse* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(LikeCommentResponse* other);

  // implements Message ----------------------------------------------

  LikeCommentResponse* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const LikeCommentResponse& from);
  void MergeFrom(const LikeCommentResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  typedef LikeCommentResponse_Result Result;
  static const Result SUCC = LikeCommentResponse_Result_SUCC;
  static const Result FAIL_POST_NOT_EXIST = LikeCommentResponse_Result_FAIL_POST_NOT_EXIST;
  static const Result FAIL_COMMENT_NOT_EXIST = LikeCommentResponse_Result_FAIL_COMMENT_NOT_EXIST;
  static const Result FAIL_UNKNOWN = LikeCommentResponse_Result_FAIL_UNKNOWN;
  static inline bool Result_IsValid(int value) {
    return LikeCommentResponse_Result_IsValid(value);
  }
  static const Result Result_MIN =
    LikeCommentResponse_Result_Result_MIN;
  static const Result Result_MAX =
    LikeCommentResponse_Result_Result_MAX;
  static const int Result_ARRAYSIZE =
    LikeCommentResponse_Result_Result_ARRAYSIZE;

  // accessors -------------------------------------------------------

  // optional .weizhu.community.LikeCommentResponse.Result result = 1 [default = FAIL_UNKNOWN];
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::weizhu::community::LikeCommentResponse_Result result() const;
  inline void set_result(::weizhu::community::LikeCommentResponse_Result value);

  // optional string fail_text = 2;
  inline bool has_fail_text() const;
  inline void clear_fail_text();
  static const int kFailTextFieldNumber = 2;
  inline const ::std::string& fail_text() const;
  inline void set_fail_text(const ::std::string& value);
  inline void set_fail_text(const char* value);
  inline void set_fail_text(const char* value, size_t size);
  inline ::std::string* mutable_fail_text();
  inline ::std::string* release_fail_text();
  inline void set_allocated_fail_text(::std::string* fail_text);

  // @@protoc_insertion_point(class_scope:weizhu.community.LikeCommentResponse)
 private:
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_fail_text();
  inline void clear_has_fail_text();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* fail_text_;
  int result_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_community_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_community_2eproto();
  #endif
  friend void protobuf_AssignDesc_community_2eproto();
  friend void protobuf_ShutdownFile_community_2eproto();

  void InitAsDefaultInstance();
  static LikeCommentResponse* default_instance_;
};
// -------------------------------------------------------------------

class GetPostCommentByIdRequest_PostCommentId : public ::google::protobuf::MessageLite {
 public:
  GetPostCommentByIdRequest_PostCommentId();
  virtual ~GetPostCommentByIdRequest_PostCommentId();

  GetPostCommentByIdRequest_PostCommentId(const GetPostCommentByIdRequest_PostCommentId& from);

  inline GetPostCommentByIdRequest_PostCommentId& operator=(const GetPostCommentByIdRequest_PostCommentId& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const GetPostCommentByIdRequest_PostCommentId& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const GetPostCommentByIdRequest_PostCommentId* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(GetPostCommentByIdRequest_PostCommentId* other);

  // implements Message ----------------------------------------------

  GetPostCommentByIdRequest_PostCommentId* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const GetPostCommentByIdRequest_PostCommentId& from);
  void MergeFrom(const GetPostCommentByIdRequest_PostCommentId& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 post_id = 1;
  inline bool has_post_id() const;
  inline void clear_post_id();
  static const int kPostIdFieldNumber = 1;
  inline ::google::protobuf::int32 post_id() const;
  inline void set_post_id(::google::protobuf::int32 value);

  // required int32 comment_id = 2;
  inline bool has_comment_id() const;
  inline void clear_comment_id();
  static const int kCommentIdFieldNumber = 2;
  inline ::google::protobuf::int32 comment_id() const;
  inline void set_comment_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:weizhu.community.GetPostCommentByIdRequest.PostCommentId)
 private:
  inline void set_has_post_id();
  inline void clear_has_post_id();
  inline void set_has_comment_id();
  inline void clear_has_comment_id();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 post_id_;
  ::google::protobuf::int32 comment_id_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_community_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_community_2eproto();
  #endif
  friend void protobuf_AssignDesc_community_2eproto();
  friend void protobuf_ShutdownFile_community_2eproto();

  void InitAsDefaultInstance();
  static GetPostCommentByIdRequest_PostCommentId* default_instance_;
};
// -------------------------------------------------------------------

class GetPostCommentByIdRequest : public ::google::protobuf::MessageLite {
 public:
  GetPostCommentByIdRequest();
  virtual ~GetPostCommentByIdRequest();

  GetPostCommentByIdRequest(const GetPostCommentByIdRequest& from);

  inline GetPostCommentByIdRequest& operator=(const GetPostCommentByIdRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const GetPostCommentByIdRequest& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const GetPostCommentByIdRequest* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(GetPostCommentByIdRequest* other);

  // implements Message ----------------------------------------------

  GetPostCommentByIdRequest* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const GetPostCommentByIdRequest& from);
  void MergeFrom(const GetPostCommentByIdRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  typedef GetPostCommentByIdRequest_PostCommentId PostCommentId;

  // accessors -------------------------------------------------------

  // repeated .weizhu.community.GetPostCommentByIdRequest.PostCommentId postCommentId = 1;
  inline int postcommentid_size() const;
  inline void clear_postcommentid();
  static const int kPostCommentIdFieldNumber = 1;
  inline const ::weizhu::community::GetPostCommentByIdRequest_PostCommentId& postcommentid(int index) const;
  inline ::weizhu::community::GetPostCommentByIdRequest_PostCommentId* mutable_postcommentid(int index);
  inline ::weizhu::community::GetPostCommentByIdRequest_PostCommentId* add_postcommentid();
  inline const ::google::protobuf::RepeatedPtrField< ::weizhu::community::GetPostCommentByIdRequest_PostCommentId >&
      postcommentid() const;
  inline ::google::protobuf::RepeatedPtrField< ::weizhu::community::GetPostCommentByIdRequest_PostCommentId >*
      mutable_postcommentid();

  // @@protoc_insertion_point(class_scope:weizhu.community.GetPostCommentByIdRequest)
 private:

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::weizhu::community::GetPostCommentByIdRequest_PostCommentId > postcommentid_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_community_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_community_2eproto();
  #endif
  friend void protobuf_AssignDesc_community_2eproto();
  friend void protobuf_ShutdownFile_community_2eproto();

  void InitAsDefaultInstance();
  static GetPostCommentByIdRequest* default_instance_;
};
// -------------------------------------------------------------------

class GetPostCommentByIdResponse : public ::google::protobuf::MessageLite {
 public:
  GetPostCommentByIdResponse();
  virtual ~GetPostCommentByIdResponse();

  GetPostCommentByIdResponse(const GetPostCommentByIdResponse& from);

  inline GetPostCommentByIdResponse& operator=(const GetPostCommentByIdResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const GetPostCommentByIdResponse& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const GetPostCommentByIdResponse* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(GetPostCommentByIdResponse* other);

  // implements Message ----------------------------------------------

  GetPostCommentByIdResponse* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const GetPostCommentByIdResponse& from);
  void MergeFrom(const GetPostCommentByIdResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .weizhu.community.Comment comment = 1;
  inline int comment_size() const;
  inline void clear_comment();
  static const int kCommentFieldNumber = 1;
  inline const ::weizhu::community::Comment& comment(int index) const;
  inline ::weizhu::community::Comment* mutable_comment(int index);
  inline ::weizhu::community::Comment* add_comment();
  inline const ::google::protobuf::RepeatedPtrField< ::weizhu::community::Comment >&
      comment() const;
  inline ::google::protobuf::RepeatedPtrField< ::weizhu::community::Comment >*
      mutable_comment();

  // repeated .weizhu.community.Post ref_post = 2;
  inline int ref_post_size() const;
  inline void clear_ref_post();
  static const int kRefPostFieldNumber = 2;
  inline const ::weizhu::community::Post& ref_post(int index) const;
  inline ::weizhu::community::Post* mutable_ref_post(int index);
  inline ::weizhu::community::Post* add_ref_post();
  inline const ::google::protobuf::RepeatedPtrField< ::weizhu::community::Post >&
      ref_post() const;
  inline ::google::protobuf::RepeatedPtrField< ::weizhu::community::Post >*
      mutable_ref_post();

  // @@protoc_insertion_point(class_scope:weizhu.community.GetPostCommentByIdResponse)
 private:

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::weizhu::community::Comment > comment_;
  ::google::protobuf::RepeatedPtrField< ::weizhu::community::Post > ref_post_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_community_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_community_2eproto();
  #endif
  friend void protobuf_AssignDesc_community_2eproto();
  friend void protobuf_ShutdownFile_community_2eproto();

  void InitAsDefaultInstance();
  static GetPostCommentByIdResponse* default_instance_;
};
// -------------------------------------------------------------------

class GetPostByIdsRequest : public ::google::protobuf::MessageLite {
 public:
  GetPostByIdsRequest();
  virtual ~GetPostByIdsRequest();

  GetPostByIdsRequest(const GetPostByIdsRequest& from);

  inline GetPostByIdsRequest& operator=(const GetPostByIdsRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const GetPostByIdsRequest& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const GetPostByIdsRequest* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(GetPostByIdsRequest* other);

  // implements Message ----------------------------------------------

  GetPostByIdsRequest* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const GetPostByIdsRequest& from);
  void MergeFrom(const GetPostByIdsRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int32 post_id = 1;
  inline int post_id_size() const;
  inline void clear_post_id();
  static const int kPostIdFieldNumber = 1;
  inline ::google::protobuf::int32 post_id(int index) const;
  inline void set_post_id(int index, ::google::protobuf::int32 value);
  inline void add_post_id(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      post_id() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_post_id();

  // @@protoc_insertion_point(class_scope:weizhu.community.GetPostByIdsRequest)
 private:

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > post_id_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_community_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_community_2eproto();
  #endif
  friend void protobuf_AssignDesc_community_2eproto();
  friend void protobuf_ShutdownFile_community_2eproto();

  void InitAsDefaultInstance();
  static GetPostByIdsRequest* default_instance_;
};
// -------------------------------------------------------------------

class GetPostByIdsResponse : public ::google::protobuf::MessageLite {
 public:
  GetPostByIdsResponse();
  virtual ~GetPostByIdsResponse();

  GetPostByIdsResponse(const GetPostByIdsResponse& from);

  inline GetPostByIdsResponse& operator=(const GetPostByIdsResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const GetPostByIdsResponse& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const GetPostByIdsResponse* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(GetPostByIdsResponse* other);

  // implements Message ----------------------------------------------

  GetPostByIdsResponse* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const GetPostByIdsResponse& from);
  void MergeFrom(const GetPostByIdsResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .weizhu.community.Post post = 1;
  inline int post_size() const;
  inline void clear_post();
  static const int kPostFieldNumber = 1;
  inline const ::weizhu::community::Post& post(int index) const;
  inline ::weizhu::community::Post* mutable_post(int index);
  inline ::weizhu::community::Post* add_post();
  inline const ::google::protobuf::RepeatedPtrField< ::weizhu::community::Post >&
      post() const;
  inline ::google::protobuf::RepeatedPtrField< ::weizhu::community::Post >*
      mutable_post();

  // @@protoc_insertion_point(class_scope:weizhu.community.GetPostByIdsResponse)
 private:

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::weizhu::community::Post > post_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_community_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_community_2eproto();
  #endif
  friend void protobuf_AssignDesc_community_2eproto();
  friend void protobuf_ShutdownFile_community_2eproto();

  void InitAsDefaultInstance();
  static GetPostByIdsResponse* default_instance_;
};
// ===================================================================


// ===================================================================

// Board

// required int32 board_id = 1;
inline bool Board::has_board_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Board::set_has_board_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Board::clear_has_board_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Board::clear_board_id() {
  board_id_ = 0;
  clear_has_board_id();
}
inline ::google::protobuf::int32 Board::board_id() const {
  // @@protoc_insertion_point(field_get:weizhu.community.Board.board_id)
  return board_id_;
}
inline void Board::set_board_id(::google::protobuf::int32 value) {
  set_has_board_id();
  board_id_ = value;
  // @@protoc_insertion_point(field_set:weizhu.community.Board.board_id)
}

// required string board_name = 2;
inline bool Board::has_board_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Board::set_has_board_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Board::clear_has_board_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Board::clear_board_name() {
  if (board_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    board_name_->clear();
  }
  clear_has_board_name();
}
inline const ::std::string& Board::board_name() const {
  // @@protoc_insertion_point(field_get:weizhu.community.Board.board_name)
  return *board_name_;
}
inline void Board::set_board_name(const ::std::string& value) {
  set_has_board_name();
  if (board_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    board_name_ = new ::std::string;
  }
  board_name_->assign(value);
  // @@protoc_insertion_point(field_set:weizhu.community.Board.board_name)
}
inline void Board::set_board_name(const char* value) {
  set_has_board_name();
  if (board_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    board_name_ = new ::std::string;
  }
  board_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:weizhu.community.Board.board_name)
}
inline void Board::set_board_name(const char* value, size_t size) {
  set_has_board_name();
  if (board_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    board_name_ = new ::std::string;
  }
  board_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:weizhu.community.Board.board_name)
}
inline ::std::string* Board::mutable_board_name() {
  set_has_board_name();
  if (board_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    board_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:weizhu.community.Board.board_name)
  return board_name_;
}
inline ::std::string* Board::release_board_name() {
  clear_has_board_name();
  if (board_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = board_name_;
    board_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Board::set_allocated_board_name(::std::string* board_name) {
  if (board_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete board_name_;
  }
  if (board_name) {
    set_has_board_name();
    board_name_ = board_name;
  } else {
    clear_has_board_name();
    board_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:weizhu.community.Board.board_name)
}

// required string board_icon = 3;
inline bool Board::has_board_icon() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Board::set_has_board_icon() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Board::clear_has_board_icon() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Board::clear_board_icon() {
  if (board_icon_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    board_icon_->clear();
  }
  clear_has_board_icon();
}
inline const ::std::string& Board::board_icon() const {
  // @@protoc_insertion_point(field_get:weizhu.community.Board.board_icon)
  return *board_icon_;
}
inline void Board::set_board_icon(const ::std::string& value) {
  set_has_board_icon();
  if (board_icon_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    board_icon_ = new ::std::string;
  }
  board_icon_->assign(value);
  // @@protoc_insertion_point(field_set:weizhu.community.Board.board_icon)
}
inline void Board::set_board_icon(const char* value) {
  set_has_board_icon();
  if (board_icon_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    board_icon_ = new ::std::string;
  }
  board_icon_->assign(value);
  // @@protoc_insertion_point(field_set_char:weizhu.community.Board.board_icon)
}
inline void Board::set_board_icon(const char* value, size_t size) {
  set_has_board_icon();
  if (board_icon_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    board_icon_ = new ::std::string;
  }
  board_icon_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:weizhu.community.Board.board_icon)
}
inline ::std::string* Board::mutable_board_icon() {
  set_has_board_icon();
  if (board_icon_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    board_icon_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:weizhu.community.Board.board_icon)
  return board_icon_;
}
inline ::std::string* Board::release_board_icon() {
  clear_has_board_icon();
  if (board_icon_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = board_icon_;
    board_icon_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Board::set_allocated_board_icon(::std::string* board_icon) {
  if (board_icon_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete board_icon_;
  }
  if (board_icon) {
    set_has_board_icon();
    board_icon_ = board_icon;
  } else {
    clear_has_board_icon();
    board_icon_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:weizhu.community.Board.board_icon)
}

// required string board_desc = 4;
inline bool Board::has_board_desc() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Board::set_has_board_desc() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Board::clear_has_board_desc() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Board::clear_board_desc() {
  if (board_desc_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    board_desc_->clear();
  }
  clear_has_board_desc();
}
inline const ::std::string& Board::board_desc() const {
  // @@protoc_insertion_point(field_get:weizhu.community.Board.board_desc)
  return *board_desc_;
}
inline void Board::set_board_desc(const ::std::string& value) {
  set_has_board_desc();
  if (board_desc_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    board_desc_ = new ::std::string;
  }
  board_desc_->assign(value);
  // @@protoc_insertion_point(field_set:weizhu.community.Board.board_desc)
}
inline void Board::set_board_desc(const char* value) {
  set_has_board_desc();
  if (board_desc_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    board_desc_ = new ::std::string;
  }
  board_desc_->assign(value);
  // @@protoc_insertion_point(field_set_char:weizhu.community.Board.board_desc)
}
inline void Board::set_board_desc(const char* value, size_t size) {
  set_has_board_desc();
  if (board_desc_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    board_desc_ = new ::std::string;
  }
  board_desc_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:weizhu.community.Board.board_desc)
}
inline ::std::string* Board::mutable_board_desc() {
  set_has_board_desc();
  if (board_desc_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    board_desc_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:weizhu.community.Board.board_desc)
  return board_desc_;
}
inline ::std::string* Board::release_board_desc() {
  clear_has_board_desc();
  if (board_desc_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = board_desc_;
    board_desc_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Board::set_allocated_board_desc(::std::string* board_desc) {
  if (board_desc_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete board_desc_;
  }
  if (board_desc) {
    set_has_board_desc();
    board_desc_ = board_desc;
  } else {
    clear_has_board_desc();
    board_desc_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:weizhu.community.Board.board_desc)
}

// optional int32 parent_board_id = 5;
inline bool Board::has_parent_board_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Board::set_has_parent_board_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Board::clear_has_parent_board_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Board::clear_parent_board_id() {
  parent_board_id_ = 0;
  clear_has_parent_board_id();
}
inline ::google::protobuf::int32 Board::parent_board_id() const {
  // @@protoc_insertion_point(field_get:weizhu.community.Board.parent_board_id)
  return parent_board_id_;
}
inline void Board::set_parent_board_id(::google::protobuf::int32 value) {
  set_has_parent_board_id();
  parent_board_id_ = value;
  // @@protoc_insertion_point(field_set:weizhu.community.Board.parent_board_id)
}

// required bool is_leaf_board = 6;
inline bool Board::has_is_leaf_board() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Board::set_has_is_leaf_board() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Board::clear_has_is_leaf_board() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Board::clear_is_leaf_board() {
  is_leaf_board_ = false;
  clear_has_is_leaf_board();
}
inline bool Board::is_leaf_board() const {
  // @@protoc_insertion_point(field_get:weizhu.community.Board.is_leaf_board)
  return is_leaf_board_;
}
inline void Board::set_is_leaf_board(bool value) {
  set_has_is_leaf_board();
  is_leaf_board_ = value;
  // @@protoc_insertion_point(field_set:weizhu.community.Board.is_leaf_board)
}

// required bool is_hot = 7;
inline bool Board::has_is_hot() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Board::set_has_is_hot() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Board::clear_has_is_hot() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Board::clear_is_hot() {
  is_hot_ = false;
  clear_has_is_hot();
}
inline bool Board::is_hot() const {
  // @@protoc_insertion_point(field_get:weizhu.community.Board.is_hot)
  return is_hot_;
}
inline void Board::set_is_hot(bool value) {
  set_has_is_hot();
  is_hot_ = value;
  // @@protoc_insertion_point(field_set:weizhu.community.Board.is_hot)
}

// required int32 post_total_count = 8;
inline bool Board::has_post_total_count() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Board::set_has_post_total_count() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Board::clear_has_post_total_count() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Board::clear_post_total_count() {
  post_total_count_ = 0;
  clear_has_post_total_count();
}
inline ::google::protobuf::int32 Board::post_total_count() const {
  // @@protoc_insertion_point(field_get:weizhu.community.Board.post_total_count)
  return post_total_count_;
}
inline void Board::set_post_total_count(::google::protobuf::int32 value) {
  set_has_post_total_count();
  post_total_count_ = value;
  // @@protoc_insertion_point(field_set:weizhu.community.Board.post_total_count)
}

// required int32 post_new_count = 9;
inline bool Board::has_post_new_count() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Board::set_has_post_new_count() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Board::clear_has_post_new_count() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Board::clear_post_new_count() {
  post_new_count_ = 0;
  clear_has_post_new_count();
}
inline ::google::protobuf::int32 Board::post_new_count() const {
  // @@protoc_insertion_point(field_get:weizhu.community.Board.post_new_count)
  return post_new_count_;
}
inline void Board::set_post_new_count(::google::protobuf::int32 value) {
  set_has_post_new_count();
  post_new_count_ = value;
  // @@protoc_insertion_point(field_set:weizhu.community.Board.post_new_count)
}

// optional int32 allow_model_id = 10;
inline bool Board::has_allow_model_id() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Board::set_has_allow_model_id() {
  _has_bits_[0] |= 0x00000200u;
}
inline void Board::clear_has_allow_model_id() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void Board::clear_allow_model_id() {
  allow_model_id_ = 0;
  clear_has_allow_model_id();
}
inline ::google::protobuf::int32 Board::allow_model_id() const {
  // @@protoc_insertion_point(field_get:weizhu.community.Board.allow_model_id)
  return allow_model_id_;
}
inline void Board::set_allow_model_id(::google::protobuf::int32 value) {
  set_has_allow_model_id();
  allow_model_id_ = value;
  // @@protoc_insertion_point(field_set:weizhu.community.Board.allow_model_id)
}

// repeated string tag = 11;
inline int Board::tag_size() const {
  return tag_.size();
}
inline void Board::clear_tag() {
  tag_.Clear();
}
inline const ::std::string& Board::tag(int index) const {
  // @@protoc_insertion_point(field_get:weizhu.community.Board.tag)
  return tag_.Get(index);
}
inline ::std::string* Board::mutable_tag(int index) {
  // @@protoc_insertion_point(field_mutable:weizhu.community.Board.tag)
  return tag_.Mutable(index);
}
inline void Board::set_tag(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:weizhu.community.Board.tag)
  tag_.Mutable(index)->assign(value);
}
inline void Board::set_tag(int index, const char* value) {
  tag_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:weizhu.community.Board.tag)
}
inline void Board::set_tag(int index, const char* value, size_t size) {
  tag_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:weizhu.community.Board.tag)
}
inline ::std::string* Board::add_tag() {
  return tag_.Add();
}
inline void Board::add_tag(const ::std::string& value) {
  tag_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:weizhu.community.Board.tag)
}
inline void Board::add_tag(const char* value) {
  tag_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:weizhu.community.Board.tag)
}
inline void Board::add_tag(const char* value, size_t size) {
  tag_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:weizhu.community.Board.tag)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Board::tag() const {
  // @@protoc_insertion_point(field_list:weizhu.community.Board.tag)
  return tag_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Board::mutable_tag() {
  // @@protoc_insertion_point(field_mutable_list:weizhu.community.Board.tag)
  return &tag_;
}

// -------------------------------------------------------------------

// Post_Part

// required int32 part_id = 1;
inline bool Post_Part::has_part_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Post_Part::set_has_part_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Post_Part::clear_has_part_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Post_Part::clear_part_id() {
  part_id_ = 0;
  clear_has_part_id();
}
inline ::google::protobuf::int32 Post_Part::part_id() const {
  // @@protoc_insertion_point(field_get:weizhu.community.Post.Part.part_id)
  return part_id_;
}
inline void Post_Part::set_part_id(::google::protobuf::int32 value) {
  set_has_part_id();
  part_id_ = value;
  // @@protoc_insertion_point(field_set:weizhu.community.Post.Part.part_id)
}

// optional string text = 2;
inline bool Post_Part::has_text() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Post_Part::set_has_text() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Post_Part::clear_has_text() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Post_Part::clear_text() {
  if (text_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    text_->clear();
  }
  clear_has_text();
}
inline const ::std::string& Post_Part::text() const {
  // @@protoc_insertion_point(field_get:weizhu.community.Post.Part.text)
  return *text_;
}
inline void Post_Part::set_text(const ::std::string& value) {
  set_has_text();
  if (text_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    text_ = new ::std::string;
  }
  text_->assign(value);
  // @@protoc_insertion_point(field_set:weizhu.community.Post.Part.text)
}
inline void Post_Part::set_text(const char* value) {
  set_has_text();
  if (text_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    text_ = new ::std::string;
  }
  text_->assign(value);
  // @@protoc_insertion_point(field_set_char:weizhu.community.Post.Part.text)
}
inline void Post_Part::set_text(const char* value, size_t size) {
  set_has_text();
  if (text_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    text_ = new ::std::string;
  }
  text_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:weizhu.community.Post.Part.text)
}
inline ::std::string* Post_Part::mutable_text() {
  set_has_text();
  if (text_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    text_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:weizhu.community.Post.Part.text)
  return text_;
}
inline ::std::string* Post_Part::release_text() {
  clear_has_text();
  if (text_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = text_;
    text_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Post_Part::set_allocated_text(::std::string* text) {
  if (text_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete text_;
  }
  if (text) {
    set_has_text();
    text_ = text;
  } else {
    clear_has_text();
    text_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:weizhu.community.Post.Part.text)
}

// optional string image_name = 3;
inline bool Post_Part::has_image_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Post_Part::set_has_image_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Post_Part::clear_has_image_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Post_Part::clear_image_name() {
  if (image_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    image_name_->clear();
  }
  clear_has_image_name();
}
inline const ::std::string& Post_Part::image_name() const {
  // @@protoc_insertion_point(field_get:weizhu.community.Post.Part.image_name)
  return *image_name_;
}
inline void Post_Part::set_image_name(const ::std::string& value) {
  set_has_image_name();
  if (image_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    image_name_ = new ::std::string;
  }
  image_name_->assign(value);
  // @@protoc_insertion_point(field_set:weizhu.community.Post.Part.image_name)
}
inline void Post_Part::set_image_name(const char* value) {
  set_has_image_name();
  if (image_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    image_name_ = new ::std::string;
  }
  image_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:weizhu.community.Post.Part.image_name)
}
inline void Post_Part::set_image_name(const char* value, size_t size) {
  set_has_image_name();
  if (image_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    image_name_ = new ::std::string;
  }
  image_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:weizhu.community.Post.Part.image_name)
}
inline ::std::string* Post_Part::mutable_image_name() {
  set_has_image_name();
  if (image_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    image_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:weizhu.community.Post.Part.image_name)
  return image_name_;
}
inline ::std::string* Post_Part::release_image_name() {
  clear_has_image_name();
  if (image_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = image_name_;
    image_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Post_Part::set_allocated_image_name(::std::string* image_name) {
  if (image_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete image_name_;
  }
  if (image_name) {
    set_has_image_name();
    image_name_ = image_name;
  } else {
    clear_has_image_name();
    image_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:weizhu.community.Post.Part.image_name)
}

// -------------------------------------------------------------------

// Post

// required int32 post_id = 1;
inline bool Post::has_post_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Post::set_has_post_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Post::clear_has_post_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Post::clear_post_id() {
  post_id_ = 0;
  clear_has_post_id();
}
inline ::google::protobuf::int32 Post::post_id() const {
  // @@protoc_insertion_point(field_get:weizhu.community.Post.post_id)
  return post_id_;
}
inline void Post::set_post_id(::google::protobuf::int32 value) {
  set_has_post_id();
  post_id_ = value;
  // @@protoc_insertion_point(field_set:weizhu.community.Post.post_id)
}

// required string post_title = 2;
inline bool Post::has_post_title() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Post::set_has_post_title() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Post::clear_has_post_title() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Post::clear_post_title() {
  if (post_title_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    post_title_->clear();
  }
  clear_has_post_title();
}
inline const ::std::string& Post::post_title() const {
  // @@protoc_insertion_point(field_get:weizhu.community.Post.post_title)
  return *post_title_;
}
inline void Post::set_post_title(const ::std::string& value) {
  set_has_post_title();
  if (post_title_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    post_title_ = new ::std::string;
  }
  post_title_->assign(value);
  // @@protoc_insertion_point(field_set:weizhu.community.Post.post_title)
}
inline void Post::set_post_title(const char* value) {
  set_has_post_title();
  if (post_title_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    post_title_ = new ::std::string;
  }
  post_title_->assign(value);
  // @@protoc_insertion_point(field_set_char:weizhu.community.Post.post_title)
}
inline void Post::set_post_title(const char* value, size_t size) {
  set_has_post_title();
  if (post_title_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    post_title_ = new ::std::string;
  }
  post_title_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:weizhu.community.Post.post_title)
}
inline ::std::string* Post::mutable_post_title() {
  set_has_post_title();
  if (post_title_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    post_title_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:weizhu.community.Post.post_title)
  return post_title_;
}
inline ::std::string* Post::release_post_title() {
  clear_has_post_title();
  if (post_title_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = post_title_;
    post_title_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Post::set_allocated_post_title(::std::string* post_title) {
  if (post_title_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete post_title_;
  }
  if (post_title) {
    set_has_post_title();
    post_title_ = post_title;
  } else {
    clear_has_post_title();
    post_title_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:weizhu.community.Post.post_title)
}

// repeated .weizhu.community.Post.Part post_part = 3;
inline int Post::post_part_size() const {
  return post_part_.size();
}
inline void Post::clear_post_part() {
  post_part_.Clear();
}
inline const ::weizhu::community::Post_Part& Post::post_part(int index) const {
  // @@protoc_insertion_point(field_get:weizhu.community.Post.post_part)
  return post_part_.Get(index);
}
inline ::weizhu::community::Post_Part* Post::mutable_post_part(int index) {
  // @@protoc_insertion_point(field_mutable:weizhu.community.Post.post_part)
  return post_part_.Mutable(index);
}
inline ::weizhu::community::Post_Part* Post::add_post_part() {
  // @@protoc_insertion_point(field_add:weizhu.community.Post.post_part)
  return post_part_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::weizhu::community::Post_Part >&
Post::post_part() const {
  // @@protoc_insertion_point(field_list:weizhu.community.Post.post_part)
  return post_part_;
}
inline ::google::protobuf::RepeatedPtrField< ::weizhu::community::Post_Part >*
Post::mutable_post_part() {
  // @@protoc_insertion_point(field_mutable_list:weizhu.community.Post.post_part)
  return &post_part_;
}

// required int32 board_id = 4;
inline bool Post::has_board_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Post::set_has_board_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Post::clear_has_board_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Post::clear_board_id() {
  board_id_ = 0;
  clear_has_board_id();
}
inline ::google::protobuf::int32 Post::board_id() const {
  // @@protoc_insertion_point(field_get:weizhu.community.Post.board_id)
  return board_id_;
}
inline void Post::set_board_id(::google::protobuf::int32 value) {
  set_has_board_id();
  board_id_ = value;
  // @@protoc_insertion_point(field_set:weizhu.community.Post.board_id)
}

// required int64 create_user_id = 5;
inline bool Post::has_create_user_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Post::set_has_create_user_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Post::clear_has_create_user_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Post::clear_create_user_id() {
  create_user_id_ = GOOGLE_LONGLONG(0);
  clear_has_create_user_id();
}
inline ::google::protobuf::int64 Post::create_user_id() const {
  // @@protoc_insertion_point(field_get:weizhu.community.Post.create_user_id)
  return create_user_id_;
}
inline void Post::set_create_user_id(::google::protobuf::int64 value) {
  set_has_create_user_id();
  create_user_id_ = value;
  // @@protoc_insertion_point(field_set:weizhu.community.Post.create_user_id)
}

// required int32 create_time = 6;
inline bool Post::has_create_time() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Post::set_has_create_time() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Post::clear_has_create_time() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Post::clear_create_time() {
  create_time_ = 0;
  clear_has_create_time();
}
inline ::google::protobuf::int32 Post::create_time() const {
  // @@protoc_insertion_point(field_get:weizhu.community.Post.create_time)
  return create_time_;
}
inline void Post::set_create_time(::google::protobuf::int32 value) {
  set_has_create_time();
  create_time_ = value;
  // @@protoc_insertion_point(field_set:weizhu.community.Post.create_time)
}

// required bool is_hot = 7;
inline bool Post::has_is_hot() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Post::set_has_is_hot() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Post::clear_has_is_hot() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Post::clear_is_hot() {
  is_hot_ = false;
  clear_has_is_hot();
}
inline bool Post::is_hot() const {
  // @@protoc_insertion_point(field_get:weizhu.community.Post.is_hot)
  return is_hot_;
}
inline void Post::set_is_hot(bool value) {
  set_has_is_hot();
  is_hot_ = value;
  // @@protoc_insertion_point(field_set:weizhu.community.Post.is_hot)
}

// optional .weizhu.community.Post.State state = 8 [default = NORMAL];
inline bool Post::has_state() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Post::set_has_state() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Post::clear_has_state() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Post::clear_state() {
  state_ = 0;
  clear_has_state();
}
inline ::weizhu::community::Post_State Post::state() const {
  // @@protoc_insertion_point(field_get:weizhu.community.Post.state)
  return static_cast< ::weizhu::community::Post_State >(state_);
}
inline void Post::set_state(::weizhu::community::Post_State value) {
  assert(::weizhu::community::Post_State_IsValid(value));
  set_has_state();
  state_ = value;
  // @@protoc_insertion_point(field_set:weizhu.community.Post.state)
}

// required int32 comment_count = 9;
inline bool Post::has_comment_count() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Post::set_has_comment_count() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Post::clear_has_comment_count() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Post::clear_comment_count() {
  comment_count_ = 0;
  clear_has_comment_count();
}
inline ::google::protobuf::int32 Post::comment_count() const {
  // @@protoc_insertion_point(field_get:weizhu.community.Post.comment_count)
  return comment_count_;
}
inline void Post::set_comment_count(::google::protobuf::int32 value) {
  set_has_comment_count();
  comment_count_ = value;
  // @@protoc_insertion_point(field_set:weizhu.community.Post.comment_count)
}

// required int32 like_count = 10;
inline bool Post::has_like_count() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Post::set_has_like_count() {
  _has_bits_[0] |= 0x00000200u;
}
inline void Post::clear_has_like_count() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void Post::clear_like_count() {
  like_count_ = 0;
  clear_has_like_count();
}
inline ::google::protobuf::int32 Post::like_count() const {
  // @@protoc_insertion_point(field_get:weizhu.community.Post.like_count)
  return like_count_;
}
inline void Post::set_like_count(::google::protobuf::int32 value) {
  set_has_like_count();
  like_count_ = value;
  // @@protoc_insertion_point(field_set:weizhu.community.Post.like_count)
}

// required bool is_like = 11;
inline bool Post::has_is_like() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void Post::set_has_is_like() {
  _has_bits_[0] |= 0x00000400u;
}
inline void Post::clear_has_is_like() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void Post::clear_is_like() {
  is_like_ = false;
  clear_has_is_like();
}
inline bool Post::is_like() const {
  // @@protoc_insertion_point(field_get:weizhu.community.Post.is_like)
  return is_like_;
}
inline void Post::set_is_like(bool value) {
  set_has_is_like();
  is_like_ = value;
  // @@protoc_insertion_point(field_set:weizhu.community.Post.is_like)
}

// optional bool is_sticky = 12;
inline bool Post::has_is_sticky() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void Post::set_has_is_sticky() {
  _has_bits_[0] |= 0x00000800u;
}
inline void Post::clear_has_is_sticky() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void Post::clear_is_sticky() {
  is_sticky_ = false;
  clear_has_is_sticky();
}
inline bool Post::is_sticky() const {
  // @@protoc_insertion_point(field_get:weizhu.community.Post.is_sticky)
  return is_sticky_;
}
inline void Post::set_is_sticky(bool value) {
  set_has_is_sticky();
  is_sticky_ = value;
  // @@protoc_insertion_point(field_set:weizhu.community.Post.is_sticky)
}

// optional int32 sticky_time = 13;
inline bool Post::has_sticky_time() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void Post::set_has_sticky_time() {
  _has_bits_[0] |= 0x00001000u;
}
inline void Post::clear_has_sticky_time() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void Post::clear_sticky_time() {
  sticky_time_ = 0;
  clear_has_sticky_time();
}
inline ::google::protobuf::int32 Post::sticky_time() const {
  // @@protoc_insertion_point(field_get:weizhu.community.Post.sticky_time)
  return sticky_time_;
}
inline void Post::set_sticky_time(::google::protobuf::int32 value) {
  set_has_sticky_time();
  sticky_time_ = value;
  // @@protoc_insertion_point(field_set:weizhu.community.Post.sticky_time)
}

// optional bool is_recommend = 14;
inline bool Post::has_is_recommend() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void Post::set_has_is_recommend() {
  _has_bits_[0] |= 0x00002000u;
}
inline void Post::clear_has_is_recommend() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void Post::clear_is_recommend() {
  is_recommend_ = false;
  clear_has_is_recommend();
}
inline bool Post::is_recommend() const {
  // @@protoc_insertion_point(field_get:weizhu.community.Post.is_recommend)
  return is_recommend_;
}
inline void Post::set_is_recommend(bool value) {
  set_has_is_recommend();
  is_recommend_ = value;
  // @@protoc_insertion_point(field_set:weizhu.community.Post.is_recommend)
}

// optional int32 recommend_time = 15;
inline bool Post::has_recommend_time() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void Post::set_has_recommend_time() {
  _has_bits_[0] |= 0x00004000u;
}
inline void Post::clear_has_recommend_time() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void Post::clear_recommend_time() {
  recommend_time_ = 0;
  clear_has_recommend_time();
}
inline ::google::protobuf::int32 Post::recommend_time() const {
  // @@protoc_insertion_point(field_get:weizhu.community.Post.recommend_time)
  return recommend_time_;
}
inline void Post::set_recommend_time(::google::protobuf::int32 value) {
  set_has_recommend_time();
  recommend_time_ = value;
  // @@protoc_insertion_point(field_set:weizhu.community.Post.recommend_time)
}

// repeated string tag = 16;
inline int Post::tag_size() const {
  return tag_.size();
}
inline void Post::clear_tag() {
  tag_.Clear();
}
inline const ::std::string& Post::tag(int index) const {
  // @@protoc_insertion_point(field_get:weizhu.community.Post.tag)
  return tag_.Get(index);
}
inline ::std::string* Post::mutable_tag(int index) {
  // @@protoc_insertion_point(field_mutable:weizhu.community.Post.tag)
  return tag_.Mutable(index);
}
inline void Post::set_tag(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:weizhu.community.Post.tag)
  tag_.Mutable(index)->assign(value);
}
inline void Post::set_tag(int index, const char* value) {
  tag_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:weizhu.community.Post.tag)
}
inline void Post::set_tag(int index, const char* value, size_t size) {
  tag_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:weizhu.community.Post.tag)
}
inline ::std::string* Post::add_tag() {
  return tag_.Add();
}
inline void Post::add_tag(const ::std::string& value) {
  tag_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:weizhu.community.Post.tag)
}
inline void Post::add_tag(const char* value) {
  tag_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:weizhu.community.Post.tag)
}
inline void Post::add_tag(const char* value, size_t size) {
  tag_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:weizhu.community.Post.tag)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Post::tag() const {
  // @@protoc_insertion_point(field_list:weizhu.community.Post.tag)
  return tag_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Post::mutable_tag() {
  // @@protoc_insertion_point(field_mutable_list:weizhu.community.Post.tag)
  return &tag_;
}

// -------------------------------------------------------------------

// Comment

// required int32 post_id = 1;
inline bool Comment::has_post_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Comment::set_has_post_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Comment::clear_has_post_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Comment::clear_post_id() {
  post_id_ = 0;
  clear_has_post_id();
}
inline ::google::protobuf::int32 Comment::post_id() const {
  // @@protoc_insertion_point(field_get:weizhu.community.Comment.post_id)
  return post_id_;
}
inline void Comment::set_post_id(::google::protobuf::int32 value) {
  set_has_post_id();
  post_id_ = value;
  // @@protoc_insertion_point(field_set:weizhu.community.Comment.post_id)
}

// required int32 comment_id = 2;
inline bool Comment::has_comment_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Comment::set_has_comment_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Comment::clear_has_comment_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Comment::clear_comment_id() {
  comment_id_ = 0;
  clear_has_comment_id();
}
inline ::google::protobuf::int32 Comment::comment_id() const {
  // @@protoc_insertion_point(field_get:weizhu.community.Comment.comment_id)
  return comment_id_;
}
inline void Comment::set_comment_id(::google::protobuf::int32 value) {
  set_has_comment_id();
  comment_id_ = value;
  // @@protoc_insertion_point(field_set:weizhu.community.Comment.comment_id)
}

// optional int32 reply_comment_id = 3;
inline bool Comment::has_reply_comment_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Comment::set_has_reply_comment_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Comment::clear_has_reply_comment_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Comment::clear_reply_comment_id() {
  reply_comment_id_ = 0;
  clear_has_reply_comment_id();
}
inline ::google::protobuf::int32 Comment::reply_comment_id() const {
  // @@protoc_insertion_point(field_get:weizhu.community.Comment.reply_comment_id)
  return reply_comment_id_;
}
inline void Comment::set_reply_comment_id(::google::protobuf::int32 value) {
  set_has_reply_comment_id();
  reply_comment_id_ = value;
  // @@protoc_insertion_point(field_set:weizhu.community.Comment.reply_comment_id)
}

// required string content = 4;
inline bool Comment::has_content() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Comment::set_has_content() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Comment::clear_has_content() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Comment::clear_content() {
  if (content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_->clear();
  }
  clear_has_content();
}
inline const ::std::string& Comment::content() const {
  // @@protoc_insertion_point(field_get:weizhu.community.Comment.content)
  return *content_;
}
inline void Comment::set_content(const ::std::string& value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_ = new ::std::string;
  }
  content_->assign(value);
  // @@protoc_insertion_point(field_set:weizhu.community.Comment.content)
}
inline void Comment::set_content(const char* value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_ = new ::std::string;
  }
  content_->assign(value);
  // @@protoc_insertion_point(field_set_char:weizhu.community.Comment.content)
}
inline void Comment::set_content(const char* value, size_t size) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_ = new ::std::string;
  }
  content_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:weizhu.community.Comment.content)
}
inline ::std::string* Comment::mutable_content() {
  set_has_content();
  if (content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:weizhu.community.Comment.content)
  return content_;
}
inline ::std::string* Comment::release_content() {
  clear_has_content();
  if (content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = content_;
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Comment::set_allocated_content(::std::string* content) {
  if (content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete content_;
  }
  if (content) {
    set_has_content();
    content_ = content;
  } else {
    clear_has_content();
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:weizhu.community.Comment.content)
}

// required int64 create_user_id = 5;
inline bool Comment::has_create_user_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Comment::set_has_create_user_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Comment::clear_has_create_user_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Comment::clear_create_user_id() {
  create_user_id_ = GOOGLE_LONGLONG(0);
  clear_has_create_user_id();
}
inline ::google::protobuf::int64 Comment::create_user_id() const {
  // @@protoc_insertion_point(field_get:weizhu.community.Comment.create_user_id)
  return create_user_id_;
}
inline void Comment::set_create_user_id(::google::protobuf::int64 value) {
  set_has_create_user_id();
  create_user_id_ = value;
  // @@protoc_insertion_point(field_set:weizhu.community.Comment.create_user_id)
}

// required int32 create_time = 6;
inline bool Comment::has_create_time() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Comment::set_has_create_time() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Comment::clear_has_create_time() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Comment::clear_create_time() {
  create_time_ = 0;
  clear_has_create_time();
}
inline ::google::protobuf::int32 Comment::create_time() const {
  // @@protoc_insertion_point(field_get:weizhu.community.Comment.create_time)
  return create_time_;
}
inline void Comment::set_create_time(::google::protobuf::int32 value) {
  set_has_create_time();
  create_time_ = value;
  // @@protoc_insertion_point(field_set:weizhu.community.Comment.create_time)
}

// optional .weizhu.community.Comment.State state = 7 [default = NORMAL];
inline bool Comment::has_state() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Comment::set_has_state() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Comment::clear_has_state() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Comment::clear_state() {
  state_ = 0;
  clear_has_state();
}
inline ::weizhu::community::Comment_State Comment::state() const {
  // @@protoc_insertion_point(field_get:weizhu.community.Comment.state)
  return static_cast< ::weizhu::community::Comment_State >(state_);
}
inline void Comment::set_state(::weizhu::community::Comment_State value) {
  assert(::weizhu::community::Comment_State_IsValid(value));
  set_has_state();
  state_ = value;
  // @@protoc_insertion_point(field_set:weizhu.community.Comment.state)
}

// optional int32 like_count = 8;
inline bool Comment::has_like_count() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Comment::set_has_like_count() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Comment::clear_has_like_count() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Comment::clear_like_count() {
  like_count_ = 0;
  clear_has_like_count();
}
inline ::google::protobuf::int32 Comment::like_count() const {
  // @@protoc_insertion_point(field_get:weizhu.community.Comment.like_count)
  return like_count_;
}
inline void Comment::set_like_count(::google::protobuf::int32 value) {
  set_has_like_count();
  like_count_ = value;
  // @@protoc_insertion_point(field_set:weizhu.community.Comment.like_count)
}

// optional bool is_like = 9;
inline bool Comment::has_is_like() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Comment::set_has_is_like() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Comment::clear_has_is_like() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Comment::clear_is_like() {
  is_like_ = false;
  clear_has_is_like();
}
inline bool Comment::is_like() const {
  // @@protoc_insertion_point(field_get:weizhu.community.Comment.is_like)
  return is_like_;
}
inline void Comment::set_is_like(bool value) {
  set_has_is_like();
  is_like_ = value;
  // @@protoc_insertion_point(field_set:weizhu.community.Comment.is_like)
}

// -------------------------------------------------------------------

// PostLike

// required int32 post_id = 1;
inline bool PostLike::has_post_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PostLike::set_has_post_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PostLike::clear_has_post_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PostLike::clear_post_id() {
  post_id_ = 0;
  clear_has_post_id();
}
inline ::google::protobuf::int32 PostLike::post_id() const {
  // @@protoc_insertion_point(field_get:weizhu.community.PostLike.post_id)
  return post_id_;
}
inline void PostLike::set_post_id(::google::protobuf::int32 value) {
  set_has_post_id();
  post_id_ = value;
  // @@protoc_insertion_point(field_set:weizhu.community.PostLike.post_id)
}

// required int64 user_id = 2;
inline bool PostLike::has_user_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PostLike::set_has_user_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PostLike::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PostLike::clear_user_id() {
  user_id_ = GOOGLE_LONGLONG(0);
  clear_has_user_id();
}
inline ::google::protobuf::int64 PostLike::user_id() const {
  // @@protoc_insertion_point(field_get:weizhu.community.PostLike.user_id)
  return user_id_;
}
inline void PostLike::set_user_id(::google::protobuf::int64 value) {
  set_has_user_id();
  user_id_ = value;
  // @@protoc_insertion_point(field_set:weizhu.community.PostLike.user_id)
}

// required int32 create_time = 3;
inline bool PostLike::has_create_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PostLike::set_has_create_time() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PostLike::clear_has_create_time() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PostLike::clear_create_time() {
  create_time_ = 0;
  clear_has_create_time();
}
inline ::google::protobuf::int32 PostLike::create_time() const {
  // @@protoc_insertion_point(field_get:weizhu.community.PostLike.create_time)
  return create_time_;
}
inline void PostLike::set_create_time(::google::protobuf::int32 value) {
  set_has_create_time();
  create_time_ = value;
  // @@protoc_insertion_point(field_set:weizhu.community.PostLike.create_time)
}

// -------------------------------------------------------------------

// CommunityPostMessagePush

// required int32 post_id = 1;
inline bool CommunityPostMessagePush::has_post_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CommunityPostMessagePush::set_has_post_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CommunityPostMessagePush::clear_has_post_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CommunityPostMessagePush::clear_post_id() {
  post_id_ = 0;
  clear_has_post_id();
}
inline ::google::protobuf::int32 CommunityPostMessagePush::post_id() const {
  // @@protoc_insertion_point(field_get:weizhu.community.CommunityPostMessagePush.post_id)
  return post_id_;
}
inline void CommunityPostMessagePush::set_post_id(::google::protobuf::int32 value) {
  set_has_post_id();
  post_id_ = value;
  // @@protoc_insertion_point(field_set:weizhu.community.CommunityPostMessagePush.post_id)
}

// required int32 comment_id = 2;
inline bool CommunityPostMessagePush::has_comment_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CommunityPostMessagePush::set_has_comment_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CommunityPostMessagePush::clear_has_comment_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CommunityPostMessagePush::clear_comment_id() {
  comment_id_ = 0;
  clear_has_comment_id();
}
inline ::google::protobuf::int32 CommunityPostMessagePush::comment_id() const {
  // @@protoc_insertion_point(field_get:weizhu.community.CommunityPostMessagePush.comment_id)
  return comment_id_;
}
inline void CommunityPostMessagePush::set_comment_id(::google::protobuf::int32 value) {
  set_has_comment_id();
  comment_id_ = value;
  // @@protoc_insertion_point(field_set:weizhu.community.CommunityPostMessagePush.comment_id)
}

// -------------------------------------------------------------------

// CommunityCommentMessagePush

// required int32 post_id = 1;
inline bool CommunityCommentMessagePush::has_post_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CommunityCommentMessagePush::set_has_post_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CommunityCommentMessagePush::clear_has_post_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CommunityCommentMessagePush::clear_post_id() {
  post_id_ = 0;
  clear_has_post_id();
}
inline ::google::protobuf::int32 CommunityCommentMessagePush::post_id() const {
  // @@protoc_insertion_point(field_get:weizhu.community.CommunityCommentMessagePush.post_id)
  return post_id_;
}
inline void CommunityCommentMessagePush::set_post_id(::google::protobuf::int32 value) {
  set_has_post_id();
  post_id_ = value;
  // @@protoc_insertion_point(field_set:weizhu.community.CommunityCommentMessagePush.post_id)
}

// required int32 comment_id = 2;
inline bool CommunityCommentMessagePush::has_comment_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CommunityCommentMessagePush::set_has_comment_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CommunityCommentMessagePush::clear_has_comment_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CommunityCommentMessagePush::clear_comment_id() {
  comment_id_ = 0;
  clear_has_comment_id();
}
inline ::google::protobuf::int32 CommunityCommentMessagePush::comment_id() const {
  // @@protoc_insertion_point(field_get:weizhu.community.CommunityCommentMessagePush.comment_id)
  return comment_id_;
}
inline void CommunityCommentMessagePush::set_comment_id(::google::protobuf::int32 value) {
  set_has_comment_id();
  comment_id_ = value;
  // @@protoc_insertion_point(field_set:weizhu.community.CommunityCommentMessagePush.comment_id)
}

// required int32 reply_comment_id = 3;
inline bool CommunityCommentMessagePush::has_reply_comment_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CommunityCommentMessagePush::set_has_reply_comment_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CommunityCommentMessagePush::clear_has_reply_comment_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CommunityCommentMessagePush::clear_reply_comment_id() {
  reply_comment_id_ = 0;
  clear_has_reply_comment_id();
}
inline ::google::protobuf::int32 CommunityCommentMessagePush::reply_comment_id() const {
  // @@protoc_insertion_point(field_get:weizhu.community.CommunityCommentMessagePush.reply_comment_id)
  return reply_comment_id_;
}
inline void CommunityCommentMessagePush::set_reply_comment_id(::google::protobuf::int32 value) {
  set_has_reply_comment_id();
  reply_comment_id_ = value;
  // @@protoc_insertion_point(field_set:weizhu.community.CommunityCommentMessagePush.reply_comment_id)
}

// -------------------------------------------------------------------

// GetCommunityRequest

// repeated int32 board_latest_post_id = 1;
inline int GetCommunityRequest::board_latest_post_id_size() const {
  return board_latest_post_id_.size();
}
inline void GetCommunityRequest::clear_board_latest_post_id() {
  board_latest_post_id_.Clear();
}
inline ::google::protobuf::int32 GetCommunityRequest::board_latest_post_id(int index) const {
  // @@protoc_insertion_point(field_get:weizhu.community.GetCommunityRequest.board_latest_post_id)
  return board_latest_post_id_.Get(index);
}
inline void GetCommunityRequest::set_board_latest_post_id(int index, ::google::protobuf::int32 value) {
  board_latest_post_id_.Set(index, value);
  // @@protoc_insertion_point(field_set:weizhu.community.GetCommunityRequest.board_latest_post_id)
}
inline void GetCommunityRequest::add_board_latest_post_id(::google::protobuf::int32 value) {
  board_latest_post_id_.Add(value);
  // @@protoc_insertion_point(field_add:weizhu.community.GetCommunityRequest.board_latest_post_id)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
GetCommunityRequest::board_latest_post_id() const {
  // @@protoc_insertion_point(field_list:weizhu.community.GetCommunityRequest.board_latest_post_id)
  return board_latest_post_id_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
GetCommunityRequest::mutable_board_latest_post_id() {
  // @@protoc_insertion_point(field_mutable_list:weizhu.community.GetCommunityRequest.board_latest_post_id)
  return &board_latest_post_id_;
}

// -------------------------------------------------------------------

// GetCommunityResponse

// required string community_name = 1;
inline bool GetCommunityResponse::has_community_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GetCommunityResponse::set_has_community_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GetCommunityResponse::clear_has_community_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GetCommunityResponse::clear_community_name() {
  if (community_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    community_name_->clear();
  }
  clear_has_community_name();
}
inline const ::std::string& GetCommunityResponse::community_name() const {
  // @@protoc_insertion_point(field_get:weizhu.community.GetCommunityResponse.community_name)
  return *community_name_;
}
inline void GetCommunityResponse::set_community_name(const ::std::string& value) {
  set_has_community_name();
  if (community_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    community_name_ = new ::std::string;
  }
  community_name_->assign(value);
  // @@protoc_insertion_point(field_set:weizhu.community.GetCommunityResponse.community_name)
}
inline void GetCommunityResponse::set_community_name(const char* value) {
  set_has_community_name();
  if (community_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    community_name_ = new ::std::string;
  }
  community_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:weizhu.community.GetCommunityResponse.community_name)
}
inline void GetCommunityResponse::set_community_name(const char* value, size_t size) {
  set_has_community_name();
  if (community_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    community_name_ = new ::std::string;
  }
  community_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:weizhu.community.GetCommunityResponse.community_name)
}
inline ::std::string* GetCommunityResponse::mutable_community_name() {
  set_has_community_name();
  if (community_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    community_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:weizhu.community.GetCommunityResponse.community_name)
  return community_name_;
}
inline ::std::string* GetCommunityResponse::release_community_name() {
  clear_has_community_name();
  if (community_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = community_name_;
    community_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void GetCommunityResponse::set_allocated_community_name(::std::string* community_name) {
  if (community_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete community_name_;
  }
  if (community_name) {
    set_has_community_name();
    community_name_ = community_name;
  } else {
    clear_has_community_name();
    community_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:weizhu.community.GetCommunityResponse.community_name)
}

// required int32 post_new_count = 2;
inline bool GetCommunityResponse::has_post_new_count() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GetCommunityResponse::set_has_post_new_count() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GetCommunityResponse::clear_has_post_new_count() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GetCommunityResponse::clear_post_new_count() {
  post_new_count_ = 0;
  clear_has_post_new_count();
}
inline ::google::protobuf::int32 GetCommunityResponse::post_new_count() const {
  // @@protoc_insertion_point(field_get:weizhu.community.GetCommunityResponse.post_new_count)
  return post_new_count_;
}
inline void GetCommunityResponse::set_post_new_count(::google::protobuf::int32 value) {
  set_has_post_new_count();
  post_new_count_ = value;
  // @@protoc_insertion_point(field_set:weizhu.community.GetCommunityResponse.post_new_count)
}

// -------------------------------------------------------------------

// GetBoardListRequest

// repeated int32 board_latest_post_id = 1;
inline int GetBoardListRequest::board_latest_post_id_size() const {
  return board_latest_post_id_.size();
}
inline void GetBoardListRequest::clear_board_latest_post_id() {
  board_latest_post_id_.Clear();
}
inline ::google::protobuf::int32 GetBoardListRequest::board_latest_post_id(int index) const {
  // @@protoc_insertion_point(field_get:weizhu.community.GetBoardListRequest.board_latest_post_id)
  return board_latest_post_id_.Get(index);
}
inline void GetBoardListRequest::set_board_latest_post_id(int index, ::google::protobuf::int32 value) {
  board_latest_post_id_.Set(index, value);
  // @@protoc_insertion_point(field_set:weizhu.community.GetBoardListRequest.board_latest_post_id)
}
inline void GetBoardListRequest::add_board_latest_post_id(::google::protobuf::int32 value) {
  board_latest_post_id_.Add(value);
  // @@protoc_insertion_point(field_add:weizhu.community.GetBoardListRequest.board_latest_post_id)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
GetBoardListRequest::board_latest_post_id() const {
  // @@protoc_insertion_point(field_list:weizhu.community.GetBoardListRequest.board_latest_post_id)
  return board_latest_post_id_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
GetBoardListRequest::mutable_board_latest_post_id() {
  // @@protoc_insertion_point(field_mutable_list:weizhu.community.GetBoardListRequest.board_latest_post_id)
  return &board_latest_post_id_;
}

// -------------------------------------------------------------------

// GetBoardListResponse

// repeated .weizhu.community.Board board = 1;
inline int GetBoardListResponse::board_size() const {
  return board_.size();
}
inline void GetBoardListResponse::clear_board() {
  board_.Clear();
}
inline const ::weizhu::community::Board& GetBoardListResponse::board(int index) const {
  // @@protoc_insertion_point(field_get:weizhu.community.GetBoardListResponse.board)
  return board_.Get(index);
}
inline ::weizhu::community::Board* GetBoardListResponse::mutable_board(int index) {
  // @@protoc_insertion_point(field_mutable:weizhu.community.GetBoardListResponse.board)
  return board_.Mutable(index);
}
inline ::weizhu::community::Board* GetBoardListResponse::add_board() {
  // @@protoc_insertion_point(field_add:weizhu.community.GetBoardListResponse.board)
  return board_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::weizhu::community::Board >&
GetBoardListResponse::board() const {
  // @@protoc_insertion_point(field_list:weizhu.community.GetBoardListResponse.board)
  return board_;
}
inline ::google::protobuf::RepeatedPtrField< ::weizhu::community::Board >*
GetBoardListResponse::mutable_board() {
  // @@protoc_insertion_point(field_mutable_list:weizhu.community.GetBoardListResponse.board)
  return &board_;
}

// -------------------------------------------------------------------

// GetPostListRequest

// required int32 board_id = 1;
inline bool GetPostListRequest::has_board_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GetPostListRequest::set_has_board_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GetPostListRequest::clear_has_board_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GetPostListRequest::clear_board_id() {
  board_id_ = 0;
  clear_has_board_id();
}
inline ::google::protobuf::int32 GetPostListRequest::board_id() const {
  // @@protoc_insertion_point(field_get:weizhu.community.GetPostListRequest.board_id)
  return board_id_;
}
inline void GetPostListRequest::set_board_id(::google::protobuf::int32 value) {
  set_has_board_id();
  board_id_ = value;
  // @@protoc_insertion_point(field_set:weizhu.community.GetPostListRequest.board_id)
}

// required .weizhu.community.GetPostListRequest.ListType list_type = 2;
inline bool GetPostListRequest::has_list_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GetPostListRequest::set_has_list_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GetPostListRequest::clear_has_list_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GetPostListRequest::clear_list_type() {
  list_type_ = 0;
  clear_has_list_type();
}
inline ::weizhu::community::GetPostListRequest_ListType GetPostListRequest::list_type() const {
  // @@protoc_insertion_point(field_get:weizhu.community.GetPostListRequest.list_type)
  return static_cast< ::weizhu::community::GetPostListRequest_ListType >(list_type_);
}
inline void GetPostListRequest::set_list_type(::weizhu::community::GetPostListRequest_ListType value) {
  assert(::weizhu::community::GetPostListRequest_ListType_IsValid(value));
  set_has_list_type();
  list_type_ = value;
  // @@protoc_insertion_point(field_set:weizhu.community.GetPostListRequest.list_type)
}

// required int32 size = 3;
inline bool GetPostListRequest::has_size() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GetPostListRequest::set_has_size() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GetPostListRequest::clear_has_size() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GetPostListRequest::clear_size() {
  size_ = 0;
  clear_has_size();
}
inline ::google::protobuf::int32 GetPostListRequest::size() const {
  // @@protoc_insertion_point(field_get:weizhu.community.GetPostListRequest.size)
  return size_;
}
inline void GetPostListRequest::set_size(::google::protobuf::int32 value) {
  set_has_size();
  size_ = value;
  // @@protoc_insertion_point(field_set:weizhu.community.GetPostListRequest.size)
}

// optional bytes offset_index = 4;
inline bool GetPostListRequest::has_offset_index() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GetPostListRequest::set_has_offset_index() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GetPostListRequest::clear_has_offset_index() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GetPostListRequest::clear_offset_index() {
  if (offset_index_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    offset_index_->clear();
  }
  clear_has_offset_index();
}
inline const ::std::string& GetPostListRequest::offset_index() const {
  // @@protoc_insertion_point(field_get:weizhu.community.GetPostListRequest.offset_index)
  return *offset_index_;
}
inline void GetPostListRequest::set_offset_index(const ::std::string& value) {
  set_has_offset_index();
  if (offset_index_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    offset_index_ = new ::std::string;
  }
  offset_index_->assign(value);
  // @@protoc_insertion_point(field_set:weizhu.community.GetPostListRequest.offset_index)
}
inline void GetPostListRequest::set_offset_index(const char* value) {
  set_has_offset_index();
  if (offset_index_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    offset_index_ = new ::std::string;
  }
  offset_index_->assign(value);
  // @@protoc_insertion_point(field_set_char:weizhu.community.GetPostListRequest.offset_index)
}
inline void GetPostListRequest::set_offset_index(const void* value, size_t size) {
  set_has_offset_index();
  if (offset_index_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    offset_index_ = new ::std::string;
  }
  offset_index_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:weizhu.community.GetPostListRequest.offset_index)
}
inline ::std::string* GetPostListRequest::mutable_offset_index() {
  set_has_offset_index();
  if (offset_index_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    offset_index_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:weizhu.community.GetPostListRequest.offset_index)
  return offset_index_;
}
inline ::std::string* GetPostListRequest::release_offset_index() {
  clear_has_offset_index();
  if (offset_index_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = offset_index_;
    offset_index_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void GetPostListRequest::set_allocated_offset_index(::std::string* offset_index) {
  if (offset_index_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete offset_index_;
  }
  if (offset_index) {
    set_has_offset_index();
    offset_index_ = offset_index;
  } else {
    clear_has_offset_index();
    offset_index_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:weizhu.community.GetPostListRequest.offset_index)
}

// -------------------------------------------------------------------

// GetPostListResponse

// repeated .weizhu.community.Post post = 1;
inline int GetPostListResponse::post_size() const {
  return post_.size();
}
inline void GetPostListResponse::clear_post() {
  post_.Clear();
}
inline const ::weizhu::community::Post& GetPostListResponse::post(int index) const {
  // @@protoc_insertion_point(field_get:weizhu.community.GetPostListResponse.post)
  return post_.Get(index);
}
inline ::weizhu::community::Post* GetPostListResponse::mutable_post(int index) {
  // @@protoc_insertion_point(field_mutable:weizhu.community.GetPostListResponse.post)
  return post_.Mutable(index);
}
inline ::weizhu::community::Post* GetPostListResponse::add_post() {
  // @@protoc_insertion_point(field_add:weizhu.community.GetPostListResponse.post)
  return post_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::weizhu::community::Post >&
GetPostListResponse::post() const {
  // @@protoc_insertion_point(field_list:weizhu.community.GetPostListResponse.post)
  return post_;
}
inline ::google::protobuf::RepeatedPtrField< ::weizhu::community::Post >*
GetPostListResponse::mutable_post() {
  // @@protoc_insertion_point(field_mutable_list:weizhu.community.GetPostListResponse.post)
  return &post_;
}

// required bool has_more = 2;
inline bool GetPostListResponse::has_has_more() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GetPostListResponse::set_has_has_more() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GetPostListResponse::clear_has_has_more() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GetPostListResponse::clear_has_more() {
  has_more_ = false;
  clear_has_has_more();
}
inline bool GetPostListResponse::has_more() const {
  // @@protoc_insertion_point(field_get:weizhu.community.GetPostListResponse.has_more)
  return has_more_;
}
inline void GetPostListResponse::set_has_more(bool value) {
  set_has_has_more();
  has_more_ = value;
  // @@protoc_insertion_point(field_set:weizhu.community.GetPostListResponse.has_more)
}

// required bytes offset_index = 3;
inline bool GetPostListResponse::has_offset_index() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GetPostListResponse::set_has_offset_index() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GetPostListResponse::clear_has_offset_index() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GetPostListResponse::clear_offset_index() {
  if (offset_index_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    offset_index_->clear();
  }
  clear_has_offset_index();
}
inline const ::std::string& GetPostListResponse::offset_index() const {
  // @@protoc_insertion_point(field_get:weizhu.community.GetPostListResponse.offset_index)
  return *offset_index_;
}
inline void GetPostListResponse::set_offset_index(const ::std::string& value) {
  set_has_offset_index();
  if (offset_index_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    offset_index_ = new ::std::string;
  }
  offset_index_->assign(value);
  // @@protoc_insertion_point(field_set:weizhu.community.GetPostListResponse.offset_index)
}
inline void GetPostListResponse::set_offset_index(const char* value) {
  set_has_offset_index();
  if (offset_index_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    offset_index_ = new ::std::string;
  }
  offset_index_->assign(value);
  // @@protoc_insertion_point(field_set_char:weizhu.community.GetPostListResponse.offset_index)
}
inline void GetPostListResponse::set_offset_index(const void* value, size_t size) {
  set_has_offset_index();
  if (offset_index_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    offset_index_ = new ::std::string;
  }
  offset_index_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:weizhu.community.GetPostListResponse.offset_index)
}
inline ::std::string* GetPostListResponse::mutable_offset_index() {
  set_has_offset_index();
  if (offset_index_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    offset_index_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:weizhu.community.GetPostListResponse.offset_index)
  return offset_index_;
}
inline ::std::string* GetPostListResponse::release_offset_index() {
  clear_has_offset_index();
  if (offset_index_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = offset_index_;
    offset_index_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void GetPostListResponse::set_allocated_offset_index(::std::string* offset_index) {
  if (offset_index_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete offset_index_;
  }
  if (offset_index) {
    set_has_offset_index();
    offset_index_ = offset_index;
  } else {
    clear_has_offset_index();
    offset_index_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:weizhu.community.GetPostListResponse.offset_index)
}

// -------------------------------------------------------------------

// GetCommentListRequest

// required int32 post_id = 1;
inline bool GetCommentListRequest::has_post_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GetCommentListRequest::set_has_post_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GetCommentListRequest::clear_has_post_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GetCommentListRequest::clear_post_id() {
  post_id_ = 0;
  clear_has_post_id();
}
inline ::google::protobuf::int32 GetCommentListRequest::post_id() const {
  // @@protoc_insertion_point(field_get:weizhu.community.GetCommentListRequest.post_id)
  return post_id_;
}
inline void GetCommentListRequest::set_post_id(::google::protobuf::int32 value) {
  set_has_post_id();
  post_id_ = value;
  // @@protoc_insertion_point(field_set:weizhu.community.GetCommentListRequest.post_id)
}

// required int32 size = 2;
inline bool GetCommentListRequest::has_size() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GetCommentListRequest::set_has_size() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GetCommentListRequest::clear_has_size() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GetCommentListRequest::clear_size() {
  size_ = 0;
  clear_has_size();
}
inline ::google::protobuf::int32 GetCommentListRequest::size() const {
  // @@protoc_insertion_point(field_get:weizhu.community.GetCommentListRequest.size)
  return size_;
}
inline void GetCommentListRequest::set_size(::google::protobuf::int32 value) {
  set_has_size();
  size_ = value;
  // @@protoc_insertion_point(field_set:weizhu.community.GetCommentListRequest.size)
}

// optional bytes offset_index = 3;
inline bool GetCommentListRequest::has_offset_index() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GetCommentListRequest::set_has_offset_index() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GetCommentListRequest::clear_has_offset_index() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GetCommentListRequest::clear_offset_index() {
  if (offset_index_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    offset_index_->clear();
  }
  clear_has_offset_index();
}
inline const ::std::string& GetCommentListRequest::offset_index() const {
  // @@protoc_insertion_point(field_get:weizhu.community.GetCommentListRequest.offset_index)
  return *offset_index_;
}
inline void GetCommentListRequest::set_offset_index(const ::std::string& value) {
  set_has_offset_index();
  if (offset_index_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    offset_index_ = new ::std::string;
  }
  offset_index_->assign(value);
  // @@protoc_insertion_point(field_set:weizhu.community.GetCommentListRequest.offset_index)
}
inline void GetCommentListRequest::set_offset_index(const char* value) {
  set_has_offset_index();
  if (offset_index_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    offset_index_ = new ::std::string;
  }
  offset_index_->assign(value);
  // @@protoc_insertion_point(field_set_char:weizhu.community.GetCommentListRequest.offset_index)
}
inline void GetCommentListRequest::set_offset_index(const void* value, size_t size) {
  set_has_offset_index();
  if (offset_index_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    offset_index_ = new ::std::string;
  }
  offset_index_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:weizhu.community.GetCommentListRequest.offset_index)
}
inline ::std::string* GetCommentListRequest::mutable_offset_index() {
  set_has_offset_index();
  if (offset_index_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    offset_index_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:weizhu.community.GetCommentListRequest.offset_index)
  return offset_index_;
}
inline ::std::string* GetCommentListRequest::release_offset_index() {
  clear_has_offset_index();
  if (offset_index_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = offset_index_;
    offset_index_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void GetCommentListRequest::set_allocated_offset_index(::std::string* offset_index) {
  if (offset_index_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete offset_index_;
  }
  if (offset_index) {
    set_has_offset_index();
    offset_index_ = offset_index;
  } else {
    clear_has_offset_index();
    offset_index_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:weizhu.community.GetCommentListRequest.offset_index)
}

// -------------------------------------------------------------------

// GetCommentListResponse

// repeated .weizhu.community.Comment comment = 1;
inline int GetCommentListResponse::comment_size() const {
  return comment_.size();
}
inline void GetCommentListResponse::clear_comment() {
  comment_.Clear();
}
inline const ::weizhu::community::Comment& GetCommentListResponse::comment(int index) const {
  // @@protoc_insertion_point(field_get:weizhu.community.GetCommentListResponse.comment)
  return comment_.Get(index);
}
inline ::weizhu::community::Comment* GetCommentListResponse::mutable_comment(int index) {
  // @@protoc_insertion_point(field_mutable:weizhu.community.GetCommentListResponse.comment)
  return comment_.Mutable(index);
}
inline ::weizhu::community::Comment* GetCommentListResponse::add_comment() {
  // @@protoc_insertion_point(field_add:weizhu.community.GetCommentListResponse.comment)
  return comment_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::weizhu::community::Comment >&
GetCommentListResponse::comment() const {
  // @@protoc_insertion_point(field_list:weizhu.community.GetCommentListResponse.comment)
  return comment_;
}
inline ::google::protobuf::RepeatedPtrField< ::weizhu::community::Comment >*
GetCommentListResponse::mutable_comment() {
  // @@protoc_insertion_point(field_mutable_list:weizhu.community.GetCommentListResponse.comment)
  return &comment_;
}

// required bool has_more = 2;
inline bool GetCommentListResponse::has_has_more() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GetCommentListResponse::set_has_has_more() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GetCommentListResponse::clear_has_has_more() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GetCommentListResponse::clear_has_more() {
  has_more_ = false;
  clear_has_has_more();
}
inline bool GetCommentListResponse::has_more() const {
  // @@protoc_insertion_point(field_get:weizhu.community.GetCommentListResponse.has_more)
  return has_more_;
}
inline void GetCommentListResponse::set_has_more(bool value) {
  set_has_has_more();
  has_more_ = value;
  // @@protoc_insertion_point(field_set:weizhu.community.GetCommentListResponse.has_more)
}

// required bytes offset_index = 3;
inline bool GetCommentListResponse::has_offset_index() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GetCommentListResponse::set_has_offset_index() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GetCommentListResponse::clear_has_offset_index() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GetCommentListResponse::clear_offset_index() {
  if (offset_index_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    offset_index_->clear();
  }
  clear_has_offset_index();
}
inline const ::std::string& GetCommentListResponse::offset_index() const {
  // @@protoc_insertion_point(field_get:weizhu.community.GetCommentListResponse.offset_index)
  return *offset_index_;
}
inline void GetCommentListResponse::set_offset_index(const ::std::string& value) {
  set_has_offset_index();
  if (offset_index_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    offset_index_ = new ::std::string;
  }
  offset_index_->assign(value);
  // @@protoc_insertion_point(field_set:weizhu.community.GetCommentListResponse.offset_index)
}
inline void GetCommentListResponse::set_offset_index(const char* value) {
  set_has_offset_index();
  if (offset_index_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    offset_index_ = new ::std::string;
  }
  offset_index_->assign(value);
  // @@protoc_insertion_point(field_set_char:weizhu.community.GetCommentListResponse.offset_index)
}
inline void GetCommentListResponse::set_offset_index(const void* value, size_t size) {
  set_has_offset_index();
  if (offset_index_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    offset_index_ = new ::std::string;
  }
  offset_index_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:weizhu.community.GetCommentListResponse.offset_index)
}
inline ::std::string* GetCommentListResponse::mutable_offset_index() {
  set_has_offset_index();
  if (offset_index_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    offset_index_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:weizhu.community.GetCommentListResponse.offset_index)
  return offset_index_;
}
inline ::std::string* GetCommentListResponse::release_offset_index() {
  clear_has_offset_index();
  if (offset_index_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = offset_index_;
    offset_index_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void GetCommentListResponse::set_allocated_offset_index(::std::string* offset_index) {
  if (offset_index_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete offset_index_;
  }
  if (offset_index) {
    set_has_offset_index();
    offset_index_ = offset_index;
  } else {
    clear_has_offset_index();
    offset_index_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:weizhu.community.GetCommentListResponse.offset_index)
}

// -------------------------------------------------------------------

// GetHotCommentListRequest

// required int32 post_id = 1;
inline bool GetHotCommentListRequest::has_post_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GetHotCommentListRequest::set_has_post_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GetHotCommentListRequest::clear_has_post_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GetHotCommentListRequest::clear_post_id() {
  post_id_ = 0;
  clear_has_post_id();
}
inline ::google::protobuf::int32 GetHotCommentListRequest::post_id() const {
  // @@protoc_insertion_point(field_get:weizhu.community.GetHotCommentListRequest.post_id)
  return post_id_;
}
inline void GetHotCommentListRequest::set_post_id(::google::protobuf::int32 value) {
  set_has_post_id();
  post_id_ = value;
  // @@protoc_insertion_point(field_set:weizhu.community.GetHotCommentListRequest.post_id)
}

// -------------------------------------------------------------------

// GetHotCommentListResponse

// repeated .weizhu.community.Comment comment = 1;
inline int GetHotCommentListResponse::comment_size() const {
  return comment_.size();
}
inline void GetHotCommentListResponse::clear_comment() {
  comment_.Clear();
}
inline const ::weizhu::community::Comment& GetHotCommentListResponse::comment(int index) const {
  // @@protoc_insertion_point(field_get:weizhu.community.GetHotCommentListResponse.comment)
  return comment_.Get(index);
}
inline ::weizhu::community::Comment* GetHotCommentListResponse::mutable_comment(int index) {
  // @@protoc_insertion_point(field_mutable:weizhu.community.GetHotCommentListResponse.comment)
  return comment_.Mutable(index);
}
inline ::weizhu::community::Comment* GetHotCommentListResponse::add_comment() {
  // @@protoc_insertion_point(field_add:weizhu.community.GetHotCommentListResponse.comment)
  return comment_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::weizhu::community::Comment >&
GetHotCommentListResponse::comment() const {
  // @@protoc_insertion_point(field_list:weizhu.community.GetHotCommentListResponse.comment)
  return comment_;
}
inline ::google::protobuf::RepeatedPtrField< ::weizhu::community::Comment >*
GetHotCommentListResponse::mutable_comment() {
  // @@protoc_insertion_point(field_mutable_list:weizhu.community.GetHotCommentListResponse.comment)
  return &comment_;
}

// -------------------------------------------------------------------

// CreatePostRequest

// required int32 board_id = 1;
inline bool CreatePostRequest::has_board_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CreatePostRequest::set_has_board_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CreatePostRequest::clear_has_board_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CreatePostRequest::clear_board_id() {
  board_id_ = 0;
  clear_has_board_id();
}
inline ::google::protobuf::int32 CreatePostRequest::board_id() const {
  // @@protoc_insertion_point(field_get:weizhu.community.CreatePostRequest.board_id)
  return board_id_;
}
inline void CreatePostRequest::set_board_id(::google::protobuf::int32 value) {
  set_has_board_id();
  board_id_ = value;
  // @@protoc_insertion_point(field_set:weizhu.community.CreatePostRequest.board_id)
}

// required string title = 2;
inline bool CreatePostRequest::has_title() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CreatePostRequest::set_has_title() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CreatePostRequest::clear_has_title() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CreatePostRequest::clear_title() {
  if (title_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    title_->clear();
  }
  clear_has_title();
}
inline const ::std::string& CreatePostRequest::title() const {
  // @@protoc_insertion_point(field_get:weizhu.community.CreatePostRequest.title)
  return *title_;
}
inline void CreatePostRequest::set_title(const ::std::string& value) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    title_ = new ::std::string;
  }
  title_->assign(value);
  // @@protoc_insertion_point(field_set:weizhu.community.CreatePostRequest.title)
}
inline void CreatePostRequest::set_title(const char* value) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    title_ = new ::std::string;
  }
  title_->assign(value);
  // @@protoc_insertion_point(field_set_char:weizhu.community.CreatePostRequest.title)
}
inline void CreatePostRequest::set_title(const char* value, size_t size) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    title_ = new ::std::string;
  }
  title_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:weizhu.community.CreatePostRequest.title)
}
inline ::std::string* CreatePostRequest::mutable_title() {
  set_has_title();
  if (title_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    title_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:weizhu.community.CreatePostRequest.title)
  return title_;
}
inline ::std::string* CreatePostRequest::release_title() {
  clear_has_title();
  if (title_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = title_;
    title_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CreatePostRequest::set_allocated_title(::std::string* title) {
  if (title_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete title_;
  }
  if (title) {
    set_has_title();
    title_ = title;
  } else {
    clear_has_title();
    title_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:weizhu.community.CreatePostRequest.title)
}

// optional string text = 3;
inline bool CreatePostRequest::has_text() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CreatePostRequest::set_has_text() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CreatePostRequest::clear_has_text() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CreatePostRequest::clear_text() {
  if (text_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    text_->clear();
  }
  clear_has_text();
}
inline const ::std::string& CreatePostRequest::text() const {
  // @@protoc_insertion_point(field_get:weizhu.community.CreatePostRequest.text)
  return *text_;
}
inline void CreatePostRequest::set_text(const ::std::string& value) {
  set_has_text();
  if (text_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    text_ = new ::std::string;
  }
  text_->assign(value);
  // @@protoc_insertion_point(field_set:weizhu.community.CreatePostRequest.text)
}
inline void CreatePostRequest::set_text(const char* value) {
  set_has_text();
  if (text_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    text_ = new ::std::string;
  }
  text_->assign(value);
  // @@protoc_insertion_point(field_set_char:weizhu.community.CreatePostRequest.text)
}
inline void CreatePostRequest::set_text(const char* value, size_t size) {
  set_has_text();
  if (text_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    text_ = new ::std::string;
  }
  text_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:weizhu.community.CreatePostRequest.text)
}
inline ::std::string* CreatePostRequest::mutable_text() {
  set_has_text();
  if (text_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    text_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:weizhu.community.CreatePostRequest.text)
  return text_;
}
inline ::std::string* CreatePostRequest::release_text() {
  clear_has_text();
  if (text_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = text_;
    text_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CreatePostRequest::set_allocated_text(::std::string* text) {
  if (text_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete text_;
  }
  if (text) {
    set_has_text();
    text_ = text;
  } else {
    clear_has_text();
    text_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:weizhu.community.CreatePostRequest.text)
}

// optional string image_name = 4;
inline bool CreatePostRequest::has_image_name() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CreatePostRequest::set_has_image_name() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CreatePostRequest::clear_has_image_name() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CreatePostRequest::clear_image_name() {
  if (image_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    image_name_->clear();
  }
  clear_has_image_name();
}
inline const ::std::string& CreatePostRequest::image_name() const {
  // @@protoc_insertion_point(field_get:weizhu.community.CreatePostRequest.image_name)
  return *image_name_;
}
inline void CreatePostRequest::set_image_name(const ::std::string& value) {
  set_has_image_name();
  if (image_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    image_name_ = new ::std::string;
  }
  image_name_->assign(value);
  // @@protoc_insertion_point(field_set:weizhu.community.CreatePostRequest.image_name)
}
inline void CreatePostRequest::set_image_name(const char* value) {
  set_has_image_name();
  if (image_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    image_name_ = new ::std::string;
  }
  image_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:weizhu.community.CreatePostRequest.image_name)
}
inline void CreatePostRequest::set_image_name(const char* value, size_t size) {
  set_has_image_name();
  if (image_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    image_name_ = new ::std::string;
  }
  image_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:weizhu.community.CreatePostRequest.image_name)
}
inline ::std::string* CreatePostRequest::mutable_image_name() {
  set_has_image_name();
  if (image_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    image_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:weizhu.community.CreatePostRequest.image_name)
  return image_name_;
}
inline ::std::string* CreatePostRequest::release_image_name() {
  clear_has_image_name();
  if (image_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = image_name_;
    image_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CreatePostRequest::set_allocated_image_name(::std::string* image_name) {
  if (image_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete image_name_;
  }
  if (image_name) {
    set_has_image_name();
    image_name_ = image_name;
  } else {
    clear_has_image_name();
    image_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:weizhu.community.CreatePostRequest.image_name)
}

// repeated string tag = 5;
inline int CreatePostRequest::tag_size() const {
  return tag_.size();
}
inline void CreatePostRequest::clear_tag() {
  tag_.Clear();
}
inline const ::std::string& CreatePostRequest::tag(int index) const {
  // @@protoc_insertion_point(field_get:weizhu.community.CreatePostRequest.tag)
  return tag_.Get(index);
}
inline ::std::string* CreatePostRequest::mutable_tag(int index) {
  // @@protoc_insertion_point(field_mutable:weizhu.community.CreatePostRequest.tag)
  return tag_.Mutable(index);
}
inline void CreatePostRequest::set_tag(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:weizhu.community.CreatePostRequest.tag)
  tag_.Mutable(index)->assign(value);
}
inline void CreatePostRequest::set_tag(int index, const char* value) {
  tag_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:weizhu.community.CreatePostRequest.tag)
}
inline void CreatePostRequest::set_tag(int index, const char* value, size_t size) {
  tag_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:weizhu.community.CreatePostRequest.tag)
}
inline ::std::string* CreatePostRequest::add_tag() {
  return tag_.Add();
}
inline void CreatePostRequest::add_tag(const ::std::string& value) {
  tag_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:weizhu.community.CreatePostRequest.tag)
}
inline void CreatePostRequest::add_tag(const char* value) {
  tag_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:weizhu.community.CreatePostRequest.tag)
}
inline void CreatePostRequest::add_tag(const char* value, size_t size) {
  tag_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:weizhu.community.CreatePostRequest.tag)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
CreatePostRequest::tag() const {
  // @@protoc_insertion_point(field_list:weizhu.community.CreatePostRequest.tag)
  return tag_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
CreatePostRequest::mutable_tag() {
  // @@protoc_insertion_point(field_mutable_list:weizhu.community.CreatePostRequest.tag)
  return &tag_;
}

// -------------------------------------------------------------------

// CreatePostResponse

// optional .weizhu.community.CreatePostResponse.Result result = 1 [default = FAIL_UNKNOWN];
inline bool CreatePostResponse::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CreatePostResponse::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CreatePostResponse::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CreatePostResponse::clear_result() {
  result_ = 99;
  clear_has_result();
}
inline ::weizhu::community::CreatePostResponse_Result CreatePostResponse::result() const {
  // @@protoc_insertion_point(field_get:weizhu.community.CreatePostResponse.result)
  return static_cast< ::weizhu::community::CreatePostResponse_Result >(result_);
}
inline void CreatePostResponse::set_result(::weizhu::community::CreatePostResponse_Result value) {
  assert(::weizhu::community::CreatePostResponse_Result_IsValid(value));
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:weizhu.community.CreatePostResponse.result)
}

// optional string fail_text = 2;
inline bool CreatePostResponse::has_fail_text() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CreatePostResponse::set_has_fail_text() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CreatePostResponse::clear_has_fail_text() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CreatePostResponse::clear_fail_text() {
  if (fail_text_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    fail_text_->clear();
  }
  clear_has_fail_text();
}
inline const ::std::string& CreatePostResponse::fail_text() const {
  // @@protoc_insertion_point(field_get:weizhu.community.CreatePostResponse.fail_text)
  return *fail_text_;
}
inline void CreatePostResponse::set_fail_text(const ::std::string& value) {
  set_has_fail_text();
  if (fail_text_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    fail_text_ = new ::std::string;
  }
  fail_text_->assign(value);
  // @@protoc_insertion_point(field_set:weizhu.community.CreatePostResponse.fail_text)
}
inline void CreatePostResponse::set_fail_text(const char* value) {
  set_has_fail_text();
  if (fail_text_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    fail_text_ = new ::std::string;
  }
  fail_text_->assign(value);
  // @@protoc_insertion_point(field_set_char:weizhu.community.CreatePostResponse.fail_text)
}
inline void CreatePostResponse::set_fail_text(const char* value, size_t size) {
  set_has_fail_text();
  if (fail_text_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    fail_text_ = new ::std::string;
  }
  fail_text_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:weizhu.community.CreatePostResponse.fail_text)
}
inline ::std::string* CreatePostResponse::mutable_fail_text() {
  set_has_fail_text();
  if (fail_text_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    fail_text_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:weizhu.community.CreatePostResponse.fail_text)
  return fail_text_;
}
inline ::std::string* CreatePostResponse::release_fail_text() {
  clear_has_fail_text();
  if (fail_text_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = fail_text_;
    fail_text_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CreatePostResponse::set_allocated_fail_text(::std::string* fail_text) {
  if (fail_text_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete fail_text_;
  }
  if (fail_text) {
    set_has_fail_text();
    fail_text_ = fail_text;
  } else {
    clear_has_fail_text();
    fail_text_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:weizhu.community.CreatePostResponse.fail_text)
}

// optional int32 post_id = 3;
inline bool CreatePostResponse::has_post_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CreatePostResponse::set_has_post_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CreatePostResponse::clear_has_post_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CreatePostResponse::clear_post_id() {
  post_id_ = 0;
  clear_has_post_id();
}
inline ::google::protobuf::int32 CreatePostResponse::post_id() const {
  // @@protoc_insertion_point(field_get:weizhu.community.CreatePostResponse.post_id)
  return post_id_;
}
inline void CreatePostResponse::set_post_id(::google::protobuf::int32 value) {
  set_has_post_id();
  post_id_ = value;
  // @@protoc_insertion_point(field_set:weizhu.community.CreatePostResponse.post_id)
}

// -------------------------------------------------------------------

// DeletePostRequest

// required int32 post_id = 1;
inline bool DeletePostRequest::has_post_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DeletePostRequest::set_has_post_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DeletePostRequest::clear_has_post_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DeletePostRequest::clear_post_id() {
  post_id_ = 0;
  clear_has_post_id();
}
inline ::google::protobuf::int32 DeletePostRequest::post_id() const {
  // @@protoc_insertion_point(field_get:weizhu.community.DeletePostRequest.post_id)
  return post_id_;
}
inline void DeletePostRequest::set_post_id(::google::protobuf::int32 value) {
  set_has_post_id();
  post_id_ = value;
  // @@protoc_insertion_point(field_set:weizhu.community.DeletePostRequest.post_id)
}

// -------------------------------------------------------------------

// DeletePostResponse

// optional .weizhu.community.DeletePostResponse.Result result = 1 [default = FAIL_UNKNOWN];
inline bool DeletePostResponse::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DeletePostResponse::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DeletePostResponse::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DeletePostResponse::clear_result() {
  result_ = 99;
  clear_has_result();
}
inline ::weizhu::community::DeletePostResponse_Result DeletePostResponse::result() const {
  // @@protoc_insertion_point(field_get:weizhu.community.DeletePostResponse.result)
  return static_cast< ::weizhu::community::DeletePostResponse_Result >(result_);
}
inline void DeletePostResponse::set_result(::weizhu::community::DeletePostResponse_Result value) {
  assert(::weizhu::community::DeletePostResponse_Result_IsValid(value));
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:weizhu.community.DeletePostResponse.result)
}

// optional string fail_text = 2;
inline bool DeletePostResponse::has_fail_text() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DeletePostResponse::set_has_fail_text() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DeletePostResponse::clear_has_fail_text() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DeletePostResponse::clear_fail_text() {
  if (fail_text_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    fail_text_->clear();
  }
  clear_has_fail_text();
}
inline const ::std::string& DeletePostResponse::fail_text() const {
  // @@protoc_insertion_point(field_get:weizhu.community.DeletePostResponse.fail_text)
  return *fail_text_;
}
inline void DeletePostResponse::set_fail_text(const ::std::string& value) {
  set_has_fail_text();
  if (fail_text_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    fail_text_ = new ::std::string;
  }
  fail_text_->assign(value);
  // @@protoc_insertion_point(field_set:weizhu.community.DeletePostResponse.fail_text)
}
inline void DeletePostResponse::set_fail_text(const char* value) {
  set_has_fail_text();
  if (fail_text_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    fail_text_ = new ::std::string;
  }
  fail_text_->assign(value);
  // @@protoc_insertion_point(field_set_char:weizhu.community.DeletePostResponse.fail_text)
}
inline void DeletePostResponse::set_fail_text(const char* value, size_t size) {
  set_has_fail_text();
  if (fail_text_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    fail_text_ = new ::std::string;
  }
  fail_text_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:weizhu.community.DeletePostResponse.fail_text)
}
inline ::std::string* DeletePostResponse::mutable_fail_text() {
  set_has_fail_text();
  if (fail_text_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    fail_text_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:weizhu.community.DeletePostResponse.fail_text)
  return fail_text_;
}
inline ::std::string* DeletePostResponse::release_fail_text() {
  clear_has_fail_text();
  if (fail_text_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = fail_text_;
    fail_text_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void DeletePostResponse::set_allocated_fail_text(::std::string* fail_text) {
  if (fail_text_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete fail_text_;
  }
  if (fail_text) {
    set_has_fail_text();
    fail_text_ = fail_text;
  } else {
    clear_has_fail_text();
    fail_text_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:weizhu.community.DeletePostResponse.fail_text)
}

// -------------------------------------------------------------------

// LikePostRequest

// required int32 post_id = 1;
inline bool LikePostRequest::has_post_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LikePostRequest::set_has_post_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LikePostRequest::clear_has_post_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LikePostRequest::clear_post_id() {
  post_id_ = 0;
  clear_has_post_id();
}
inline ::google::protobuf::int32 LikePostRequest::post_id() const {
  // @@protoc_insertion_point(field_get:weizhu.community.LikePostRequest.post_id)
  return post_id_;
}
inline void LikePostRequest::set_post_id(::google::protobuf::int32 value) {
  set_has_post_id();
  post_id_ = value;
  // @@protoc_insertion_point(field_set:weizhu.community.LikePostRequest.post_id)
}

// required bool is_like = 2;
inline bool LikePostRequest::has_is_like() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LikePostRequest::set_has_is_like() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LikePostRequest::clear_has_is_like() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LikePostRequest::clear_is_like() {
  is_like_ = false;
  clear_has_is_like();
}
inline bool LikePostRequest::is_like() const {
  // @@protoc_insertion_point(field_get:weizhu.community.LikePostRequest.is_like)
  return is_like_;
}
inline void LikePostRequest::set_is_like(bool value) {
  set_has_is_like();
  is_like_ = value;
  // @@protoc_insertion_point(field_set:weizhu.community.LikePostRequest.is_like)
}

// -------------------------------------------------------------------

// LikePostResponse

// optional .weizhu.community.LikePostResponse.Result result = 1 [default = FAIL_UNKNOWN];
inline bool LikePostResponse::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LikePostResponse::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LikePostResponse::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LikePostResponse::clear_result() {
  result_ = 99;
  clear_has_result();
}
inline ::weizhu::community::LikePostResponse_Result LikePostResponse::result() const {
  // @@protoc_insertion_point(field_get:weizhu.community.LikePostResponse.result)
  return static_cast< ::weizhu::community::LikePostResponse_Result >(result_);
}
inline void LikePostResponse::set_result(::weizhu::community::LikePostResponse_Result value) {
  assert(::weizhu::community::LikePostResponse_Result_IsValid(value));
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:weizhu.community.LikePostResponse.result)
}

// optional string fail_text = 2;
inline bool LikePostResponse::has_fail_text() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LikePostResponse::set_has_fail_text() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LikePostResponse::clear_has_fail_text() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LikePostResponse::clear_fail_text() {
  if (fail_text_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    fail_text_->clear();
  }
  clear_has_fail_text();
}
inline const ::std::string& LikePostResponse::fail_text() const {
  // @@protoc_insertion_point(field_get:weizhu.community.LikePostResponse.fail_text)
  return *fail_text_;
}
inline void LikePostResponse::set_fail_text(const ::std::string& value) {
  set_has_fail_text();
  if (fail_text_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    fail_text_ = new ::std::string;
  }
  fail_text_->assign(value);
  // @@protoc_insertion_point(field_set:weizhu.community.LikePostResponse.fail_text)
}
inline void LikePostResponse::set_fail_text(const char* value) {
  set_has_fail_text();
  if (fail_text_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    fail_text_ = new ::std::string;
  }
  fail_text_->assign(value);
  // @@protoc_insertion_point(field_set_char:weizhu.community.LikePostResponse.fail_text)
}
inline void LikePostResponse::set_fail_text(const char* value, size_t size) {
  set_has_fail_text();
  if (fail_text_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    fail_text_ = new ::std::string;
  }
  fail_text_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:weizhu.community.LikePostResponse.fail_text)
}
inline ::std::string* LikePostResponse::mutable_fail_text() {
  set_has_fail_text();
  if (fail_text_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    fail_text_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:weizhu.community.LikePostResponse.fail_text)
  return fail_text_;
}
inline ::std::string* LikePostResponse::release_fail_text() {
  clear_has_fail_text();
  if (fail_text_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = fail_text_;
    fail_text_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void LikePostResponse::set_allocated_fail_text(::std::string* fail_text) {
  if (fail_text_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete fail_text_;
  }
  if (fail_text) {
    set_has_fail_text();
    fail_text_ = fail_text;
  } else {
    clear_has_fail_text();
    fail_text_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:weizhu.community.LikePostResponse.fail_text)
}

// -------------------------------------------------------------------

// CreateCommentRequest

// required int32 post_id = 1;
inline bool CreateCommentRequest::has_post_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CreateCommentRequest::set_has_post_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CreateCommentRequest::clear_has_post_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CreateCommentRequest::clear_post_id() {
  post_id_ = 0;
  clear_has_post_id();
}
inline ::google::protobuf::int32 CreateCommentRequest::post_id() const {
  // @@protoc_insertion_point(field_get:weizhu.community.CreateCommentRequest.post_id)
  return post_id_;
}
inline void CreateCommentRequest::set_post_id(::google::protobuf::int32 value) {
  set_has_post_id();
  post_id_ = value;
  // @@protoc_insertion_point(field_set:weizhu.community.CreateCommentRequest.post_id)
}

// optional int32 reply_comment_id = 2;
inline bool CreateCommentRequest::has_reply_comment_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CreateCommentRequest::set_has_reply_comment_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CreateCommentRequest::clear_has_reply_comment_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CreateCommentRequest::clear_reply_comment_id() {
  reply_comment_id_ = 0;
  clear_has_reply_comment_id();
}
inline ::google::protobuf::int32 CreateCommentRequest::reply_comment_id() const {
  // @@protoc_insertion_point(field_get:weizhu.community.CreateCommentRequest.reply_comment_id)
  return reply_comment_id_;
}
inline void CreateCommentRequest::set_reply_comment_id(::google::protobuf::int32 value) {
  set_has_reply_comment_id();
  reply_comment_id_ = value;
  // @@protoc_insertion_point(field_set:weizhu.community.CreateCommentRequest.reply_comment_id)
}

// required string content = 3;
inline bool CreateCommentRequest::has_content() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CreateCommentRequest::set_has_content() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CreateCommentRequest::clear_has_content() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CreateCommentRequest::clear_content() {
  if (content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_->clear();
  }
  clear_has_content();
}
inline const ::std::string& CreateCommentRequest::content() const {
  // @@protoc_insertion_point(field_get:weizhu.community.CreateCommentRequest.content)
  return *content_;
}
inline void CreateCommentRequest::set_content(const ::std::string& value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_ = new ::std::string;
  }
  content_->assign(value);
  // @@protoc_insertion_point(field_set:weizhu.community.CreateCommentRequest.content)
}
inline void CreateCommentRequest::set_content(const char* value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_ = new ::std::string;
  }
  content_->assign(value);
  // @@protoc_insertion_point(field_set_char:weizhu.community.CreateCommentRequest.content)
}
inline void CreateCommentRequest::set_content(const char* value, size_t size) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_ = new ::std::string;
  }
  content_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:weizhu.community.CreateCommentRequest.content)
}
inline ::std::string* CreateCommentRequest::mutable_content() {
  set_has_content();
  if (content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:weizhu.community.CreateCommentRequest.content)
  return content_;
}
inline ::std::string* CreateCommentRequest::release_content() {
  clear_has_content();
  if (content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = content_;
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CreateCommentRequest::set_allocated_content(::std::string* content) {
  if (content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete content_;
  }
  if (content) {
    set_has_content();
    content_ = content;
  } else {
    clear_has_content();
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:weizhu.community.CreateCommentRequest.content)
}

// -------------------------------------------------------------------

// CreateCommentResponse

// optional .weizhu.community.CreateCommentResponse.Result result = 1 [default = FAIL_UNKNOWN];
inline bool CreateCommentResponse::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CreateCommentResponse::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CreateCommentResponse::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CreateCommentResponse::clear_result() {
  result_ = 99;
  clear_has_result();
}
inline ::weizhu::community::CreateCommentResponse_Result CreateCommentResponse::result() const {
  // @@protoc_insertion_point(field_get:weizhu.community.CreateCommentResponse.result)
  return static_cast< ::weizhu::community::CreateCommentResponse_Result >(result_);
}
inline void CreateCommentResponse::set_result(::weizhu::community::CreateCommentResponse_Result value) {
  assert(::weizhu::community::CreateCommentResponse_Result_IsValid(value));
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:weizhu.community.CreateCommentResponse.result)
}

// optional string fail_text = 2;
inline bool CreateCommentResponse::has_fail_text() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CreateCommentResponse::set_has_fail_text() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CreateCommentResponse::clear_has_fail_text() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CreateCommentResponse::clear_fail_text() {
  if (fail_text_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    fail_text_->clear();
  }
  clear_has_fail_text();
}
inline const ::std::string& CreateCommentResponse::fail_text() const {
  // @@protoc_insertion_point(field_get:weizhu.community.CreateCommentResponse.fail_text)
  return *fail_text_;
}
inline void CreateCommentResponse::set_fail_text(const ::std::string& value) {
  set_has_fail_text();
  if (fail_text_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    fail_text_ = new ::std::string;
  }
  fail_text_->assign(value);
  // @@protoc_insertion_point(field_set:weizhu.community.CreateCommentResponse.fail_text)
}
inline void CreateCommentResponse::set_fail_text(const char* value) {
  set_has_fail_text();
  if (fail_text_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    fail_text_ = new ::std::string;
  }
  fail_text_->assign(value);
  // @@protoc_insertion_point(field_set_char:weizhu.community.CreateCommentResponse.fail_text)
}
inline void CreateCommentResponse::set_fail_text(const char* value, size_t size) {
  set_has_fail_text();
  if (fail_text_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    fail_text_ = new ::std::string;
  }
  fail_text_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:weizhu.community.CreateCommentResponse.fail_text)
}
inline ::std::string* CreateCommentResponse::mutable_fail_text() {
  set_has_fail_text();
  if (fail_text_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    fail_text_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:weizhu.community.CreateCommentResponse.fail_text)
  return fail_text_;
}
inline ::std::string* CreateCommentResponse::release_fail_text() {
  clear_has_fail_text();
  if (fail_text_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = fail_text_;
    fail_text_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CreateCommentResponse::set_allocated_fail_text(::std::string* fail_text) {
  if (fail_text_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete fail_text_;
  }
  if (fail_text) {
    set_has_fail_text();
    fail_text_ = fail_text;
  } else {
    clear_has_fail_text();
    fail_text_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:weizhu.community.CreateCommentResponse.fail_text)
}

// optional int32 comment_id = 3;
inline bool CreateCommentResponse::has_comment_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CreateCommentResponse::set_has_comment_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CreateCommentResponse::clear_has_comment_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CreateCommentResponse::clear_comment_id() {
  comment_id_ = 0;
  clear_has_comment_id();
}
inline ::google::protobuf::int32 CreateCommentResponse::comment_id() const {
  // @@protoc_insertion_point(field_get:weizhu.community.CreateCommentResponse.comment_id)
  return comment_id_;
}
inline void CreateCommentResponse::set_comment_id(::google::protobuf::int32 value) {
  set_has_comment_id();
  comment_id_ = value;
  // @@protoc_insertion_point(field_set:weizhu.community.CreateCommentResponse.comment_id)
}

// -------------------------------------------------------------------

// DeleteCommentRequest

// required int32 post_id = 1;
inline bool DeleteCommentRequest::has_post_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DeleteCommentRequest::set_has_post_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DeleteCommentRequest::clear_has_post_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DeleteCommentRequest::clear_post_id() {
  post_id_ = 0;
  clear_has_post_id();
}
inline ::google::protobuf::int32 DeleteCommentRequest::post_id() const {
  // @@protoc_insertion_point(field_get:weizhu.community.DeleteCommentRequest.post_id)
  return post_id_;
}
inline void DeleteCommentRequest::set_post_id(::google::protobuf::int32 value) {
  set_has_post_id();
  post_id_ = value;
  // @@protoc_insertion_point(field_set:weizhu.community.DeleteCommentRequest.post_id)
}

// required int32 comment_id = 2;
inline bool DeleteCommentRequest::has_comment_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DeleteCommentRequest::set_has_comment_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DeleteCommentRequest::clear_has_comment_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DeleteCommentRequest::clear_comment_id() {
  comment_id_ = 0;
  clear_has_comment_id();
}
inline ::google::protobuf::int32 DeleteCommentRequest::comment_id() const {
  // @@protoc_insertion_point(field_get:weizhu.community.DeleteCommentRequest.comment_id)
  return comment_id_;
}
inline void DeleteCommentRequest::set_comment_id(::google::protobuf::int32 value) {
  set_has_comment_id();
  comment_id_ = value;
  // @@protoc_insertion_point(field_set:weizhu.community.DeleteCommentRequest.comment_id)
}

// -------------------------------------------------------------------

// DeleteCommentResponse

// optional .weizhu.community.DeleteCommentResponse.Result result = 1 [default = FAIL_UNKNOWN];
inline bool DeleteCommentResponse::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DeleteCommentResponse::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DeleteCommentResponse::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DeleteCommentResponse::clear_result() {
  result_ = 99;
  clear_has_result();
}
inline ::weizhu::community::DeleteCommentResponse_Result DeleteCommentResponse::result() const {
  // @@protoc_insertion_point(field_get:weizhu.community.DeleteCommentResponse.result)
  return static_cast< ::weizhu::community::DeleteCommentResponse_Result >(result_);
}
inline void DeleteCommentResponse::set_result(::weizhu::community::DeleteCommentResponse_Result value) {
  assert(::weizhu::community::DeleteCommentResponse_Result_IsValid(value));
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:weizhu.community.DeleteCommentResponse.result)
}

// optional string fail_text = 2;
inline bool DeleteCommentResponse::has_fail_text() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DeleteCommentResponse::set_has_fail_text() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DeleteCommentResponse::clear_has_fail_text() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DeleteCommentResponse::clear_fail_text() {
  if (fail_text_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    fail_text_->clear();
  }
  clear_has_fail_text();
}
inline const ::std::string& DeleteCommentResponse::fail_text() const {
  // @@protoc_insertion_point(field_get:weizhu.community.DeleteCommentResponse.fail_text)
  return *fail_text_;
}
inline void DeleteCommentResponse::set_fail_text(const ::std::string& value) {
  set_has_fail_text();
  if (fail_text_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    fail_text_ = new ::std::string;
  }
  fail_text_->assign(value);
  // @@protoc_insertion_point(field_set:weizhu.community.DeleteCommentResponse.fail_text)
}
inline void DeleteCommentResponse::set_fail_text(const char* value) {
  set_has_fail_text();
  if (fail_text_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    fail_text_ = new ::std::string;
  }
  fail_text_->assign(value);
  // @@protoc_insertion_point(field_set_char:weizhu.community.DeleteCommentResponse.fail_text)
}
inline void DeleteCommentResponse::set_fail_text(const char* value, size_t size) {
  set_has_fail_text();
  if (fail_text_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    fail_text_ = new ::std::string;
  }
  fail_text_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:weizhu.community.DeleteCommentResponse.fail_text)
}
inline ::std::string* DeleteCommentResponse::mutable_fail_text() {
  set_has_fail_text();
  if (fail_text_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    fail_text_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:weizhu.community.DeleteCommentResponse.fail_text)
  return fail_text_;
}
inline ::std::string* DeleteCommentResponse::release_fail_text() {
  clear_has_fail_text();
  if (fail_text_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = fail_text_;
    fail_text_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void DeleteCommentResponse::set_allocated_fail_text(::std::string* fail_text) {
  if (fail_text_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete fail_text_;
  }
  if (fail_text) {
    set_has_fail_text();
    fail_text_ = fail_text;
  } else {
    clear_has_fail_text();
    fail_text_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:weizhu.community.DeleteCommentResponse.fail_text)
}

// -------------------------------------------------------------------

// GetMyPostListRequest

// required int32 size = 1;
inline bool GetMyPostListRequest::has_size() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GetMyPostListRequest::set_has_size() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GetMyPostListRequest::clear_has_size() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GetMyPostListRequest::clear_size() {
  size_ = 0;
  clear_has_size();
}
inline ::google::protobuf::int32 GetMyPostListRequest::size() const {
  // @@protoc_insertion_point(field_get:weizhu.community.GetMyPostListRequest.size)
  return size_;
}
inline void GetMyPostListRequest::set_size(::google::protobuf::int32 value) {
  set_has_size();
  size_ = value;
  // @@protoc_insertion_point(field_set:weizhu.community.GetMyPostListRequest.size)
}

// optional bytes offset_index = 2;
inline bool GetMyPostListRequest::has_offset_index() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GetMyPostListRequest::set_has_offset_index() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GetMyPostListRequest::clear_has_offset_index() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GetMyPostListRequest::clear_offset_index() {
  if (offset_index_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    offset_index_->clear();
  }
  clear_has_offset_index();
}
inline const ::std::string& GetMyPostListRequest::offset_index() const {
  // @@protoc_insertion_point(field_get:weizhu.community.GetMyPostListRequest.offset_index)
  return *offset_index_;
}
inline void GetMyPostListRequest::set_offset_index(const ::std::string& value) {
  set_has_offset_index();
  if (offset_index_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    offset_index_ = new ::std::string;
  }
  offset_index_->assign(value);
  // @@protoc_insertion_point(field_set:weizhu.community.GetMyPostListRequest.offset_index)
}
inline void GetMyPostListRequest::set_offset_index(const char* value) {
  set_has_offset_index();
  if (offset_index_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    offset_index_ = new ::std::string;
  }
  offset_index_->assign(value);
  // @@protoc_insertion_point(field_set_char:weizhu.community.GetMyPostListRequest.offset_index)
}
inline void GetMyPostListRequest::set_offset_index(const void* value, size_t size) {
  set_has_offset_index();
  if (offset_index_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    offset_index_ = new ::std::string;
  }
  offset_index_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:weizhu.community.GetMyPostListRequest.offset_index)
}
inline ::std::string* GetMyPostListRequest::mutable_offset_index() {
  set_has_offset_index();
  if (offset_index_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    offset_index_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:weizhu.community.GetMyPostListRequest.offset_index)
  return offset_index_;
}
inline ::std::string* GetMyPostListRequest::release_offset_index() {
  clear_has_offset_index();
  if (offset_index_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = offset_index_;
    offset_index_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void GetMyPostListRequest::set_allocated_offset_index(::std::string* offset_index) {
  if (offset_index_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete offset_index_;
  }
  if (offset_index) {
    set_has_offset_index();
    offset_index_ = offset_index;
  } else {
    clear_has_offset_index();
    offset_index_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:weizhu.community.GetMyPostListRequest.offset_index)
}

// -------------------------------------------------------------------

// GetMyPostListResponse

// repeated .weizhu.community.Post post = 1;
inline int GetMyPostListResponse::post_size() const {
  return post_.size();
}
inline void GetMyPostListResponse::clear_post() {
  post_.Clear();
}
inline const ::weizhu::community::Post& GetMyPostListResponse::post(int index) const {
  // @@protoc_insertion_point(field_get:weizhu.community.GetMyPostListResponse.post)
  return post_.Get(index);
}
inline ::weizhu::community::Post* GetMyPostListResponse::mutable_post(int index) {
  // @@protoc_insertion_point(field_mutable:weizhu.community.GetMyPostListResponse.post)
  return post_.Mutable(index);
}
inline ::weizhu::community::Post* GetMyPostListResponse::add_post() {
  // @@protoc_insertion_point(field_add:weizhu.community.GetMyPostListResponse.post)
  return post_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::weizhu::community::Post >&
GetMyPostListResponse::post() const {
  // @@protoc_insertion_point(field_list:weizhu.community.GetMyPostListResponse.post)
  return post_;
}
inline ::google::protobuf::RepeatedPtrField< ::weizhu::community::Post >*
GetMyPostListResponse::mutable_post() {
  // @@protoc_insertion_point(field_mutable_list:weizhu.community.GetMyPostListResponse.post)
  return &post_;
}

// required bool has_more = 2;
inline bool GetMyPostListResponse::has_has_more() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GetMyPostListResponse::set_has_has_more() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GetMyPostListResponse::clear_has_has_more() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GetMyPostListResponse::clear_has_more() {
  has_more_ = false;
  clear_has_has_more();
}
inline bool GetMyPostListResponse::has_more() const {
  // @@protoc_insertion_point(field_get:weizhu.community.GetMyPostListResponse.has_more)
  return has_more_;
}
inline void GetMyPostListResponse::set_has_more(bool value) {
  set_has_has_more();
  has_more_ = value;
  // @@protoc_insertion_point(field_set:weizhu.community.GetMyPostListResponse.has_more)
}

// required bytes offset_index = 3;
inline bool GetMyPostListResponse::has_offset_index() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GetMyPostListResponse::set_has_offset_index() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GetMyPostListResponse::clear_has_offset_index() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GetMyPostListResponse::clear_offset_index() {
  if (offset_index_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    offset_index_->clear();
  }
  clear_has_offset_index();
}
inline const ::std::string& GetMyPostListResponse::offset_index() const {
  // @@protoc_insertion_point(field_get:weizhu.community.GetMyPostListResponse.offset_index)
  return *offset_index_;
}
inline void GetMyPostListResponse::set_offset_index(const ::std::string& value) {
  set_has_offset_index();
  if (offset_index_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    offset_index_ = new ::std::string;
  }
  offset_index_->assign(value);
  // @@protoc_insertion_point(field_set:weizhu.community.GetMyPostListResponse.offset_index)
}
inline void GetMyPostListResponse::set_offset_index(const char* value) {
  set_has_offset_index();
  if (offset_index_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    offset_index_ = new ::std::string;
  }
  offset_index_->assign(value);
  // @@protoc_insertion_point(field_set_char:weizhu.community.GetMyPostListResponse.offset_index)
}
inline void GetMyPostListResponse::set_offset_index(const void* value, size_t size) {
  set_has_offset_index();
  if (offset_index_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    offset_index_ = new ::std::string;
  }
  offset_index_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:weizhu.community.GetMyPostListResponse.offset_index)
}
inline ::std::string* GetMyPostListResponse::mutable_offset_index() {
  set_has_offset_index();
  if (offset_index_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    offset_index_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:weizhu.community.GetMyPostListResponse.offset_index)
  return offset_index_;
}
inline ::std::string* GetMyPostListResponse::release_offset_index() {
  clear_has_offset_index();
  if (offset_index_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = offset_index_;
    offset_index_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void GetMyPostListResponse::set_allocated_offset_index(::std::string* offset_index) {
  if (offset_index_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete offset_index_;
  }
  if (offset_index) {
    set_has_offset_index();
    offset_index_ = offset_index;
  } else {
    clear_has_offset_index();
    offset_index_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:weizhu.community.GetMyPostListResponse.offset_index)
}

// -------------------------------------------------------------------

// GetMyCommentListRequest

// required int32 size = 1;
inline bool GetMyCommentListRequest::has_size() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GetMyCommentListRequest::set_has_size() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GetMyCommentListRequest::clear_has_size() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GetMyCommentListRequest::clear_size() {
  size_ = 0;
  clear_has_size();
}
inline ::google::protobuf::int32 GetMyCommentListRequest::size() const {
  // @@protoc_insertion_point(field_get:weizhu.community.GetMyCommentListRequest.size)
  return size_;
}
inline void GetMyCommentListRequest::set_size(::google::protobuf::int32 value) {
  set_has_size();
  size_ = value;
  // @@protoc_insertion_point(field_set:weizhu.community.GetMyCommentListRequest.size)
}

// optional bytes offset_index = 2;
inline bool GetMyCommentListRequest::has_offset_index() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GetMyCommentListRequest::set_has_offset_index() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GetMyCommentListRequest::clear_has_offset_index() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GetMyCommentListRequest::clear_offset_index() {
  if (offset_index_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    offset_index_->clear();
  }
  clear_has_offset_index();
}
inline const ::std::string& GetMyCommentListRequest::offset_index() const {
  // @@protoc_insertion_point(field_get:weizhu.community.GetMyCommentListRequest.offset_index)
  return *offset_index_;
}
inline void GetMyCommentListRequest::set_offset_index(const ::std::string& value) {
  set_has_offset_index();
  if (offset_index_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    offset_index_ = new ::std::string;
  }
  offset_index_->assign(value);
  // @@protoc_insertion_point(field_set:weizhu.community.GetMyCommentListRequest.offset_index)
}
inline void GetMyCommentListRequest::set_offset_index(const char* value) {
  set_has_offset_index();
  if (offset_index_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    offset_index_ = new ::std::string;
  }
  offset_index_->assign(value);
  // @@protoc_insertion_point(field_set_char:weizhu.community.GetMyCommentListRequest.offset_index)
}
inline void GetMyCommentListRequest::set_offset_index(const void* value, size_t size) {
  set_has_offset_index();
  if (offset_index_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    offset_index_ = new ::std::string;
  }
  offset_index_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:weizhu.community.GetMyCommentListRequest.offset_index)
}
inline ::std::string* GetMyCommentListRequest::mutable_offset_index() {
  set_has_offset_index();
  if (offset_index_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    offset_index_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:weizhu.community.GetMyCommentListRequest.offset_index)
  return offset_index_;
}
inline ::std::string* GetMyCommentListRequest::release_offset_index() {
  clear_has_offset_index();
  if (offset_index_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = offset_index_;
    offset_index_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void GetMyCommentListRequest::set_allocated_offset_index(::std::string* offset_index) {
  if (offset_index_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete offset_index_;
  }
  if (offset_index) {
    set_has_offset_index();
    offset_index_ = offset_index;
  } else {
    clear_has_offset_index();
    offset_index_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:weizhu.community.GetMyCommentListRequest.offset_index)
}

// -------------------------------------------------------------------

// GetMyCommentListResponse

// repeated .weizhu.community.Comment comment = 1;
inline int GetMyCommentListResponse::comment_size() const {
  return comment_.size();
}
inline void GetMyCommentListResponse::clear_comment() {
  comment_.Clear();
}
inline const ::weizhu::community::Comment& GetMyCommentListResponse::comment(int index) const {
  // @@protoc_insertion_point(field_get:weizhu.community.GetMyCommentListResponse.comment)
  return comment_.Get(index);
}
inline ::weizhu::community::Comment* GetMyCommentListResponse::mutable_comment(int index) {
  // @@protoc_insertion_point(field_mutable:weizhu.community.GetMyCommentListResponse.comment)
  return comment_.Mutable(index);
}
inline ::weizhu::community::Comment* GetMyCommentListResponse::add_comment() {
  // @@protoc_insertion_point(field_add:weizhu.community.GetMyCommentListResponse.comment)
  return comment_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::weizhu::community::Comment >&
GetMyCommentListResponse::comment() const {
  // @@protoc_insertion_point(field_list:weizhu.community.GetMyCommentListResponse.comment)
  return comment_;
}
inline ::google::protobuf::RepeatedPtrField< ::weizhu::community::Comment >*
GetMyCommentListResponse::mutable_comment() {
  // @@protoc_insertion_point(field_mutable_list:weizhu.community.GetMyCommentListResponse.comment)
  return &comment_;
}

// required bool has_more = 2;
inline bool GetMyCommentListResponse::has_has_more() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GetMyCommentListResponse::set_has_has_more() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GetMyCommentListResponse::clear_has_has_more() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GetMyCommentListResponse::clear_has_more() {
  has_more_ = false;
  clear_has_has_more();
}
inline bool GetMyCommentListResponse::has_more() const {
  // @@protoc_insertion_point(field_get:weizhu.community.GetMyCommentListResponse.has_more)
  return has_more_;
}
inline void GetMyCommentListResponse::set_has_more(bool value) {
  set_has_has_more();
  has_more_ = value;
  // @@protoc_insertion_point(field_set:weizhu.community.GetMyCommentListResponse.has_more)
}

// required bytes offset_index = 3;
inline bool GetMyCommentListResponse::has_offset_index() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GetMyCommentListResponse::set_has_offset_index() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GetMyCommentListResponse::clear_has_offset_index() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GetMyCommentListResponse::clear_offset_index() {
  if (offset_index_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    offset_index_->clear();
  }
  clear_has_offset_index();
}
inline const ::std::string& GetMyCommentListResponse::offset_index() const {
  // @@protoc_insertion_point(field_get:weizhu.community.GetMyCommentListResponse.offset_index)
  return *offset_index_;
}
inline void GetMyCommentListResponse::set_offset_index(const ::std::string& value) {
  set_has_offset_index();
  if (offset_index_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    offset_index_ = new ::std::string;
  }
  offset_index_->assign(value);
  // @@protoc_insertion_point(field_set:weizhu.community.GetMyCommentListResponse.offset_index)
}
inline void GetMyCommentListResponse::set_offset_index(const char* value) {
  set_has_offset_index();
  if (offset_index_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    offset_index_ = new ::std::string;
  }
  offset_index_->assign(value);
  // @@protoc_insertion_point(field_set_char:weizhu.community.GetMyCommentListResponse.offset_index)
}
inline void GetMyCommentListResponse::set_offset_index(const void* value, size_t size) {
  set_has_offset_index();
  if (offset_index_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    offset_index_ = new ::std::string;
  }
  offset_index_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:weizhu.community.GetMyCommentListResponse.offset_index)
}
inline ::std::string* GetMyCommentListResponse::mutable_offset_index() {
  set_has_offset_index();
  if (offset_index_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    offset_index_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:weizhu.community.GetMyCommentListResponse.offset_index)
  return offset_index_;
}
inline ::std::string* GetMyCommentListResponse::release_offset_index() {
  clear_has_offset_index();
  if (offset_index_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = offset_index_;
    offset_index_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void GetMyCommentListResponse::set_allocated_offset_index(::std::string* offset_index) {
  if (offset_index_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete offset_index_;
  }
  if (offset_index) {
    set_has_offset_index();
    offset_index_ = offset_index;
  } else {
    clear_has_offset_index();
    offset_index_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:weizhu.community.GetMyCommentListResponse.offset_index)
}

// repeated .weizhu.community.Post ref_post = 4;
inline int GetMyCommentListResponse::ref_post_size() const {
  return ref_post_.size();
}
inline void GetMyCommentListResponse::clear_ref_post() {
  ref_post_.Clear();
}
inline const ::weizhu::community::Post& GetMyCommentListResponse::ref_post(int index) const {
  // @@protoc_insertion_point(field_get:weizhu.community.GetMyCommentListResponse.ref_post)
  return ref_post_.Get(index);
}
inline ::weizhu::community::Post* GetMyCommentListResponse::mutable_ref_post(int index) {
  // @@protoc_insertion_point(field_mutable:weizhu.community.GetMyCommentListResponse.ref_post)
  return ref_post_.Mutable(index);
}
inline ::weizhu::community::Post* GetMyCommentListResponse::add_ref_post() {
  // @@protoc_insertion_point(field_add:weizhu.community.GetMyCommentListResponse.ref_post)
  return ref_post_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::weizhu::community::Post >&
GetMyCommentListResponse::ref_post() const {
  // @@protoc_insertion_point(field_list:weizhu.community.GetMyCommentListResponse.ref_post)
  return ref_post_;
}
inline ::google::protobuf::RepeatedPtrField< ::weizhu::community::Post >*
GetMyCommentListResponse::mutable_ref_post() {
  // @@protoc_insertion_point(field_mutable_list:weizhu.community.GetMyCommentListResponse.ref_post)
  return &ref_post_;
}

// -------------------------------------------------------------------

// GetRecommendPostResponse

// repeated .weizhu.community.Post post = 1;
inline int GetRecommendPostResponse::post_size() const {
  return post_.size();
}
inline void GetRecommendPostResponse::clear_post() {
  post_.Clear();
}
inline const ::weizhu::community::Post& GetRecommendPostResponse::post(int index) const {
  // @@protoc_insertion_point(field_get:weizhu.community.GetRecommendPostResponse.post)
  return post_.Get(index);
}
inline ::weizhu::community::Post* GetRecommendPostResponse::mutable_post(int index) {
  // @@protoc_insertion_point(field_mutable:weizhu.community.GetRecommendPostResponse.post)
  return post_.Mutable(index);
}
inline ::weizhu::community::Post* GetRecommendPostResponse::add_post() {
  // @@protoc_insertion_point(field_add:weizhu.community.GetRecommendPostResponse.post)
  return post_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::weizhu::community::Post >&
GetRecommendPostResponse::post() const {
  // @@protoc_insertion_point(field_list:weizhu.community.GetRecommendPostResponse.post)
  return post_;
}
inline ::google::protobuf::RepeatedPtrField< ::weizhu::community::Post >*
GetRecommendPostResponse::mutable_post() {
  // @@protoc_insertion_point(field_mutable_list:weizhu.community.GetRecommendPostResponse.post)
  return &post_;
}

// repeated .weizhu.community.Board ref_board = 2;
inline int GetRecommendPostResponse::ref_board_size() const {
  return ref_board_.size();
}
inline void GetRecommendPostResponse::clear_ref_board() {
  ref_board_.Clear();
}
inline const ::weizhu::community::Board& GetRecommendPostResponse::ref_board(int index) const {
  // @@protoc_insertion_point(field_get:weizhu.community.GetRecommendPostResponse.ref_board)
  return ref_board_.Get(index);
}
inline ::weizhu::community::Board* GetRecommendPostResponse::mutable_ref_board(int index) {
  // @@protoc_insertion_point(field_mutable:weizhu.community.GetRecommendPostResponse.ref_board)
  return ref_board_.Mutable(index);
}
inline ::weizhu::community::Board* GetRecommendPostResponse::add_ref_board() {
  // @@protoc_insertion_point(field_add:weizhu.community.GetRecommendPostResponse.ref_board)
  return ref_board_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::weizhu::community::Board >&
GetRecommendPostResponse::ref_board() const {
  // @@protoc_insertion_point(field_list:weizhu.community.GetRecommendPostResponse.ref_board)
  return ref_board_;
}
inline ::google::protobuf::RepeatedPtrField< ::weizhu::community::Board >*
GetRecommendPostResponse::mutable_ref_board() {
  // @@protoc_insertion_point(field_mutable_list:weizhu.community.GetRecommendPostResponse.ref_board)
  return &ref_board_;
}

// -------------------------------------------------------------------

// LikeCommentRequest

// required int32 post_id = 1;
inline bool LikeCommentRequest::has_post_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LikeCommentRequest::set_has_post_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LikeCommentRequest::clear_has_post_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LikeCommentRequest::clear_post_id() {
  post_id_ = 0;
  clear_has_post_id();
}
inline ::google::protobuf::int32 LikeCommentRequest::post_id() const {
  // @@protoc_insertion_point(field_get:weizhu.community.LikeCommentRequest.post_id)
  return post_id_;
}
inline void LikeCommentRequest::set_post_id(::google::protobuf::int32 value) {
  set_has_post_id();
  post_id_ = value;
  // @@protoc_insertion_point(field_set:weizhu.community.LikeCommentRequest.post_id)
}

// required int32 comment_id = 2;
inline bool LikeCommentRequest::has_comment_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LikeCommentRequest::set_has_comment_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LikeCommentRequest::clear_has_comment_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LikeCommentRequest::clear_comment_id() {
  comment_id_ = 0;
  clear_has_comment_id();
}
inline ::google::protobuf::int32 LikeCommentRequest::comment_id() const {
  // @@protoc_insertion_point(field_get:weizhu.community.LikeCommentRequest.comment_id)
  return comment_id_;
}
inline void LikeCommentRequest::set_comment_id(::google::protobuf::int32 value) {
  set_has_comment_id();
  comment_id_ = value;
  // @@protoc_insertion_point(field_set:weizhu.community.LikeCommentRequest.comment_id)
}

// required bool is_like = 3;
inline bool LikeCommentRequest::has_is_like() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LikeCommentRequest::set_has_is_like() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LikeCommentRequest::clear_has_is_like() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LikeCommentRequest::clear_is_like() {
  is_like_ = false;
  clear_has_is_like();
}
inline bool LikeCommentRequest::is_like() const {
  // @@protoc_insertion_point(field_get:weizhu.community.LikeCommentRequest.is_like)
  return is_like_;
}
inline void LikeCommentRequest::set_is_like(bool value) {
  set_has_is_like();
  is_like_ = value;
  // @@protoc_insertion_point(field_set:weizhu.community.LikeCommentRequest.is_like)
}

// -------------------------------------------------------------------

// LikeCommentResponse

// optional .weizhu.community.LikeCommentResponse.Result result = 1 [default = FAIL_UNKNOWN];
inline bool LikeCommentResponse::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LikeCommentResponse::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LikeCommentResponse::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LikeCommentResponse::clear_result() {
  result_ = 99;
  clear_has_result();
}
inline ::weizhu::community::LikeCommentResponse_Result LikeCommentResponse::result() const {
  // @@protoc_insertion_point(field_get:weizhu.community.LikeCommentResponse.result)
  return static_cast< ::weizhu::community::LikeCommentResponse_Result >(result_);
}
inline void LikeCommentResponse::set_result(::weizhu::community::LikeCommentResponse_Result value) {
  assert(::weizhu::community::LikeCommentResponse_Result_IsValid(value));
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:weizhu.community.LikeCommentResponse.result)
}

// optional string fail_text = 2;
inline bool LikeCommentResponse::has_fail_text() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LikeCommentResponse::set_has_fail_text() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LikeCommentResponse::clear_has_fail_text() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LikeCommentResponse::clear_fail_text() {
  if (fail_text_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    fail_text_->clear();
  }
  clear_has_fail_text();
}
inline const ::std::string& LikeCommentResponse::fail_text() const {
  // @@protoc_insertion_point(field_get:weizhu.community.LikeCommentResponse.fail_text)
  return *fail_text_;
}
inline void LikeCommentResponse::set_fail_text(const ::std::string& value) {
  set_has_fail_text();
  if (fail_text_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    fail_text_ = new ::std::string;
  }
  fail_text_->assign(value);
  // @@protoc_insertion_point(field_set:weizhu.community.LikeCommentResponse.fail_text)
}
inline void LikeCommentResponse::set_fail_text(const char* value) {
  set_has_fail_text();
  if (fail_text_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    fail_text_ = new ::std::string;
  }
  fail_text_->assign(value);
  // @@protoc_insertion_point(field_set_char:weizhu.community.LikeCommentResponse.fail_text)
}
inline void LikeCommentResponse::set_fail_text(const char* value, size_t size) {
  set_has_fail_text();
  if (fail_text_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    fail_text_ = new ::std::string;
  }
  fail_text_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:weizhu.community.LikeCommentResponse.fail_text)
}
inline ::std::string* LikeCommentResponse::mutable_fail_text() {
  set_has_fail_text();
  if (fail_text_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    fail_text_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:weizhu.community.LikeCommentResponse.fail_text)
  return fail_text_;
}
inline ::std::string* LikeCommentResponse::release_fail_text() {
  clear_has_fail_text();
  if (fail_text_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = fail_text_;
    fail_text_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void LikeCommentResponse::set_allocated_fail_text(::std::string* fail_text) {
  if (fail_text_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete fail_text_;
  }
  if (fail_text) {
    set_has_fail_text();
    fail_text_ = fail_text;
  } else {
    clear_has_fail_text();
    fail_text_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:weizhu.community.LikeCommentResponse.fail_text)
}

// -------------------------------------------------------------------

// GetPostCommentByIdRequest_PostCommentId

// required int32 post_id = 1;
inline bool GetPostCommentByIdRequest_PostCommentId::has_post_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GetPostCommentByIdRequest_PostCommentId::set_has_post_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GetPostCommentByIdRequest_PostCommentId::clear_has_post_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GetPostCommentByIdRequest_PostCommentId::clear_post_id() {
  post_id_ = 0;
  clear_has_post_id();
}
inline ::google::protobuf::int32 GetPostCommentByIdRequest_PostCommentId::post_id() const {
  // @@protoc_insertion_point(field_get:weizhu.community.GetPostCommentByIdRequest.PostCommentId.post_id)
  return post_id_;
}
inline void GetPostCommentByIdRequest_PostCommentId::set_post_id(::google::protobuf::int32 value) {
  set_has_post_id();
  post_id_ = value;
  // @@protoc_insertion_point(field_set:weizhu.community.GetPostCommentByIdRequest.PostCommentId.post_id)
}

// required int32 comment_id = 2;
inline bool GetPostCommentByIdRequest_PostCommentId::has_comment_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GetPostCommentByIdRequest_PostCommentId::set_has_comment_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GetPostCommentByIdRequest_PostCommentId::clear_has_comment_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GetPostCommentByIdRequest_PostCommentId::clear_comment_id() {
  comment_id_ = 0;
  clear_has_comment_id();
}
inline ::google::protobuf::int32 GetPostCommentByIdRequest_PostCommentId::comment_id() const {
  // @@protoc_insertion_point(field_get:weizhu.community.GetPostCommentByIdRequest.PostCommentId.comment_id)
  return comment_id_;
}
inline void GetPostCommentByIdRequest_PostCommentId::set_comment_id(::google::protobuf::int32 value) {
  set_has_comment_id();
  comment_id_ = value;
  // @@protoc_insertion_point(field_set:weizhu.community.GetPostCommentByIdRequest.PostCommentId.comment_id)
}

// -------------------------------------------------------------------

// GetPostCommentByIdRequest

// repeated .weizhu.community.GetPostCommentByIdRequest.PostCommentId postCommentId = 1;
inline int GetPostCommentByIdRequest::postcommentid_size() const {
  return postcommentid_.size();
}
inline void GetPostCommentByIdRequest::clear_postcommentid() {
  postcommentid_.Clear();
}
inline const ::weizhu::community::GetPostCommentByIdRequest_PostCommentId& GetPostCommentByIdRequest::postcommentid(int index) const {
  // @@protoc_insertion_point(field_get:weizhu.community.GetPostCommentByIdRequest.postCommentId)
  return postcommentid_.Get(index);
}
inline ::weizhu::community::GetPostCommentByIdRequest_PostCommentId* GetPostCommentByIdRequest::mutable_postcommentid(int index) {
  // @@protoc_insertion_point(field_mutable:weizhu.community.GetPostCommentByIdRequest.postCommentId)
  return postcommentid_.Mutable(index);
}
inline ::weizhu::community::GetPostCommentByIdRequest_PostCommentId* GetPostCommentByIdRequest::add_postcommentid() {
  // @@protoc_insertion_point(field_add:weizhu.community.GetPostCommentByIdRequest.postCommentId)
  return postcommentid_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::weizhu::community::GetPostCommentByIdRequest_PostCommentId >&
GetPostCommentByIdRequest::postcommentid() const {
  // @@protoc_insertion_point(field_list:weizhu.community.GetPostCommentByIdRequest.postCommentId)
  return postcommentid_;
}
inline ::google::protobuf::RepeatedPtrField< ::weizhu::community::GetPostCommentByIdRequest_PostCommentId >*
GetPostCommentByIdRequest::mutable_postcommentid() {
  // @@protoc_insertion_point(field_mutable_list:weizhu.community.GetPostCommentByIdRequest.postCommentId)
  return &postcommentid_;
}

// -------------------------------------------------------------------

// GetPostCommentByIdResponse

// repeated .weizhu.community.Comment comment = 1;
inline int GetPostCommentByIdResponse::comment_size() const {
  return comment_.size();
}
inline void GetPostCommentByIdResponse::clear_comment() {
  comment_.Clear();
}
inline const ::weizhu::community::Comment& GetPostCommentByIdResponse::comment(int index) const {
  // @@protoc_insertion_point(field_get:weizhu.community.GetPostCommentByIdResponse.comment)
  return comment_.Get(index);
}
inline ::weizhu::community::Comment* GetPostCommentByIdResponse::mutable_comment(int index) {
  // @@protoc_insertion_point(field_mutable:weizhu.community.GetPostCommentByIdResponse.comment)
  return comment_.Mutable(index);
}
inline ::weizhu::community::Comment* GetPostCommentByIdResponse::add_comment() {
  // @@protoc_insertion_point(field_add:weizhu.community.GetPostCommentByIdResponse.comment)
  return comment_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::weizhu::community::Comment >&
GetPostCommentByIdResponse::comment() const {
  // @@protoc_insertion_point(field_list:weizhu.community.GetPostCommentByIdResponse.comment)
  return comment_;
}
inline ::google::protobuf::RepeatedPtrField< ::weizhu::community::Comment >*
GetPostCommentByIdResponse::mutable_comment() {
  // @@protoc_insertion_point(field_mutable_list:weizhu.community.GetPostCommentByIdResponse.comment)
  return &comment_;
}

// repeated .weizhu.community.Post ref_post = 2;
inline int GetPostCommentByIdResponse::ref_post_size() const {
  return ref_post_.size();
}
inline void GetPostCommentByIdResponse::clear_ref_post() {
  ref_post_.Clear();
}
inline const ::weizhu::community::Post& GetPostCommentByIdResponse::ref_post(int index) const {
  // @@protoc_insertion_point(field_get:weizhu.community.GetPostCommentByIdResponse.ref_post)
  return ref_post_.Get(index);
}
inline ::weizhu::community::Post* GetPostCommentByIdResponse::mutable_ref_post(int index) {
  // @@protoc_insertion_point(field_mutable:weizhu.community.GetPostCommentByIdResponse.ref_post)
  return ref_post_.Mutable(index);
}
inline ::weizhu::community::Post* GetPostCommentByIdResponse::add_ref_post() {
  // @@protoc_insertion_point(field_add:weizhu.community.GetPostCommentByIdResponse.ref_post)
  return ref_post_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::weizhu::community::Post >&
GetPostCommentByIdResponse::ref_post() const {
  // @@protoc_insertion_point(field_list:weizhu.community.GetPostCommentByIdResponse.ref_post)
  return ref_post_;
}
inline ::google::protobuf::RepeatedPtrField< ::weizhu::community::Post >*
GetPostCommentByIdResponse::mutable_ref_post() {
  // @@protoc_insertion_point(field_mutable_list:weizhu.community.GetPostCommentByIdResponse.ref_post)
  return &ref_post_;
}

// -------------------------------------------------------------------

// GetPostByIdsRequest

// repeated int32 post_id = 1;
inline int GetPostByIdsRequest::post_id_size() const {
  return post_id_.size();
}
inline void GetPostByIdsRequest::clear_post_id() {
  post_id_.Clear();
}
inline ::google::protobuf::int32 GetPostByIdsRequest::post_id(int index) const {
  // @@protoc_insertion_point(field_get:weizhu.community.GetPostByIdsRequest.post_id)
  return post_id_.Get(index);
}
inline void GetPostByIdsRequest::set_post_id(int index, ::google::protobuf::int32 value) {
  post_id_.Set(index, value);
  // @@protoc_insertion_point(field_set:weizhu.community.GetPostByIdsRequest.post_id)
}
inline void GetPostByIdsRequest::add_post_id(::google::protobuf::int32 value) {
  post_id_.Add(value);
  // @@protoc_insertion_point(field_add:weizhu.community.GetPostByIdsRequest.post_id)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
GetPostByIdsRequest::post_id() const {
  // @@protoc_insertion_point(field_list:weizhu.community.GetPostByIdsRequest.post_id)
  return post_id_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
GetPostByIdsRequest::mutable_post_id() {
  // @@protoc_insertion_point(field_mutable_list:weizhu.community.GetPostByIdsRequest.post_id)
  return &post_id_;
}

// -------------------------------------------------------------------

// GetPostByIdsResponse

// repeated .weizhu.community.Post post = 1;
inline int GetPostByIdsResponse::post_size() const {
  return post_.size();
}
inline void GetPostByIdsResponse::clear_post() {
  post_.Clear();
}
inline const ::weizhu::community::Post& GetPostByIdsResponse::post(int index) const {
  // @@protoc_insertion_point(field_get:weizhu.community.GetPostByIdsResponse.post)
  return post_.Get(index);
}
inline ::weizhu::community::Post* GetPostByIdsResponse::mutable_post(int index) {
  // @@protoc_insertion_point(field_mutable:weizhu.community.GetPostByIdsResponse.post)
  return post_.Mutable(index);
}
inline ::weizhu::community::Post* GetPostByIdsResponse::add_post() {
  // @@protoc_insertion_point(field_add:weizhu.community.GetPostByIdsResponse.post)
  return post_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::weizhu::community::Post >&
GetPostByIdsResponse::post() const {
  // @@protoc_insertion_point(field_list:weizhu.community.GetPostByIdsResponse.post)
  return post_;
}
inline ::google::protobuf::RepeatedPtrField< ::weizhu::community::Post >*
GetPostByIdsResponse::mutable_post() {
  // @@protoc_insertion_point(field_mutable_list:weizhu.community.GetPostByIdsResponse.post)
  return &post_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace community
}  // namespace weizhu

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_community_2eproto__INCLUDED
