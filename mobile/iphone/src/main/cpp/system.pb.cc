// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: system.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "system.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)

namespace weizhu {
namespace system {

void protobuf_ShutdownFile_system_2eproto() {
  delete SystemConfigStatePush::default_instance_;
  delete SystemNewVersionStatePush::default_instance_;
  delete UserConfig::default_instance_;
  delete AdminConfig::default_instance_;
  delete BossConfig::default_instance_;
  delete ImageConfig::default_instance_;
  delete DynamicConfig::default_instance_;
  delete VideoConfig::default_instance_;
  delete NewVersion::default_instance_;
  delete GetUserConfigResponse::default_instance_;
  delete GetAdminConfigResponse::default_instance_;
  delete GetBossConfigResponse::default_instance_;
  delete CheckNewVersionResponse::default_instance_;
  delete SendFeedbackRequest::default_instance_;
  delete UpdateBadgeNumberRequest::default_instance_;
  delete GetAuthUrlRequest::default_instance_;
  delete GetAuthUrlResponse::default_instance_;
  delete GetAuthUrlResponse_AuthCookie::default_instance_;
  delete Config::default_instance_;
  delete ConfigV2::default_instance_;
  delete GetConfigResponse::default_instance_;
  delete GetConfigV2Response::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_system_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_system_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  ::weizhu::protobuf_AddDesc_weizhu_2eproto();
  SystemConfigStatePush::default_instance_ = new SystemConfigStatePush();
  SystemNewVersionStatePush::default_instance_ = new SystemNewVersionStatePush();
  UserConfig::default_instance_ = new UserConfig();
  AdminConfig::default_instance_ = new AdminConfig();
  BossConfig::default_instance_ = new BossConfig();
  ImageConfig::default_instance_ = new ImageConfig();
  DynamicConfig::default_instance_ = new DynamicConfig();
  VideoConfig::default_instance_ = new VideoConfig();
  NewVersion::default_instance_ = new NewVersion();
  GetUserConfigResponse::default_instance_ = new GetUserConfigResponse();
  GetAdminConfigResponse::default_instance_ = new GetAdminConfigResponse();
  GetBossConfigResponse::default_instance_ = new GetBossConfigResponse();
  CheckNewVersionResponse::default_instance_ = new CheckNewVersionResponse();
  SendFeedbackRequest::default_instance_ = new SendFeedbackRequest();
  UpdateBadgeNumberRequest::default_instance_ = new UpdateBadgeNumberRequest();
  GetAuthUrlRequest::default_instance_ = new GetAuthUrlRequest();
  GetAuthUrlResponse::default_instance_ = new GetAuthUrlResponse();
  GetAuthUrlResponse_AuthCookie::default_instance_ = new GetAuthUrlResponse_AuthCookie();
  Config::default_instance_ = new Config();
  ConfigV2::default_instance_ = new ConfigV2();
  GetConfigResponse::default_instance_ = new GetConfigResponse();
  GetConfigV2Response::default_instance_ = new GetConfigV2Response();
  SystemConfigStatePush::default_instance_->InitAsDefaultInstance();
  SystemNewVersionStatePush::default_instance_->InitAsDefaultInstance();
  UserConfig::default_instance_->InitAsDefaultInstance();
  AdminConfig::default_instance_->InitAsDefaultInstance();
  BossConfig::default_instance_->InitAsDefaultInstance();
  ImageConfig::default_instance_->InitAsDefaultInstance();
  DynamicConfig::default_instance_->InitAsDefaultInstance();
  VideoConfig::default_instance_->InitAsDefaultInstance();
  NewVersion::default_instance_->InitAsDefaultInstance();
  GetUserConfigResponse::default_instance_->InitAsDefaultInstance();
  GetAdminConfigResponse::default_instance_->InitAsDefaultInstance();
  GetBossConfigResponse::default_instance_->InitAsDefaultInstance();
  CheckNewVersionResponse::default_instance_->InitAsDefaultInstance();
  SendFeedbackRequest::default_instance_->InitAsDefaultInstance();
  UpdateBadgeNumberRequest::default_instance_->InitAsDefaultInstance();
  GetAuthUrlRequest::default_instance_->InitAsDefaultInstance();
  GetAuthUrlResponse::default_instance_->InitAsDefaultInstance();
  GetAuthUrlResponse_AuthCookie::default_instance_->InitAsDefaultInstance();
  Config::default_instance_->InitAsDefaultInstance();
  ConfigV2::default_instance_->InitAsDefaultInstance();
  GetConfigResponse::default_instance_->InitAsDefaultInstance();
  GetConfigV2Response::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_system_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_system_2eproto_once_);
void protobuf_AddDesc_system_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_system_2eproto_once_,
                 &protobuf_AddDesc_system_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_system_2eproto {
  StaticDescriptorInitializer_system_2eproto() {
    protobuf_AddDesc_system_2eproto();
  }
} static_descriptor_initializer_system_2eproto_;
#endif

// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

SystemConfigStatePush::SystemConfigStatePush()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:weizhu.system.SystemConfigStatePush)
}

void SystemConfigStatePush::InitAsDefaultInstance() {
}

SystemConfigStatePush::SystemConfigStatePush(const SystemConfigStatePush& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:weizhu.system.SystemConfigStatePush)
}

void SystemConfigStatePush::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SystemConfigStatePush::~SystemConfigStatePush() {
  // @@protoc_insertion_point(destructor:weizhu.system.SystemConfigStatePush)
  SharedDtor();
}

void SystemConfigStatePush::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void SystemConfigStatePush::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const SystemConfigStatePush& SystemConfigStatePush::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_system_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_system_2eproto();
#endif
  return *default_instance_;
}

SystemConfigStatePush* SystemConfigStatePush::default_instance_ = NULL;

SystemConfigStatePush* SystemConfigStatePush::New() const {
  return new SystemConfigStatePush;
}

void SystemConfigStatePush::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool SystemConfigStatePush::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:weizhu.system.SystemConfigStatePush)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(
        input, tag, &unknown_fields_stream));
  }
success:
  // @@protoc_insertion_point(parse_success:weizhu.system.SystemConfigStatePush)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:weizhu.system.SystemConfigStatePush)
  return false;
#undef DO_
}

void SystemConfigStatePush::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:weizhu.system.SystemConfigStatePush)
  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:weizhu.system.SystemConfigStatePush)
}

int SystemConfigStatePush::ByteSize() const {
  int total_size = 0;

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SystemConfigStatePush::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const SystemConfigStatePush*>(&from));
}

void SystemConfigStatePush::MergeFrom(const SystemConfigStatePush& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->append(from.unknown_fields());
}

void SystemConfigStatePush::CopyFrom(const SystemConfigStatePush& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SystemConfigStatePush::IsInitialized() const {

  return true;
}

void SystemConfigStatePush::Swap(SystemConfigStatePush* other) {
  if (other != this) {
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string SystemConfigStatePush::GetTypeName() const {
  return "weizhu.system.SystemConfigStatePush";
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

SystemNewVersionStatePush::SystemNewVersionStatePush()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:weizhu.system.SystemNewVersionStatePush)
}

void SystemNewVersionStatePush::InitAsDefaultInstance() {
}

SystemNewVersionStatePush::SystemNewVersionStatePush(const SystemNewVersionStatePush& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:weizhu.system.SystemNewVersionStatePush)
}

void SystemNewVersionStatePush::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SystemNewVersionStatePush::~SystemNewVersionStatePush() {
  // @@protoc_insertion_point(destructor:weizhu.system.SystemNewVersionStatePush)
  SharedDtor();
}

void SystemNewVersionStatePush::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void SystemNewVersionStatePush::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const SystemNewVersionStatePush& SystemNewVersionStatePush::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_system_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_system_2eproto();
#endif
  return *default_instance_;
}

SystemNewVersionStatePush* SystemNewVersionStatePush::default_instance_ = NULL;

SystemNewVersionStatePush* SystemNewVersionStatePush::New() const {
  return new SystemNewVersionStatePush;
}

void SystemNewVersionStatePush::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool SystemNewVersionStatePush::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:weizhu.system.SystemNewVersionStatePush)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(
        input, tag, &unknown_fields_stream));
  }
success:
  // @@protoc_insertion_point(parse_success:weizhu.system.SystemNewVersionStatePush)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:weizhu.system.SystemNewVersionStatePush)
  return false;
#undef DO_
}

void SystemNewVersionStatePush::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:weizhu.system.SystemNewVersionStatePush)
  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:weizhu.system.SystemNewVersionStatePush)
}

int SystemNewVersionStatePush::ByteSize() const {
  int total_size = 0;

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SystemNewVersionStatePush::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const SystemNewVersionStatePush*>(&from));
}

void SystemNewVersionStatePush::MergeFrom(const SystemNewVersionStatePush& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->append(from.unknown_fields());
}

void SystemNewVersionStatePush::CopyFrom(const SystemNewVersionStatePush& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SystemNewVersionStatePush::IsInitialized() const {

  return true;
}

void SystemNewVersionStatePush::Swap(SystemNewVersionStatePush* other) {
  if (other != this) {
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string SystemNewVersionStatePush::GetTypeName() const {
  return "weizhu.system.SystemNewVersionStatePush";
}


// ===================================================================

#ifndef _MSC_VER
const int UserConfig::kHttpApiUrlFieldNumber;
const int UserConfig::kSocketConnAddrFieldNumber;
const int UserConfig::kImageUploadUrlFieldNumber;
const int UserConfig::kVideoUploadUrlFieldNumber;
const int UserConfig::kWebrtcIceServerAddrFieldNumber;
const int UserConfig::kWeizhuUrlPrefixFieldNumber;
#endif  // !_MSC_VER

UserConfig::UserConfig()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:weizhu.system.UserConfig)
}

void UserConfig::InitAsDefaultInstance() {
}

UserConfig::UserConfig(const UserConfig& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:weizhu.system.UserConfig)
}

void UserConfig::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  http_api_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  socket_conn_addr_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  image_upload_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  video_upload_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserConfig::~UserConfig() {
  // @@protoc_insertion_point(destructor:weizhu.system.UserConfig)
  SharedDtor();
}

void UserConfig::SharedDtor() {
  if (http_api_url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete http_api_url_;
  }
  if (socket_conn_addr_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete socket_conn_addr_;
  }
  if (image_upload_url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete image_upload_url_;
  }
  if (video_upload_url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete video_upload_url_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void UserConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const UserConfig& UserConfig::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_system_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_system_2eproto();
#endif
  return *default_instance_;
}

UserConfig* UserConfig::default_instance_ = NULL;

UserConfig* UserConfig::New() const {
  return new UserConfig;
}

void UserConfig::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    if (has_http_api_url()) {
      if (http_api_url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        http_api_url_->clear();
      }
    }
    if (has_socket_conn_addr()) {
      if (socket_conn_addr_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        socket_conn_addr_->clear();
      }
    }
    if (has_image_upload_url()) {
      if (image_upload_url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        image_upload_url_->clear();
      }
    }
    if (has_video_upload_url()) {
      if (video_upload_url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        video_upload_url_->clear();
      }
    }
  }
  webrtc_ice_server_addr_.Clear();
  weizhu_url_prefix_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool UserConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:weizhu.system.UserConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string http_api_url = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_http_api_url()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_socket_conn_addr;
        break;
      }

      // required string socket_conn_addr = 2;
      case 2: {
        if (tag == 18) {
         parse_socket_conn_addr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_socket_conn_addr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_image_upload_url;
        break;
      }

      // required string image_upload_url = 3;
      case 3: {
        if (tag == 26) {
         parse_image_upload_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_image_upload_url()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_video_upload_url;
        break;
      }

      // optional string video_upload_url = 4;
      case 4: {
        if (tag == 34) {
         parse_video_upload_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_video_upload_url()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_webrtc_ice_server_addr;
        break;
      }

      // repeated string webrtc_ice_server_addr = 5;
      case 5: {
        if (tag == 42) {
         parse_webrtc_ice_server_addr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_webrtc_ice_server_addr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_webrtc_ice_server_addr;
        if (input->ExpectTag(50)) goto parse_weizhu_url_prefix;
        break;
      }

      // repeated string weizhu_url_prefix = 6;
      case 6: {
        if (tag == 50) {
         parse_weizhu_url_prefix:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_weizhu_url_prefix()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_weizhu_url_prefix;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:weizhu.system.UserConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:weizhu.system.UserConfig)
  return false;
#undef DO_
}

void UserConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:weizhu.system.UserConfig)
  // required string http_api_url = 1;
  if (has_http_api_url()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->http_api_url(), output);
  }

  // required string socket_conn_addr = 2;
  if (has_socket_conn_addr()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->socket_conn_addr(), output);
  }

  // required string image_upload_url = 3;
  if (has_image_upload_url()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->image_upload_url(), output);
  }

  // optional string video_upload_url = 4;
  if (has_video_upload_url()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->video_upload_url(), output);
  }

  // repeated string webrtc_ice_server_addr = 5;
  for (int i = 0; i < this->webrtc_ice_server_addr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->webrtc_ice_server_addr(i), output);
  }

  // repeated string weizhu_url_prefix = 6;
  for (int i = 0; i < this->weizhu_url_prefix_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->weizhu_url_prefix(i), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:weizhu.system.UserConfig)
}

int UserConfig::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string http_api_url = 1;
    if (has_http_api_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->http_api_url());
    }

    // required string socket_conn_addr = 2;
    if (has_socket_conn_addr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->socket_conn_addr());
    }

    // required string image_upload_url = 3;
    if (has_image_upload_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->image_upload_url());
    }

    // optional string video_upload_url = 4;
    if (has_video_upload_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->video_upload_url());
    }

  }
  // repeated string webrtc_ice_server_addr = 5;
  total_size += 1 * this->webrtc_ice_server_addr_size();
  for (int i = 0; i < this->webrtc_ice_server_addr_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->webrtc_ice_server_addr(i));
  }

  // repeated string weizhu_url_prefix = 6;
  total_size += 1 * this->weizhu_url_prefix_size();
  for (int i = 0; i < this->weizhu_url_prefix_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->weizhu_url_prefix(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserConfig::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const UserConfig*>(&from));
}

void UserConfig::MergeFrom(const UserConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  webrtc_ice_server_addr_.MergeFrom(from.webrtc_ice_server_addr_);
  weizhu_url_prefix_.MergeFrom(from.weizhu_url_prefix_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_http_api_url()) {
      set_http_api_url(from.http_api_url());
    }
    if (from.has_socket_conn_addr()) {
      set_socket_conn_addr(from.socket_conn_addr());
    }
    if (from.has_image_upload_url()) {
      set_image_upload_url(from.image_upload_url());
    }
    if (from.has_video_upload_url()) {
      set_video_upload_url(from.video_upload_url());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void UserConfig::CopyFrom(const UserConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserConfig::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void UserConfig::Swap(UserConfig* other) {
  if (other != this) {
    std::swap(http_api_url_, other->http_api_url_);
    std::swap(socket_conn_addr_, other->socket_conn_addr_);
    std::swap(image_upload_url_, other->image_upload_url_);
    std::swap(video_upload_url_, other->video_upload_url_);
    webrtc_ice_server_addr_.Swap(&other->webrtc_ice_server_addr_);
    weizhu_url_prefix_.Swap(&other->weizhu_url_prefix_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string UserConfig::GetTypeName() const {
  return "weizhu.system.UserConfig";
}


// ===================================================================

#ifndef _MSC_VER
const int AdminConfig::kWebappMobileUrlPrefixFieldNumber;
const int AdminConfig::kWebappWebUrlPrefixFieldNumber;
const int AdminConfig::kWebappUploadUrlPrefixFieldNumber;
#endif  // !_MSC_VER

AdminConfig::AdminConfig()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:weizhu.system.AdminConfig)
}

void AdminConfig::InitAsDefaultInstance() {
}

AdminConfig::AdminConfig(const AdminConfig& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:weizhu.system.AdminConfig)
}

void AdminConfig::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  webapp_mobile_url_prefix_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  webapp_web_url_prefix_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  webapp_upload_url_prefix_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AdminConfig::~AdminConfig() {
  // @@protoc_insertion_point(destructor:weizhu.system.AdminConfig)
  SharedDtor();
}

void AdminConfig::SharedDtor() {
  if (webapp_mobile_url_prefix_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete webapp_mobile_url_prefix_;
  }
  if (webapp_web_url_prefix_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete webapp_web_url_prefix_;
  }
  if (webapp_upload_url_prefix_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete webapp_upload_url_prefix_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void AdminConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const AdminConfig& AdminConfig::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_system_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_system_2eproto();
#endif
  return *default_instance_;
}

AdminConfig* AdminConfig::default_instance_ = NULL;

AdminConfig* AdminConfig::New() const {
  return new AdminConfig;
}

void AdminConfig::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    if (has_webapp_mobile_url_prefix()) {
      if (webapp_mobile_url_prefix_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        webapp_mobile_url_prefix_->clear();
      }
    }
    if (has_webapp_web_url_prefix()) {
      if (webapp_web_url_prefix_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        webapp_web_url_prefix_->clear();
      }
    }
    if (has_webapp_upload_url_prefix()) {
      if (webapp_upload_url_prefix_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        webapp_upload_url_prefix_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool AdminConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:weizhu.system.AdminConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string webapp_mobile_url_prefix = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_webapp_mobile_url_prefix()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_webapp_web_url_prefix;
        break;
      }

      // required string webapp_web_url_prefix = 2;
      case 2: {
        if (tag == 18) {
         parse_webapp_web_url_prefix:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_webapp_web_url_prefix()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_webapp_upload_url_prefix;
        break;
      }

      // required string webapp_upload_url_prefix = 3;
      case 3: {
        if (tag == 26) {
         parse_webapp_upload_url_prefix:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_webapp_upload_url_prefix()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:weizhu.system.AdminConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:weizhu.system.AdminConfig)
  return false;
#undef DO_
}

void AdminConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:weizhu.system.AdminConfig)
  // required string webapp_mobile_url_prefix = 1;
  if (has_webapp_mobile_url_prefix()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->webapp_mobile_url_prefix(), output);
  }

  // required string webapp_web_url_prefix = 2;
  if (has_webapp_web_url_prefix()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->webapp_web_url_prefix(), output);
  }

  // required string webapp_upload_url_prefix = 3;
  if (has_webapp_upload_url_prefix()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->webapp_upload_url_prefix(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:weizhu.system.AdminConfig)
}

int AdminConfig::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string webapp_mobile_url_prefix = 1;
    if (has_webapp_mobile_url_prefix()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->webapp_mobile_url_prefix());
    }

    // required string webapp_web_url_prefix = 2;
    if (has_webapp_web_url_prefix()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->webapp_web_url_prefix());
    }

    // required string webapp_upload_url_prefix = 3;
    if (has_webapp_upload_url_prefix()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->webapp_upload_url_prefix());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AdminConfig::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const AdminConfig*>(&from));
}

void AdminConfig::MergeFrom(const AdminConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_webapp_mobile_url_prefix()) {
      set_webapp_mobile_url_prefix(from.webapp_mobile_url_prefix());
    }
    if (from.has_webapp_web_url_prefix()) {
      set_webapp_web_url_prefix(from.webapp_web_url_prefix());
    }
    if (from.has_webapp_upload_url_prefix()) {
      set_webapp_upload_url_prefix(from.webapp_upload_url_prefix());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void AdminConfig::CopyFrom(const AdminConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AdminConfig::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void AdminConfig::Swap(AdminConfig* other) {
  if (other != this) {
    std::swap(webapp_mobile_url_prefix_, other->webapp_mobile_url_prefix_);
    std::swap(webapp_web_url_prefix_, other->webapp_web_url_prefix_);
    std::swap(webapp_upload_url_prefix_, other->webapp_upload_url_prefix_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string AdminConfig::GetTypeName() const {
  return "weizhu.system.AdminConfig";
}


// ===================================================================

#ifndef _MSC_VER
const int BossConfig::kWebappAdminUrlPrefixFieldNumber;
const int BossConfig::kWebappMobileUrlPrefixFieldNumber;
const int BossConfig::kWebappWebUrlPrefixFieldNumber;
const int BossConfig::kWebappUploadUrlPrefixFieldNumber;
#endif  // !_MSC_VER

BossConfig::BossConfig()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:weizhu.system.BossConfig)
}

void BossConfig::InitAsDefaultInstance() {
}

BossConfig::BossConfig(const BossConfig& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:weizhu.system.BossConfig)
}

void BossConfig::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  webapp_admin_url_prefix_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  webapp_mobile_url_prefix_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  webapp_web_url_prefix_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  webapp_upload_url_prefix_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BossConfig::~BossConfig() {
  // @@protoc_insertion_point(destructor:weizhu.system.BossConfig)
  SharedDtor();
}

void BossConfig::SharedDtor() {
  if (webapp_admin_url_prefix_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete webapp_admin_url_prefix_;
  }
  if (webapp_mobile_url_prefix_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete webapp_mobile_url_prefix_;
  }
  if (webapp_web_url_prefix_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete webapp_web_url_prefix_;
  }
  if (webapp_upload_url_prefix_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete webapp_upload_url_prefix_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void BossConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const BossConfig& BossConfig::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_system_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_system_2eproto();
#endif
  return *default_instance_;
}

BossConfig* BossConfig::default_instance_ = NULL;

BossConfig* BossConfig::New() const {
  return new BossConfig;
}

void BossConfig::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    if (has_webapp_admin_url_prefix()) {
      if (webapp_admin_url_prefix_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        webapp_admin_url_prefix_->clear();
      }
    }
    if (has_webapp_mobile_url_prefix()) {
      if (webapp_mobile_url_prefix_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        webapp_mobile_url_prefix_->clear();
      }
    }
    if (has_webapp_web_url_prefix()) {
      if (webapp_web_url_prefix_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        webapp_web_url_prefix_->clear();
      }
    }
    if (has_webapp_upload_url_prefix()) {
      if (webapp_upload_url_prefix_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        webapp_upload_url_prefix_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool BossConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:weizhu.system.BossConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string webapp_admin_url_prefix = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_webapp_admin_url_prefix()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_webapp_mobile_url_prefix;
        break;
      }

      // required string webapp_mobile_url_prefix = 2;
      case 2: {
        if (tag == 18) {
         parse_webapp_mobile_url_prefix:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_webapp_mobile_url_prefix()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_webapp_web_url_prefix;
        break;
      }

      // required string webapp_web_url_prefix = 3;
      case 3: {
        if (tag == 26) {
         parse_webapp_web_url_prefix:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_webapp_web_url_prefix()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_webapp_upload_url_prefix;
        break;
      }

      // required string webapp_upload_url_prefix = 4;
      case 4: {
        if (tag == 34) {
         parse_webapp_upload_url_prefix:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_webapp_upload_url_prefix()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:weizhu.system.BossConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:weizhu.system.BossConfig)
  return false;
#undef DO_
}

void BossConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:weizhu.system.BossConfig)
  // required string webapp_admin_url_prefix = 1;
  if (has_webapp_admin_url_prefix()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->webapp_admin_url_prefix(), output);
  }

  // required string webapp_mobile_url_prefix = 2;
  if (has_webapp_mobile_url_prefix()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->webapp_mobile_url_prefix(), output);
  }

  // required string webapp_web_url_prefix = 3;
  if (has_webapp_web_url_prefix()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->webapp_web_url_prefix(), output);
  }

  // required string webapp_upload_url_prefix = 4;
  if (has_webapp_upload_url_prefix()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->webapp_upload_url_prefix(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:weizhu.system.BossConfig)
}

int BossConfig::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string webapp_admin_url_prefix = 1;
    if (has_webapp_admin_url_prefix()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->webapp_admin_url_prefix());
    }

    // required string webapp_mobile_url_prefix = 2;
    if (has_webapp_mobile_url_prefix()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->webapp_mobile_url_prefix());
    }

    // required string webapp_web_url_prefix = 3;
    if (has_webapp_web_url_prefix()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->webapp_web_url_prefix());
    }

    // required string webapp_upload_url_prefix = 4;
    if (has_webapp_upload_url_prefix()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->webapp_upload_url_prefix());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BossConfig::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const BossConfig*>(&from));
}

void BossConfig::MergeFrom(const BossConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_webapp_admin_url_prefix()) {
      set_webapp_admin_url_prefix(from.webapp_admin_url_prefix());
    }
    if (from.has_webapp_mobile_url_prefix()) {
      set_webapp_mobile_url_prefix(from.webapp_mobile_url_prefix());
    }
    if (from.has_webapp_web_url_prefix()) {
      set_webapp_web_url_prefix(from.webapp_web_url_prefix());
    }
    if (from.has_webapp_upload_url_prefix()) {
      set_webapp_upload_url_prefix(from.webapp_upload_url_prefix());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void BossConfig::CopyFrom(const BossConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BossConfig::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void BossConfig::Swap(BossConfig* other) {
  if (other != this) {
    std::swap(webapp_admin_url_prefix_, other->webapp_admin_url_prefix_);
    std::swap(webapp_mobile_url_prefix_, other->webapp_mobile_url_prefix_);
    std::swap(webapp_web_url_prefix_, other->webapp_web_url_prefix_);
    std::swap(webapp_upload_url_prefix_, other->webapp_upload_url_prefix_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string BossConfig::GetTypeName() const {
  return "weizhu.system.BossConfig";
}


// ===================================================================

#ifndef _MSC_VER
const int ImageConfig::kImageUrlPrefixFieldNumber;
const int ImageConfig::kImage60UrlPrefixFieldNumber;
const int ImageConfig::kImage120UrlPrefixFieldNumber;
const int ImageConfig::kImage240UrlPrefixFieldNumber;
const int ImageConfig::kImage480UrlPrefixFieldNumber;
#endif  // !_MSC_VER

ImageConfig::ImageConfig()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:weizhu.system.ImageConfig)
}

void ImageConfig::InitAsDefaultInstance() {
}

ImageConfig::ImageConfig(const ImageConfig& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:weizhu.system.ImageConfig)
}

void ImageConfig::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  image_url_prefix_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  image_60_url_prefix_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  image_120_url_prefix_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  image_240_url_prefix_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  image_480_url_prefix_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ImageConfig::~ImageConfig() {
  // @@protoc_insertion_point(destructor:weizhu.system.ImageConfig)
  SharedDtor();
}

void ImageConfig::SharedDtor() {
  if (image_url_prefix_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete image_url_prefix_;
  }
  if (image_60_url_prefix_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete image_60_url_prefix_;
  }
  if (image_120_url_prefix_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete image_120_url_prefix_;
  }
  if (image_240_url_prefix_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete image_240_url_prefix_;
  }
  if (image_480_url_prefix_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete image_480_url_prefix_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void ImageConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ImageConfig& ImageConfig::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_system_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_system_2eproto();
#endif
  return *default_instance_;
}

ImageConfig* ImageConfig::default_instance_ = NULL;

ImageConfig* ImageConfig::New() const {
  return new ImageConfig;
}

void ImageConfig::Clear() {
  if (_has_bits_[0 / 32] & 31) {
    if (has_image_url_prefix()) {
      if (image_url_prefix_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        image_url_prefix_->clear();
      }
    }
    if (has_image_60_url_prefix()) {
      if (image_60_url_prefix_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        image_60_url_prefix_->clear();
      }
    }
    if (has_image_120_url_prefix()) {
      if (image_120_url_prefix_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        image_120_url_prefix_->clear();
      }
    }
    if (has_image_240_url_prefix()) {
      if (image_240_url_prefix_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        image_240_url_prefix_->clear();
      }
    }
    if (has_image_480_url_prefix()) {
      if (image_480_url_prefix_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        image_480_url_prefix_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool ImageConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:weizhu.system.ImageConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string image_url_prefix = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_image_url_prefix()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_image_60_url_prefix;
        break;
      }

      // required string image_60_url_prefix = 2;
      case 2: {
        if (tag == 18) {
         parse_image_60_url_prefix:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_image_60_url_prefix()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_image_120_url_prefix;
        break;
      }

      // required string image_120_url_prefix = 3;
      case 3: {
        if (tag == 26) {
         parse_image_120_url_prefix:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_image_120_url_prefix()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_image_240_url_prefix;
        break;
      }

      // required string image_240_url_prefix = 4;
      case 4: {
        if (tag == 34) {
         parse_image_240_url_prefix:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_image_240_url_prefix()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_image_480_url_prefix;
        break;
      }

      // required string image_480_url_prefix = 5;
      case 5: {
        if (tag == 42) {
         parse_image_480_url_prefix:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_image_480_url_prefix()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:weizhu.system.ImageConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:weizhu.system.ImageConfig)
  return false;
#undef DO_
}

void ImageConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:weizhu.system.ImageConfig)
  // required string image_url_prefix = 1;
  if (has_image_url_prefix()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->image_url_prefix(), output);
  }

  // required string image_60_url_prefix = 2;
  if (has_image_60_url_prefix()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->image_60_url_prefix(), output);
  }

  // required string image_120_url_prefix = 3;
  if (has_image_120_url_prefix()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->image_120_url_prefix(), output);
  }

  // required string image_240_url_prefix = 4;
  if (has_image_240_url_prefix()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->image_240_url_prefix(), output);
  }

  // required string image_480_url_prefix = 5;
  if (has_image_480_url_prefix()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->image_480_url_prefix(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:weizhu.system.ImageConfig)
}

int ImageConfig::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string image_url_prefix = 1;
    if (has_image_url_prefix()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->image_url_prefix());
    }

    // required string image_60_url_prefix = 2;
    if (has_image_60_url_prefix()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->image_60_url_prefix());
    }

    // required string image_120_url_prefix = 3;
    if (has_image_120_url_prefix()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->image_120_url_prefix());
    }

    // required string image_240_url_prefix = 4;
    if (has_image_240_url_prefix()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->image_240_url_prefix());
    }

    // required string image_480_url_prefix = 5;
    if (has_image_480_url_prefix()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->image_480_url_prefix());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ImageConfig::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ImageConfig*>(&from));
}

void ImageConfig::MergeFrom(const ImageConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_image_url_prefix()) {
      set_image_url_prefix(from.image_url_prefix());
    }
    if (from.has_image_60_url_prefix()) {
      set_image_60_url_prefix(from.image_60_url_prefix());
    }
    if (from.has_image_120_url_prefix()) {
      set_image_120_url_prefix(from.image_120_url_prefix());
    }
    if (from.has_image_240_url_prefix()) {
      set_image_240_url_prefix(from.image_240_url_prefix());
    }
    if (from.has_image_480_url_prefix()) {
      set_image_480_url_prefix(from.image_480_url_prefix());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void ImageConfig::CopyFrom(const ImageConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ImageConfig::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void ImageConfig::Swap(ImageConfig* other) {
  if (other != this) {
    std::swap(image_url_prefix_, other->image_url_prefix_);
    std::swap(image_60_url_prefix_, other->image_60_url_prefix_);
    std::swap(image_120_url_prefix_, other->image_120_url_prefix_);
    std::swap(image_240_url_prefix_, other->image_240_url_prefix_);
    std::swap(image_480_url_prefix_, other->image_480_url_prefix_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string ImageConfig::GetTypeName() const {
  return "weizhu.system.ImageConfig";
}


// ===================================================================

#ifndef _MSC_VER
const int DynamicConfig::kNameFieldNumber;
const int DynamicConfig::kValueFieldNumber;
#endif  // !_MSC_VER

DynamicConfig::DynamicConfig()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:weizhu.system.DynamicConfig)
}

void DynamicConfig::InitAsDefaultInstance() {
}

DynamicConfig::DynamicConfig(const DynamicConfig& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:weizhu.system.DynamicConfig)
}

void DynamicConfig::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DynamicConfig::~DynamicConfig() {
  // @@protoc_insertion_point(destructor:weizhu.system.DynamicConfig)
  SharedDtor();
}

void DynamicConfig::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete value_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void DynamicConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const DynamicConfig& DynamicConfig::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_system_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_system_2eproto();
#endif
  return *default_instance_;
}

DynamicConfig* DynamicConfig::default_instance_ = NULL;

DynamicConfig* DynamicConfig::New() const {
  return new DynamicConfig;
}

void DynamicConfig::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    if (has_value()) {
      if (value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        value_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool DynamicConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:weizhu.system.DynamicConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_value;
        break;
      }

      // required string value = 2;
      case 2: {
        if (tag == 18) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:weizhu.system.DynamicConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:weizhu.system.DynamicConfig)
  return false;
#undef DO_
}

void DynamicConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:weizhu.system.DynamicConfig)
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // required string value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->value(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:weizhu.system.DynamicConfig)
}

int DynamicConfig::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required string value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->value());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DynamicConfig::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const DynamicConfig*>(&from));
}

void DynamicConfig::MergeFrom(const DynamicConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void DynamicConfig::CopyFrom(const DynamicConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DynamicConfig::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void DynamicConfig::Swap(DynamicConfig* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string DynamicConfig::GetTypeName() const {
  return "weizhu.system.DynamicConfig";
}


// ===================================================================

#ifndef _MSC_VER
const int VideoConfig::kVideoUrlPrefixFieldNumber;
#endif  // !_MSC_VER

VideoConfig::VideoConfig()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:weizhu.system.VideoConfig)
}

void VideoConfig::InitAsDefaultInstance() {
}

VideoConfig::VideoConfig(const VideoConfig& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:weizhu.system.VideoConfig)
}

void VideoConfig::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  video_url_prefix_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

VideoConfig::~VideoConfig() {
  // @@protoc_insertion_point(destructor:weizhu.system.VideoConfig)
  SharedDtor();
}

void VideoConfig::SharedDtor() {
  if (video_url_prefix_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete video_url_prefix_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void VideoConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const VideoConfig& VideoConfig::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_system_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_system_2eproto();
#endif
  return *default_instance_;
}

VideoConfig* VideoConfig::default_instance_ = NULL;

VideoConfig* VideoConfig::New() const {
  return new VideoConfig;
}

void VideoConfig::Clear() {
  if (has_video_url_prefix()) {
    if (video_url_prefix_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      video_url_prefix_->clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool VideoConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:weizhu.system.VideoConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string video_url_prefix = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_video_url_prefix()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:weizhu.system.VideoConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:weizhu.system.VideoConfig)
  return false;
#undef DO_
}

void VideoConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:weizhu.system.VideoConfig)
  // required string video_url_prefix = 1;
  if (has_video_url_prefix()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->video_url_prefix(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:weizhu.system.VideoConfig)
}

int VideoConfig::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string video_url_prefix = 1;
    if (has_video_url_prefix()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->video_url_prefix());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VideoConfig::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const VideoConfig*>(&from));
}

void VideoConfig::MergeFrom(const VideoConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_video_url_prefix()) {
      set_video_url_prefix(from.video_url_prefix());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void VideoConfig::CopyFrom(const VideoConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VideoConfig::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void VideoConfig::Swap(VideoConfig* other) {
  if (other != this) {
    std::swap(video_url_prefix_, other->video_url_prefix_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string VideoConfig::GetTypeName() const {
  return "weizhu.system.VideoConfig";
}


// ===================================================================

#ifndef _MSC_VER
const int NewVersion::kVersionNameFieldNumber;
const int NewVersion::kFeatureTextFieldNumber;
const int NewVersion::kDownloadUrlFieldNumber;
const int NewVersion::kVersionCodeFieldNumber;
const int NewVersion::kCheckMd5FieldNumber;
#endif  // !_MSC_VER

NewVersion::NewVersion()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:weizhu.system.NewVersion)
}

void NewVersion::InitAsDefaultInstance() {
}

NewVersion::NewVersion(const NewVersion& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:weizhu.system.NewVersion)
}

void NewVersion::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  version_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  feature_text_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  download_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  version_code_ = 0;
  check_md5_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NewVersion::~NewVersion() {
  // @@protoc_insertion_point(destructor:weizhu.system.NewVersion)
  SharedDtor();
}

void NewVersion::SharedDtor() {
  if (version_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete version_name_;
  }
  if (feature_text_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete feature_text_;
  }
  if (download_url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete download_url_;
  }
  if (check_md5_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete check_md5_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void NewVersion::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const NewVersion& NewVersion::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_system_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_system_2eproto();
#endif
  return *default_instance_;
}

NewVersion* NewVersion::default_instance_ = NULL;

NewVersion* NewVersion::New() const {
  return new NewVersion;
}

void NewVersion::Clear() {
  if (_has_bits_[0 / 32] & 31) {
    if (has_version_name()) {
      if (version_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        version_name_->clear();
      }
    }
    if (has_feature_text()) {
      if (feature_text_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        feature_text_->clear();
      }
    }
    if (has_download_url()) {
      if (download_url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        download_url_->clear();
      }
    }
    version_code_ = 0;
    if (has_check_md5()) {
      if (check_md5_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        check_md5_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool NewVersion::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:weizhu.system.NewVersion)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string version_name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_version_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_feature_text;
        break;
      }

      // required string feature_text = 2;
      case 2: {
        if (tag == 18) {
         parse_feature_text:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_feature_text()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_download_url;
        break;
      }

      // required string download_url = 3;
      case 3: {
        if (tag == 26) {
         parse_download_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_download_url()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_version_code;
        break;
      }

      // optional int32 version_code = 4;
      case 4: {
        if (tag == 32) {
         parse_version_code:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &version_code_)));
          set_has_version_code();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_check_md5;
        break;
      }

      // optional string check_md5 = 5;
      case 5: {
        if (tag == 42) {
         parse_check_md5:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_check_md5()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:weizhu.system.NewVersion)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:weizhu.system.NewVersion)
  return false;
#undef DO_
}

void NewVersion::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:weizhu.system.NewVersion)
  // required string version_name = 1;
  if (has_version_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->version_name(), output);
  }

  // required string feature_text = 2;
  if (has_feature_text()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->feature_text(), output);
  }

  // required string download_url = 3;
  if (has_download_url()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->download_url(), output);
  }

  // optional int32 version_code = 4;
  if (has_version_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->version_code(), output);
  }

  // optional string check_md5 = 5;
  if (has_check_md5()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->check_md5(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:weizhu.system.NewVersion)
}

int NewVersion::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string version_name = 1;
    if (has_version_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->version_name());
    }

    // required string feature_text = 2;
    if (has_feature_text()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->feature_text());
    }

    // required string download_url = 3;
    if (has_download_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->download_url());
    }

    // optional int32 version_code = 4;
    if (has_version_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->version_code());
    }

    // optional string check_md5 = 5;
    if (has_check_md5()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->check_md5());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NewVersion::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const NewVersion*>(&from));
}

void NewVersion::MergeFrom(const NewVersion& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_version_name()) {
      set_version_name(from.version_name());
    }
    if (from.has_feature_text()) {
      set_feature_text(from.feature_text());
    }
    if (from.has_download_url()) {
      set_download_url(from.download_url());
    }
    if (from.has_version_code()) {
      set_version_code(from.version_code());
    }
    if (from.has_check_md5()) {
      set_check_md5(from.check_md5());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void NewVersion::CopyFrom(const NewVersion& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NewVersion::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void NewVersion::Swap(NewVersion* other) {
  if (other != this) {
    std::swap(version_name_, other->version_name_);
    std::swap(feature_text_, other->feature_text_);
    std::swap(download_url_, other->download_url_);
    std::swap(version_code_, other->version_code_);
    std::swap(check_md5_, other->check_md5_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string NewVersion::GetTypeName() const {
  return "weizhu.system.NewVersion";
}


// ===================================================================

#ifndef _MSC_VER
const int GetUserConfigResponse::kUserFieldNumber;
const int GetUserConfigResponse::kImageFieldNumber;
const int GetUserConfigResponse::kDynamicFieldNumber;
const int GetUserConfigResponse::kVideoFieldNumber;
#endif  // !_MSC_VER

GetUserConfigResponse::GetUserConfigResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:weizhu.system.GetUserConfigResponse)
}

void GetUserConfigResponse::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  user_ = const_cast< ::weizhu::system::UserConfig*>(
      ::weizhu::system::UserConfig::internal_default_instance());
#else
  user_ = const_cast< ::weizhu::system::UserConfig*>(&::weizhu::system::UserConfig::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  image_ = const_cast< ::weizhu::system::ImageConfig*>(
      ::weizhu::system::ImageConfig::internal_default_instance());
#else
  image_ = const_cast< ::weizhu::system::ImageConfig*>(&::weizhu::system::ImageConfig::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  video_ = const_cast< ::weizhu::system::VideoConfig*>(
      ::weizhu::system::VideoConfig::internal_default_instance());
#else
  video_ = const_cast< ::weizhu::system::VideoConfig*>(&::weizhu::system::VideoConfig::default_instance());
#endif
}

GetUserConfigResponse::GetUserConfigResponse(const GetUserConfigResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:weizhu.system.GetUserConfigResponse)
}

void GetUserConfigResponse::SharedCtor() {
  _cached_size_ = 0;
  user_ = NULL;
  image_ = NULL;
  video_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetUserConfigResponse::~GetUserConfigResponse() {
  // @@protoc_insertion_point(destructor:weizhu.system.GetUserConfigResponse)
  SharedDtor();
}

void GetUserConfigResponse::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete user_;
    delete image_;
    delete video_;
  }
}

void GetUserConfigResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GetUserConfigResponse& GetUserConfigResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_system_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_system_2eproto();
#endif
  return *default_instance_;
}

GetUserConfigResponse* GetUserConfigResponse::default_instance_ = NULL;

GetUserConfigResponse* GetUserConfigResponse::New() const {
  return new GetUserConfigResponse;
}

void GetUserConfigResponse::Clear() {
  if (_has_bits_[0 / 32] & 11) {
    if (has_user()) {
      if (user_ != NULL) user_->::weizhu::system::UserConfig::Clear();
    }
    if (has_image()) {
      if (image_ != NULL) image_->::weizhu::system::ImageConfig::Clear();
    }
    if (has_video()) {
      if (video_ != NULL) video_->::weizhu::system::VideoConfig::Clear();
    }
  }
  dynamic_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool GetUserConfigResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:weizhu.system.GetUserConfigResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .weizhu.system.UserConfig user = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_user()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_image;
        break;
      }

      // required .weizhu.system.ImageConfig image = 2;
      case 2: {
        if (tag == 18) {
         parse_image:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_image()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_dynamic;
        break;
      }

      // repeated .weizhu.system.DynamicConfig dynamic = 3;
      case 3: {
        if (tag == 26) {
         parse_dynamic:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_dynamic()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_dynamic;
        if (input->ExpectTag(34)) goto parse_video;
        break;
      }

      // optional .weizhu.system.VideoConfig video = 4;
      case 4: {
        if (tag == 34) {
         parse_video:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_video()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:weizhu.system.GetUserConfigResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:weizhu.system.GetUserConfigResponse)
  return false;
#undef DO_
}

void GetUserConfigResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:weizhu.system.GetUserConfigResponse)
  // required .weizhu.system.UserConfig user = 1;
  if (has_user()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->user(), output);
  }

  // required .weizhu.system.ImageConfig image = 2;
  if (has_image()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->image(), output);
  }

  // repeated .weizhu.system.DynamicConfig dynamic = 3;
  for (int i = 0; i < this->dynamic_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->dynamic(i), output);
  }

  // optional .weizhu.system.VideoConfig video = 4;
  if (has_video()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, this->video(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:weizhu.system.GetUserConfigResponse)
}

int GetUserConfigResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .weizhu.system.UserConfig user = 1;
    if (has_user()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->user());
    }

    // required .weizhu.system.ImageConfig image = 2;
    if (has_image()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->image());
    }

    // optional .weizhu.system.VideoConfig video = 4;
    if (has_video()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->video());
    }

  }
  // repeated .weizhu.system.DynamicConfig dynamic = 3;
  total_size += 1 * this->dynamic_size();
  for (int i = 0; i < this->dynamic_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->dynamic(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetUserConfigResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GetUserConfigResponse*>(&from));
}

void GetUserConfigResponse::MergeFrom(const GetUserConfigResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  dynamic_.MergeFrom(from.dynamic_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user()) {
      mutable_user()->::weizhu::system::UserConfig::MergeFrom(from.user());
    }
    if (from.has_image()) {
      mutable_image()->::weizhu::system::ImageConfig::MergeFrom(from.image());
    }
    if (from.has_video()) {
      mutable_video()->::weizhu::system::VideoConfig::MergeFrom(from.video());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void GetUserConfigResponse::CopyFrom(const GetUserConfigResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetUserConfigResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_user()) {
    if (!this->user().IsInitialized()) return false;
  }
  if (has_image()) {
    if (!this->image().IsInitialized()) return false;
  }
  if (!::google::protobuf::internal::AllAreInitialized(this->dynamic())) return false;
  if (has_video()) {
    if (!this->video().IsInitialized()) return false;
  }
  return true;
}

void GetUserConfigResponse::Swap(GetUserConfigResponse* other) {
  if (other != this) {
    std::swap(user_, other->user_);
    std::swap(image_, other->image_);
    dynamic_.Swap(&other->dynamic_);
    std::swap(video_, other->video_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string GetUserConfigResponse::GetTypeName() const {
  return "weizhu.system.GetUserConfigResponse";
}


// ===================================================================

#ifndef _MSC_VER
const int GetAdminConfigResponse::kAdminFieldNumber;
const int GetAdminConfigResponse::kImageFieldNumber;
const int GetAdminConfigResponse::kDynamicFieldNumber;
const int GetAdminConfigResponse::kVideoFieldNumber;
#endif  // !_MSC_VER

GetAdminConfigResponse::GetAdminConfigResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:weizhu.system.GetAdminConfigResponse)
}

void GetAdminConfigResponse::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  admin_ = const_cast< ::weizhu::system::AdminConfig*>(
      ::weizhu::system::AdminConfig::internal_default_instance());
#else
  admin_ = const_cast< ::weizhu::system::AdminConfig*>(&::weizhu::system::AdminConfig::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  image_ = const_cast< ::weizhu::system::ImageConfig*>(
      ::weizhu::system::ImageConfig::internal_default_instance());
#else
  image_ = const_cast< ::weizhu::system::ImageConfig*>(&::weizhu::system::ImageConfig::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  video_ = const_cast< ::weizhu::system::VideoConfig*>(
      ::weizhu::system::VideoConfig::internal_default_instance());
#else
  video_ = const_cast< ::weizhu::system::VideoConfig*>(&::weizhu::system::VideoConfig::default_instance());
#endif
}

GetAdminConfigResponse::GetAdminConfigResponse(const GetAdminConfigResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:weizhu.system.GetAdminConfigResponse)
}

void GetAdminConfigResponse::SharedCtor() {
  _cached_size_ = 0;
  admin_ = NULL;
  image_ = NULL;
  video_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetAdminConfigResponse::~GetAdminConfigResponse() {
  // @@protoc_insertion_point(destructor:weizhu.system.GetAdminConfigResponse)
  SharedDtor();
}

void GetAdminConfigResponse::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete admin_;
    delete image_;
    delete video_;
  }
}

void GetAdminConfigResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GetAdminConfigResponse& GetAdminConfigResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_system_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_system_2eproto();
#endif
  return *default_instance_;
}

GetAdminConfigResponse* GetAdminConfigResponse::default_instance_ = NULL;

GetAdminConfigResponse* GetAdminConfigResponse::New() const {
  return new GetAdminConfigResponse;
}

void GetAdminConfigResponse::Clear() {
  if (_has_bits_[0 / 32] & 11) {
    if (has_admin()) {
      if (admin_ != NULL) admin_->::weizhu::system::AdminConfig::Clear();
    }
    if (has_image()) {
      if (image_ != NULL) image_->::weizhu::system::ImageConfig::Clear();
    }
    if (has_video()) {
      if (video_ != NULL) video_->::weizhu::system::VideoConfig::Clear();
    }
  }
  dynamic_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool GetAdminConfigResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:weizhu.system.GetAdminConfigResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .weizhu.system.AdminConfig admin = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_admin()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_image;
        break;
      }

      // required .weizhu.system.ImageConfig image = 2;
      case 2: {
        if (tag == 18) {
         parse_image:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_image()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_dynamic;
        break;
      }

      // repeated .weizhu.system.DynamicConfig dynamic = 3;
      case 3: {
        if (tag == 26) {
         parse_dynamic:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_dynamic()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_dynamic;
        if (input->ExpectTag(34)) goto parse_video;
        break;
      }

      // optional .weizhu.system.VideoConfig video = 4;
      case 4: {
        if (tag == 34) {
         parse_video:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_video()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:weizhu.system.GetAdminConfigResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:weizhu.system.GetAdminConfigResponse)
  return false;
#undef DO_
}

void GetAdminConfigResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:weizhu.system.GetAdminConfigResponse)
  // required .weizhu.system.AdminConfig admin = 1;
  if (has_admin()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->admin(), output);
  }

  // required .weizhu.system.ImageConfig image = 2;
  if (has_image()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->image(), output);
  }

  // repeated .weizhu.system.DynamicConfig dynamic = 3;
  for (int i = 0; i < this->dynamic_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->dynamic(i), output);
  }

  // optional .weizhu.system.VideoConfig video = 4;
  if (has_video()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, this->video(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:weizhu.system.GetAdminConfigResponse)
}

int GetAdminConfigResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .weizhu.system.AdminConfig admin = 1;
    if (has_admin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->admin());
    }

    // required .weizhu.system.ImageConfig image = 2;
    if (has_image()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->image());
    }

    // optional .weizhu.system.VideoConfig video = 4;
    if (has_video()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->video());
    }

  }
  // repeated .weizhu.system.DynamicConfig dynamic = 3;
  total_size += 1 * this->dynamic_size();
  for (int i = 0; i < this->dynamic_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->dynamic(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetAdminConfigResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GetAdminConfigResponse*>(&from));
}

void GetAdminConfigResponse::MergeFrom(const GetAdminConfigResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  dynamic_.MergeFrom(from.dynamic_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_admin()) {
      mutable_admin()->::weizhu::system::AdminConfig::MergeFrom(from.admin());
    }
    if (from.has_image()) {
      mutable_image()->::weizhu::system::ImageConfig::MergeFrom(from.image());
    }
    if (from.has_video()) {
      mutable_video()->::weizhu::system::VideoConfig::MergeFrom(from.video());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void GetAdminConfigResponse::CopyFrom(const GetAdminConfigResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetAdminConfigResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_admin()) {
    if (!this->admin().IsInitialized()) return false;
  }
  if (has_image()) {
    if (!this->image().IsInitialized()) return false;
  }
  if (!::google::protobuf::internal::AllAreInitialized(this->dynamic())) return false;
  if (has_video()) {
    if (!this->video().IsInitialized()) return false;
  }
  return true;
}

void GetAdminConfigResponse::Swap(GetAdminConfigResponse* other) {
  if (other != this) {
    std::swap(admin_, other->admin_);
    std::swap(image_, other->image_);
    dynamic_.Swap(&other->dynamic_);
    std::swap(video_, other->video_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string GetAdminConfigResponse::GetTypeName() const {
  return "weizhu.system.GetAdminConfigResponse";
}


// ===================================================================

#ifndef _MSC_VER
const int GetBossConfigResponse::kBossFieldNumber;
const int GetBossConfigResponse::kImageFieldNumber;
const int GetBossConfigResponse::kVideoFieldNumber;
#endif  // !_MSC_VER

GetBossConfigResponse::GetBossConfigResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:weizhu.system.GetBossConfigResponse)
}

void GetBossConfigResponse::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  boss_ = const_cast< ::weizhu::system::BossConfig*>(
      ::weizhu::system::BossConfig::internal_default_instance());
#else
  boss_ = const_cast< ::weizhu::system::BossConfig*>(&::weizhu::system::BossConfig::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  image_ = const_cast< ::weizhu::system::ImageConfig*>(
      ::weizhu::system::ImageConfig::internal_default_instance());
#else
  image_ = const_cast< ::weizhu::system::ImageConfig*>(&::weizhu::system::ImageConfig::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  video_ = const_cast< ::weizhu::system::VideoConfig*>(
      ::weizhu::system::VideoConfig::internal_default_instance());
#else
  video_ = const_cast< ::weizhu::system::VideoConfig*>(&::weizhu::system::VideoConfig::default_instance());
#endif
}

GetBossConfigResponse::GetBossConfigResponse(const GetBossConfigResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:weizhu.system.GetBossConfigResponse)
}

void GetBossConfigResponse::SharedCtor() {
  _cached_size_ = 0;
  boss_ = NULL;
  image_ = NULL;
  video_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetBossConfigResponse::~GetBossConfigResponse() {
  // @@protoc_insertion_point(destructor:weizhu.system.GetBossConfigResponse)
  SharedDtor();
}

void GetBossConfigResponse::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete boss_;
    delete image_;
    delete video_;
  }
}

void GetBossConfigResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GetBossConfigResponse& GetBossConfigResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_system_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_system_2eproto();
#endif
  return *default_instance_;
}

GetBossConfigResponse* GetBossConfigResponse::default_instance_ = NULL;

GetBossConfigResponse* GetBossConfigResponse::New() const {
  return new GetBossConfigResponse;
}

void GetBossConfigResponse::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    if (has_boss()) {
      if (boss_ != NULL) boss_->::weizhu::system::BossConfig::Clear();
    }
    if (has_image()) {
      if (image_ != NULL) image_->::weizhu::system::ImageConfig::Clear();
    }
    if (has_video()) {
      if (video_ != NULL) video_->::weizhu::system::VideoConfig::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool GetBossConfigResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:weizhu.system.GetBossConfigResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .weizhu.system.BossConfig boss = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_boss()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_image;
        break;
      }

      // required .weizhu.system.ImageConfig image = 2;
      case 2: {
        if (tag == 18) {
         parse_image:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_image()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_video;
        break;
      }

      // optional .weizhu.system.VideoConfig video = 3;
      case 3: {
        if (tag == 26) {
         parse_video:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_video()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:weizhu.system.GetBossConfigResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:weizhu.system.GetBossConfigResponse)
  return false;
#undef DO_
}

void GetBossConfigResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:weizhu.system.GetBossConfigResponse)
  // required .weizhu.system.BossConfig boss = 1;
  if (has_boss()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->boss(), output);
  }

  // required .weizhu.system.ImageConfig image = 2;
  if (has_image()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->image(), output);
  }

  // optional .weizhu.system.VideoConfig video = 3;
  if (has_video()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->video(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:weizhu.system.GetBossConfigResponse)
}

int GetBossConfigResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .weizhu.system.BossConfig boss = 1;
    if (has_boss()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->boss());
    }

    // required .weizhu.system.ImageConfig image = 2;
    if (has_image()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->image());
    }

    // optional .weizhu.system.VideoConfig video = 3;
    if (has_video()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->video());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetBossConfigResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GetBossConfigResponse*>(&from));
}

void GetBossConfigResponse::MergeFrom(const GetBossConfigResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_boss()) {
      mutable_boss()->::weizhu::system::BossConfig::MergeFrom(from.boss());
    }
    if (from.has_image()) {
      mutable_image()->::weizhu::system::ImageConfig::MergeFrom(from.image());
    }
    if (from.has_video()) {
      mutable_video()->::weizhu::system::VideoConfig::MergeFrom(from.video());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void GetBossConfigResponse::CopyFrom(const GetBossConfigResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetBossConfigResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_boss()) {
    if (!this->boss().IsInitialized()) return false;
  }
  if (has_image()) {
    if (!this->image().IsInitialized()) return false;
  }
  if (has_video()) {
    if (!this->video().IsInitialized()) return false;
  }
  return true;
}

void GetBossConfigResponse::Swap(GetBossConfigResponse* other) {
  if (other != this) {
    std::swap(boss_, other->boss_);
    std::swap(image_, other->image_);
    std::swap(video_, other->video_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string GetBossConfigResponse::GetTypeName() const {
  return "weizhu.system.GetBossConfigResponse";
}


// ===================================================================

#ifndef _MSC_VER
const int CheckNewVersionResponse::kNewVersionFieldNumber;
#endif  // !_MSC_VER

CheckNewVersionResponse::CheckNewVersionResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:weizhu.system.CheckNewVersionResponse)
}

void CheckNewVersionResponse::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  new_version_ = const_cast< ::weizhu::system::NewVersion*>(
      ::weizhu::system::NewVersion::internal_default_instance());
#else
  new_version_ = const_cast< ::weizhu::system::NewVersion*>(&::weizhu::system::NewVersion::default_instance());
#endif
}

CheckNewVersionResponse::CheckNewVersionResponse(const CheckNewVersionResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:weizhu.system.CheckNewVersionResponse)
}

void CheckNewVersionResponse::SharedCtor() {
  _cached_size_ = 0;
  new_version_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CheckNewVersionResponse::~CheckNewVersionResponse() {
  // @@protoc_insertion_point(destructor:weizhu.system.CheckNewVersionResponse)
  SharedDtor();
}

void CheckNewVersionResponse::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete new_version_;
  }
}

void CheckNewVersionResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CheckNewVersionResponse& CheckNewVersionResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_system_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_system_2eproto();
#endif
  return *default_instance_;
}

CheckNewVersionResponse* CheckNewVersionResponse::default_instance_ = NULL;

CheckNewVersionResponse* CheckNewVersionResponse::New() const {
  return new CheckNewVersionResponse;
}

void CheckNewVersionResponse::Clear() {
  if (has_new_version()) {
    if (new_version_ != NULL) new_version_->::weizhu::system::NewVersion::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool CheckNewVersionResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:weizhu.system.CheckNewVersionResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .weizhu.system.NewVersion new_version = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_new_version()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:weizhu.system.CheckNewVersionResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:weizhu.system.CheckNewVersionResponse)
  return false;
#undef DO_
}

void CheckNewVersionResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:weizhu.system.CheckNewVersionResponse)
  // optional .weizhu.system.NewVersion new_version = 1;
  if (has_new_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->new_version(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:weizhu.system.CheckNewVersionResponse)
}

int CheckNewVersionResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .weizhu.system.NewVersion new_version = 1;
    if (has_new_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->new_version());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CheckNewVersionResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CheckNewVersionResponse*>(&from));
}

void CheckNewVersionResponse::MergeFrom(const CheckNewVersionResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_new_version()) {
      mutable_new_version()->::weizhu::system::NewVersion::MergeFrom(from.new_version());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void CheckNewVersionResponse::CopyFrom(const CheckNewVersionResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CheckNewVersionResponse::IsInitialized() const {

  if (has_new_version()) {
    if (!this->new_version().IsInitialized()) return false;
  }
  return true;
}

void CheckNewVersionResponse::Swap(CheckNewVersionResponse* other) {
  if (other != this) {
    std::swap(new_version_, other->new_version_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CheckNewVersionResponse::GetTypeName() const {
  return "weizhu.system.CheckNewVersionResponse";
}


// ===================================================================

#ifndef _MSC_VER
const int SendFeedbackRequest::kFeedbackContentFieldNumber;
#endif  // !_MSC_VER

SendFeedbackRequest::SendFeedbackRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:weizhu.system.SendFeedbackRequest)
}

void SendFeedbackRequest::InitAsDefaultInstance() {
}

SendFeedbackRequest::SendFeedbackRequest(const SendFeedbackRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:weizhu.system.SendFeedbackRequest)
}

void SendFeedbackRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  feedback_content_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SendFeedbackRequest::~SendFeedbackRequest() {
  // @@protoc_insertion_point(destructor:weizhu.system.SendFeedbackRequest)
  SharedDtor();
}

void SendFeedbackRequest::SharedDtor() {
  if (feedback_content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete feedback_content_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void SendFeedbackRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const SendFeedbackRequest& SendFeedbackRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_system_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_system_2eproto();
#endif
  return *default_instance_;
}

SendFeedbackRequest* SendFeedbackRequest::default_instance_ = NULL;

SendFeedbackRequest* SendFeedbackRequest::New() const {
  return new SendFeedbackRequest;
}

void SendFeedbackRequest::Clear() {
  if (has_feedback_content()) {
    if (feedback_content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      feedback_content_->clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool SendFeedbackRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:weizhu.system.SendFeedbackRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string feedback_content = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_feedback_content()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:weizhu.system.SendFeedbackRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:weizhu.system.SendFeedbackRequest)
  return false;
#undef DO_
}

void SendFeedbackRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:weizhu.system.SendFeedbackRequest)
  // required string feedback_content = 1;
  if (has_feedback_content()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->feedback_content(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:weizhu.system.SendFeedbackRequest)
}

int SendFeedbackRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string feedback_content = 1;
    if (has_feedback_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->feedback_content());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SendFeedbackRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const SendFeedbackRequest*>(&from));
}

void SendFeedbackRequest::MergeFrom(const SendFeedbackRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_feedback_content()) {
      set_feedback_content(from.feedback_content());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void SendFeedbackRequest::CopyFrom(const SendFeedbackRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SendFeedbackRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void SendFeedbackRequest::Swap(SendFeedbackRequest* other) {
  if (other != this) {
    std::swap(feedback_content_, other->feedback_content_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string SendFeedbackRequest::GetTypeName() const {
  return "weizhu.system.SendFeedbackRequest";
}


// ===================================================================

#ifndef _MSC_VER
const int UpdateBadgeNumberRequest::kBadgeNumberFieldNumber;
#endif  // !_MSC_VER

UpdateBadgeNumberRequest::UpdateBadgeNumberRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:weizhu.system.UpdateBadgeNumberRequest)
}

void UpdateBadgeNumberRequest::InitAsDefaultInstance() {
}

UpdateBadgeNumberRequest::UpdateBadgeNumberRequest(const UpdateBadgeNumberRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:weizhu.system.UpdateBadgeNumberRequest)
}

void UpdateBadgeNumberRequest::SharedCtor() {
  _cached_size_ = 0;
  badge_number_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UpdateBadgeNumberRequest::~UpdateBadgeNumberRequest() {
  // @@protoc_insertion_point(destructor:weizhu.system.UpdateBadgeNumberRequest)
  SharedDtor();
}

void UpdateBadgeNumberRequest::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void UpdateBadgeNumberRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const UpdateBadgeNumberRequest& UpdateBadgeNumberRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_system_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_system_2eproto();
#endif
  return *default_instance_;
}

UpdateBadgeNumberRequest* UpdateBadgeNumberRequest::default_instance_ = NULL;

UpdateBadgeNumberRequest* UpdateBadgeNumberRequest::New() const {
  return new UpdateBadgeNumberRequest;
}

void UpdateBadgeNumberRequest::Clear() {
  badge_number_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool UpdateBadgeNumberRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:weizhu.system.UpdateBadgeNumberRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 badge_number = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &badge_number_)));
          set_has_badge_number();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:weizhu.system.UpdateBadgeNumberRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:weizhu.system.UpdateBadgeNumberRequest)
  return false;
#undef DO_
}

void UpdateBadgeNumberRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:weizhu.system.UpdateBadgeNumberRequest)
  // required int32 badge_number = 1;
  if (has_badge_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->badge_number(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:weizhu.system.UpdateBadgeNumberRequest)
}

int UpdateBadgeNumberRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 badge_number = 1;
    if (has_badge_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->badge_number());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpdateBadgeNumberRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const UpdateBadgeNumberRequest*>(&from));
}

void UpdateBadgeNumberRequest::MergeFrom(const UpdateBadgeNumberRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_badge_number()) {
      set_badge_number(from.badge_number());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void UpdateBadgeNumberRequest::CopyFrom(const UpdateBadgeNumberRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateBadgeNumberRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void UpdateBadgeNumberRequest::Swap(UpdateBadgeNumberRequest* other) {
  if (other != this) {
    std::swap(badge_number_, other->badge_number_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string UpdateBadgeNumberRequest::GetTypeName() const {
  return "weizhu.system.UpdateBadgeNumberRequest";
}


// ===================================================================

#ifndef _MSC_VER
const int GetAuthUrlRequest::kUrlFieldNumber;
#endif  // !_MSC_VER

GetAuthUrlRequest::GetAuthUrlRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:weizhu.system.GetAuthUrlRequest)
}

void GetAuthUrlRequest::InitAsDefaultInstance() {
}

GetAuthUrlRequest::GetAuthUrlRequest(const GetAuthUrlRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:weizhu.system.GetAuthUrlRequest)
}

void GetAuthUrlRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  url_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetAuthUrlRequest::~GetAuthUrlRequest() {
  // @@protoc_insertion_point(destructor:weizhu.system.GetAuthUrlRequest)
  SharedDtor();
}

void GetAuthUrlRequest::SharedDtor() {
  if (url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete url_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void GetAuthUrlRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GetAuthUrlRequest& GetAuthUrlRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_system_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_system_2eproto();
#endif
  return *default_instance_;
}

GetAuthUrlRequest* GetAuthUrlRequest::default_instance_ = NULL;

GetAuthUrlRequest* GetAuthUrlRequest::New() const {
  return new GetAuthUrlRequest;
}

void GetAuthUrlRequest::Clear() {
  if (has_url()) {
    if (url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      url_->clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool GetAuthUrlRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:weizhu.system.GetAuthUrlRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string url = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_url()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:weizhu.system.GetAuthUrlRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:weizhu.system.GetAuthUrlRequest)
  return false;
#undef DO_
}

void GetAuthUrlRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:weizhu.system.GetAuthUrlRequest)
  // required string url = 1;
  if (has_url()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->url(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:weizhu.system.GetAuthUrlRequest)
}

int GetAuthUrlRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string url = 1;
    if (has_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->url());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetAuthUrlRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GetAuthUrlRequest*>(&from));
}

void GetAuthUrlRequest::MergeFrom(const GetAuthUrlRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_url()) {
      set_url(from.url());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void GetAuthUrlRequest::CopyFrom(const GetAuthUrlRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetAuthUrlRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GetAuthUrlRequest::Swap(GetAuthUrlRequest* other) {
  if (other != this) {
    std::swap(url_, other->url_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string GetAuthUrlRequest::GetTypeName() const {
  return "weizhu.system.GetAuthUrlRequest";
}


// ===================================================================

bool GetAuthUrlResponse_Result_IsValid(int value) {
  switch(value) {
    case 0:
    case 99:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const GetAuthUrlResponse_Result GetAuthUrlResponse::SUCC;
const GetAuthUrlResponse_Result GetAuthUrlResponse::FAIL_UNKNOWN;
const GetAuthUrlResponse_Result GetAuthUrlResponse::Result_MIN;
const GetAuthUrlResponse_Result GetAuthUrlResponse::Result_MAX;
const int GetAuthUrlResponse::Result_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int GetAuthUrlResponse_AuthCookie::kNameFieldNumber;
const int GetAuthUrlResponse_AuthCookie::kValueFieldNumber;
#endif  // !_MSC_VER

GetAuthUrlResponse_AuthCookie::GetAuthUrlResponse_AuthCookie()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:weizhu.system.GetAuthUrlResponse.AuthCookie)
}

void GetAuthUrlResponse_AuthCookie::InitAsDefaultInstance() {
}

GetAuthUrlResponse_AuthCookie::GetAuthUrlResponse_AuthCookie(const GetAuthUrlResponse_AuthCookie& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:weizhu.system.GetAuthUrlResponse.AuthCookie)
}

void GetAuthUrlResponse_AuthCookie::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetAuthUrlResponse_AuthCookie::~GetAuthUrlResponse_AuthCookie() {
  // @@protoc_insertion_point(destructor:weizhu.system.GetAuthUrlResponse.AuthCookie)
  SharedDtor();
}

void GetAuthUrlResponse_AuthCookie::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete value_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void GetAuthUrlResponse_AuthCookie::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GetAuthUrlResponse_AuthCookie& GetAuthUrlResponse_AuthCookie::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_system_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_system_2eproto();
#endif
  return *default_instance_;
}

GetAuthUrlResponse_AuthCookie* GetAuthUrlResponse_AuthCookie::default_instance_ = NULL;

GetAuthUrlResponse_AuthCookie* GetAuthUrlResponse_AuthCookie::New() const {
  return new GetAuthUrlResponse_AuthCookie;
}

void GetAuthUrlResponse_AuthCookie::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    if (has_value()) {
      if (value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        value_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool GetAuthUrlResponse_AuthCookie::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:weizhu.system.GetAuthUrlResponse.AuthCookie)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_value;
        break;
      }

      // required string value = 2;
      case 2: {
        if (tag == 18) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:weizhu.system.GetAuthUrlResponse.AuthCookie)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:weizhu.system.GetAuthUrlResponse.AuthCookie)
  return false;
#undef DO_
}

void GetAuthUrlResponse_AuthCookie::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:weizhu.system.GetAuthUrlResponse.AuthCookie)
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // required string value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->value(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:weizhu.system.GetAuthUrlResponse.AuthCookie)
}

int GetAuthUrlResponse_AuthCookie::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required string value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->value());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetAuthUrlResponse_AuthCookie::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GetAuthUrlResponse_AuthCookie*>(&from));
}

void GetAuthUrlResponse_AuthCookie::MergeFrom(const GetAuthUrlResponse_AuthCookie& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void GetAuthUrlResponse_AuthCookie::CopyFrom(const GetAuthUrlResponse_AuthCookie& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetAuthUrlResponse_AuthCookie::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void GetAuthUrlResponse_AuthCookie::Swap(GetAuthUrlResponse_AuthCookie* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string GetAuthUrlResponse_AuthCookie::GetTypeName() const {
  return "weizhu.system.GetAuthUrlResponse.AuthCookie";
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int GetAuthUrlResponse::kResultFieldNumber;
const int GetAuthUrlResponse::kFailTextFieldNumber;
const int GetAuthUrlResponse::kAuthUrlFieldNumber;
const int GetAuthUrlResponse::kAuthCookieFieldNumber;
#endif  // !_MSC_VER

GetAuthUrlResponse::GetAuthUrlResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:weizhu.system.GetAuthUrlResponse)
}

void GetAuthUrlResponse::InitAsDefaultInstance() {
}

GetAuthUrlResponse::GetAuthUrlResponse(const GetAuthUrlResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:weizhu.system.GetAuthUrlResponse)
}

void GetAuthUrlResponse::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  result_ = 99;
  fail_text_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  auth_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetAuthUrlResponse::~GetAuthUrlResponse() {
  // @@protoc_insertion_point(destructor:weizhu.system.GetAuthUrlResponse)
  SharedDtor();
}

void GetAuthUrlResponse::SharedDtor() {
  if (fail_text_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete fail_text_;
  }
  if (auth_url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete auth_url_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void GetAuthUrlResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GetAuthUrlResponse& GetAuthUrlResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_system_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_system_2eproto();
#endif
  return *default_instance_;
}

GetAuthUrlResponse* GetAuthUrlResponse::default_instance_ = NULL;

GetAuthUrlResponse* GetAuthUrlResponse::New() const {
  return new GetAuthUrlResponse;
}

void GetAuthUrlResponse::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    result_ = 99;
    if (has_fail_text()) {
      if (fail_text_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        fail_text_->clear();
      }
    }
    if (has_auth_url()) {
      if (auth_url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        auth_url_->clear();
      }
    }
  }
  auth_cookie_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool GetAuthUrlResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:weizhu.system.GetAuthUrlResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .weizhu.system.GetAuthUrlResponse.Result result = 1 [default = FAIL_UNKNOWN];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::weizhu::system::GetAuthUrlResponse_Result_IsValid(value)) {
            set_result(static_cast< ::weizhu::system::GetAuthUrlResponse_Result >(value));
          } else {
            unknown_fields_stream.WriteVarint32(tag);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_fail_text;
        break;
      }

      // optional string fail_text = 2;
      case 2: {
        if (tag == 18) {
         parse_fail_text:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fail_text()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_auth_url;
        break;
      }

      // optional string auth_url = 3;
      case 3: {
        if (tag == 26) {
         parse_auth_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_auth_url()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_auth_cookie;
        break;
      }

      // repeated .weizhu.system.GetAuthUrlResponse.AuthCookie auth_cookie = 4;
      case 4: {
        if (tag == 34) {
         parse_auth_cookie:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_auth_cookie()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_auth_cookie;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:weizhu.system.GetAuthUrlResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:weizhu.system.GetAuthUrlResponse)
  return false;
#undef DO_
}

void GetAuthUrlResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:weizhu.system.GetAuthUrlResponse)
  // optional .weizhu.system.GetAuthUrlResponse.Result result = 1 [default = FAIL_UNKNOWN];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  // optional string fail_text = 2;
  if (has_fail_text()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->fail_text(), output);
  }

  // optional string auth_url = 3;
  if (has_auth_url()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->auth_url(), output);
  }

  // repeated .weizhu.system.GetAuthUrlResponse.AuthCookie auth_cookie = 4;
  for (int i = 0; i < this->auth_cookie_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, this->auth_cookie(i), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:weizhu.system.GetAuthUrlResponse)
}

int GetAuthUrlResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .weizhu.system.GetAuthUrlResponse.Result result = 1 [default = FAIL_UNKNOWN];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

    // optional string fail_text = 2;
    if (has_fail_text()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->fail_text());
    }

    // optional string auth_url = 3;
    if (has_auth_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->auth_url());
    }

  }
  // repeated .weizhu.system.GetAuthUrlResponse.AuthCookie auth_cookie = 4;
  total_size += 1 * this->auth_cookie_size();
  for (int i = 0; i < this->auth_cookie_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->auth_cookie(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetAuthUrlResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GetAuthUrlResponse*>(&from));
}

void GetAuthUrlResponse::MergeFrom(const GetAuthUrlResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  auth_cookie_.MergeFrom(from.auth_cookie_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_fail_text()) {
      set_fail_text(from.fail_text());
    }
    if (from.has_auth_url()) {
      set_auth_url(from.auth_url());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void GetAuthUrlResponse::CopyFrom(const GetAuthUrlResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetAuthUrlResponse::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->auth_cookie())) return false;
  return true;
}

void GetAuthUrlResponse::Swap(GetAuthUrlResponse* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(fail_text_, other->fail_text_);
    std::swap(auth_url_, other->auth_url_);
    auth_cookie_.Swap(&other->auth_cookie_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string GetAuthUrlResponse::GetTypeName() const {
  return "weizhu.system.GetAuthUrlResponse";
}


// ===================================================================

#ifndef _MSC_VER
const int Config::kHttpApiUrlFieldNumber;
const int Config::kSocketConnHostFieldNumber;
const int Config::kSocketConnPortFieldNumber;
const int Config::kUploadAvatarUrlFieldNumber;
const int Config::kUploadImImageUrlFieldNumber;
const int Config::kUploadImFileUrlFieldNumber;
const int Config::kAvatarUrlFieldNumber;
const int Config::kImImageUrlFieldNumber;
const int Config::kImFileUrlFieldNumber;
const int Config::kDiscoverImageUrlFieldNumber;
const int Config::kDiscoverIconUrlFieldNumber;
const int Config::kDiscoverItemUrlFieldNumber;
const int Config::kUploadCommunityImageUrlFieldNumber;
const int Config::kCommunityImageUrlFieldNumber;
#endif  // !_MSC_VER

Config::Config()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:weizhu.system.Config)
}

void Config::InitAsDefaultInstance() {
}

Config::Config(const Config& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:weizhu.system.Config)
}

void Config::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  http_api_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  socket_conn_host_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  socket_conn_port_ = 0;
  upload_avatar_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  upload_im_image_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  upload_im_file_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  avatar_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  im_image_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  im_file_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  discover_image_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  discover_icon_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  discover_item_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  upload_community_image_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  community_image_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Config::~Config() {
  // @@protoc_insertion_point(destructor:weizhu.system.Config)
  SharedDtor();
}

void Config::SharedDtor() {
  if (http_api_url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete http_api_url_;
  }
  if (socket_conn_host_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete socket_conn_host_;
  }
  if (upload_avatar_url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete upload_avatar_url_;
  }
  if (upload_im_image_url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete upload_im_image_url_;
  }
  if (upload_im_file_url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete upload_im_file_url_;
  }
  if (avatar_url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete avatar_url_;
  }
  if (im_image_url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete im_image_url_;
  }
  if (im_file_url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete im_file_url_;
  }
  if (discover_image_url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete discover_image_url_;
  }
  if (discover_icon_url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete discover_icon_url_;
  }
  if (discover_item_url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete discover_item_url_;
  }
  if (upload_community_image_url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete upload_community_image_url_;
  }
  if (community_image_url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete community_image_url_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void Config::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Config& Config::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_system_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_system_2eproto();
#endif
  return *default_instance_;
}

Config* Config::default_instance_ = NULL;

Config* Config::New() const {
  return new Config;
}

void Config::Clear() {
  if (_has_bits_[0 / 32] & 255) {
    if (has_http_api_url()) {
      if (http_api_url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        http_api_url_->clear();
      }
    }
    if (has_socket_conn_host()) {
      if (socket_conn_host_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        socket_conn_host_->clear();
      }
    }
    socket_conn_port_ = 0;
    if (has_upload_avatar_url()) {
      if (upload_avatar_url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        upload_avatar_url_->clear();
      }
    }
    if (has_upload_im_image_url()) {
      if (upload_im_image_url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        upload_im_image_url_->clear();
      }
    }
    if (has_upload_im_file_url()) {
      if (upload_im_file_url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        upload_im_file_url_->clear();
      }
    }
    if (has_avatar_url()) {
      if (avatar_url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        avatar_url_->clear();
      }
    }
    if (has_im_image_url()) {
      if (im_image_url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        im_image_url_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 16128) {
    if (has_im_file_url()) {
      if (im_file_url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        im_file_url_->clear();
      }
    }
    if (has_discover_image_url()) {
      if (discover_image_url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        discover_image_url_->clear();
      }
    }
    if (has_discover_icon_url()) {
      if (discover_icon_url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        discover_icon_url_->clear();
      }
    }
    if (has_discover_item_url()) {
      if (discover_item_url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        discover_item_url_->clear();
      }
    }
    if (has_upload_community_image_url()) {
      if (upload_community_image_url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        upload_community_image_url_->clear();
      }
    }
    if (has_community_image_url()) {
      if (community_image_url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        community_image_url_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool Config::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:weizhu.system.Config)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string http_api_url = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_http_api_url()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_socket_conn_host;
        break;
      }

      // required string socket_conn_host = 2;
      case 2: {
        if (tag == 18) {
         parse_socket_conn_host:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_socket_conn_host()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_socket_conn_port;
        break;
      }

      // required int32 socket_conn_port = 3;
      case 3: {
        if (tag == 24) {
         parse_socket_conn_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &socket_conn_port_)));
          set_has_socket_conn_port();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_upload_avatar_url;
        break;
      }

      // required string upload_avatar_url = 4;
      case 4: {
        if (tag == 34) {
         parse_upload_avatar_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_upload_avatar_url()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_upload_im_image_url;
        break;
      }

      // required string upload_im_image_url = 5;
      case 5: {
        if (tag == 42) {
         parse_upload_im_image_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_upload_im_image_url()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_upload_im_file_url;
        break;
      }

      // required string upload_im_file_url = 6;
      case 6: {
        if (tag == 50) {
         parse_upload_im_file_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_upload_im_file_url()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_avatar_url;
        break;
      }

      // required string avatar_url = 7;
      case 7: {
        if (tag == 58) {
         parse_avatar_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_avatar_url()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_im_image_url;
        break;
      }

      // required string im_image_url = 8;
      case 8: {
        if (tag == 66) {
         parse_im_image_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_im_image_url()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_im_file_url;
        break;
      }

      // required string im_file_url = 9;
      case 9: {
        if (tag == 74) {
         parse_im_file_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_im_file_url()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_discover_image_url;
        break;
      }

      // required string discover_image_url = 10;
      case 10: {
        if (tag == 82) {
         parse_discover_image_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_discover_image_url()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_discover_icon_url;
        break;
      }

      // required string discover_icon_url = 11;
      case 11: {
        if (tag == 90) {
         parse_discover_icon_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_discover_icon_url()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_discover_item_url;
        break;
      }

      // required string discover_item_url = 12;
      case 12: {
        if (tag == 98) {
         parse_discover_item_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_discover_item_url()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_upload_community_image_url;
        break;
      }

      // required string upload_community_image_url = 13;
      case 13: {
        if (tag == 106) {
         parse_upload_community_image_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_upload_community_image_url()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(114)) goto parse_community_image_url;
        break;
      }

      // required string community_image_url = 14;
      case 14: {
        if (tag == 114) {
         parse_community_image_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_community_image_url()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:weizhu.system.Config)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:weizhu.system.Config)
  return false;
#undef DO_
}

void Config::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:weizhu.system.Config)
  // required string http_api_url = 1;
  if (has_http_api_url()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->http_api_url(), output);
  }

  // required string socket_conn_host = 2;
  if (has_socket_conn_host()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->socket_conn_host(), output);
  }

  // required int32 socket_conn_port = 3;
  if (has_socket_conn_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->socket_conn_port(), output);
  }

  // required string upload_avatar_url = 4;
  if (has_upload_avatar_url()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->upload_avatar_url(), output);
  }

  // required string upload_im_image_url = 5;
  if (has_upload_im_image_url()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->upload_im_image_url(), output);
  }

  // required string upload_im_file_url = 6;
  if (has_upload_im_file_url()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->upload_im_file_url(), output);
  }

  // required string avatar_url = 7;
  if (has_avatar_url()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->avatar_url(), output);
  }

  // required string im_image_url = 8;
  if (has_im_image_url()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->im_image_url(), output);
  }

  // required string im_file_url = 9;
  if (has_im_file_url()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->im_file_url(), output);
  }

  // required string discover_image_url = 10;
  if (has_discover_image_url()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->discover_image_url(), output);
  }

  // required string discover_icon_url = 11;
  if (has_discover_icon_url()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->discover_icon_url(), output);
  }

  // required string discover_item_url = 12;
  if (has_discover_item_url()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      12, this->discover_item_url(), output);
  }

  // required string upload_community_image_url = 13;
  if (has_upload_community_image_url()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      13, this->upload_community_image_url(), output);
  }

  // required string community_image_url = 14;
  if (has_community_image_url()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      14, this->community_image_url(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:weizhu.system.Config)
}

int Config::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string http_api_url = 1;
    if (has_http_api_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->http_api_url());
    }

    // required string socket_conn_host = 2;
    if (has_socket_conn_host()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->socket_conn_host());
    }

    // required int32 socket_conn_port = 3;
    if (has_socket_conn_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->socket_conn_port());
    }

    // required string upload_avatar_url = 4;
    if (has_upload_avatar_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->upload_avatar_url());
    }

    // required string upload_im_image_url = 5;
    if (has_upload_im_image_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->upload_im_image_url());
    }

    // required string upload_im_file_url = 6;
    if (has_upload_im_file_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->upload_im_file_url());
    }

    // required string avatar_url = 7;
    if (has_avatar_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->avatar_url());
    }

    // required string im_image_url = 8;
    if (has_im_image_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->im_image_url());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required string im_file_url = 9;
    if (has_im_file_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->im_file_url());
    }

    // required string discover_image_url = 10;
    if (has_discover_image_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->discover_image_url());
    }

    // required string discover_icon_url = 11;
    if (has_discover_icon_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->discover_icon_url());
    }

    // required string discover_item_url = 12;
    if (has_discover_item_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->discover_item_url());
    }

    // required string upload_community_image_url = 13;
    if (has_upload_community_image_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->upload_community_image_url());
    }

    // required string community_image_url = 14;
    if (has_community_image_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->community_image_url());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Config::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Config*>(&from));
}

void Config::MergeFrom(const Config& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_http_api_url()) {
      set_http_api_url(from.http_api_url());
    }
    if (from.has_socket_conn_host()) {
      set_socket_conn_host(from.socket_conn_host());
    }
    if (from.has_socket_conn_port()) {
      set_socket_conn_port(from.socket_conn_port());
    }
    if (from.has_upload_avatar_url()) {
      set_upload_avatar_url(from.upload_avatar_url());
    }
    if (from.has_upload_im_image_url()) {
      set_upload_im_image_url(from.upload_im_image_url());
    }
    if (from.has_upload_im_file_url()) {
      set_upload_im_file_url(from.upload_im_file_url());
    }
    if (from.has_avatar_url()) {
      set_avatar_url(from.avatar_url());
    }
    if (from.has_im_image_url()) {
      set_im_image_url(from.im_image_url());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_im_file_url()) {
      set_im_file_url(from.im_file_url());
    }
    if (from.has_discover_image_url()) {
      set_discover_image_url(from.discover_image_url());
    }
    if (from.has_discover_icon_url()) {
      set_discover_icon_url(from.discover_icon_url());
    }
    if (from.has_discover_item_url()) {
      set_discover_item_url(from.discover_item_url());
    }
    if (from.has_upload_community_image_url()) {
      set_upload_community_image_url(from.upload_community_image_url());
    }
    if (from.has_community_image_url()) {
      set_community_image_url(from.community_image_url());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void Config::CopyFrom(const Config& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Config::IsInitialized() const {
  if ((_has_bits_[0] & 0x00003fff) != 0x00003fff) return false;

  return true;
}

void Config::Swap(Config* other) {
  if (other != this) {
    std::swap(http_api_url_, other->http_api_url_);
    std::swap(socket_conn_host_, other->socket_conn_host_);
    std::swap(socket_conn_port_, other->socket_conn_port_);
    std::swap(upload_avatar_url_, other->upload_avatar_url_);
    std::swap(upload_im_image_url_, other->upload_im_image_url_);
    std::swap(upload_im_file_url_, other->upload_im_file_url_);
    std::swap(avatar_url_, other->avatar_url_);
    std::swap(im_image_url_, other->im_image_url_);
    std::swap(im_file_url_, other->im_file_url_);
    std::swap(discover_image_url_, other->discover_image_url_);
    std::swap(discover_icon_url_, other->discover_icon_url_);
    std::swap(discover_item_url_, other->discover_item_url_);
    std::swap(upload_community_image_url_, other->upload_community_image_url_);
    std::swap(community_image_url_, other->community_image_url_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string Config::GetTypeName() const {
  return "weizhu.system.Config";
}


// ===================================================================

#ifndef _MSC_VER
const int ConfigV2::kHttpApiUrlFieldNumber;
const int ConfigV2::kSocketConnAddrFieldNumber;
const int ConfigV2::kAvatarUrlPrefixFieldNumber;
const int ConfigV2::kAvatarUploadUrlFieldNumber;
const int ConfigV2::kImImageUrlPrefixFieldNumber;
const int ConfigV2::kImImageUploadUrlFieldNumber;
const int ConfigV2::kDiscoverImageUrlPrefixFieldNumber;
const int ConfigV2::kDiscoverImageUploadUrlFieldNumber;
const int ConfigV2::kDiscoverItemUrlPrefixFieldNumber;
const int ConfigV2::kCommunityImageUrlPrefixFieldNumber;
const int ConfigV2::kCommunityImageUploadUrlFieldNumber;
const int ConfigV2::kSceneHomeUrlFieldNumber;
const int ConfigV2::kSceneImageUrlPrefixFieldNumber;
const int ConfigV2::kRecommendImageUrlFieldNumber;
const int ConfigV2::kImageUploadUrlFieldNumber;
const int ConfigV2::kImageUrlPrefixFieldNumber;
const int ConfigV2::kImage60UrlPrefixFieldNumber;
const int ConfigV2::kImage120UrlPrefixFieldNumber;
const int ConfigV2::kImage240UrlPrefixFieldNumber;
const int ConfigV2::kImage480UrlPrefixFieldNumber;
#endif  // !_MSC_VER

ConfigV2::ConfigV2()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:weizhu.system.ConfigV2)
}

void ConfigV2::InitAsDefaultInstance() {
}

ConfigV2::ConfigV2(const ConfigV2& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:weizhu.system.ConfigV2)
}

void ConfigV2::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  http_api_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  socket_conn_addr_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  avatar_url_prefix_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  avatar_upload_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  im_image_url_prefix_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  im_image_upload_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  discover_image_url_prefix_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  discover_image_upload_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  discover_item_url_prefix_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  community_image_url_prefix_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  community_image_upload_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  scene_home_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  scene_image_url_prefix_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  recommend_image_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  image_upload_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  image_url_prefix_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  image_60_url_prefix_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  image_120_url_prefix_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  image_240_url_prefix_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  image_480_url_prefix_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ConfigV2::~ConfigV2() {
  // @@protoc_insertion_point(destructor:weizhu.system.ConfigV2)
  SharedDtor();
}

void ConfigV2::SharedDtor() {
  if (http_api_url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete http_api_url_;
  }
  if (socket_conn_addr_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete socket_conn_addr_;
  }
  if (avatar_url_prefix_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete avatar_url_prefix_;
  }
  if (avatar_upload_url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete avatar_upload_url_;
  }
  if (im_image_url_prefix_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete im_image_url_prefix_;
  }
  if (im_image_upload_url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete im_image_upload_url_;
  }
  if (discover_image_url_prefix_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete discover_image_url_prefix_;
  }
  if (discover_image_upload_url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete discover_image_upload_url_;
  }
  if (discover_item_url_prefix_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete discover_item_url_prefix_;
  }
  if (community_image_url_prefix_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete community_image_url_prefix_;
  }
  if (community_image_upload_url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete community_image_upload_url_;
  }
  if (scene_home_url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete scene_home_url_;
  }
  if (scene_image_url_prefix_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete scene_image_url_prefix_;
  }
  if (recommend_image_url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete recommend_image_url_;
  }
  if (image_upload_url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete image_upload_url_;
  }
  if (image_url_prefix_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete image_url_prefix_;
  }
  if (image_60_url_prefix_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete image_60_url_prefix_;
  }
  if (image_120_url_prefix_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete image_120_url_prefix_;
  }
  if (image_240_url_prefix_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete image_240_url_prefix_;
  }
  if (image_480_url_prefix_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete image_480_url_prefix_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void ConfigV2::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ConfigV2& ConfigV2::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_system_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_system_2eproto();
#endif
  return *default_instance_;
}

ConfigV2* ConfigV2::default_instance_ = NULL;

ConfigV2* ConfigV2::New() const {
  return new ConfigV2;
}

void ConfigV2::Clear() {
  if (_has_bits_[0 / 32] & 255) {
    if (has_http_api_url()) {
      if (http_api_url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        http_api_url_->clear();
      }
    }
    if (has_socket_conn_addr()) {
      if (socket_conn_addr_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        socket_conn_addr_->clear();
      }
    }
    if (has_avatar_url_prefix()) {
      if (avatar_url_prefix_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        avatar_url_prefix_->clear();
      }
    }
    if (has_avatar_upload_url()) {
      if (avatar_upload_url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        avatar_upload_url_->clear();
      }
    }
    if (has_im_image_url_prefix()) {
      if (im_image_url_prefix_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        im_image_url_prefix_->clear();
      }
    }
    if (has_im_image_upload_url()) {
      if (im_image_upload_url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        im_image_upload_url_->clear();
      }
    }
    if (has_discover_image_url_prefix()) {
      if (discover_image_url_prefix_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        discover_image_url_prefix_->clear();
      }
    }
    if (has_discover_image_upload_url()) {
      if (discover_image_upload_url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        discover_image_upload_url_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 65280) {
    if (has_discover_item_url_prefix()) {
      if (discover_item_url_prefix_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        discover_item_url_prefix_->clear();
      }
    }
    if (has_community_image_url_prefix()) {
      if (community_image_url_prefix_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        community_image_url_prefix_->clear();
      }
    }
    if (has_community_image_upload_url()) {
      if (community_image_upload_url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        community_image_upload_url_->clear();
      }
    }
    if (has_scene_home_url()) {
      if (scene_home_url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        scene_home_url_->clear();
      }
    }
    if (has_scene_image_url_prefix()) {
      if (scene_image_url_prefix_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        scene_image_url_prefix_->clear();
      }
    }
    if (has_recommend_image_url()) {
      if (recommend_image_url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        recommend_image_url_->clear();
      }
    }
    if (has_image_upload_url()) {
      if (image_upload_url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        image_upload_url_->clear();
      }
    }
    if (has_image_url_prefix()) {
      if (image_url_prefix_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        image_url_prefix_->clear();
      }
    }
  }
  if (_has_bits_[16 / 32] & 983040) {
    if (has_image_60_url_prefix()) {
      if (image_60_url_prefix_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        image_60_url_prefix_->clear();
      }
    }
    if (has_image_120_url_prefix()) {
      if (image_120_url_prefix_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        image_120_url_prefix_->clear();
      }
    }
    if (has_image_240_url_prefix()) {
      if (image_240_url_prefix_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        image_240_url_prefix_->clear();
      }
    }
    if (has_image_480_url_prefix()) {
      if (image_480_url_prefix_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        image_480_url_prefix_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool ConfigV2::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:weizhu.system.ConfigV2)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string http_api_url = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_http_api_url()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_socket_conn_addr;
        break;
      }

      // required string socket_conn_addr = 2;
      case 2: {
        if (tag == 18) {
         parse_socket_conn_addr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_socket_conn_addr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_avatar_url_prefix;
        break;
      }

      // required string avatar_url_prefix = 3;
      case 3: {
        if (tag == 26) {
         parse_avatar_url_prefix:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_avatar_url_prefix()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_avatar_upload_url;
        break;
      }

      // required string avatar_upload_url = 4;
      case 4: {
        if (tag == 34) {
         parse_avatar_upload_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_avatar_upload_url()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_im_image_url_prefix;
        break;
      }

      // required string im_image_url_prefix = 5;
      case 5: {
        if (tag == 42) {
         parse_im_image_url_prefix:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_im_image_url_prefix()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_im_image_upload_url;
        break;
      }

      // required string im_image_upload_url = 6;
      case 6: {
        if (tag == 50) {
         parse_im_image_upload_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_im_image_upload_url()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_discover_image_url_prefix;
        break;
      }

      // required string discover_image_url_prefix = 7;
      case 7: {
        if (tag == 58) {
         parse_discover_image_url_prefix:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_discover_image_url_prefix()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_discover_image_upload_url;
        break;
      }

      // required string discover_image_upload_url = 8;
      case 8: {
        if (tag == 66) {
         parse_discover_image_upload_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_discover_image_upload_url()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_discover_item_url_prefix;
        break;
      }

      // required string discover_item_url_prefix = 9;
      case 9: {
        if (tag == 74) {
         parse_discover_item_url_prefix:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_discover_item_url_prefix()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_community_image_url_prefix;
        break;
      }

      // required string community_image_url_prefix = 10;
      case 10: {
        if (tag == 82) {
         parse_community_image_url_prefix:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_community_image_url_prefix()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_community_image_upload_url;
        break;
      }

      // required string community_image_upload_url = 11;
      case 11: {
        if (tag == 90) {
         parse_community_image_upload_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_community_image_upload_url()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_scene_home_url;
        break;
      }

      // optional string scene_home_url = 12;
      case 12: {
        if (tag == 98) {
         parse_scene_home_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_scene_home_url()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_scene_image_url_prefix;
        break;
      }

      // required string scene_image_url_prefix = 13;
      case 13: {
        if (tag == 106) {
         parse_scene_image_url_prefix:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_scene_image_url_prefix()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(114)) goto parse_recommend_image_url;
        break;
      }

      // optional string recommend_image_url = 14;
      case 14: {
        if (tag == 114) {
         parse_recommend_image_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_recommend_image_url()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(122)) goto parse_image_upload_url;
        break;
      }

      // required string image_upload_url = 15;
      case 15: {
        if (tag == 122) {
         parse_image_upload_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_image_upload_url()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(130)) goto parse_image_url_prefix;
        break;
      }

      // required string image_url_prefix = 16;
      case 16: {
        if (tag == 130) {
         parse_image_url_prefix:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_image_url_prefix()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(138)) goto parse_image_60_url_prefix;
        break;
      }

      // required string image_60_url_prefix = 17;
      case 17: {
        if (tag == 138) {
         parse_image_60_url_prefix:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_image_60_url_prefix()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(146)) goto parse_image_120_url_prefix;
        break;
      }

      // required string image_120_url_prefix = 18;
      case 18: {
        if (tag == 146) {
         parse_image_120_url_prefix:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_image_120_url_prefix()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(154)) goto parse_image_240_url_prefix;
        break;
      }

      // required string image_240_url_prefix = 19;
      case 19: {
        if (tag == 154) {
         parse_image_240_url_prefix:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_image_240_url_prefix()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(162)) goto parse_image_480_url_prefix;
        break;
      }

      // required string image_480_url_prefix = 20;
      case 20: {
        if (tag == 162) {
         parse_image_480_url_prefix:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_image_480_url_prefix()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:weizhu.system.ConfigV2)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:weizhu.system.ConfigV2)
  return false;
#undef DO_
}

void ConfigV2::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:weizhu.system.ConfigV2)
  // required string http_api_url = 1;
  if (has_http_api_url()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->http_api_url(), output);
  }

  // required string socket_conn_addr = 2;
  if (has_socket_conn_addr()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->socket_conn_addr(), output);
  }

  // required string avatar_url_prefix = 3;
  if (has_avatar_url_prefix()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->avatar_url_prefix(), output);
  }

  // required string avatar_upload_url = 4;
  if (has_avatar_upload_url()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->avatar_upload_url(), output);
  }

  // required string im_image_url_prefix = 5;
  if (has_im_image_url_prefix()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->im_image_url_prefix(), output);
  }

  // required string im_image_upload_url = 6;
  if (has_im_image_upload_url()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->im_image_upload_url(), output);
  }

  // required string discover_image_url_prefix = 7;
  if (has_discover_image_url_prefix()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->discover_image_url_prefix(), output);
  }

  // required string discover_image_upload_url = 8;
  if (has_discover_image_upload_url()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->discover_image_upload_url(), output);
  }

  // required string discover_item_url_prefix = 9;
  if (has_discover_item_url_prefix()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->discover_item_url_prefix(), output);
  }

  // required string community_image_url_prefix = 10;
  if (has_community_image_url_prefix()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->community_image_url_prefix(), output);
  }

  // required string community_image_upload_url = 11;
  if (has_community_image_upload_url()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->community_image_upload_url(), output);
  }

  // optional string scene_home_url = 12;
  if (has_scene_home_url()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      12, this->scene_home_url(), output);
  }

  // required string scene_image_url_prefix = 13;
  if (has_scene_image_url_prefix()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      13, this->scene_image_url_prefix(), output);
  }

  // optional string recommend_image_url = 14;
  if (has_recommend_image_url()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      14, this->recommend_image_url(), output);
  }

  // required string image_upload_url = 15;
  if (has_image_upload_url()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      15, this->image_upload_url(), output);
  }

  // required string image_url_prefix = 16;
  if (has_image_url_prefix()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      16, this->image_url_prefix(), output);
  }

  // required string image_60_url_prefix = 17;
  if (has_image_60_url_prefix()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      17, this->image_60_url_prefix(), output);
  }

  // required string image_120_url_prefix = 18;
  if (has_image_120_url_prefix()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      18, this->image_120_url_prefix(), output);
  }

  // required string image_240_url_prefix = 19;
  if (has_image_240_url_prefix()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      19, this->image_240_url_prefix(), output);
  }

  // required string image_480_url_prefix = 20;
  if (has_image_480_url_prefix()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      20, this->image_480_url_prefix(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:weizhu.system.ConfigV2)
}

int ConfigV2::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string http_api_url = 1;
    if (has_http_api_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->http_api_url());
    }

    // required string socket_conn_addr = 2;
    if (has_socket_conn_addr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->socket_conn_addr());
    }

    // required string avatar_url_prefix = 3;
    if (has_avatar_url_prefix()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->avatar_url_prefix());
    }

    // required string avatar_upload_url = 4;
    if (has_avatar_upload_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->avatar_upload_url());
    }

    // required string im_image_url_prefix = 5;
    if (has_im_image_url_prefix()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->im_image_url_prefix());
    }

    // required string im_image_upload_url = 6;
    if (has_im_image_upload_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->im_image_upload_url());
    }

    // required string discover_image_url_prefix = 7;
    if (has_discover_image_url_prefix()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->discover_image_url_prefix());
    }

    // required string discover_image_upload_url = 8;
    if (has_discover_image_upload_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->discover_image_upload_url());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required string discover_item_url_prefix = 9;
    if (has_discover_item_url_prefix()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->discover_item_url_prefix());
    }

    // required string community_image_url_prefix = 10;
    if (has_community_image_url_prefix()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->community_image_url_prefix());
    }

    // required string community_image_upload_url = 11;
    if (has_community_image_upload_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->community_image_upload_url());
    }

    // optional string scene_home_url = 12;
    if (has_scene_home_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->scene_home_url());
    }

    // required string scene_image_url_prefix = 13;
    if (has_scene_image_url_prefix()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->scene_image_url_prefix());
    }

    // optional string recommend_image_url = 14;
    if (has_recommend_image_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->recommend_image_url());
    }

    // required string image_upload_url = 15;
    if (has_image_upload_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->image_upload_url());
    }

    // required string image_url_prefix = 16;
    if (has_image_url_prefix()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->image_url_prefix());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // required string image_60_url_prefix = 17;
    if (has_image_60_url_prefix()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->image_60_url_prefix());
    }

    // required string image_120_url_prefix = 18;
    if (has_image_120_url_prefix()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->image_120_url_prefix());
    }

    // required string image_240_url_prefix = 19;
    if (has_image_240_url_prefix()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->image_240_url_prefix());
    }

    // required string image_480_url_prefix = 20;
    if (has_image_480_url_prefix()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->image_480_url_prefix());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ConfigV2::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ConfigV2*>(&from));
}

void ConfigV2::MergeFrom(const ConfigV2& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_http_api_url()) {
      set_http_api_url(from.http_api_url());
    }
    if (from.has_socket_conn_addr()) {
      set_socket_conn_addr(from.socket_conn_addr());
    }
    if (from.has_avatar_url_prefix()) {
      set_avatar_url_prefix(from.avatar_url_prefix());
    }
    if (from.has_avatar_upload_url()) {
      set_avatar_upload_url(from.avatar_upload_url());
    }
    if (from.has_im_image_url_prefix()) {
      set_im_image_url_prefix(from.im_image_url_prefix());
    }
    if (from.has_im_image_upload_url()) {
      set_im_image_upload_url(from.im_image_upload_url());
    }
    if (from.has_discover_image_url_prefix()) {
      set_discover_image_url_prefix(from.discover_image_url_prefix());
    }
    if (from.has_discover_image_upload_url()) {
      set_discover_image_upload_url(from.discover_image_upload_url());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_discover_item_url_prefix()) {
      set_discover_item_url_prefix(from.discover_item_url_prefix());
    }
    if (from.has_community_image_url_prefix()) {
      set_community_image_url_prefix(from.community_image_url_prefix());
    }
    if (from.has_community_image_upload_url()) {
      set_community_image_upload_url(from.community_image_upload_url());
    }
    if (from.has_scene_home_url()) {
      set_scene_home_url(from.scene_home_url());
    }
    if (from.has_scene_image_url_prefix()) {
      set_scene_image_url_prefix(from.scene_image_url_prefix());
    }
    if (from.has_recommend_image_url()) {
      set_recommend_image_url(from.recommend_image_url());
    }
    if (from.has_image_upload_url()) {
      set_image_upload_url(from.image_upload_url());
    }
    if (from.has_image_url_prefix()) {
      set_image_url_prefix(from.image_url_prefix());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_image_60_url_prefix()) {
      set_image_60_url_prefix(from.image_60_url_prefix());
    }
    if (from.has_image_120_url_prefix()) {
      set_image_120_url_prefix(from.image_120_url_prefix());
    }
    if (from.has_image_240_url_prefix()) {
      set_image_240_url_prefix(from.image_240_url_prefix());
    }
    if (from.has_image_480_url_prefix()) {
      set_image_480_url_prefix(from.image_480_url_prefix());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void ConfigV2::CopyFrom(const ConfigV2& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConfigV2::IsInitialized() const {
  if ((_has_bits_[0] & 0x000fd7ff) != 0x000fd7ff) return false;

  return true;
}

void ConfigV2::Swap(ConfigV2* other) {
  if (other != this) {
    std::swap(http_api_url_, other->http_api_url_);
    std::swap(socket_conn_addr_, other->socket_conn_addr_);
    std::swap(avatar_url_prefix_, other->avatar_url_prefix_);
    std::swap(avatar_upload_url_, other->avatar_upload_url_);
    std::swap(im_image_url_prefix_, other->im_image_url_prefix_);
    std::swap(im_image_upload_url_, other->im_image_upload_url_);
    std::swap(discover_image_url_prefix_, other->discover_image_url_prefix_);
    std::swap(discover_image_upload_url_, other->discover_image_upload_url_);
    std::swap(discover_item_url_prefix_, other->discover_item_url_prefix_);
    std::swap(community_image_url_prefix_, other->community_image_url_prefix_);
    std::swap(community_image_upload_url_, other->community_image_upload_url_);
    std::swap(scene_home_url_, other->scene_home_url_);
    std::swap(scene_image_url_prefix_, other->scene_image_url_prefix_);
    std::swap(recommend_image_url_, other->recommend_image_url_);
    std::swap(image_upload_url_, other->image_upload_url_);
    std::swap(image_url_prefix_, other->image_url_prefix_);
    std::swap(image_60_url_prefix_, other->image_60_url_prefix_);
    std::swap(image_120_url_prefix_, other->image_120_url_prefix_);
    std::swap(image_240_url_prefix_, other->image_240_url_prefix_);
    std::swap(image_480_url_prefix_, other->image_480_url_prefix_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string ConfigV2::GetTypeName() const {
  return "weizhu.system.ConfigV2";
}


// ===================================================================

#ifndef _MSC_VER
const int GetConfigResponse::kConfigFieldNumber;
#endif  // !_MSC_VER

GetConfigResponse::GetConfigResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:weizhu.system.GetConfigResponse)
}

void GetConfigResponse::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  config_ = const_cast< ::weizhu::system::Config*>(
      ::weizhu::system::Config::internal_default_instance());
#else
  config_ = const_cast< ::weizhu::system::Config*>(&::weizhu::system::Config::default_instance());
#endif
}

GetConfigResponse::GetConfigResponse(const GetConfigResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:weizhu.system.GetConfigResponse)
}

void GetConfigResponse::SharedCtor() {
  _cached_size_ = 0;
  config_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetConfigResponse::~GetConfigResponse() {
  // @@protoc_insertion_point(destructor:weizhu.system.GetConfigResponse)
  SharedDtor();
}

void GetConfigResponse::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete config_;
  }
}

void GetConfigResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GetConfigResponse& GetConfigResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_system_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_system_2eproto();
#endif
  return *default_instance_;
}

GetConfigResponse* GetConfigResponse::default_instance_ = NULL;

GetConfigResponse* GetConfigResponse::New() const {
  return new GetConfigResponse;
}

void GetConfigResponse::Clear() {
  if (has_config()) {
    if (config_ != NULL) config_->::weizhu::system::Config::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool GetConfigResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:weizhu.system.GetConfigResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .weizhu.system.Config config = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_config()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:weizhu.system.GetConfigResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:weizhu.system.GetConfigResponse)
  return false;
#undef DO_
}

void GetConfigResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:weizhu.system.GetConfigResponse)
  // required .weizhu.system.Config config = 1;
  if (has_config()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->config(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:weizhu.system.GetConfigResponse)
}

int GetConfigResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .weizhu.system.Config config = 1;
    if (has_config()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->config());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetConfigResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GetConfigResponse*>(&from));
}

void GetConfigResponse::MergeFrom(const GetConfigResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_config()) {
      mutable_config()->::weizhu::system::Config::MergeFrom(from.config());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void GetConfigResponse::CopyFrom(const GetConfigResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetConfigResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_config()) {
    if (!this->config().IsInitialized()) return false;
  }
  return true;
}

void GetConfigResponse::Swap(GetConfigResponse* other) {
  if (other != this) {
    std::swap(config_, other->config_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string GetConfigResponse::GetTypeName() const {
  return "weizhu.system.GetConfigResponse";
}


// ===================================================================

#ifndef _MSC_VER
const int GetConfigV2Response::kConfigFieldNumber;
#endif  // !_MSC_VER

GetConfigV2Response::GetConfigV2Response()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:weizhu.system.GetConfigV2Response)
}

void GetConfigV2Response::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  config_ = const_cast< ::weizhu::system::ConfigV2*>(
      ::weizhu::system::ConfigV2::internal_default_instance());
#else
  config_ = const_cast< ::weizhu::system::ConfigV2*>(&::weizhu::system::ConfigV2::default_instance());
#endif
}

GetConfigV2Response::GetConfigV2Response(const GetConfigV2Response& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:weizhu.system.GetConfigV2Response)
}

void GetConfigV2Response::SharedCtor() {
  _cached_size_ = 0;
  config_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetConfigV2Response::~GetConfigV2Response() {
  // @@protoc_insertion_point(destructor:weizhu.system.GetConfigV2Response)
  SharedDtor();
}

void GetConfigV2Response::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete config_;
  }
}

void GetConfigV2Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GetConfigV2Response& GetConfigV2Response::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_system_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_system_2eproto();
#endif
  return *default_instance_;
}

GetConfigV2Response* GetConfigV2Response::default_instance_ = NULL;

GetConfigV2Response* GetConfigV2Response::New() const {
  return new GetConfigV2Response;
}

void GetConfigV2Response::Clear() {
  if (has_config()) {
    if (config_ != NULL) config_->::weizhu::system::ConfigV2::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool GetConfigV2Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:weizhu.system.GetConfigV2Response)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .weizhu.system.ConfigV2 config = 2;
      case 2: {
        if (tag == 18) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_config()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:weizhu.system.GetConfigV2Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:weizhu.system.GetConfigV2Response)
  return false;
#undef DO_
}

void GetConfigV2Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:weizhu.system.GetConfigV2Response)
  // required .weizhu.system.ConfigV2 config = 2;
  if (has_config()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->config(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:weizhu.system.GetConfigV2Response)
}

int GetConfigV2Response::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .weizhu.system.ConfigV2 config = 2;
    if (has_config()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->config());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetConfigV2Response::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GetConfigV2Response*>(&from));
}

void GetConfigV2Response::MergeFrom(const GetConfigV2Response& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_config()) {
      mutable_config()->::weizhu::system::ConfigV2::MergeFrom(from.config());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void GetConfigV2Response::CopyFrom(const GetConfigV2Response& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetConfigV2Response::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_config()) {
    if (!this->config().IsInitialized()) return false;
  }
  return true;
}

void GetConfigV2Response::Swap(GetConfigV2Response* other) {
  if (other != this) {
    std::swap(config_, other->config_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string GetConfigV2Response::GetTypeName() const {
  return "weizhu.system.GetConfigV2Response";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace system
}  // namespace weizhu

// @@protoc_insertion_point(global_scope)
