// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: official.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "official.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)

namespace weizhu {
namespace official {

void protobuf_ShutdownFile_official_2eproto() {
  delete Official::default_instance_;
  delete OfficialMessage::default_instance_;
  delete OfficialMessage_Text::default_instance_;
  delete OfficialMessage_Voice::default_instance_;
  delete OfficialMessage_Image::default_instance_;
  delete OfficialMessage_User::default_instance_;
  delete OfficialMessage_Video::default_instance_;
  delete OfficialMessage_File::default_instance_;
  delete OfficialMessage_DiscoverItem::default_instance_;
  delete OfficialMessage_CommunityPost::default_instance_;
  delete OfficialMessagePush::default_instance_;
  delete GetOfficialByIdRequest::default_instance_;
  delete GetOfficialByIdResponse::default_instance_;
  delete GetOfficialListRequest::default_instance_;
  delete GetOfficialListResponse::default_instance_;
  delete GetOfficialMessageRequest::default_instance_;
  delete GetOfficialMessageResponse::default_instance_;
  delete SendOfficialMessageRequest::default_instance_;
  delete SendOfficialMessageResponse::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_official_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_official_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  ::weizhu::protobuf_AddDesc_weizhu_2eproto();
  Official::default_instance_ = new Official();
  OfficialMessage::default_instance_ = new OfficialMessage();
  OfficialMessage_Text::default_instance_ = new OfficialMessage_Text();
  OfficialMessage_Voice::default_instance_ = new OfficialMessage_Voice();
  OfficialMessage_Image::default_instance_ = new OfficialMessage_Image();
  OfficialMessage_User::default_instance_ = new OfficialMessage_User();
  OfficialMessage_Video::default_instance_ = new OfficialMessage_Video();
  OfficialMessage_File::default_instance_ = new OfficialMessage_File();
  OfficialMessage_DiscoverItem::default_instance_ = new OfficialMessage_DiscoverItem();
  OfficialMessage_CommunityPost::default_instance_ = new OfficialMessage_CommunityPost();
  OfficialMessagePush::default_instance_ = new OfficialMessagePush();
  GetOfficialByIdRequest::default_instance_ = new GetOfficialByIdRequest();
  GetOfficialByIdResponse::default_instance_ = new GetOfficialByIdResponse();
  GetOfficialListRequest::default_instance_ = new GetOfficialListRequest();
  GetOfficialListResponse::default_instance_ = new GetOfficialListResponse();
  GetOfficialMessageRequest::default_instance_ = new GetOfficialMessageRequest();
  GetOfficialMessageResponse::default_instance_ = new GetOfficialMessageResponse();
  SendOfficialMessageRequest::default_instance_ = new SendOfficialMessageRequest();
  SendOfficialMessageResponse::default_instance_ = new SendOfficialMessageResponse();
  Official::default_instance_->InitAsDefaultInstance();
  OfficialMessage::default_instance_->InitAsDefaultInstance();
  OfficialMessage_Text::default_instance_->InitAsDefaultInstance();
  OfficialMessage_Voice::default_instance_->InitAsDefaultInstance();
  OfficialMessage_Image::default_instance_->InitAsDefaultInstance();
  OfficialMessage_User::default_instance_->InitAsDefaultInstance();
  OfficialMessage_Video::default_instance_->InitAsDefaultInstance();
  OfficialMessage_File::default_instance_->InitAsDefaultInstance();
  OfficialMessage_DiscoverItem::default_instance_->InitAsDefaultInstance();
  OfficialMessage_CommunityPost::default_instance_->InitAsDefaultInstance();
  OfficialMessagePush::default_instance_->InitAsDefaultInstance();
  GetOfficialByIdRequest::default_instance_->InitAsDefaultInstance();
  GetOfficialByIdResponse::default_instance_->InitAsDefaultInstance();
  GetOfficialListRequest::default_instance_->InitAsDefaultInstance();
  GetOfficialListResponse::default_instance_->InitAsDefaultInstance();
  GetOfficialMessageRequest::default_instance_->InitAsDefaultInstance();
  GetOfficialMessageResponse::default_instance_->InitAsDefaultInstance();
  SendOfficialMessageRequest::default_instance_->InitAsDefaultInstance();
  SendOfficialMessageResponse::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_official_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_official_2eproto_once_);
void protobuf_AddDesc_official_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_official_2eproto_once_,
                 &protobuf_AddDesc_official_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_official_2eproto {
  StaticDescriptorInitializer_official_2eproto() {
    protobuf_AddDesc_official_2eproto();
  }
} static_descriptor_initializer_official_2eproto_;
#endif
bool State_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int Official::kOfficialIdFieldNumber;
const int Official::kOfficialNameFieldNumber;
const int Official::kAvatarFieldNumber;
const int Official::kOfficialDescFieldNumber;
const int Official::kFunctionDescFieldNumber;
const int Official::kAllowModelIdFieldNumber;
const int Official::kStateFieldNumber;
const int Official::kCreateAdminIdFieldNumber;
const int Official::kCreateTimeFieldNumber;
const int Official::kUpdateAdminIdFieldNumber;
const int Official::kUpdateTimeFieldNumber;
#endif  // !_MSC_VER

Official::Official()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:weizhu.official.Official)
}

void Official::InitAsDefaultInstance() {
}

Official::Official(const Official& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:weizhu.official.Official)
}

void Official::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  official_id_ = GOOGLE_LONGLONG(0);
  official_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  avatar_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  official_desc_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  function_desc_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  allow_model_id_ = 0;
  state_ = 0;
  create_admin_id_ = GOOGLE_LONGLONG(0);
  create_time_ = 0;
  update_admin_id_ = GOOGLE_LONGLONG(0);
  update_time_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Official::~Official() {
  // @@protoc_insertion_point(destructor:weizhu.official.Official)
  SharedDtor();
}

void Official::SharedDtor() {
  if (official_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete official_name_;
  }
  if (avatar_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete avatar_;
  }
  if (official_desc_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete official_desc_;
  }
  if (function_desc_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete function_desc_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void Official::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Official& Official::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_official_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_official_2eproto();
#endif
  return *default_instance_;
}

Official* Official::default_instance_ = NULL;

Official* Official::New() const {
  return new Official;
}

void Official::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Official*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(allow_model_id_, create_admin_id_);
    official_id_ = GOOGLE_LONGLONG(0);
    if (has_official_name()) {
      if (official_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        official_name_->clear();
      }
    }
    if (has_avatar()) {
      if (avatar_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        avatar_->clear();
      }
    }
    if (has_official_desc()) {
      if (official_desc_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        official_desc_->clear();
      }
    }
    if (has_function_desc()) {
      if (function_desc_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        function_desc_->clear();
      }
    }
  }
  ZR_(update_admin_id_, update_time_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool Official::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:weizhu.official.Official)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 official_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &official_id_)));
          set_has_official_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_official_name;
        break;
      }

      // required string official_name = 2;
      case 2: {
        if (tag == 18) {
         parse_official_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_official_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_avatar;
        break;
      }

      // required string avatar = 3;
      case 3: {
        if (tag == 26) {
         parse_avatar:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_avatar()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_official_desc;
        break;
      }

      // optional string official_desc = 4;
      case 4: {
        if (tag == 34) {
         parse_official_desc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_official_desc()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_function_desc;
        break;
      }

      // optional string function_desc = 5;
      case 5: {
        if (tag == 42) {
         parse_function_desc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_function_desc()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_allow_model_id;
        break;
      }

      // optional int32 allow_model_id = 6;
      case 6: {
        if (tag == 48) {
         parse_allow_model_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &allow_model_id_)));
          set_has_allow_model_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(760)) goto parse_state;
        break;
      }

      // optional .weizhu.official.State state = 95 [default = NORMAL];
      case 95: {
        if (tag == 760) {
         parse_state:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::weizhu::official::State_IsValid(value)) {
            set_state(static_cast< ::weizhu::official::State >(value));
          } else {
            unknown_fields_stream.WriteVarint32(tag);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(768)) goto parse_create_admin_id;
        break;
      }

      // optional int64 create_admin_id = 96;
      case 96: {
        if (tag == 768) {
         parse_create_admin_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &create_admin_id_)));
          set_has_create_admin_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(776)) goto parse_create_time;
        break;
      }

      // optional int32 create_time = 97;
      case 97: {
        if (tag == 776) {
         parse_create_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &create_time_)));
          set_has_create_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(784)) goto parse_update_admin_id;
        break;
      }

      // optional int64 update_admin_id = 98;
      case 98: {
        if (tag == 784) {
         parse_update_admin_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &update_admin_id_)));
          set_has_update_admin_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(792)) goto parse_update_time;
        break;
      }

      // optional int32 update_time = 99;
      case 99: {
        if (tag == 792) {
         parse_update_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &update_time_)));
          set_has_update_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:weizhu.official.Official)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:weizhu.official.Official)
  return false;
#undef DO_
}

void Official::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:weizhu.official.Official)
  // required int64 official_id = 1;
  if (has_official_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->official_id(), output);
  }

  // required string official_name = 2;
  if (has_official_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->official_name(), output);
  }

  // required string avatar = 3;
  if (has_avatar()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->avatar(), output);
  }

  // optional string official_desc = 4;
  if (has_official_desc()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->official_desc(), output);
  }

  // optional string function_desc = 5;
  if (has_function_desc()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->function_desc(), output);
  }

  // optional int32 allow_model_id = 6;
  if (has_allow_model_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->allow_model_id(), output);
  }

  // optional .weizhu.official.State state = 95 [default = NORMAL];
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      95, this->state(), output);
  }

  // optional int64 create_admin_id = 96;
  if (has_create_admin_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(96, this->create_admin_id(), output);
  }

  // optional int32 create_time = 97;
  if (has_create_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(97, this->create_time(), output);
  }

  // optional int64 update_admin_id = 98;
  if (has_update_admin_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(98, this->update_admin_id(), output);
  }

  // optional int32 update_time = 99;
  if (has_update_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(99, this->update_time(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:weizhu.official.Official)
}

int Official::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 official_id = 1;
    if (has_official_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->official_id());
    }

    // required string official_name = 2;
    if (has_official_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->official_name());
    }

    // required string avatar = 3;
    if (has_avatar()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->avatar());
    }

    // optional string official_desc = 4;
    if (has_official_desc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->official_desc());
    }

    // optional string function_desc = 5;
    if (has_function_desc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->function_desc());
    }

    // optional int32 allow_model_id = 6;
    if (has_allow_model_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->allow_model_id());
    }

    // optional .weizhu.official.State state = 95 [default = NORMAL];
    if (has_state()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->state());
    }

    // optional int64 create_admin_id = 96;
    if (has_create_admin_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->create_admin_id());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 create_time = 97;
    if (has_create_time()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->create_time());
    }

    // optional int64 update_admin_id = 98;
    if (has_update_admin_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->update_admin_id());
    }

    // optional int32 update_time = 99;
    if (has_update_time()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->update_time());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Official::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Official*>(&from));
}

void Official::MergeFrom(const Official& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_official_id()) {
      set_official_id(from.official_id());
    }
    if (from.has_official_name()) {
      set_official_name(from.official_name());
    }
    if (from.has_avatar()) {
      set_avatar(from.avatar());
    }
    if (from.has_official_desc()) {
      set_official_desc(from.official_desc());
    }
    if (from.has_function_desc()) {
      set_function_desc(from.function_desc());
    }
    if (from.has_allow_model_id()) {
      set_allow_model_id(from.allow_model_id());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_create_admin_id()) {
      set_create_admin_id(from.create_admin_id());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_create_time()) {
      set_create_time(from.create_time());
    }
    if (from.has_update_admin_id()) {
      set_update_admin_id(from.update_admin_id());
    }
    if (from.has_update_time()) {
      set_update_time(from.update_time());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void Official::CopyFrom(const Official& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Official::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void Official::Swap(Official* other) {
  if (other != this) {
    std::swap(official_id_, other->official_id_);
    std::swap(official_name_, other->official_name_);
    std::swap(avatar_, other->avatar_);
    std::swap(official_desc_, other->official_desc_);
    std::swap(function_desc_, other->function_desc_);
    std::swap(allow_model_id_, other->allow_model_id_);
    std::swap(state_, other->state_);
    std::swap(create_admin_id_, other->create_admin_id_);
    std::swap(create_time_, other->create_time_);
    std::swap(update_admin_id_, other->update_admin_id_);
    std::swap(update_time_, other->update_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string Official::GetTypeName() const {
  return "weizhu.official.Official";
}


// ===================================================================

#ifndef _MSC_VER
const int OfficialMessage_Text::kContentFieldNumber;
#endif  // !_MSC_VER

OfficialMessage_Text::OfficialMessage_Text()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:weizhu.official.OfficialMessage.Text)
}

void OfficialMessage_Text::InitAsDefaultInstance() {
}

OfficialMessage_Text::OfficialMessage_Text(const OfficialMessage_Text& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:weizhu.official.OfficialMessage.Text)
}

void OfficialMessage_Text::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  content_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OfficialMessage_Text::~OfficialMessage_Text() {
  // @@protoc_insertion_point(destructor:weizhu.official.OfficialMessage.Text)
  SharedDtor();
}

void OfficialMessage_Text::SharedDtor() {
  if (content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete content_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void OfficialMessage_Text::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const OfficialMessage_Text& OfficialMessage_Text::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_official_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_official_2eproto();
#endif
  return *default_instance_;
}

OfficialMessage_Text* OfficialMessage_Text::default_instance_ = NULL;

OfficialMessage_Text* OfficialMessage_Text::New() const {
  return new OfficialMessage_Text;
}

void OfficialMessage_Text::Clear() {
  if (has_content()) {
    if (content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      content_->clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool OfficialMessage_Text::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:weizhu.official.OfficialMessage.Text)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string content = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_content()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:weizhu.official.OfficialMessage.Text)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:weizhu.official.OfficialMessage.Text)
  return false;
#undef DO_
}

void OfficialMessage_Text::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:weizhu.official.OfficialMessage.Text)
  // required string content = 1;
  if (has_content()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->content(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:weizhu.official.OfficialMessage.Text)
}

int OfficialMessage_Text::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string content = 1;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->content());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OfficialMessage_Text::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const OfficialMessage_Text*>(&from));
}

void OfficialMessage_Text::MergeFrom(const OfficialMessage_Text& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_content()) {
      set_content(from.content());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void OfficialMessage_Text::CopyFrom(const OfficialMessage_Text& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OfficialMessage_Text::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void OfficialMessage_Text::Swap(OfficialMessage_Text* other) {
  if (other != this) {
    std::swap(content_, other->content_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string OfficialMessage_Text::GetTypeName() const {
  return "weizhu.official.OfficialMessage.Text";
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int OfficialMessage_Voice::kDataFieldNumber;
const int OfficialMessage_Voice::kDurationFieldNumber;
#endif  // !_MSC_VER

OfficialMessage_Voice::OfficialMessage_Voice()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:weizhu.official.OfficialMessage.Voice)
}

void OfficialMessage_Voice::InitAsDefaultInstance() {
}

OfficialMessage_Voice::OfficialMessage_Voice(const OfficialMessage_Voice& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:weizhu.official.OfficialMessage.Voice)
}

void OfficialMessage_Voice::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  duration_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OfficialMessage_Voice::~OfficialMessage_Voice() {
  // @@protoc_insertion_point(destructor:weizhu.official.OfficialMessage.Voice)
  SharedDtor();
}

void OfficialMessage_Voice::SharedDtor() {
  if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete data_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void OfficialMessage_Voice::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const OfficialMessage_Voice& OfficialMessage_Voice::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_official_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_official_2eproto();
#endif
  return *default_instance_;
}

OfficialMessage_Voice* OfficialMessage_Voice::default_instance_ = NULL;

OfficialMessage_Voice* OfficialMessage_Voice::New() const {
  return new OfficialMessage_Voice;
}

void OfficialMessage_Voice::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_data()) {
      if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        data_->clear();
      }
    }
    duration_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool OfficialMessage_Voice::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:weizhu.official.OfficialMessage.Voice)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes data = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_duration;
        break;
      }

      // optional int32 duration = 2;
      case 2: {
        if (tag == 16) {
         parse_duration:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &duration_)));
          set_has_duration();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:weizhu.official.OfficialMessage.Voice)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:weizhu.official.OfficialMessage.Voice)
  return false;
#undef DO_
}

void OfficialMessage_Voice::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:weizhu.official.OfficialMessage.Voice)
  // required bytes data = 1;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->data(), output);
  }

  // optional int32 duration = 2;
  if (has_duration()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->duration(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:weizhu.official.OfficialMessage.Voice)
}

int OfficialMessage_Voice::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes data = 1;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }

    // optional int32 duration = 2;
    if (has_duration()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->duration());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OfficialMessage_Voice::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const OfficialMessage_Voice*>(&from));
}

void OfficialMessage_Voice::MergeFrom(const OfficialMessage_Voice& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_data()) {
      set_data(from.data());
    }
    if (from.has_duration()) {
      set_duration(from.duration());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void OfficialMessage_Voice::CopyFrom(const OfficialMessage_Voice& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OfficialMessage_Voice::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void OfficialMessage_Voice::Swap(OfficialMessage_Voice* other) {
  if (other != this) {
    std::swap(data_, other->data_);
    std::swap(duration_, other->duration_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string OfficialMessage_Voice::GetTypeName() const {
  return "weizhu.official.OfficialMessage.Voice";
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int OfficialMessage_Image::kNameFieldNumber;
#endif  // !_MSC_VER

OfficialMessage_Image::OfficialMessage_Image()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:weizhu.official.OfficialMessage.Image)
}

void OfficialMessage_Image::InitAsDefaultInstance() {
}

OfficialMessage_Image::OfficialMessage_Image(const OfficialMessage_Image& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:weizhu.official.OfficialMessage.Image)
}

void OfficialMessage_Image::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OfficialMessage_Image::~OfficialMessage_Image() {
  // @@protoc_insertion_point(destructor:weizhu.official.OfficialMessage.Image)
  SharedDtor();
}

void OfficialMessage_Image::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void OfficialMessage_Image::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const OfficialMessage_Image& OfficialMessage_Image::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_official_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_official_2eproto();
#endif
  return *default_instance_;
}

OfficialMessage_Image* OfficialMessage_Image::default_instance_ = NULL;

OfficialMessage_Image* OfficialMessage_Image::New() const {
  return new OfficialMessage_Image;
}

void OfficialMessage_Image::Clear() {
  if (has_name()) {
    if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      name_->clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool OfficialMessage_Image::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:weizhu.official.OfficialMessage.Image)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:weizhu.official.OfficialMessage.Image)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:weizhu.official.OfficialMessage.Image)
  return false;
#undef DO_
}

void OfficialMessage_Image::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:weizhu.official.OfficialMessage.Image)
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:weizhu.official.OfficialMessage.Image)
}

int OfficialMessage_Image::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OfficialMessage_Image::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const OfficialMessage_Image*>(&from));
}

void OfficialMessage_Image::MergeFrom(const OfficialMessage_Image& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void OfficialMessage_Image::CopyFrom(const OfficialMessage_Image& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OfficialMessage_Image::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void OfficialMessage_Image::Swap(OfficialMessage_Image* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string OfficialMessage_Image::GetTypeName() const {
  return "weizhu.official.OfficialMessage.Image";
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int OfficialMessage_User::kUserIdFieldNumber;
#endif  // !_MSC_VER

OfficialMessage_User::OfficialMessage_User()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:weizhu.official.OfficialMessage.User)
}

void OfficialMessage_User::InitAsDefaultInstance() {
}

OfficialMessage_User::OfficialMessage_User(const OfficialMessage_User& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:weizhu.official.OfficialMessage.User)
}

void OfficialMessage_User::SharedCtor() {
  _cached_size_ = 0;
  user_id_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OfficialMessage_User::~OfficialMessage_User() {
  // @@protoc_insertion_point(destructor:weizhu.official.OfficialMessage.User)
  SharedDtor();
}

void OfficialMessage_User::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void OfficialMessage_User::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const OfficialMessage_User& OfficialMessage_User::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_official_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_official_2eproto();
#endif
  return *default_instance_;
}

OfficialMessage_User* OfficialMessage_User::default_instance_ = NULL;

OfficialMessage_User* OfficialMessage_User::New() const {
  return new OfficialMessage_User;
}

void OfficialMessage_User::Clear() {
  user_id_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool OfficialMessage_User::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:weizhu.official.OfficialMessage.User)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 user_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:weizhu.official.OfficialMessage.User)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:weizhu.official.OfficialMessage.User)
  return false;
#undef DO_
}

void OfficialMessage_User::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:weizhu.official.OfficialMessage.User)
  // required int64 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->user_id(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:weizhu.official.OfficialMessage.User)
}

int OfficialMessage_User::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->user_id());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OfficialMessage_User::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const OfficialMessage_User*>(&from));
}

void OfficialMessage_User::MergeFrom(const OfficialMessage_User& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void OfficialMessage_User::CopyFrom(const OfficialMessage_User& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OfficialMessage_User::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void OfficialMessage_User::Swap(OfficialMessage_User* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string OfficialMessage_User::GetTypeName() const {
  return "weizhu.official.OfficialMessage.User";
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int OfficialMessage_Video::kNameFieldNumber;
const int OfficialMessage_Video::kTypeFieldNumber;
const int OfficialMessage_Video::kSizeFieldNumber;
const int OfficialMessage_Video::kTimeFieldNumber;
const int OfficialMessage_Video::kImageNameFieldNumber;
#endif  // !_MSC_VER

OfficialMessage_Video::OfficialMessage_Video()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:weizhu.official.OfficialMessage.Video)
}

void OfficialMessage_Video::InitAsDefaultInstance() {
}

OfficialMessage_Video::OfficialMessage_Video(const OfficialMessage_Video& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:weizhu.official.OfficialMessage.Video)
}

void OfficialMessage_Video::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  size_ = 0;
  time_ = 0;
  image_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OfficialMessage_Video::~OfficialMessage_Video() {
  // @@protoc_insertion_point(destructor:weizhu.official.OfficialMessage.Video)
  SharedDtor();
}

void OfficialMessage_Video::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete type_;
  }
  if (image_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete image_name_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void OfficialMessage_Video::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const OfficialMessage_Video& OfficialMessage_Video::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_official_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_official_2eproto();
#endif
  return *default_instance_;
}

OfficialMessage_Video* OfficialMessage_Video::default_instance_ = NULL;

OfficialMessage_Video* OfficialMessage_Video::New() const {
  return new OfficialMessage_Video;
}

void OfficialMessage_Video::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<OfficialMessage_Video*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(size_, time_);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    if (has_type()) {
      if (type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        type_->clear();
      }
    }
    if (has_image_name()) {
      if (image_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        image_name_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool OfficialMessage_Video::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:weizhu.official.OfficialMessage.Video)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_type;
        break;
      }

      // required string type = 2;
      case 2: {
        if (tag == 18) {
         parse_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_size;
        break;
      }

      // required int32 size = 3;
      case 3: {
        if (tag == 24) {
         parse_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &size_)));
          set_has_size();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_time;
        break;
      }

      // required int32 time = 4;
      case 4: {
        if (tag == 32) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_image_name;
        break;
      }

      // required string image_name = 5;
      case 5: {
        if (tag == 42) {
         parse_image_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_image_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:weizhu.official.OfficialMessage.Video)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:weizhu.official.OfficialMessage.Video)
  return false;
#undef DO_
}

void OfficialMessage_Video::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:weizhu.official.OfficialMessage.Video)
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // required string type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->type(), output);
  }

  // required int32 size = 3;
  if (has_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->size(), output);
  }

  // required int32 time = 4;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->time(), output);
  }

  // required string image_name = 5;
  if (has_image_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->image_name(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:weizhu.official.OfficialMessage.Video)
}

int OfficialMessage_Video::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required string type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->type());
    }

    // required int32 size = 3;
    if (has_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->size());
    }

    // required int32 time = 4;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->time());
    }

    // required string image_name = 5;
    if (has_image_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->image_name());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OfficialMessage_Video::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const OfficialMessage_Video*>(&from));
}

void OfficialMessage_Video::MergeFrom(const OfficialMessage_Video& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_size()) {
      set_size(from.size());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_image_name()) {
      set_image_name(from.image_name());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void OfficialMessage_Video::CopyFrom(const OfficialMessage_Video& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OfficialMessage_Video::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void OfficialMessage_Video::Swap(OfficialMessage_Video* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(type_, other->type_);
    std::swap(size_, other->size_);
    std::swap(time_, other->time_);
    std::swap(image_name_, other->image_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string OfficialMessage_Video::GetTypeName() const {
  return "weizhu.official.OfficialMessage.Video";
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int OfficialMessage_File::kNameFieldNumber;
const int OfficialMessage_File::kOrginalNameFieldNumber;
#endif  // !_MSC_VER

OfficialMessage_File::OfficialMessage_File()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:weizhu.official.OfficialMessage.File)
}

void OfficialMessage_File::InitAsDefaultInstance() {
}

OfficialMessage_File::OfficialMessage_File(const OfficialMessage_File& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:weizhu.official.OfficialMessage.File)
}

void OfficialMessage_File::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  orginal_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OfficialMessage_File::~OfficialMessage_File() {
  // @@protoc_insertion_point(destructor:weizhu.official.OfficialMessage.File)
  SharedDtor();
}

void OfficialMessage_File::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (orginal_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete orginal_name_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void OfficialMessage_File::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const OfficialMessage_File& OfficialMessage_File::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_official_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_official_2eproto();
#endif
  return *default_instance_;
}

OfficialMessage_File* OfficialMessage_File::default_instance_ = NULL;

OfficialMessage_File* OfficialMessage_File::New() const {
  return new OfficialMessage_File;
}

void OfficialMessage_File::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    if (has_orginal_name()) {
      if (orginal_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        orginal_name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool OfficialMessage_File::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:weizhu.official.OfficialMessage.File)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_orginal_name;
        break;
      }

      // required string orginal_name = 2;
      case 2: {
        if (tag == 18) {
         parse_orginal_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_orginal_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:weizhu.official.OfficialMessage.File)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:weizhu.official.OfficialMessage.File)
  return false;
#undef DO_
}

void OfficialMessage_File::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:weizhu.official.OfficialMessage.File)
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // required string orginal_name = 2;
  if (has_orginal_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->orginal_name(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:weizhu.official.OfficialMessage.File)
}

int OfficialMessage_File::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required string orginal_name = 2;
    if (has_orginal_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->orginal_name());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OfficialMessage_File::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const OfficialMessage_File*>(&from));
}

void OfficialMessage_File::MergeFrom(const OfficialMessage_File& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_orginal_name()) {
      set_orginal_name(from.orginal_name());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void OfficialMessage_File::CopyFrom(const OfficialMessage_File& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OfficialMessage_File::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void OfficialMessage_File::Swap(OfficialMessage_File* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(orginal_name_, other->orginal_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string OfficialMessage_File::GetTypeName() const {
  return "weizhu.official.OfficialMessage.File";
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int OfficialMessage_DiscoverItem::kItemIdFieldNumber;
#endif  // !_MSC_VER

OfficialMessage_DiscoverItem::OfficialMessage_DiscoverItem()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:weizhu.official.OfficialMessage.DiscoverItem)
}

void OfficialMessage_DiscoverItem::InitAsDefaultInstance() {
}

OfficialMessage_DiscoverItem::OfficialMessage_DiscoverItem(const OfficialMessage_DiscoverItem& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:weizhu.official.OfficialMessage.DiscoverItem)
}

void OfficialMessage_DiscoverItem::SharedCtor() {
  _cached_size_ = 0;
  item_id_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OfficialMessage_DiscoverItem::~OfficialMessage_DiscoverItem() {
  // @@protoc_insertion_point(destructor:weizhu.official.OfficialMessage.DiscoverItem)
  SharedDtor();
}

void OfficialMessage_DiscoverItem::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void OfficialMessage_DiscoverItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const OfficialMessage_DiscoverItem& OfficialMessage_DiscoverItem::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_official_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_official_2eproto();
#endif
  return *default_instance_;
}

OfficialMessage_DiscoverItem* OfficialMessage_DiscoverItem::default_instance_ = NULL;

OfficialMessage_DiscoverItem* OfficialMessage_DiscoverItem::New() const {
  return new OfficialMessage_DiscoverItem;
}

void OfficialMessage_DiscoverItem::Clear() {
  item_id_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool OfficialMessage_DiscoverItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:weizhu.official.OfficialMessage.DiscoverItem)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 item_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &item_id_)));
          set_has_item_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:weizhu.official.OfficialMessage.DiscoverItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:weizhu.official.OfficialMessage.DiscoverItem)
  return false;
#undef DO_
}

void OfficialMessage_DiscoverItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:weizhu.official.OfficialMessage.DiscoverItem)
  // required int64 item_id = 1;
  if (has_item_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->item_id(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:weizhu.official.OfficialMessage.DiscoverItem)
}

int OfficialMessage_DiscoverItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 item_id = 1;
    if (has_item_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->item_id());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OfficialMessage_DiscoverItem::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const OfficialMessage_DiscoverItem*>(&from));
}

void OfficialMessage_DiscoverItem::MergeFrom(const OfficialMessage_DiscoverItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_item_id()) {
      set_item_id(from.item_id());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void OfficialMessage_DiscoverItem::CopyFrom(const OfficialMessage_DiscoverItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OfficialMessage_DiscoverItem::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void OfficialMessage_DiscoverItem::Swap(OfficialMessage_DiscoverItem* other) {
  if (other != this) {
    std::swap(item_id_, other->item_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string OfficialMessage_DiscoverItem::GetTypeName() const {
  return "weizhu.official.OfficialMessage.DiscoverItem";
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int OfficialMessage_CommunityPost::kPostIdFieldNumber;
const int OfficialMessage_CommunityPost::kTextFieldNumber;
#endif  // !_MSC_VER

OfficialMessage_CommunityPost::OfficialMessage_CommunityPost()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:weizhu.official.OfficialMessage.CommunityPost)
}

void OfficialMessage_CommunityPost::InitAsDefaultInstance() {
}

OfficialMessage_CommunityPost::OfficialMessage_CommunityPost(const OfficialMessage_CommunityPost& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:weizhu.official.OfficialMessage.CommunityPost)
}

void OfficialMessage_CommunityPost::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  post_id_ = 0;
  text_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OfficialMessage_CommunityPost::~OfficialMessage_CommunityPost() {
  // @@protoc_insertion_point(destructor:weizhu.official.OfficialMessage.CommunityPost)
  SharedDtor();
}

void OfficialMessage_CommunityPost::SharedDtor() {
  if (text_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete text_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void OfficialMessage_CommunityPost::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const OfficialMessage_CommunityPost& OfficialMessage_CommunityPost::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_official_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_official_2eproto();
#endif
  return *default_instance_;
}

OfficialMessage_CommunityPost* OfficialMessage_CommunityPost::default_instance_ = NULL;

OfficialMessage_CommunityPost* OfficialMessage_CommunityPost::New() const {
  return new OfficialMessage_CommunityPost;
}

void OfficialMessage_CommunityPost::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    post_id_ = 0;
    if (has_text()) {
      if (text_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        text_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool OfficialMessage_CommunityPost::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:weizhu.official.OfficialMessage.CommunityPost)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 post_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &post_id_)));
          set_has_post_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_text;
        break;
      }

      // optional string text = 2;
      case 2: {
        if (tag == 18) {
         parse_text:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_text()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:weizhu.official.OfficialMessage.CommunityPost)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:weizhu.official.OfficialMessage.CommunityPost)
  return false;
#undef DO_
}

void OfficialMessage_CommunityPost::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:weizhu.official.OfficialMessage.CommunityPost)
  // required int32 post_id = 1;
  if (has_post_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->post_id(), output);
  }

  // optional string text = 2;
  if (has_text()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->text(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:weizhu.official.OfficialMessage.CommunityPost)
}

int OfficialMessage_CommunityPost::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 post_id = 1;
    if (has_post_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->post_id());
    }

    // optional string text = 2;
    if (has_text()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->text());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OfficialMessage_CommunityPost::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const OfficialMessage_CommunityPost*>(&from));
}

void OfficialMessage_CommunityPost::MergeFrom(const OfficialMessage_CommunityPost& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_post_id()) {
      set_post_id(from.post_id());
    }
    if (from.has_text()) {
      set_text(from.text());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void OfficialMessage_CommunityPost::CopyFrom(const OfficialMessage_CommunityPost& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OfficialMessage_CommunityPost::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void OfficialMessage_CommunityPost::Swap(OfficialMessage_CommunityPost* other) {
  if (other != this) {
    std::swap(post_id_, other->post_id_);
    std::swap(text_, other->text_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string OfficialMessage_CommunityPost::GetTypeName() const {
  return "weizhu.official.OfficialMessage.CommunityPost";
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int OfficialMessage::kMsgSeqFieldNumber;
const int OfficialMessage::kMsgTimeFieldNumber;
const int OfficialMessage::kIsFromUserFieldNumber;
const int OfficialMessage::kTextFieldNumber;
const int OfficialMessage::kVoiceFieldNumber;
const int OfficialMessage::kImageFieldNumber;
const int OfficialMessage::kUserFieldNumber;
const int OfficialMessage::kVideoFieldNumber;
const int OfficialMessage::kFileFieldNumber;
const int OfficialMessage::kDiscoverItemFieldNumber;
const int OfficialMessage::kCommunityPostFieldNumber;
#endif  // !_MSC_VER

OfficialMessage::OfficialMessage()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:weizhu.official.OfficialMessage)
}

void OfficialMessage::InitAsDefaultInstance() {
}

OfficialMessage::OfficialMessage(const OfficialMessage& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:weizhu.official.OfficialMessage)
}

void OfficialMessage::SharedCtor() {
  _cached_size_ = 0;
  msg_seq_ = GOOGLE_LONGLONG(0);
  msg_time_ = 0;
  is_from_user_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  clear_has_msg_type();
}

OfficialMessage::~OfficialMessage() {
  // @@protoc_insertion_point(destructor:weizhu.official.OfficialMessage)
  SharedDtor();
}

void OfficialMessage::SharedDtor() {
  if (has_msg_type()) {
    clear_msg_type();
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void OfficialMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const OfficialMessage& OfficialMessage::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_official_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_official_2eproto();
#endif
  return *default_instance_;
}

OfficialMessage* OfficialMessage::default_instance_ = NULL;

OfficialMessage* OfficialMessage::New() const {
  return new OfficialMessage;
}

void OfficialMessage::clear_msg_type() {
  switch(msg_type_case()) {
    case kText: {
      delete msg_type_.text_;
      break;
    }
    case kVoice: {
      delete msg_type_.voice_;
      break;
    }
    case kImage: {
      delete msg_type_.image_;
      break;
    }
    case kUser: {
      delete msg_type_.user_;
      break;
    }
    case kVideo: {
      delete msg_type_.video_;
      break;
    }
    case kFile: {
      delete msg_type_.file_;
      break;
    }
    case kDiscoverItem: {
      delete msg_type_.discover_item_;
      break;
    }
    case kCommunityPost: {
      delete msg_type_.community_post_;
      break;
    }
    case MSG_TYPE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = MSG_TYPE_NOT_SET;
}


void OfficialMessage::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<OfficialMessage*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(msg_seq_, is_from_user_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  clear_msg_type();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool OfficialMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:weizhu.official.OfficialMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 msg_seq = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &msg_seq_)));
          set_has_msg_seq();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_msg_time;
        break;
      }

      // required int32 msg_time = 2;
      case 2: {
        if (tag == 16) {
         parse_msg_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &msg_time_)));
          set_has_msg_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_is_from_user;
        break;
      }

      // required bool is_from_user = 3;
      case 3: {
        if (tag == 24) {
         parse_is_from_user:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_from_user_)));
          set_has_is_from_user();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_text;
        break;
      }

      // optional .weizhu.official.OfficialMessage.Text text = 5;
      case 5: {
        if (tag == 42) {
         parse_text:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_text()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_voice;
        break;
      }

      // optional .weizhu.official.OfficialMessage.Voice voice = 6;
      case 6: {
        if (tag == 50) {
         parse_voice:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_voice()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_image;
        break;
      }

      // optional .weizhu.official.OfficialMessage.Image image = 7;
      case 7: {
        if (tag == 58) {
         parse_image:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_image()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_user;
        break;
      }

      // optional .weizhu.official.OfficialMessage.User user = 8;
      case 8: {
        if (tag == 66) {
         parse_user:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_user()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_video;
        break;
      }

      // optional .weizhu.official.OfficialMessage.Video video = 9;
      case 9: {
        if (tag == 74) {
         parse_video:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_video()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_file;
        break;
      }

      // optional .weizhu.official.OfficialMessage.File file = 10;
      case 10: {
        if (tag == 82) {
         parse_file:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_file()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_discover_item;
        break;
      }

      // optional .weizhu.official.OfficialMessage.DiscoverItem discover_item = 12;
      case 12: {
        if (tag == 98) {
         parse_discover_item:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_discover_item()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_community_post;
        break;
      }

      // optional .weizhu.official.OfficialMessage.CommunityPost community_post = 13;
      case 13: {
        if (tag == 106) {
         parse_community_post:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_community_post()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:weizhu.official.OfficialMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:weizhu.official.OfficialMessage)
  return false;
#undef DO_
}

void OfficialMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:weizhu.official.OfficialMessage)
  // required int64 msg_seq = 1;
  if (has_msg_seq()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->msg_seq(), output);
  }

  // required int32 msg_time = 2;
  if (has_msg_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->msg_time(), output);
  }

  // required bool is_from_user = 3;
  if (has_is_from_user()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->is_from_user(), output);
  }

  // optional .weizhu.official.OfficialMessage.Text text = 5;
  if (has_text()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      5, this->text(), output);
  }

  // optional .weizhu.official.OfficialMessage.Voice voice = 6;
  if (has_voice()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      6, this->voice(), output);
  }

  // optional .weizhu.official.OfficialMessage.Image image = 7;
  if (has_image()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      7, this->image(), output);
  }

  // optional .weizhu.official.OfficialMessage.User user = 8;
  if (has_user()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      8, this->user(), output);
  }

  // optional .weizhu.official.OfficialMessage.Video video = 9;
  if (has_video()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      9, this->video(), output);
  }

  // optional .weizhu.official.OfficialMessage.File file = 10;
  if (has_file()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      10, this->file(), output);
  }

  // optional .weizhu.official.OfficialMessage.DiscoverItem discover_item = 12;
  if (has_discover_item()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      12, this->discover_item(), output);
  }

  // optional .weizhu.official.OfficialMessage.CommunityPost community_post = 13;
  if (has_community_post()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      13, this->community_post(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:weizhu.official.OfficialMessage)
}

int OfficialMessage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 msg_seq = 1;
    if (has_msg_seq()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->msg_seq());
    }

    // required int32 msg_time = 2;
    if (has_msg_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->msg_time());
    }

    // required bool is_from_user = 3;
    if (has_is_from_user()) {
      total_size += 1 + 1;
    }

  }
  switch (msg_type_case()) {
    // optional .weizhu.official.OfficialMessage.Text text = 5;
    case kText: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->text());
      break;
    }
    // optional .weizhu.official.OfficialMessage.Voice voice = 6;
    case kVoice: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->voice());
      break;
    }
    // optional .weizhu.official.OfficialMessage.Image image = 7;
    case kImage: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->image());
      break;
    }
    // optional .weizhu.official.OfficialMessage.User user = 8;
    case kUser: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->user());
      break;
    }
    // optional .weizhu.official.OfficialMessage.Video video = 9;
    case kVideo: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->video());
      break;
    }
    // optional .weizhu.official.OfficialMessage.File file = 10;
    case kFile: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->file());
      break;
    }
    // optional .weizhu.official.OfficialMessage.DiscoverItem discover_item = 12;
    case kDiscoverItem: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->discover_item());
      break;
    }
    // optional .weizhu.official.OfficialMessage.CommunityPost community_post = 13;
    case kCommunityPost: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->community_post());
      break;
    }
    case MSG_TYPE_NOT_SET: {
      break;
    }
  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OfficialMessage::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const OfficialMessage*>(&from));
}

void OfficialMessage::MergeFrom(const OfficialMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  switch (from.msg_type_case()) {
    case kText: {
      mutable_text()->::weizhu::official::OfficialMessage_Text::MergeFrom(from.text());
      break;
    }
    case kVoice: {
      mutable_voice()->::weizhu::official::OfficialMessage_Voice::MergeFrom(from.voice());
      break;
    }
    case kImage: {
      mutable_image()->::weizhu::official::OfficialMessage_Image::MergeFrom(from.image());
      break;
    }
    case kUser: {
      mutable_user()->::weizhu::official::OfficialMessage_User::MergeFrom(from.user());
      break;
    }
    case kVideo: {
      mutable_video()->::weizhu::official::OfficialMessage_Video::MergeFrom(from.video());
      break;
    }
    case kFile: {
      mutable_file()->::weizhu::official::OfficialMessage_File::MergeFrom(from.file());
      break;
    }
    case kDiscoverItem: {
      mutable_discover_item()->::weizhu::official::OfficialMessage_DiscoverItem::MergeFrom(from.discover_item());
      break;
    }
    case kCommunityPost: {
      mutable_community_post()->::weizhu::official::OfficialMessage_CommunityPost::MergeFrom(from.community_post());
      break;
    }
    case MSG_TYPE_NOT_SET: {
      break;
    }
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msg_seq()) {
      set_msg_seq(from.msg_seq());
    }
    if (from.has_msg_time()) {
      set_msg_time(from.msg_time());
    }
    if (from.has_is_from_user()) {
      set_is_from_user(from.is_from_user());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void OfficialMessage::CopyFrom(const OfficialMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OfficialMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_text()) {
    if (!this->text().IsInitialized()) return false;
  }
  if (has_voice()) {
    if (!this->voice().IsInitialized()) return false;
  }
  if (has_image()) {
    if (!this->image().IsInitialized()) return false;
  }
  if (has_user()) {
    if (!this->user().IsInitialized()) return false;
  }
  if (has_video()) {
    if (!this->video().IsInitialized()) return false;
  }
  if (has_file()) {
    if (!this->file().IsInitialized()) return false;
  }
  if (has_discover_item()) {
    if (!this->discover_item().IsInitialized()) return false;
  }
  if (has_community_post()) {
    if (!this->community_post().IsInitialized()) return false;
  }
  return true;
}

void OfficialMessage::Swap(OfficialMessage* other) {
  if (other != this) {
    std::swap(msg_seq_, other->msg_seq_);
    std::swap(msg_time_, other->msg_time_);
    std::swap(is_from_user_, other->is_from_user_);
    std::swap(msg_type_, other->msg_type_);
    std::swap(_oneof_case_[0], other->_oneof_case_[0]);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string OfficialMessage::GetTypeName() const {
  return "weizhu.official.OfficialMessage";
}


// ===================================================================

#ifndef _MSC_VER
const int OfficialMessagePush::kOfficialIdFieldNumber;
const int OfficialMessagePush::kMsgFieldNumber;
#endif  // !_MSC_VER

OfficialMessagePush::OfficialMessagePush()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:weizhu.official.OfficialMessagePush)
}

void OfficialMessagePush::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  msg_ = const_cast< ::weizhu::official::OfficialMessage*>(
      ::weizhu::official::OfficialMessage::internal_default_instance());
#else
  msg_ = const_cast< ::weizhu::official::OfficialMessage*>(&::weizhu::official::OfficialMessage::default_instance());
#endif
}

OfficialMessagePush::OfficialMessagePush(const OfficialMessagePush& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:weizhu.official.OfficialMessagePush)
}

void OfficialMessagePush::SharedCtor() {
  _cached_size_ = 0;
  official_id_ = GOOGLE_LONGLONG(0);
  msg_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OfficialMessagePush::~OfficialMessagePush() {
  // @@protoc_insertion_point(destructor:weizhu.official.OfficialMessagePush)
  SharedDtor();
}

void OfficialMessagePush::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete msg_;
  }
}

void OfficialMessagePush::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const OfficialMessagePush& OfficialMessagePush::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_official_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_official_2eproto();
#endif
  return *default_instance_;
}

OfficialMessagePush* OfficialMessagePush::default_instance_ = NULL;

OfficialMessagePush* OfficialMessagePush::New() const {
  return new OfficialMessagePush;
}

void OfficialMessagePush::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    official_id_ = GOOGLE_LONGLONG(0);
    if (has_msg()) {
      if (msg_ != NULL) msg_->::weizhu::official::OfficialMessage::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool OfficialMessagePush::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:weizhu.official.OfficialMessagePush)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 official_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &official_id_)));
          set_has_official_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_msg;
        break;
      }

      // required .weizhu.official.OfficialMessage msg = 2;
      case 2: {
        if (tag == 18) {
         parse_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_msg()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:weizhu.official.OfficialMessagePush)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:weizhu.official.OfficialMessagePush)
  return false;
#undef DO_
}

void OfficialMessagePush::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:weizhu.official.OfficialMessagePush)
  // required int64 official_id = 1;
  if (has_official_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->official_id(), output);
  }

  // required .weizhu.official.OfficialMessage msg = 2;
  if (has_msg()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->msg(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:weizhu.official.OfficialMessagePush)
}

int OfficialMessagePush::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 official_id = 1;
    if (has_official_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->official_id());
    }

    // required .weizhu.official.OfficialMessage msg = 2;
    if (has_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->msg());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OfficialMessagePush::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const OfficialMessagePush*>(&from));
}

void OfficialMessagePush::MergeFrom(const OfficialMessagePush& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_official_id()) {
      set_official_id(from.official_id());
    }
    if (from.has_msg()) {
      mutable_msg()->::weizhu::official::OfficialMessage::MergeFrom(from.msg());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void OfficialMessagePush::CopyFrom(const OfficialMessagePush& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OfficialMessagePush::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_msg()) {
    if (!this->msg().IsInitialized()) return false;
  }
  return true;
}

void OfficialMessagePush::Swap(OfficialMessagePush* other) {
  if (other != this) {
    std::swap(official_id_, other->official_id_);
    std::swap(msg_, other->msg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string OfficialMessagePush::GetTypeName() const {
  return "weizhu.official.OfficialMessagePush";
}


// ===================================================================

#ifndef _MSC_VER
const int GetOfficialByIdRequest::kOfficialIdFieldNumber;
#endif  // !_MSC_VER

GetOfficialByIdRequest::GetOfficialByIdRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:weizhu.official.GetOfficialByIdRequest)
}

void GetOfficialByIdRequest::InitAsDefaultInstance() {
}

GetOfficialByIdRequest::GetOfficialByIdRequest(const GetOfficialByIdRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:weizhu.official.GetOfficialByIdRequest)
}

void GetOfficialByIdRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetOfficialByIdRequest::~GetOfficialByIdRequest() {
  // @@protoc_insertion_point(destructor:weizhu.official.GetOfficialByIdRequest)
  SharedDtor();
}

void GetOfficialByIdRequest::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void GetOfficialByIdRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GetOfficialByIdRequest& GetOfficialByIdRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_official_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_official_2eproto();
#endif
  return *default_instance_;
}

GetOfficialByIdRequest* GetOfficialByIdRequest::default_instance_ = NULL;

GetOfficialByIdRequest* GetOfficialByIdRequest::New() const {
  return new GetOfficialByIdRequest;
}

void GetOfficialByIdRequest::Clear() {
  official_id_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool GetOfficialByIdRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:weizhu.official.GetOfficialByIdRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int64 official_id = 1;
      case 1: {
        if (tag == 8) {
         parse_official_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 8, input, this->mutable_official_id())));
        } else if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_official_id())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8)) goto parse_official_id;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:weizhu.official.GetOfficialByIdRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:weizhu.official.GetOfficialByIdRequest)
  return false;
#undef DO_
}

void GetOfficialByIdRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:weizhu.official.GetOfficialByIdRequest)
  // repeated int64 official_id = 1;
  for (int i = 0; i < this->official_id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      1, this->official_id(i), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:weizhu.official.GetOfficialByIdRequest)
}

int GetOfficialByIdRequest::ByteSize() const {
  int total_size = 0;

  // repeated int64 official_id = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->official_id_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->official_id(i));
    }
    total_size += 1 * this->official_id_size() + data_size;
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetOfficialByIdRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GetOfficialByIdRequest*>(&from));
}

void GetOfficialByIdRequest::MergeFrom(const GetOfficialByIdRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  official_id_.MergeFrom(from.official_id_);
  mutable_unknown_fields()->append(from.unknown_fields());
}

void GetOfficialByIdRequest::CopyFrom(const GetOfficialByIdRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetOfficialByIdRequest::IsInitialized() const {

  return true;
}

void GetOfficialByIdRequest::Swap(GetOfficialByIdRequest* other) {
  if (other != this) {
    official_id_.Swap(&other->official_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string GetOfficialByIdRequest::GetTypeName() const {
  return "weizhu.official.GetOfficialByIdRequest";
}


// ===================================================================

#ifndef _MSC_VER
const int GetOfficialByIdResponse::kOfficialFieldNumber;
#endif  // !_MSC_VER

GetOfficialByIdResponse::GetOfficialByIdResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:weizhu.official.GetOfficialByIdResponse)
}

void GetOfficialByIdResponse::InitAsDefaultInstance() {
}

GetOfficialByIdResponse::GetOfficialByIdResponse(const GetOfficialByIdResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:weizhu.official.GetOfficialByIdResponse)
}

void GetOfficialByIdResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetOfficialByIdResponse::~GetOfficialByIdResponse() {
  // @@protoc_insertion_point(destructor:weizhu.official.GetOfficialByIdResponse)
  SharedDtor();
}

void GetOfficialByIdResponse::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void GetOfficialByIdResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GetOfficialByIdResponse& GetOfficialByIdResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_official_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_official_2eproto();
#endif
  return *default_instance_;
}

GetOfficialByIdResponse* GetOfficialByIdResponse::default_instance_ = NULL;

GetOfficialByIdResponse* GetOfficialByIdResponse::New() const {
  return new GetOfficialByIdResponse;
}

void GetOfficialByIdResponse::Clear() {
  official_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool GetOfficialByIdResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:weizhu.official.GetOfficialByIdResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .weizhu.official.Official official = 1;
      case 1: {
        if (tag == 10) {
         parse_official:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_official()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_official;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:weizhu.official.GetOfficialByIdResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:weizhu.official.GetOfficialByIdResponse)
  return false;
#undef DO_
}

void GetOfficialByIdResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:weizhu.official.GetOfficialByIdResponse)
  // repeated .weizhu.official.Official official = 1;
  for (int i = 0; i < this->official_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->official(i), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:weizhu.official.GetOfficialByIdResponse)
}

int GetOfficialByIdResponse::ByteSize() const {
  int total_size = 0;

  // repeated .weizhu.official.Official official = 1;
  total_size += 1 * this->official_size();
  for (int i = 0; i < this->official_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->official(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetOfficialByIdResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GetOfficialByIdResponse*>(&from));
}

void GetOfficialByIdResponse::MergeFrom(const GetOfficialByIdResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  official_.MergeFrom(from.official_);
  mutable_unknown_fields()->append(from.unknown_fields());
}

void GetOfficialByIdResponse::CopyFrom(const GetOfficialByIdResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetOfficialByIdResponse::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->official())) return false;
  return true;
}

void GetOfficialByIdResponse::Swap(GetOfficialByIdResponse* other) {
  if (other != this) {
    official_.Swap(&other->official_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string GetOfficialByIdResponse::GetTypeName() const {
  return "weizhu.official.GetOfficialByIdResponse";
}


// ===================================================================

#ifndef _MSC_VER
const int GetOfficialListRequest::kLastOfficialIdFieldNumber;
const int GetOfficialListRequest::kOfficialSizeFieldNumber;
#endif  // !_MSC_VER

GetOfficialListRequest::GetOfficialListRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:weizhu.official.GetOfficialListRequest)
}

void GetOfficialListRequest::InitAsDefaultInstance() {
}

GetOfficialListRequest::GetOfficialListRequest(const GetOfficialListRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:weizhu.official.GetOfficialListRequest)
}

void GetOfficialListRequest::SharedCtor() {
  _cached_size_ = 0;
  last_official_id_ = GOOGLE_LONGLONG(0);
  official_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetOfficialListRequest::~GetOfficialListRequest() {
  // @@protoc_insertion_point(destructor:weizhu.official.GetOfficialListRequest)
  SharedDtor();
}

void GetOfficialListRequest::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void GetOfficialListRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GetOfficialListRequest& GetOfficialListRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_official_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_official_2eproto();
#endif
  return *default_instance_;
}

GetOfficialListRequest* GetOfficialListRequest::default_instance_ = NULL;

GetOfficialListRequest* GetOfficialListRequest::New() const {
  return new GetOfficialListRequest;
}

void GetOfficialListRequest::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GetOfficialListRequest*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(last_official_id_, official_size_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool GetOfficialListRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:weizhu.official.GetOfficialListRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 last_official_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &last_official_id_)));
          set_has_last_official_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_official_size;
        break;
      }

      // optional int32 official_size = 2;
      case 2: {
        if (tag == 16) {
         parse_official_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &official_size_)));
          set_has_official_size();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:weizhu.official.GetOfficialListRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:weizhu.official.GetOfficialListRequest)
  return false;
#undef DO_
}

void GetOfficialListRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:weizhu.official.GetOfficialListRequest)
  // optional int64 last_official_id = 1;
  if (has_last_official_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->last_official_id(), output);
  }

  // optional int32 official_size = 2;
  if (has_official_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->official_size(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:weizhu.official.GetOfficialListRequest)
}

int GetOfficialListRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 last_official_id = 1;
    if (has_last_official_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->last_official_id());
    }

    // optional int32 official_size = 2;
    if (has_official_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->official_size());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetOfficialListRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GetOfficialListRequest*>(&from));
}

void GetOfficialListRequest::MergeFrom(const GetOfficialListRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_last_official_id()) {
      set_last_official_id(from.last_official_id());
    }
    if (from.has_official_size()) {
      set_official_size(from.official_size());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void GetOfficialListRequest::CopyFrom(const GetOfficialListRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetOfficialListRequest::IsInitialized() const {

  return true;
}

void GetOfficialListRequest::Swap(GetOfficialListRequest* other) {
  if (other != this) {
    std::swap(last_official_id_, other->last_official_id_);
    std::swap(official_size_, other->official_size_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string GetOfficialListRequest::GetTypeName() const {
  return "weizhu.official.GetOfficialListRequest";
}


// ===================================================================

#ifndef _MSC_VER
const int GetOfficialListResponse::kOfficialFieldNumber;
const int GetOfficialListResponse::kHasMoreFieldNumber;
#endif  // !_MSC_VER

GetOfficialListResponse::GetOfficialListResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:weizhu.official.GetOfficialListResponse)
}

void GetOfficialListResponse::InitAsDefaultInstance() {
}

GetOfficialListResponse::GetOfficialListResponse(const GetOfficialListResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:weizhu.official.GetOfficialListResponse)
}

void GetOfficialListResponse::SharedCtor() {
  _cached_size_ = 0;
  has_more_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetOfficialListResponse::~GetOfficialListResponse() {
  // @@protoc_insertion_point(destructor:weizhu.official.GetOfficialListResponse)
  SharedDtor();
}

void GetOfficialListResponse::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void GetOfficialListResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GetOfficialListResponse& GetOfficialListResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_official_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_official_2eproto();
#endif
  return *default_instance_;
}

GetOfficialListResponse* GetOfficialListResponse::default_instance_ = NULL;

GetOfficialListResponse* GetOfficialListResponse::New() const {
  return new GetOfficialListResponse;
}

void GetOfficialListResponse::Clear() {
  has_more_ = false;
  official_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool GetOfficialListResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:weizhu.official.GetOfficialListResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .weizhu.official.Official official = 1;
      case 1: {
        if (tag == 10) {
         parse_official:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_official()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_official;
        if (input->ExpectTag(16)) goto parse_has_more;
        break;
      }

      // required bool has_more = 2;
      case 2: {
        if (tag == 16) {
         parse_has_more:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &has_more_)));
          set_has_has_more();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:weizhu.official.GetOfficialListResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:weizhu.official.GetOfficialListResponse)
  return false;
#undef DO_
}

void GetOfficialListResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:weizhu.official.GetOfficialListResponse)
  // repeated .weizhu.official.Official official = 1;
  for (int i = 0; i < this->official_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->official(i), output);
  }

  // required bool has_more = 2;
  if (has_has_more()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->has_more(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:weizhu.official.GetOfficialListResponse)
}

int GetOfficialListResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // required bool has_more = 2;
    if (has_has_more()) {
      total_size += 1 + 1;
    }

  }
  // repeated .weizhu.official.Official official = 1;
  total_size += 1 * this->official_size();
  for (int i = 0; i < this->official_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->official(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetOfficialListResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GetOfficialListResponse*>(&from));
}

void GetOfficialListResponse::MergeFrom(const GetOfficialListResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  official_.MergeFrom(from.official_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_has_more()) {
      set_has_more(from.has_more());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void GetOfficialListResponse::CopyFrom(const GetOfficialListResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetOfficialListResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->official())) return false;
  return true;
}

void GetOfficialListResponse::Swap(GetOfficialListResponse* other) {
  if (other != this) {
    official_.Swap(&other->official_);
    std::swap(has_more_, other->has_more_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string GetOfficialListResponse::GetTypeName() const {
  return "weizhu.official.GetOfficialListResponse";
}


// ===================================================================

#ifndef _MSC_VER
const int GetOfficialMessageRequest::kOfficialIdFieldNumber;
const int GetOfficialMessageRequest::kMsgSeqBeginFieldNumber;
const int GetOfficialMessageRequest::kMsgSeqEndFieldNumber;
const int GetOfficialMessageRequest::kMsgSizeFieldNumber;
#endif  // !_MSC_VER

GetOfficialMessageRequest::GetOfficialMessageRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:weizhu.official.GetOfficialMessageRequest)
}

void GetOfficialMessageRequest::InitAsDefaultInstance() {
}

GetOfficialMessageRequest::GetOfficialMessageRequest(const GetOfficialMessageRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:weizhu.official.GetOfficialMessageRequest)
}

void GetOfficialMessageRequest::SharedCtor() {
  _cached_size_ = 0;
  official_id_ = GOOGLE_LONGLONG(0);
  msg_seq_begin_ = GOOGLE_LONGLONG(0);
  msg_seq_end_ = GOOGLE_LONGLONG(0);
  msg_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetOfficialMessageRequest::~GetOfficialMessageRequest() {
  // @@protoc_insertion_point(destructor:weizhu.official.GetOfficialMessageRequest)
  SharedDtor();
}

void GetOfficialMessageRequest::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void GetOfficialMessageRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GetOfficialMessageRequest& GetOfficialMessageRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_official_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_official_2eproto();
#endif
  return *default_instance_;
}

GetOfficialMessageRequest* GetOfficialMessageRequest::default_instance_ = NULL;

GetOfficialMessageRequest* GetOfficialMessageRequest::New() const {
  return new GetOfficialMessageRequest;
}

void GetOfficialMessageRequest::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GetOfficialMessageRequest*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(official_id_, msg_size_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool GetOfficialMessageRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:weizhu.official.GetOfficialMessageRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 official_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &official_id_)));
          set_has_official_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_msg_seq_begin;
        break;
      }

      // optional int64 msg_seq_begin = 2;
      case 2: {
        if (tag == 16) {
         parse_msg_seq_begin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &msg_seq_begin_)));
          set_has_msg_seq_begin();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_msg_seq_end;
        break;
      }

      // optional int64 msg_seq_end = 3;
      case 3: {
        if (tag == 24) {
         parse_msg_seq_end:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &msg_seq_end_)));
          set_has_msg_seq_end();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_msg_size;
        break;
      }

      // required int32 msg_size = 4;
      case 4: {
        if (tag == 32) {
         parse_msg_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &msg_size_)));
          set_has_msg_size();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:weizhu.official.GetOfficialMessageRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:weizhu.official.GetOfficialMessageRequest)
  return false;
#undef DO_
}

void GetOfficialMessageRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:weizhu.official.GetOfficialMessageRequest)
  // required int64 official_id = 1;
  if (has_official_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->official_id(), output);
  }

  // optional int64 msg_seq_begin = 2;
  if (has_msg_seq_begin()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->msg_seq_begin(), output);
  }

  // optional int64 msg_seq_end = 3;
  if (has_msg_seq_end()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->msg_seq_end(), output);
  }

  // required int32 msg_size = 4;
  if (has_msg_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->msg_size(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:weizhu.official.GetOfficialMessageRequest)
}

int GetOfficialMessageRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 official_id = 1;
    if (has_official_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->official_id());
    }

    // optional int64 msg_seq_begin = 2;
    if (has_msg_seq_begin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->msg_seq_begin());
    }

    // optional int64 msg_seq_end = 3;
    if (has_msg_seq_end()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->msg_seq_end());
    }

    // required int32 msg_size = 4;
    if (has_msg_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->msg_size());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetOfficialMessageRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GetOfficialMessageRequest*>(&from));
}

void GetOfficialMessageRequest::MergeFrom(const GetOfficialMessageRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_official_id()) {
      set_official_id(from.official_id());
    }
    if (from.has_msg_seq_begin()) {
      set_msg_seq_begin(from.msg_seq_begin());
    }
    if (from.has_msg_seq_end()) {
      set_msg_seq_end(from.msg_seq_end());
    }
    if (from.has_msg_size()) {
      set_msg_size(from.msg_size());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void GetOfficialMessageRequest::CopyFrom(const GetOfficialMessageRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetOfficialMessageRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000009) != 0x00000009) return false;

  return true;
}

void GetOfficialMessageRequest::Swap(GetOfficialMessageRequest* other) {
  if (other != this) {
    std::swap(official_id_, other->official_id_);
    std::swap(msg_seq_begin_, other->msg_seq_begin_);
    std::swap(msg_seq_end_, other->msg_seq_end_);
    std::swap(msg_size_, other->msg_size_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string GetOfficialMessageRequest::GetTypeName() const {
  return "weizhu.official.GetOfficialMessageRequest";
}


// ===================================================================

#ifndef _MSC_VER
const int GetOfficialMessageResponse::kMsgFieldNumber;
const int GetOfficialMessageResponse::kHasMoreFieldNumber;
#endif  // !_MSC_VER

GetOfficialMessageResponse::GetOfficialMessageResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:weizhu.official.GetOfficialMessageResponse)
}

void GetOfficialMessageResponse::InitAsDefaultInstance() {
}

GetOfficialMessageResponse::GetOfficialMessageResponse(const GetOfficialMessageResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:weizhu.official.GetOfficialMessageResponse)
}

void GetOfficialMessageResponse::SharedCtor() {
  _cached_size_ = 0;
  has_more_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetOfficialMessageResponse::~GetOfficialMessageResponse() {
  // @@protoc_insertion_point(destructor:weizhu.official.GetOfficialMessageResponse)
  SharedDtor();
}

void GetOfficialMessageResponse::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void GetOfficialMessageResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GetOfficialMessageResponse& GetOfficialMessageResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_official_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_official_2eproto();
#endif
  return *default_instance_;
}

GetOfficialMessageResponse* GetOfficialMessageResponse::default_instance_ = NULL;

GetOfficialMessageResponse* GetOfficialMessageResponse::New() const {
  return new GetOfficialMessageResponse;
}

void GetOfficialMessageResponse::Clear() {
  has_more_ = false;
  msg_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool GetOfficialMessageResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:weizhu.official.GetOfficialMessageResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .weizhu.official.OfficialMessage msg = 1;
      case 1: {
        if (tag == 10) {
         parse_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_msg()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_msg;
        if (input->ExpectTag(16)) goto parse_has_more;
        break;
      }

      // required bool has_more = 2;
      case 2: {
        if (tag == 16) {
         parse_has_more:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &has_more_)));
          set_has_has_more();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:weizhu.official.GetOfficialMessageResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:weizhu.official.GetOfficialMessageResponse)
  return false;
#undef DO_
}

void GetOfficialMessageResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:weizhu.official.GetOfficialMessageResponse)
  // repeated .weizhu.official.OfficialMessage msg = 1;
  for (int i = 0; i < this->msg_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->msg(i), output);
  }

  // required bool has_more = 2;
  if (has_has_more()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->has_more(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:weizhu.official.GetOfficialMessageResponse)
}

int GetOfficialMessageResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // required bool has_more = 2;
    if (has_has_more()) {
      total_size += 1 + 1;
    }

  }
  // repeated .weizhu.official.OfficialMessage msg = 1;
  total_size += 1 * this->msg_size();
  for (int i = 0; i < this->msg_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->msg(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetOfficialMessageResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GetOfficialMessageResponse*>(&from));
}

void GetOfficialMessageResponse::MergeFrom(const GetOfficialMessageResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  msg_.MergeFrom(from.msg_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_has_more()) {
      set_has_more(from.has_more());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void GetOfficialMessageResponse::CopyFrom(const GetOfficialMessageResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetOfficialMessageResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->msg())) return false;
  return true;
}

void GetOfficialMessageResponse::Swap(GetOfficialMessageResponse* other) {
  if (other != this) {
    msg_.Swap(&other->msg_);
    std::swap(has_more_, other->has_more_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string GetOfficialMessageResponse::GetTypeName() const {
  return "weizhu.official.GetOfficialMessageResponse";
}


// ===================================================================

#ifndef _MSC_VER
const int SendOfficialMessageRequest::kOfficialIdFieldNumber;
const int SendOfficialMessageRequest::kMsgFieldNumber;
#endif  // !_MSC_VER

SendOfficialMessageRequest::SendOfficialMessageRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:weizhu.official.SendOfficialMessageRequest)
}

void SendOfficialMessageRequest::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  msg_ = const_cast< ::weizhu::official::OfficialMessage*>(
      ::weizhu::official::OfficialMessage::internal_default_instance());
#else
  msg_ = const_cast< ::weizhu::official::OfficialMessage*>(&::weizhu::official::OfficialMessage::default_instance());
#endif
}

SendOfficialMessageRequest::SendOfficialMessageRequest(const SendOfficialMessageRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:weizhu.official.SendOfficialMessageRequest)
}

void SendOfficialMessageRequest::SharedCtor() {
  _cached_size_ = 0;
  official_id_ = GOOGLE_LONGLONG(0);
  msg_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SendOfficialMessageRequest::~SendOfficialMessageRequest() {
  // @@protoc_insertion_point(destructor:weizhu.official.SendOfficialMessageRequest)
  SharedDtor();
}

void SendOfficialMessageRequest::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete msg_;
  }
}

void SendOfficialMessageRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const SendOfficialMessageRequest& SendOfficialMessageRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_official_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_official_2eproto();
#endif
  return *default_instance_;
}

SendOfficialMessageRequest* SendOfficialMessageRequest::default_instance_ = NULL;

SendOfficialMessageRequest* SendOfficialMessageRequest::New() const {
  return new SendOfficialMessageRequest;
}

void SendOfficialMessageRequest::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    official_id_ = GOOGLE_LONGLONG(0);
    if (has_msg()) {
      if (msg_ != NULL) msg_->::weizhu::official::OfficialMessage::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool SendOfficialMessageRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:weizhu.official.SendOfficialMessageRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 official_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &official_id_)));
          set_has_official_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_msg;
        break;
      }

      // required .weizhu.official.OfficialMessage msg = 2;
      case 2: {
        if (tag == 18) {
         parse_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_msg()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:weizhu.official.SendOfficialMessageRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:weizhu.official.SendOfficialMessageRequest)
  return false;
#undef DO_
}

void SendOfficialMessageRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:weizhu.official.SendOfficialMessageRequest)
  // required int64 official_id = 1;
  if (has_official_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->official_id(), output);
  }

  // required .weizhu.official.OfficialMessage msg = 2;
  if (has_msg()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->msg(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:weizhu.official.SendOfficialMessageRequest)
}

int SendOfficialMessageRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 official_id = 1;
    if (has_official_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->official_id());
    }

    // required .weizhu.official.OfficialMessage msg = 2;
    if (has_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->msg());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SendOfficialMessageRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const SendOfficialMessageRequest*>(&from));
}

void SendOfficialMessageRequest::MergeFrom(const SendOfficialMessageRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_official_id()) {
      set_official_id(from.official_id());
    }
    if (from.has_msg()) {
      mutable_msg()->::weizhu::official::OfficialMessage::MergeFrom(from.msg());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void SendOfficialMessageRequest::CopyFrom(const SendOfficialMessageRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SendOfficialMessageRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_msg()) {
    if (!this->msg().IsInitialized()) return false;
  }
  return true;
}

void SendOfficialMessageRequest::Swap(SendOfficialMessageRequest* other) {
  if (other != this) {
    std::swap(official_id_, other->official_id_);
    std::swap(msg_, other->msg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string SendOfficialMessageRequest::GetTypeName() const {
  return "weizhu.official.SendOfficialMessageRequest";
}


// ===================================================================

bool SendOfficialMessageResponse_Result_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 99:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const SendOfficialMessageResponse_Result SendOfficialMessageResponse::SUCC;
const SendOfficialMessageResponse_Result SendOfficialMessageResponse::FAIL_OFFICIAL_NOT_EXIST;
const SendOfficialMessageResponse_Result SendOfficialMessageResponse::FAIL_MSG_INVALID;
const SendOfficialMessageResponse_Result SendOfficialMessageResponse::FAIL_UNKNOWN;
const SendOfficialMessageResponse_Result SendOfficialMessageResponse::Result_MIN;
const SendOfficialMessageResponse_Result SendOfficialMessageResponse::Result_MAX;
const int SendOfficialMessageResponse::Result_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int SendOfficialMessageResponse::kResultFieldNumber;
const int SendOfficialMessageResponse::kFailTextFieldNumber;
const int SendOfficialMessageResponse::kMsgSeqFieldNumber;
const int SendOfficialMessageResponse::kMsgTimeFieldNumber;
const int SendOfficialMessageResponse::kResponseMsgFieldNumber;
#endif  // !_MSC_VER

SendOfficialMessageResponse::SendOfficialMessageResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:weizhu.official.SendOfficialMessageResponse)
}

void SendOfficialMessageResponse::InitAsDefaultInstance() {
}

SendOfficialMessageResponse::SendOfficialMessageResponse(const SendOfficialMessageResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:weizhu.official.SendOfficialMessageResponse)
}

void SendOfficialMessageResponse::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  result_ = 99;
  fail_text_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  msg_seq_ = GOOGLE_LONGLONG(0);
  msg_time_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SendOfficialMessageResponse::~SendOfficialMessageResponse() {
  // @@protoc_insertion_point(destructor:weizhu.official.SendOfficialMessageResponse)
  SharedDtor();
}

void SendOfficialMessageResponse::SharedDtor() {
  if (fail_text_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete fail_text_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void SendOfficialMessageResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const SendOfficialMessageResponse& SendOfficialMessageResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_official_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_official_2eproto();
#endif
  return *default_instance_;
}

SendOfficialMessageResponse* SendOfficialMessageResponse::default_instance_ = NULL;

SendOfficialMessageResponse* SendOfficialMessageResponse::New() const {
  return new SendOfficialMessageResponse;
}

void SendOfficialMessageResponse::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<SendOfficialMessageResponse*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(msg_time_, msg_seq_);
    result_ = 99;
    if (has_fail_text()) {
      if (fail_text_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        fail_text_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  response_msg_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool SendOfficialMessageResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:weizhu.official.SendOfficialMessageResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .weizhu.official.SendOfficialMessageResponse.Result result = 1 [default = FAIL_UNKNOWN];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::weizhu::official::SendOfficialMessageResponse_Result_IsValid(value)) {
            set_result(static_cast< ::weizhu::official::SendOfficialMessageResponse_Result >(value));
          } else {
            unknown_fields_stream.WriteVarint32(tag);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_fail_text;
        break;
      }

      // optional string fail_text = 2;
      case 2: {
        if (tag == 18) {
         parse_fail_text:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fail_text()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_msg_seq;
        break;
      }

      // optional int64 msg_seq = 3;
      case 3: {
        if (tag == 24) {
         parse_msg_seq:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &msg_seq_)));
          set_has_msg_seq();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_msg_time;
        break;
      }

      // optional int32 msg_time = 4;
      case 4: {
        if (tag == 32) {
         parse_msg_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &msg_time_)));
          set_has_msg_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_response_msg;
        break;
      }

      // repeated .weizhu.official.OfficialMessage response_msg = 5;
      case 5: {
        if (tag == 42) {
         parse_response_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_response_msg()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_response_msg;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:weizhu.official.SendOfficialMessageResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:weizhu.official.SendOfficialMessageResponse)
  return false;
#undef DO_
}

void SendOfficialMessageResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:weizhu.official.SendOfficialMessageResponse)
  // optional .weizhu.official.SendOfficialMessageResponse.Result result = 1 [default = FAIL_UNKNOWN];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  // optional string fail_text = 2;
  if (has_fail_text()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->fail_text(), output);
  }

  // optional int64 msg_seq = 3;
  if (has_msg_seq()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->msg_seq(), output);
  }

  // optional int32 msg_time = 4;
  if (has_msg_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->msg_time(), output);
  }

  // repeated .weizhu.official.OfficialMessage response_msg = 5;
  for (int i = 0; i < this->response_msg_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      5, this->response_msg(i), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:weizhu.official.SendOfficialMessageResponse)
}

int SendOfficialMessageResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .weizhu.official.SendOfficialMessageResponse.Result result = 1 [default = FAIL_UNKNOWN];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

    // optional string fail_text = 2;
    if (has_fail_text()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->fail_text());
    }

    // optional int64 msg_seq = 3;
    if (has_msg_seq()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->msg_seq());
    }

    // optional int32 msg_time = 4;
    if (has_msg_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->msg_time());
    }

  }
  // repeated .weizhu.official.OfficialMessage response_msg = 5;
  total_size += 1 * this->response_msg_size();
  for (int i = 0; i < this->response_msg_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->response_msg(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SendOfficialMessageResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const SendOfficialMessageResponse*>(&from));
}

void SendOfficialMessageResponse::MergeFrom(const SendOfficialMessageResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  response_msg_.MergeFrom(from.response_msg_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_fail_text()) {
      set_fail_text(from.fail_text());
    }
    if (from.has_msg_seq()) {
      set_msg_seq(from.msg_seq());
    }
    if (from.has_msg_time()) {
      set_msg_time(from.msg_time());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void SendOfficialMessageResponse::CopyFrom(const SendOfficialMessageResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SendOfficialMessageResponse::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->response_msg())) return false;
  return true;
}

void SendOfficialMessageResponse::Swap(SendOfficialMessageResponse* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(fail_text_, other->fail_text_);
    std::swap(msg_seq_, other->msg_seq_);
    std::swap(msg_time_, other->msg_time_);
    response_msg_.Swap(&other->response_msg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string SendOfficialMessageResponse::GetTypeName() const {
  return "weizhu.official.SendOfficialMessageResponse";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace official
}  // namespace weizhu

// @@protoc_insertion_point(global_scope)
