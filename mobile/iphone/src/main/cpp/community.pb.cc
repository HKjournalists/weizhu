// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: community.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "community.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)

namespace weizhu {
namespace community {

void protobuf_ShutdownFile_community_2eproto() {
  delete Board::default_instance_;
  delete Post::default_instance_;
  delete Post_Part::default_instance_;
  delete Comment::default_instance_;
  delete PostLike::default_instance_;
  delete CommunityPostMessagePush::default_instance_;
  delete CommunityCommentMessagePush::default_instance_;
  delete GetCommunityRequest::default_instance_;
  delete GetCommunityResponse::default_instance_;
  delete GetBoardListRequest::default_instance_;
  delete GetBoardListResponse::default_instance_;
  delete GetPostListRequest::default_instance_;
  delete GetPostListResponse::default_instance_;
  delete GetCommentListRequest::default_instance_;
  delete GetCommentListResponse::default_instance_;
  delete GetHotCommentListRequest::default_instance_;
  delete GetHotCommentListResponse::default_instance_;
  delete CreatePostRequest::default_instance_;
  delete CreatePostResponse::default_instance_;
  delete DeletePostRequest::default_instance_;
  delete DeletePostResponse::default_instance_;
  delete LikePostRequest::default_instance_;
  delete LikePostResponse::default_instance_;
  delete CreateCommentRequest::default_instance_;
  delete CreateCommentResponse::default_instance_;
  delete DeleteCommentRequest::default_instance_;
  delete DeleteCommentResponse::default_instance_;
  delete GetMyPostListRequest::default_instance_;
  delete GetMyPostListResponse::default_instance_;
  delete GetMyCommentListRequest::default_instance_;
  delete GetMyCommentListResponse::default_instance_;
  delete GetRecommendPostResponse::default_instance_;
  delete LikeCommentRequest::default_instance_;
  delete LikeCommentResponse::default_instance_;
  delete GetPostCommentByIdRequest::default_instance_;
  delete GetPostCommentByIdRequest_PostCommentId::default_instance_;
  delete GetPostCommentByIdResponse::default_instance_;
  delete GetPostByIdsRequest::default_instance_;
  delete GetPostByIdsResponse::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_community_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_community_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  ::weizhu::protobuf_AddDesc_weizhu_2eproto();
  Board::default_instance_ = new Board();
  Post::default_instance_ = new Post();
  Post_Part::default_instance_ = new Post_Part();
  Comment::default_instance_ = new Comment();
  PostLike::default_instance_ = new PostLike();
  CommunityPostMessagePush::default_instance_ = new CommunityPostMessagePush();
  CommunityCommentMessagePush::default_instance_ = new CommunityCommentMessagePush();
  GetCommunityRequest::default_instance_ = new GetCommunityRequest();
  GetCommunityResponse::default_instance_ = new GetCommunityResponse();
  GetBoardListRequest::default_instance_ = new GetBoardListRequest();
  GetBoardListResponse::default_instance_ = new GetBoardListResponse();
  GetPostListRequest::default_instance_ = new GetPostListRequest();
  GetPostListResponse::default_instance_ = new GetPostListResponse();
  GetCommentListRequest::default_instance_ = new GetCommentListRequest();
  GetCommentListResponse::default_instance_ = new GetCommentListResponse();
  GetHotCommentListRequest::default_instance_ = new GetHotCommentListRequest();
  GetHotCommentListResponse::default_instance_ = new GetHotCommentListResponse();
  CreatePostRequest::default_instance_ = new CreatePostRequest();
  CreatePostResponse::default_instance_ = new CreatePostResponse();
  DeletePostRequest::default_instance_ = new DeletePostRequest();
  DeletePostResponse::default_instance_ = new DeletePostResponse();
  LikePostRequest::default_instance_ = new LikePostRequest();
  LikePostResponse::default_instance_ = new LikePostResponse();
  CreateCommentRequest::default_instance_ = new CreateCommentRequest();
  CreateCommentResponse::default_instance_ = new CreateCommentResponse();
  DeleteCommentRequest::default_instance_ = new DeleteCommentRequest();
  DeleteCommentResponse::default_instance_ = new DeleteCommentResponse();
  GetMyPostListRequest::default_instance_ = new GetMyPostListRequest();
  GetMyPostListResponse::default_instance_ = new GetMyPostListResponse();
  GetMyCommentListRequest::default_instance_ = new GetMyCommentListRequest();
  GetMyCommentListResponse::default_instance_ = new GetMyCommentListResponse();
  GetRecommendPostResponse::default_instance_ = new GetRecommendPostResponse();
  LikeCommentRequest::default_instance_ = new LikeCommentRequest();
  LikeCommentResponse::default_instance_ = new LikeCommentResponse();
  GetPostCommentByIdRequest::default_instance_ = new GetPostCommentByIdRequest();
  GetPostCommentByIdRequest_PostCommentId::default_instance_ = new GetPostCommentByIdRequest_PostCommentId();
  GetPostCommentByIdResponse::default_instance_ = new GetPostCommentByIdResponse();
  GetPostByIdsRequest::default_instance_ = new GetPostByIdsRequest();
  GetPostByIdsResponse::default_instance_ = new GetPostByIdsResponse();
  Board::default_instance_->InitAsDefaultInstance();
  Post::default_instance_->InitAsDefaultInstance();
  Post_Part::default_instance_->InitAsDefaultInstance();
  Comment::default_instance_->InitAsDefaultInstance();
  PostLike::default_instance_->InitAsDefaultInstance();
  CommunityPostMessagePush::default_instance_->InitAsDefaultInstance();
  CommunityCommentMessagePush::default_instance_->InitAsDefaultInstance();
  GetCommunityRequest::default_instance_->InitAsDefaultInstance();
  GetCommunityResponse::default_instance_->InitAsDefaultInstance();
  GetBoardListRequest::default_instance_->InitAsDefaultInstance();
  GetBoardListResponse::default_instance_->InitAsDefaultInstance();
  GetPostListRequest::default_instance_->InitAsDefaultInstance();
  GetPostListResponse::default_instance_->InitAsDefaultInstance();
  GetCommentListRequest::default_instance_->InitAsDefaultInstance();
  GetCommentListResponse::default_instance_->InitAsDefaultInstance();
  GetHotCommentListRequest::default_instance_->InitAsDefaultInstance();
  GetHotCommentListResponse::default_instance_->InitAsDefaultInstance();
  CreatePostRequest::default_instance_->InitAsDefaultInstance();
  CreatePostResponse::default_instance_->InitAsDefaultInstance();
  DeletePostRequest::default_instance_->InitAsDefaultInstance();
  DeletePostResponse::default_instance_->InitAsDefaultInstance();
  LikePostRequest::default_instance_->InitAsDefaultInstance();
  LikePostResponse::default_instance_->InitAsDefaultInstance();
  CreateCommentRequest::default_instance_->InitAsDefaultInstance();
  CreateCommentResponse::default_instance_->InitAsDefaultInstance();
  DeleteCommentRequest::default_instance_->InitAsDefaultInstance();
  DeleteCommentResponse::default_instance_->InitAsDefaultInstance();
  GetMyPostListRequest::default_instance_->InitAsDefaultInstance();
  GetMyPostListResponse::default_instance_->InitAsDefaultInstance();
  GetMyCommentListRequest::default_instance_->InitAsDefaultInstance();
  GetMyCommentListResponse::default_instance_->InitAsDefaultInstance();
  GetRecommendPostResponse::default_instance_->InitAsDefaultInstance();
  LikeCommentRequest::default_instance_->InitAsDefaultInstance();
  LikeCommentResponse::default_instance_->InitAsDefaultInstance();
  GetPostCommentByIdRequest::default_instance_->InitAsDefaultInstance();
  GetPostCommentByIdRequest_PostCommentId::default_instance_->InitAsDefaultInstance();
  GetPostCommentByIdResponse::default_instance_->InitAsDefaultInstance();
  GetPostByIdsRequest::default_instance_->InitAsDefaultInstance();
  GetPostByIdsResponse::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_community_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_community_2eproto_once_);
void protobuf_AddDesc_community_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_community_2eproto_once_,
                 &protobuf_AddDesc_community_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_community_2eproto {
  StaticDescriptorInitializer_community_2eproto() {
    protobuf_AddDesc_community_2eproto();
  }
} static_descriptor_initializer_community_2eproto_;
#endif

// ===================================================================

#ifndef _MSC_VER
const int Board::kBoardIdFieldNumber;
const int Board::kBoardNameFieldNumber;
const int Board::kBoardIconFieldNumber;
const int Board::kBoardDescFieldNumber;
const int Board::kParentBoardIdFieldNumber;
const int Board::kIsLeafBoardFieldNumber;
const int Board::kIsHotFieldNumber;
const int Board::kPostTotalCountFieldNumber;
const int Board::kPostNewCountFieldNumber;
const int Board::kAllowModelIdFieldNumber;
const int Board::kTagFieldNumber;
#endif  // !_MSC_VER

Board::Board()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:weizhu.community.Board)
}

void Board::InitAsDefaultInstance() {
}

Board::Board(const Board& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:weizhu.community.Board)
}

void Board::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  board_id_ = 0;
  board_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  board_icon_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  board_desc_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  parent_board_id_ = 0;
  is_leaf_board_ = false;
  is_hot_ = false;
  post_total_count_ = 0;
  post_new_count_ = 0;
  allow_model_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Board::~Board() {
  // @@protoc_insertion_point(destructor:weizhu.community.Board)
  SharedDtor();
}

void Board::SharedDtor() {
  if (board_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete board_name_;
  }
  if (board_icon_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete board_icon_;
  }
  if (board_desc_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete board_desc_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void Board::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Board& Board::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_community_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_community_2eproto();
#endif
  return *default_instance_;
}

Board* Board::default_instance_ = NULL;

Board* Board::New() const {
  return new Board;
}

void Board::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Board*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(board_id_, parent_board_id_);
    ZR_(is_leaf_board_, post_total_count_);
    if (has_board_name()) {
      if (board_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        board_name_->clear();
      }
    }
    if (has_board_icon()) {
      if (board_icon_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        board_icon_->clear();
      }
    }
    if (has_board_desc()) {
      if (board_desc_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        board_desc_->clear();
      }
    }
  }
  ZR_(post_new_count_, allow_model_id_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  tag_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool Board::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:weizhu.community.Board)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 board_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &board_id_)));
          set_has_board_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_board_name;
        break;
      }

      // required string board_name = 2;
      case 2: {
        if (tag == 18) {
         parse_board_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_board_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_board_icon;
        break;
      }

      // required string board_icon = 3;
      case 3: {
        if (tag == 26) {
         parse_board_icon:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_board_icon()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_board_desc;
        break;
      }

      // required string board_desc = 4;
      case 4: {
        if (tag == 34) {
         parse_board_desc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_board_desc()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_parent_board_id;
        break;
      }

      // optional int32 parent_board_id = 5;
      case 5: {
        if (tag == 40) {
         parse_parent_board_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &parent_board_id_)));
          set_has_parent_board_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_is_leaf_board;
        break;
      }

      // required bool is_leaf_board = 6;
      case 6: {
        if (tag == 48) {
         parse_is_leaf_board:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_leaf_board_)));
          set_has_is_leaf_board();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_is_hot;
        break;
      }

      // required bool is_hot = 7;
      case 7: {
        if (tag == 56) {
         parse_is_hot:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_hot_)));
          set_has_is_hot();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_post_total_count;
        break;
      }

      // required int32 post_total_count = 8;
      case 8: {
        if (tag == 64) {
         parse_post_total_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &post_total_count_)));
          set_has_post_total_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_post_new_count;
        break;
      }

      // required int32 post_new_count = 9;
      case 9: {
        if (tag == 72) {
         parse_post_new_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &post_new_count_)));
          set_has_post_new_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_allow_model_id;
        break;
      }

      // optional int32 allow_model_id = 10;
      case 10: {
        if (tag == 80) {
         parse_allow_model_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &allow_model_id_)));
          set_has_allow_model_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_tag;
        break;
      }

      // repeated string tag = 11;
      case 11: {
        if (tag == 90) {
         parse_tag:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_tag()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_tag;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:weizhu.community.Board)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:weizhu.community.Board)
  return false;
#undef DO_
}

void Board::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:weizhu.community.Board)
  // required int32 board_id = 1;
  if (has_board_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->board_id(), output);
  }

  // required string board_name = 2;
  if (has_board_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->board_name(), output);
  }

  // required string board_icon = 3;
  if (has_board_icon()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->board_icon(), output);
  }

  // required string board_desc = 4;
  if (has_board_desc()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->board_desc(), output);
  }

  // optional int32 parent_board_id = 5;
  if (has_parent_board_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->parent_board_id(), output);
  }

  // required bool is_leaf_board = 6;
  if (has_is_leaf_board()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->is_leaf_board(), output);
  }

  // required bool is_hot = 7;
  if (has_is_hot()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->is_hot(), output);
  }

  // required int32 post_total_count = 8;
  if (has_post_total_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->post_total_count(), output);
  }

  // required int32 post_new_count = 9;
  if (has_post_new_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->post_new_count(), output);
  }

  // optional int32 allow_model_id = 10;
  if (has_allow_model_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->allow_model_id(), output);
  }

  // repeated string tag = 11;
  for (int i = 0; i < this->tag_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      11, this->tag(i), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:weizhu.community.Board)
}

int Board::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 board_id = 1;
    if (has_board_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->board_id());
    }

    // required string board_name = 2;
    if (has_board_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->board_name());
    }

    // required string board_icon = 3;
    if (has_board_icon()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->board_icon());
    }

    // required string board_desc = 4;
    if (has_board_desc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->board_desc());
    }

    // optional int32 parent_board_id = 5;
    if (has_parent_board_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->parent_board_id());
    }

    // required bool is_leaf_board = 6;
    if (has_is_leaf_board()) {
      total_size += 1 + 1;
    }

    // required bool is_hot = 7;
    if (has_is_hot()) {
      total_size += 1 + 1;
    }

    // required int32 post_total_count = 8;
    if (has_post_total_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->post_total_count());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required int32 post_new_count = 9;
    if (has_post_new_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->post_new_count());
    }

    // optional int32 allow_model_id = 10;
    if (has_allow_model_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->allow_model_id());
    }

  }
  // repeated string tag = 11;
  total_size += 1 * this->tag_size();
  for (int i = 0; i < this->tag_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->tag(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Board::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Board*>(&from));
}

void Board::MergeFrom(const Board& from) {
  GOOGLE_CHECK_NE(&from, this);
  tag_.MergeFrom(from.tag_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_board_id()) {
      set_board_id(from.board_id());
    }
    if (from.has_board_name()) {
      set_board_name(from.board_name());
    }
    if (from.has_board_icon()) {
      set_board_icon(from.board_icon());
    }
    if (from.has_board_desc()) {
      set_board_desc(from.board_desc());
    }
    if (from.has_parent_board_id()) {
      set_parent_board_id(from.parent_board_id());
    }
    if (from.has_is_leaf_board()) {
      set_is_leaf_board(from.is_leaf_board());
    }
    if (from.has_is_hot()) {
      set_is_hot(from.is_hot());
    }
    if (from.has_post_total_count()) {
      set_post_total_count(from.post_total_count());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_post_new_count()) {
      set_post_new_count(from.post_new_count());
    }
    if (from.has_allow_model_id()) {
      set_allow_model_id(from.allow_model_id());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void Board::CopyFrom(const Board& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Board::IsInitialized() const {
  if ((_has_bits_[0] & 0x000001ef) != 0x000001ef) return false;

  return true;
}

void Board::Swap(Board* other) {
  if (other != this) {
    std::swap(board_id_, other->board_id_);
    std::swap(board_name_, other->board_name_);
    std::swap(board_icon_, other->board_icon_);
    std::swap(board_desc_, other->board_desc_);
    std::swap(parent_board_id_, other->parent_board_id_);
    std::swap(is_leaf_board_, other->is_leaf_board_);
    std::swap(is_hot_, other->is_hot_);
    std::swap(post_total_count_, other->post_total_count_);
    std::swap(post_new_count_, other->post_new_count_);
    std::swap(allow_model_id_, other->allow_model_id_);
    tag_.Swap(&other->tag_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string Board::GetTypeName() const {
  return "weizhu.community.Board";
}


// ===================================================================

bool Post_State_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Post_State Post::NORMAL;
const Post_State Post::DELETE;
const Post_State Post::State_MIN;
const Post_State Post::State_MAX;
const int Post::State_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int Post_Part::kPartIdFieldNumber;
const int Post_Part::kTextFieldNumber;
const int Post_Part::kImageNameFieldNumber;
#endif  // !_MSC_VER

Post_Part::Post_Part()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:weizhu.community.Post.Part)
}

void Post_Part::InitAsDefaultInstance() {
}

Post_Part::Post_Part(const Post_Part& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:weizhu.community.Post.Part)
}

void Post_Part::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  part_id_ = 0;
  text_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  image_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Post_Part::~Post_Part() {
  // @@protoc_insertion_point(destructor:weizhu.community.Post.Part)
  SharedDtor();
}

void Post_Part::SharedDtor() {
  if (text_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete text_;
  }
  if (image_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete image_name_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void Post_Part::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Post_Part& Post_Part::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_community_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_community_2eproto();
#endif
  return *default_instance_;
}

Post_Part* Post_Part::default_instance_ = NULL;

Post_Part* Post_Part::New() const {
  return new Post_Part;
}

void Post_Part::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    part_id_ = 0;
    if (has_text()) {
      if (text_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        text_->clear();
      }
    }
    if (has_image_name()) {
      if (image_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        image_name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool Post_Part::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:weizhu.community.Post.Part)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 part_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &part_id_)));
          set_has_part_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_text;
        break;
      }

      // optional string text = 2;
      case 2: {
        if (tag == 18) {
         parse_text:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_text()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_image_name;
        break;
      }

      // optional string image_name = 3;
      case 3: {
        if (tag == 26) {
         parse_image_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_image_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:weizhu.community.Post.Part)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:weizhu.community.Post.Part)
  return false;
#undef DO_
}

void Post_Part::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:weizhu.community.Post.Part)
  // required int32 part_id = 1;
  if (has_part_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->part_id(), output);
  }

  // optional string text = 2;
  if (has_text()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->text(), output);
  }

  // optional string image_name = 3;
  if (has_image_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->image_name(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:weizhu.community.Post.Part)
}

int Post_Part::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 part_id = 1;
    if (has_part_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->part_id());
    }

    // optional string text = 2;
    if (has_text()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->text());
    }

    // optional string image_name = 3;
    if (has_image_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->image_name());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Post_Part::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Post_Part*>(&from));
}

void Post_Part::MergeFrom(const Post_Part& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_part_id()) {
      set_part_id(from.part_id());
    }
    if (from.has_text()) {
      set_text(from.text());
    }
    if (from.has_image_name()) {
      set_image_name(from.image_name());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void Post_Part::CopyFrom(const Post_Part& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Post_Part::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Post_Part::Swap(Post_Part* other) {
  if (other != this) {
    std::swap(part_id_, other->part_id_);
    std::swap(text_, other->text_);
    std::swap(image_name_, other->image_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string Post_Part::GetTypeName() const {
  return "weizhu.community.Post.Part";
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Post::kPostIdFieldNumber;
const int Post::kPostTitleFieldNumber;
const int Post::kPostPartFieldNumber;
const int Post::kBoardIdFieldNumber;
const int Post::kCreateUserIdFieldNumber;
const int Post::kCreateTimeFieldNumber;
const int Post::kIsHotFieldNumber;
const int Post::kStateFieldNumber;
const int Post::kCommentCountFieldNumber;
const int Post::kLikeCountFieldNumber;
const int Post::kIsLikeFieldNumber;
const int Post::kIsStickyFieldNumber;
const int Post::kStickyTimeFieldNumber;
const int Post::kIsRecommendFieldNumber;
const int Post::kRecommendTimeFieldNumber;
const int Post::kTagFieldNumber;
#endif  // !_MSC_VER

Post::Post()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:weizhu.community.Post)
}

void Post::InitAsDefaultInstance() {
}

Post::Post(const Post& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:weizhu.community.Post)
}

void Post::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  post_id_ = 0;
  post_title_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  board_id_ = 0;
  create_user_id_ = GOOGLE_LONGLONG(0);
  create_time_ = 0;
  is_hot_ = false;
  state_ = 0;
  comment_count_ = 0;
  like_count_ = 0;
  is_like_ = false;
  is_sticky_ = false;
  sticky_time_ = 0;
  is_recommend_ = false;
  recommend_time_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Post::~Post() {
  // @@protoc_insertion_point(destructor:weizhu.community.Post)
  SharedDtor();
}

void Post::SharedDtor() {
  if (post_title_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete post_title_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void Post::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Post& Post::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_community_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_community_2eproto();
#endif
  return *default_instance_;
}

Post* Post::default_instance_ = NULL;

Post* Post::New() const {
  return new Post;
}

void Post::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Post*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 251) {
    ZR_(post_id_, board_id_);
    ZR_(create_user_id_, state_);
    if (has_post_title()) {
      if (post_title_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        post_title_->clear();
      }
    }
    is_hot_ = false;
  }
  if (_has_bits_[8 / 32] & 32512) {
    ZR_(comment_count_, like_count_);
    ZR_(is_like_, sticky_time_);
    recommend_time_ = 0;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  post_part_.Clear();
  tag_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool Post::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:weizhu.community.Post)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 post_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &post_id_)));
          set_has_post_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_post_title;
        break;
      }

      // required string post_title = 2;
      case 2: {
        if (tag == 18) {
         parse_post_title:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_post_title()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_post_part;
        break;
      }

      // repeated .weizhu.community.Post.Part post_part = 3;
      case 3: {
        if (tag == 26) {
         parse_post_part:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_post_part()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_post_part;
        if (input->ExpectTag(32)) goto parse_board_id;
        break;
      }

      // required int32 board_id = 4;
      case 4: {
        if (tag == 32) {
         parse_board_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &board_id_)));
          set_has_board_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_create_user_id;
        break;
      }

      // required int64 create_user_id = 5;
      case 5: {
        if (tag == 40) {
         parse_create_user_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &create_user_id_)));
          set_has_create_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_create_time;
        break;
      }

      // required int32 create_time = 6;
      case 6: {
        if (tag == 48) {
         parse_create_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &create_time_)));
          set_has_create_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_is_hot;
        break;
      }

      // required bool is_hot = 7;
      case 7: {
        if (tag == 56) {
         parse_is_hot:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_hot_)));
          set_has_is_hot();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_state;
        break;
      }

      // optional .weizhu.community.Post.State state = 8 [default = NORMAL];
      case 8: {
        if (tag == 64) {
         parse_state:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::weizhu::community::Post_State_IsValid(value)) {
            set_state(static_cast< ::weizhu::community::Post_State >(value));
          } else {
            unknown_fields_stream.WriteVarint32(tag);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_comment_count;
        break;
      }

      // required int32 comment_count = 9;
      case 9: {
        if (tag == 72) {
         parse_comment_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &comment_count_)));
          set_has_comment_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_like_count;
        break;
      }

      // required int32 like_count = 10;
      case 10: {
        if (tag == 80) {
         parse_like_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &like_count_)));
          set_has_like_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_is_like;
        break;
      }

      // required bool is_like = 11;
      case 11: {
        if (tag == 88) {
         parse_is_like:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_like_)));
          set_has_is_like();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_is_sticky;
        break;
      }

      // optional bool is_sticky = 12;
      case 12: {
        if (tag == 96) {
         parse_is_sticky:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_sticky_)));
          set_has_is_sticky();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_sticky_time;
        break;
      }

      // optional int32 sticky_time = 13;
      case 13: {
        if (tag == 104) {
         parse_sticky_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sticky_time_)));
          set_has_sticky_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_is_recommend;
        break;
      }

      // optional bool is_recommend = 14;
      case 14: {
        if (tag == 112) {
         parse_is_recommend:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_recommend_)));
          set_has_is_recommend();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_recommend_time;
        break;
      }

      // optional int32 recommend_time = 15;
      case 15: {
        if (tag == 120) {
         parse_recommend_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &recommend_time_)));
          set_has_recommend_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(130)) goto parse_tag;
        break;
      }

      // repeated string tag = 16;
      case 16: {
        if (tag == 130) {
         parse_tag:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_tag()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(130)) goto parse_tag;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:weizhu.community.Post)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:weizhu.community.Post)
  return false;
#undef DO_
}

void Post::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:weizhu.community.Post)
  // required int32 post_id = 1;
  if (has_post_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->post_id(), output);
  }

  // required string post_title = 2;
  if (has_post_title()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->post_title(), output);
  }

  // repeated .weizhu.community.Post.Part post_part = 3;
  for (int i = 0; i < this->post_part_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->post_part(i), output);
  }

  // required int32 board_id = 4;
  if (has_board_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->board_id(), output);
  }

  // required int64 create_user_id = 5;
  if (has_create_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->create_user_id(), output);
  }

  // required int32 create_time = 6;
  if (has_create_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->create_time(), output);
  }

  // required bool is_hot = 7;
  if (has_is_hot()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->is_hot(), output);
  }

  // optional .weizhu.community.Post.State state = 8 [default = NORMAL];
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      8, this->state(), output);
  }

  // required int32 comment_count = 9;
  if (has_comment_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->comment_count(), output);
  }

  // required int32 like_count = 10;
  if (has_like_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->like_count(), output);
  }

  // required bool is_like = 11;
  if (has_is_like()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->is_like(), output);
  }

  // optional bool is_sticky = 12;
  if (has_is_sticky()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->is_sticky(), output);
  }

  // optional int32 sticky_time = 13;
  if (has_sticky_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->sticky_time(), output);
  }

  // optional bool is_recommend = 14;
  if (has_is_recommend()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(14, this->is_recommend(), output);
  }

  // optional int32 recommend_time = 15;
  if (has_recommend_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->recommend_time(), output);
  }

  // repeated string tag = 16;
  for (int i = 0; i < this->tag_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      16, this->tag(i), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:weizhu.community.Post)
}

int Post::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 post_id = 1;
    if (has_post_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->post_id());
    }

    // required string post_title = 2;
    if (has_post_title()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->post_title());
    }

    // required int32 board_id = 4;
    if (has_board_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->board_id());
    }

    // required int64 create_user_id = 5;
    if (has_create_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->create_user_id());
    }

    // required int32 create_time = 6;
    if (has_create_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->create_time());
    }

    // required bool is_hot = 7;
    if (has_is_hot()) {
      total_size += 1 + 1;
    }

    // optional .weizhu.community.Post.State state = 8 [default = NORMAL];
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->state());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required int32 comment_count = 9;
    if (has_comment_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->comment_count());
    }

    // required int32 like_count = 10;
    if (has_like_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->like_count());
    }

    // required bool is_like = 11;
    if (has_is_like()) {
      total_size += 1 + 1;
    }

    // optional bool is_sticky = 12;
    if (has_is_sticky()) {
      total_size += 1 + 1;
    }

    // optional int32 sticky_time = 13;
    if (has_sticky_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sticky_time());
    }

    // optional bool is_recommend = 14;
    if (has_is_recommend()) {
      total_size += 1 + 1;
    }

    // optional int32 recommend_time = 15;
    if (has_recommend_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->recommend_time());
    }

  }
  // repeated .weizhu.community.Post.Part post_part = 3;
  total_size += 1 * this->post_part_size();
  for (int i = 0; i < this->post_part_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->post_part(i));
  }

  // repeated string tag = 16;
  total_size += 2 * this->tag_size();
  for (int i = 0; i < this->tag_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->tag(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Post::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Post*>(&from));
}

void Post::MergeFrom(const Post& from) {
  GOOGLE_CHECK_NE(&from, this);
  post_part_.MergeFrom(from.post_part_);
  tag_.MergeFrom(from.tag_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_post_id()) {
      set_post_id(from.post_id());
    }
    if (from.has_post_title()) {
      set_post_title(from.post_title());
    }
    if (from.has_board_id()) {
      set_board_id(from.board_id());
    }
    if (from.has_create_user_id()) {
      set_create_user_id(from.create_user_id());
    }
    if (from.has_create_time()) {
      set_create_time(from.create_time());
    }
    if (from.has_is_hot()) {
      set_is_hot(from.is_hot());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_comment_count()) {
      set_comment_count(from.comment_count());
    }
    if (from.has_like_count()) {
      set_like_count(from.like_count());
    }
    if (from.has_is_like()) {
      set_is_like(from.is_like());
    }
    if (from.has_is_sticky()) {
      set_is_sticky(from.is_sticky());
    }
    if (from.has_sticky_time()) {
      set_sticky_time(from.sticky_time());
    }
    if (from.has_is_recommend()) {
      set_is_recommend(from.is_recommend());
    }
    if (from.has_recommend_time()) {
      set_recommend_time(from.recommend_time());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void Post::CopyFrom(const Post& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Post::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000077b) != 0x0000077b) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->post_part())) return false;
  return true;
}

void Post::Swap(Post* other) {
  if (other != this) {
    std::swap(post_id_, other->post_id_);
    std::swap(post_title_, other->post_title_);
    post_part_.Swap(&other->post_part_);
    std::swap(board_id_, other->board_id_);
    std::swap(create_user_id_, other->create_user_id_);
    std::swap(create_time_, other->create_time_);
    std::swap(is_hot_, other->is_hot_);
    std::swap(state_, other->state_);
    std::swap(comment_count_, other->comment_count_);
    std::swap(like_count_, other->like_count_);
    std::swap(is_like_, other->is_like_);
    std::swap(is_sticky_, other->is_sticky_);
    std::swap(sticky_time_, other->sticky_time_);
    std::swap(is_recommend_, other->is_recommend_);
    std::swap(recommend_time_, other->recommend_time_);
    tag_.Swap(&other->tag_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string Post::GetTypeName() const {
  return "weizhu.community.Post";
}


// ===================================================================

bool Comment_State_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Comment_State Comment::NORMAL;
const Comment_State Comment::DELETE;
const Comment_State Comment::State_MIN;
const Comment_State Comment::State_MAX;
const int Comment::State_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int Comment::kPostIdFieldNumber;
const int Comment::kCommentIdFieldNumber;
const int Comment::kReplyCommentIdFieldNumber;
const int Comment::kContentFieldNumber;
const int Comment::kCreateUserIdFieldNumber;
const int Comment::kCreateTimeFieldNumber;
const int Comment::kStateFieldNumber;
const int Comment::kLikeCountFieldNumber;
const int Comment::kIsLikeFieldNumber;
#endif  // !_MSC_VER

Comment::Comment()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:weizhu.community.Comment)
}

void Comment::InitAsDefaultInstance() {
}

Comment::Comment(const Comment& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:weizhu.community.Comment)
}

void Comment::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  post_id_ = 0;
  comment_id_ = 0;
  reply_comment_id_ = 0;
  content_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  create_user_id_ = GOOGLE_LONGLONG(0);
  create_time_ = 0;
  state_ = 0;
  like_count_ = 0;
  is_like_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Comment::~Comment() {
  // @@protoc_insertion_point(destructor:weizhu.community.Comment)
  SharedDtor();
}

void Comment::SharedDtor() {
  if (content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete content_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void Comment::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Comment& Comment::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_community_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_community_2eproto();
#endif
  return *default_instance_;
}

Comment* Comment::default_instance_ = NULL;

Comment* Comment::New() const {
  return new Comment;
}

void Comment::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Comment*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(post_id_, comment_id_);
    ZR_(reply_comment_id_, like_count_);
    if (has_content()) {
      if (content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        content_->clear();
      }
    }
  }
  is_like_ = false;

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool Comment::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:weizhu.community.Comment)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 post_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &post_id_)));
          set_has_post_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_comment_id;
        break;
      }

      // required int32 comment_id = 2;
      case 2: {
        if (tag == 16) {
         parse_comment_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &comment_id_)));
          set_has_comment_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_reply_comment_id;
        break;
      }

      // optional int32 reply_comment_id = 3;
      case 3: {
        if (tag == 24) {
         parse_reply_comment_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reply_comment_id_)));
          set_has_reply_comment_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_content;
        break;
      }

      // required string content = 4;
      case 4: {
        if (tag == 34) {
         parse_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_content()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_create_user_id;
        break;
      }

      // required int64 create_user_id = 5;
      case 5: {
        if (tag == 40) {
         parse_create_user_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &create_user_id_)));
          set_has_create_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_create_time;
        break;
      }

      // required int32 create_time = 6;
      case 6: {
        if (tag == 48) {
         parse_create_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &create_time_)));
          set_has_create_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_state;
        break;
      }

      // optional .weizhu.community.Comment.State state = 7 [default = NORMAL];
      case 7: {
        if (tag == 56) {
         parse_state:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::weizhu::community::Comment_State_IsValid(value)) {
            set_state(static_cast< ::weizhu::community::Comment_State >(value));
          } else {
            unknown_fields_stream.WriteVarint32(tag);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_like_count;
        break;
      }

      // optional int32 like_count = 8;
      case 8: {
        if (tag == 64) {
         parse_like_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &like_count_)));
          set_has_like_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_is_like;
        break;
      }

      // optional bool is_like = 9;
      case 9: {
        if (tag == 72) {
         parse_is_like:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_like_)));
          set_has_is_like();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:weizhu.community.Comment)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:weizhu.community.Comment)
  return false;
#undef DO_
}

void Comment::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:weizhu.community.Comment)
  // required int32 post_id = 1;
  if (has_post_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->post_id(), output);
  }

  // required int32 comment_id = 2;
  if (has_comment_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->comment_id(), output);
  }

  // optional int32 reply_comment_id = 3;
  if (has_reply_comment_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->reply_comment_id(), output);
  }

  // required string content = 4;
  if (has_content()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->content(), output);
  }

  // required int64 create_user_id = 5;
  if (has_create_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->create_user_id(), output);
  }

  // required int32 create_time = 6;
  if (has_create_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->create_time(), output);
  }

  // optional .weizhu.community.Comment.State state = 7 [default = NORMAL];
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->state(), output);
  }

  // optional int32 like_count = 8;
  if (has_like_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->like_count(), output);
  }

  // optional bool is_like = 9;
  if (has_is_like()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->is_like(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:weizhu.community.Comment)
}

int Comment::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 post_id = 1;
    if (has_post_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->post_id());
    }

    // required int32 comment_id = 2;
    if (has_comment_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->comment_id());
    }

    // optional int32 reply_comment_id = 3;
    if (has_reply_comment_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reply_comment_id());
    }

    // required string content = 4;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->content());
    }

    // required int64 create_user_id = 5;
    if (has_create_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->create_user_id());
    }

    // required int32 create_time = 6;
    if (has_create_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->create_time());
    }

    // optional .weizhu.community.Comment.State state = 7 [default = NORMAL];
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->state());
    }

    // optional int32 like_count = 8;
    if (has_like_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->like_count());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional bool is_like = 9;
    if (has_is_like()) {
      total_size += 1 + 1;
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Comment::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Comment*>(&from));
}

void Comment::MergeFrom(const Comment& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_post_id()) {
      set_post_id(from.post_id());
    }
    if (from.has_comment_id()) {
      set_comment_id(from.comment_id());
    }
    if (from.has_reply_comment_id()) {
      set_reply_comment_id(from.reply_comment_id());
    }
    if (from.has_content()) {
      set_content(from.content());
    }
    if (from.has_create_user_id()) {
      set_create_user_id(from.create_user_id());
    }
    if (from.has_create_time()) {
      set_create_time(from.create_time());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_like_count()) {
      set_like_count(from.like_count());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_is_like()) {
      set_is_like(from.is_like());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void Comment::CopyFrom(const Comment& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Comment::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003b) != 0x0000003b) return false;

  return true;
}

void Comment::Swap(Comment* other) {
  if (other != this) {
    std::swap(post_id_, other->post_id_);
    std::swap(comment_id_, other->comment_id_);
    std::swap(reply_comment_id_, other->reply_comment_id_);
    std::swap(content_, other->content_);
    std::swap(create_user_id_, other->create_user_id_);
    std::swap(create_time_, other->create_time_);
    std::swap(state_, other->state_);
    std::swap(like_count_, other->like_count_);
    std::swap(is_like_, other->is_like_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string Comment::GetTypeName() const {
  return "weizhu.community.Comment";
}


// ===================================================================

#ifndef _MSC_VER
const int PostLike::kPostIdFieldNumber;
const int PostLike::kUserIdFieldNumber;
const int PostLike::kCreateTimeFieldNumber;
#endif  // !_MSC_VER

PostLike::PostLike()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:weizhu.community.PostLike)
}

void PostLike::InitAsDefaultInstance() {
}

PostLike::PostLike(const PostLike& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:weizhu.community.PostLike)
}

void PostLike::SharedCtor() {
  _cached_size_ = 0;
  post_id_ = 0;
  user_id_ = GOOGLE_LONGLONG(0);
  create_time_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PostLike::~PostLike() {
  // @@protoc_insertion_point(destructor:weizhu.community.PostLike)
  SharedDtor();
}

void PostLike::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void PostLike::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PostLike& PostLike::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_community_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_community_2eproto();
#endif
  return *default_instance_;
}

PostLike* PostLike::default_instance_ = NULL;

PostLike* PostLike::New() const {
  return new PostLike;
}

void PostLike::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<PostLike*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(user_id_, create_time_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool PostLike::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:weizhu.community.PostLike)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 post_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &post_id_)));
          set_has_post_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_user_id;
        break;
      }

      // required int64 user_id = 2;
      case 2: {
        if (tag == 16) {
         parse_user_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_create_time;
        break;
      }

      // required int32 create_time = 3;
      case 3: {
        if (tag == 24) {
         parse_create_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &create_time_)));
          set_has_create_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:weizhu.community.PostLike)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:weizhu.community.PostLike)
  return false;
#undef DO_
}

void PostLike::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:weizhu.community.PostLike)
  // required int32 post_id = 1;
  if (has_post_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->post_id(), output);
  }

  // required int64 user_id = 2;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->user_id(), output);
  }

  // required int32 create_time = 3;
  if (has_create_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->create_time(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:weizhu.community.PostLike)
}

int PostLike::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 post_id = 1;
    if (has_post_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->post_id());
    }

    // required int64 user_id = 2;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->user_id());
    }

    // required int32 create_time = 3;
    if (has_create_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->create_time());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PostLike::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PostLike*>(&from));
}

void PostLike::MergeFrom(const PostLike& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_post_id()) {
      set_post_id(from.post_id());
    }
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_create_time()) {
      set_create_time(from.create_time());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void PostLike::CopyFrom(const PostLike& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PostLike::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void PostLike::Swap(PostLike* other) {
  if (other != this) {
    std::swap(post_id_, other->post_id_);
    std::swap(user_id_, other->user_id_);
    std::swap(create_time_, other->create_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string PostLike::GetTypeName() const {
  return "weizhu.community.PostLike";
}


// ===================================================================

#ifndef _MSC_VER
const int CommunityPostMessagePush::kPostIdFieldNumber;
const int CommunityPostMessagePush::kCommentIdFieldNumber;
#endif  // !_MSC_VER

CommunityPostMessagePush::CommunityPostMessagePush()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:weizhu.community.CommunityPostMessagePush)
}

void CommunityPostMessagePush::InitAsDefaultInstance() {
}

CommunityPostMessagePush::CommunityPostMessagePush(const CommunityPostMessagePush& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:weizhu.community.CommunityPostMessagePush)
}

void CommunityPostMessagePush::SharedCtor() {
  _cached_size_ = 0;
  post_id_ = 0;
  comment_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CommunityPostMessagePush::~CommunityPostMessagePush() {
  // @@protoc_insertion_point(destructor:weizhu.community.CommunityPostMessagePush)
  SharedDtor();
}

void CommunityPostMessagePush::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CommunityPostMessagePush::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CommunityPostMessagePush& CommunityPostMessagePush::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_community_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_community_2eproto();
#endif
  return *default_instance_;
}

CommunityPostMessagePush* CommunityPostMessagePush::default_instance_ = NULL;

CommunityPostMessagePush* CommunityPostMessagePush::New() const {
  return new CommunityPostMessagePush;
}

void CommunityPostMessagePush::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CommunityPostMessagePush*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(post_id_, comment_id_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool CommunityPostMessagePush::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:weizhu.community.CommunityPostMessagePush)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 post_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &post_id_)));
          set_has_post_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_comment_id;
        break;
      }

      // required int32 comment_id = 2;
      case 2: {
        if (tag == 16) {
         parse_comment_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &comment_id_)));
          set_has_comment_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:weizhu.community.CommunityPostMessagePush)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:weizhu.community.CommunityPostMessagePush)
  return false;
#undef DO_
}

void CommunityPostMessagePush::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:weizhu.community.CommunityPostMessagePush)
  // required int32 post_id = 1;
  if (has_post_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->post_id(), output);
  }

  // required int32 comment_id = 2;
  if (has_comment_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->comment_id(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:weizhu.community.CommunityPostMessagePush)
}

int CommunityPostMessagePush::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 post_id = 1;
    if (has_post_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->post_id());
    }

    // required int32 comment_id = 2;
    if (has_comment_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->comment_id());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CommunityPostMessagePush::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CommunityPostMessagePush*>(&from));
}

void CommunityPostMessagePush::MergeFrom(const CommunityPostMessagePush& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_post_id()) {
      set_post_id(from.post_id());
    }
    if (from.has_comment_id()) {
      set_comment_id(from.comment_id());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void CommunityPostMessagePush::CopyFrom(const CommunityPostMessagePush& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommunityPostMessagePush::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void CommunityPostMessagePush::Swap(CommunityPostMessagePush* other) {
  if (other != this) {
    std::swap(post_id_, other->post_id_);
    std::swap(comment_id_, other->comment_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CommunityPostMessagePush::GetTypeName() const {
  return "weizhu.community.CommunityPostMessagePush";
}


// ===================================================================

#ifndef _MSC_VER
const int CommunityCommentMessagePush::kPostIdFieldNumber;
const int CommunityCommentMessagePush::kCommentIdFieldNumber;
const int CommunityCommentMessagePush::kReplyCommentIdFieldNumber;
#endif  // !_MSC_VER

CommunityCommentMessagePush::CommunityCommentMessagePush()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:weizhu.community.CommunityCommentMessagePush)
}

void CommunityCommentMessagePush::InitAsDefaultInstance() {
}

CommunityCommentMessagePush::CommunityCommentMessagePush(const CommunityCommentMessagePush& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:weizhu.community.CommunityCommentMessagePush)
}

void CommunityCommentMessagePush::SharedCtor() {
  _cached_size_ = 0;
  post_id_ = 0;
  comment_id_ = 0;
  reply_comment_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CommunityCommentMessagePush::~CommunityCommentMessagePush() {
  // @@protoc_insertion_point(destructor:weizhu.community.CommunityCommentMessagePush)
  SharedDtor();
}

void CommunityCommentMessagePush::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CommunityCommentMessagePush::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CommunityCommentMessagePush& CommunityCommentMessagePush::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_community_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_community_2eproto();
#endif
  return *default_instance_;
}

CommunityCommentMessagePush* CommunityCommentMessagePush::default_instance_ = NULL;

CommunityCommentMessagePush* CommunityCommentMessagePush::New() const {
  return new CommunityCommentMessagePush;
}

void CommunityCommentMessagePush::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CommunityCommentMessagePush*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(post_id_, reply_comment_id_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool CommunityCommentMessagePush::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:weizhu.community.CommunityCommentMessagePush)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 post_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &post_id_)));
          set_has_post_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_comment_id;
        break;
      }

      // required int32 comment_id = 2;
      case 2: {
        if (tag == 16) {
         parse_comment_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &comment_id_)));
          set_has_comment_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_reply_comment_id;
        break;
      }

      // required int32 reply_comment_id = 3;
      case 3: {
        if (tag == 24) {
         parse_reply_comment_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reply_comment_id_)));
          set_has_reply_comment_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:weizhu.community.CommunityCommentMessagePush)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:weizhu.community.CommunityCommentMessagePush)
  return false;
#undef DO_
}

void CommunityCommentMessagePush::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:weizhu.community.CommunityCommentMessagePush)
  // required int32 post_id = 1;
  if (has_post_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->post_id(), output);
  }

  // required int32 comment_id = 2;
  if (has_comment_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->comment_id(), output);
  }

  // required int32 reply_comment_id = 3;
  if (has_reply_comment_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->reply_comment_id(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:weizhu.community.CommunityCommentMessagePush)
}

int CommunityCommentMessagePush::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 post_id = 1;
    if (has_post_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->post_id());
    }

    // required int32 comment_id = 2;
    if (has_comment_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->comment_id());
    }

    // required int32 reply_comment_id = 3;
    if (has_reply_comment_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reply_comment_id());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CommunityCommentMessagePush::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CommunityCommentMessagePush*>(&from));
}

void CommunityCommentMessagePush::MergeFrom(const CommunityCommentMessagePush& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_post_id()) {
      set_post_id(from.post_id());
    }
    if (from.has_comment_id()) {
      set_comment_id(from.comment_id());
    }
    if (from.has_reply_comment_id()) {
      set_reply_comment_id(from.reply_comment_id());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void CommunityCommentMessagePush::CopyFrom(const CommunityCommentMessagePush& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommunityCommentMessagePush::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void CommunityCommentMessagePush::Swap(CommunityCommentMessagePush* other) {
  if (other != this) {
    std::swap(post_id_, other->post_id_);
    std::swap(comment_id_, other->comment_id_);
    std::swap(reply_comment_id_, other->reply_comment_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CommunityCommentMessagePush::GetTypeName() const {
  return "weizhu.community.CommunityCommentMessagePush";
}


// ===================================================================

#ifndef _MSC_VER
const int GetCommunityRequest::kBoardLatestPostIdFieldNumber;
#endif  // !_MSC_VER

GetCommunityRequest::GetCommunityRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:weizhu.community.GetCommunityRequest)
}

void GetCommunityRequest::InitAsDefaultInstance() {
}

GetCommunityRequest::GetCommunityRequest(const GetCommunityRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:weizhu.community.GetCommunityRequest)
}

void GetCommunityRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetCommunityRequest::~GetCommunityRequest() {
  // @@protoc_insertion_point(destructor:weizhu.community.GetCommunityRequest)
  SharedDtor();
}

void GetCommunityRequest::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void GetCommunityRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GetCommunityRequest& GetCommunityRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_community_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_community_2eproto();
#endif
  return *default_instance_;
}

GetCommunityRequest* GetCommunityRequest::default_instance_ = NULL;

GetCommunityRequest* GetCommunityRequest::New() const {
  return new GetCommunityRequest;
}

void GetCommunityRequest::Clear() {
  board_latest_post_id_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool GetCommunityRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:weizhu.community.GetCommunityRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 board_latest_post_id = 1;
      case 1: {
        if (tag == 8) {
         parse_board_latest_post_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8, input, this->mutable_board_latest_post_id())));
        } else if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_board_latest_post_id())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8)) goto parse_board_latest_post_id;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:weizhu.community.GetCommunityRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:weizhu.community.GetCommunityRequest)
  return false;
#undef DO_
}

void GetCommunityRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:weizhu.community.GetCommunityRequest)
  // repeated int32 board_latest_post_id = 1;
  for (int i = 0; i < this->board_latest_post_id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->board_latest_post_id(i), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:weizhu.community.GetCommunityRequest)
}

int GetCommunityRequest::ByteSize() const {
  int total_size = 0;

  // repeated int32 board_latest_post_id = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->board_latest_post_id_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->board_latest_post_id(i));
    }
    total_size += 1 * this->board_latest_post_id_size() + data_size;
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetCommunityRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GetCommunityRequest*>(&from));
}

void GetCommunityRequest::MergeFrom(const GetCommunityRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  board_latest_post_id_.MergeFrom(from.board_latest_post_id_);
  mutable_unknown_fields()->append(from.unknown_fields());
}

void GetCommunityRequest::CopyFrom(const GetCommunityRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetCommunityRequest::IsInitialized() const {

  return true;
}

void GetCommunityRequest::Swap(GetCommunityRequest* other) {
  if (other != this) {
    board_latest_post_id_.Swap(&other->board_latest_post_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string GetCommunityRequest::GetTypeName() const {
  return "weizhu.community.GetCommunityRequest";
}


// ===================================================================

#ifndef _MSC_VER
const int GetCommunityResponse::kCommunityNameFieldNumber;
const int GetCommunityResponse::kPostNewCountFieldNumber;
#endif  // !_MSC_VER

GetCommunityResponse::GetCommunityResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:weizhu.community.GetCommunityResponse)
}

void GetCommunityResponse::InitAsDefaultInstance() {
}

GetCommunityResponse::GetCommunityResponse(const GetCommunityResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:weizhu.community.GetCommunityResponse)
}

void GetCommunityResponse::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  community_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  post_new_count_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetCommunityResponse::~GetCommunityResponse() {
  // @@protoc_insertion_point(destructor:weizhu.community.GetCommunityResponse)
  SharedDtor();
}

void GetCommunityResponse::SharedDtor() {
  if (community_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete community_name_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void GetCommunityResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GetCommunityResponse& GetCommunityResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_community_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_community_2eproto();
#endif
  return *default_instance_;
}

GetCommunityResponse* GetCommunityResponse::default_instance_ = NULL;

GetCommunityResponse* GetCommunityResponse::New() const {
  return new GetCommunityResponse;
}

void GetCommunityResponse::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_community_name()) {
      if (community_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        community_name_->clear();
      }
    }
    post_new_count_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool GetCommunityResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:weizhu.community.GetCommunityResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string community_name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_community_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_post_new_count;
        break;
      }

      // required int32 post_new_count = 2;
      case 2: {
        if (tag == 16) {
         parse_post_new_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &post_new_count_)));
          set_has_post_new_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:weizhu.community.GetCommunityResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:weizhu.community.GetCommunityResponse)
  return false;
#undef DO_
}

void GetCommunityResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:weizhu.community.GetCommunityResponse)
  // required string community_name = 1;
  if (has_community_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->community_name(), output);
  }

  // required int32 post_new_count = 2;
  if (has_post_new_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->post_new_count(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:weizhu.community.GetCommunityResponse)
}

int GetCommunityResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string community_name = 1;
    if (has_community_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->community_name());
    }

    // required int32 post_new_count = 2;
    if (has_post_new_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->post_new_count());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetCommunityResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GetCommunityResponse*>(&from));
}

void GetCommunityResponse::MergeFrom(const GetCommunityResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_community_name()) {
      set_community_name(from.community_name());
    }
    if (from.has_post_new_count()) {
      set_post_new_count(from.post_new_count());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void GetCommunityResponse::CopyFrom(const GetCommunityResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetCommunityResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void GetCommunityResponse::Swap(GetCommunityResponse* other) {
  if (other != this) {
    std::swap(community_name_, other->community_name_);
    std::swap(post_new_count_, other->post_new_count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string GetCommunityResponse::GetTypeName() const {
  return "weizhu.community.GetCommunityResponse";
}


// ===================================================================

#ifndef _MSC_VER
const int GetBoardListRequest::kBoardLatestPostIdFieldNumber;
#endif  // !_MSC_VER

GetBoardListRequest::GetBoardListRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:weizhu.community.GetBoardListRequest)
}

void GetBoardListRequest::InitAsDefaultInstance() {
}

GetBoardListRequest::GetBoardListRequest(const GetBoardListRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:weizhu.community.GetBoardListRequest)
}

void GetBoardListRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetBoardListRequest::~GetBoardListRequest() {
  // @@protoc_insertion_point(destructor:weizhu.community.GetBoardListRequest)
  SharedDtor();
}

void GetBoardListRequest::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void GetBoardListRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GetBoardListRequest& GetBoardListRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_community_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_community_2eproto();
#endif
  return *default_instance_;
}

GetBoardListRequest* GetBoardListRequest::default_instance_ = NULL;

GetBoardListRequest* GetBoardListRequest::New() const {
  return new GetBoardListRequest;
}

void GetBoardListRequest::Clear() {
  board_latest_post_id_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool GetBoardListRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:weizhu.community.GetBoardListRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 board_latest_post_id = 1;
      case 1: {
        if (tag == 8) {
         parse_board_latest_post_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8, input, this->mutable_board_latest_post_id())));
        } else if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_board_latest_post_id())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8)) goto parse_board_latest_post_id;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:weizhu.community.GetBoardListRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:weizhu.community.GetBoardListRequest)
  return false;
#undef DO_
}

void GetBoardListRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:weizhu.community.GetBoardListRequest)
  // repeated int32 board_latest_post_id = 1;
  for (int i = 0; i < this->board_latest_post_id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->board_latest_post_id(i), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:weizhu.community.GetBoardListRequest)
}

int GetBoardListRequest::ByteSize() const {
  int total_size = 0;

  // repeated int32 board_latest_post_id = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->board_latest_post_id_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->board_latest_post_id(i));
    }
    total_size += 1 * this->board_latest_post_id_size() + data_size;
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetBoardListRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GetBoardListRequest*>(&from));
}

void GetBoardListRequest::MergeFrom(const GetBoardListRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  board_latest_post_id_.MergeFrom(from.board_latest_post_id_);
  mutable_unknown_fields()->append(from.unknown_fields());
}

void GetBoardListRequest::CopyFrom(const GetBoardListRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetBoardListRequest::IsInitialized() const {

  return true;
}

void GetBoardListRequest::Swap(GetBoardListRequest* other) {
  if (other != this) {
    board_latest_post_id_.Swap(&other->board_latest_post_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string GetBoardListRequest::GetTypeName() const {
  return "weizhu.community.GetBoardListRequest";
}


// ===================================================================

#ifndef _MSC_VER
const int GetBoardListResponse::kBoardFieldNumber;
#endif  // !_MSC_VER

GetBoardListResponse::GetBoardListResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:weizhu.community.GetBoardListResponse)
}

void GetBoardListResponse::InitAsDefaultInstance() {
}

GetBoardListResponse::GetBoardListResponse(const GetBoardListResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:weizhu.community.GetBoardListResponse)
}

void GetBoardListResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetBoardListResponse::~GetBoardListResponse() {
  // @@protoc_insertion_point(destructor:weizhu.community.GetBoardListResponse)
  SharedDtor();
}

void GetBoardListResponse::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void GetBoardListResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GetBoardListResponse& GetBoardListResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_community_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_community_2eproto();
#endif
  return *default_instance_;
}

GetBoardListResponse* GetBoardListResponse::default_instance_ = NULL;

GetBoardListResponse* GetBoardListResponse::New() const {
  return new GetBoardListResponse;
}

void GetBoardListResponse::Clear() {
  board_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool GetBoardListResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:weizhu.community.GetBoardListResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .weizhu.community.Board board = 1;
      case 1: {
        if (tag == 10) {
         parse_board:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_board()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_board;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:weizhu.community.GetBoardListResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:weizhu.community.GetBoardListResponse)
  return false;
#undef DO_
}

void GetBoardListResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:weizhu.community.GetBoardListResponse)
  // repeated .weizhu.community.Board board = 1;
  for (int i = 0; i < this->board_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->board(i), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:weizhu.community.GetBoardListResponse)
}

int GetBoardListResponse::ByteSize() const {
  int total_size = 0;

  // repeated .weizhu.community.Board board = 1;
  total_size += 1 * this->board_size();
  for (int i = 0; i < this->board_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->board(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetBoardListResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GetBoardListResponse*>(&from));
}

void GetBoardListResponse::MergeFrom(const GetBoardListResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  board_.MergeFrom(from.board_);
  mutable_unknown_fields()->append(from.unknown_fields());
}

void GetBoardListResponse::CopyFrom(const GetBoardListResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetBoardListResponse::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->board())) return false;
  return true;
}

void GetBoardListResponse::Swap(GetBoardListResponse* other) {
  if (other != this) {
    board_.Swap(&other->board_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string GetBoardListResponse::GetTypeName() const {
  return "weizhu.community.GetBoardListResponse";
}


// ===================================================================

bool GetPostListRequest_ListType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const GetPostListRequest_ListType GetPostListRequest::CREATE_TIME;
const GetPostListRequest_ListType GetPostListRequest::TOP_HOT;
const GetPostListRequest_ListType GetPostListRequest::ListType_MIN;
const GetPostListRequest_ListType GetPostListRequest::ListType_MAX;
const int GetPostListRequest::ListType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int GetPostListRequest::kBoardIdFieldNumber;
const int GetPostListRequest::kListTypeFieldNumber;
const int GetPostListRequest::kSizeFieldNumber;
const int GetPostListRequest::kOffsetIndexFieldNumber;
#endif  // !_MSC_VER

GetPostListRequest::GetPostListRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:weizhu.community.GetPostListRequest)
}

void GetPostListRequest::InitAsDefaultInstance() {
}

GetPostListRequest::GetPostListRequest(const GetPostListRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:weizhu.community.GetPostListRequest)
}

void GetPostListRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  board_id_ = 0;
  list_type_ = 0;
  size_ = 0;
  offset_index_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetPostListRequest::~GetPostListRequest() {
  // @@protoc_insertion_point(destructor:weizhu.community.GetPostListRequest)
  SharedDtor();
}

void GetPostListRequest::SharedDtor() {
  if (offset_index_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete offset_index_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void GetPostListRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GetPostListRequest& GetPostListRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_community_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_community_2eproto();
#endif
  return *default_instance_;
}

GetPostListRequest* GetPostListRequest::default_instance_ = NULL;

GetPostListRequest* GetPostListRequest::New() const {
  return new GetPostListRequest;
}

void GetPostListRequest::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GetPostListRequest*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(board_id_, list_type_);
    size_ = 0;
    if (has_offset_index()) {
      if (offset_index_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        offset_index_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool GetPostListRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:weizhu.community.GetPostListRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 board_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &board_id_)));
          set_has_board_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_list_type;
        break;
      }

      // required .weizhu.community.GetPostListRequest.ListType list_type = 2;
      case 2: {
        if (tag == 16) {
         parse_list_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::weizhu::community::GetPostListRequest_ListType_IsValid(value)) {
            set_list_type(static_cast< ::weizhu::community::GetPostListRequest_ListType >(value));
          } else {
            unknown_fields_stream.WriteVarint32(tag);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_size;
        break;
      }

      // required int32 size = 3;
      case 3: {
        if (tag == 24) {
         parse_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &size_)));
          set_has_size();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_offset_index;
        break;
      }

      // optional bytes offset_index = 4;
      case 4: {
        if (tag == 34) {
         parse_offset_index:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_offset_index()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:weizhu.community.GetPostListRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:weizhu.community.GetPostListRequest)
  return false;
#undef DO_
}

void GetPostListRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:weizhu.community.GetPostListRequest)
  // required int32 board_id = 1;
  if (has_board_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->board_id(), output);
  }

  // required .weizhu.community.GetPostListRequest.ListType list_type = 2;
  if (has_list_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->list_type(), output);
  }

  // required int32 size = 3;
  if (has_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->size(), output);
  }

  // optional bytes offset_index = 4;
  if (has_offset_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->offset_index(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:weizhu.community.GetPostListRequest)
}

int GetPostListRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 board_id = 1;
    if (has_board_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->board_id());
    }

    // required .weizhu.community.GetPostListRequest.ListType list_type = 2;
    if (has_list_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->list_type());
    }

    // required int32 size = 3;
    if (has_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->size());
    }

    // optional bytes offset_index = 4;
    if (has_offset_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->offset_index());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetPostListRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GetPostListRequest*>(&from));
}

void GetPostListRequest::MergeFrom(const GetPostListRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_board_id()) {
      set_board_id(from.board_id());
    }
    if (from.has_list_type()) {
      set_list_type(from.list_type());
    }
    if (from.has_size()) {
      set_size(from.size());
    }
    if (from.has_offset_index()) {
      set_offset_index(from.offset_index());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void GetPostListRequest::CopyFrom(const GetPostListRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetPostListRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void GetPostListRequest::Swap(GetPostListRequest* other) {
  if (other != this) {
    std::swap(board_id_, other->board_id_);
    std::swap(list_type_, other->list_type_);
    std::swap(size_, other->size_);
    std::swap(offset_index_, other->offset_index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string GetPostListRequest::GetTypeName() const {
  return "weizhu.community.GetPostListRequest";
}


// ===================================================================

#ifndef _MSC_VER
const int GetPostListResponse::kPostFieldNumber;
const int GetPostListResponse::kHasMoreFieldNumber;
const int GetPostListResponse::kOffsetIndexFieldNumber;
#endif  // !_MSC_VER

GetPostListResponse::GetPostListResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:weizhu.community.GetPostListResponse)
}

void GetPostListResponse::InitAsDefaultInstance() {
}

GetPostListResponse::GetPostListResponse(const GetPostListResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:weizhu.community.GetPostListResponse)
}

void GetPostListResponse::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  has_more_ = false;
  offset_index_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetPostListResponse::~GetPostListResponse() {
  // @@protoc_insertion_point(destructor:weizhu.community.GetPostListResponse)
  SharedDtor();
}

void GetPostListResponse::SharedDtor() {
  if (offset_index_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete offset_index_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void GetPostListResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GetPostListResponse& GetPostListResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_community_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_community_2eproto();
#endif
  return *default_instance_;
}

GetPostListResponse* GetPostListResponse::default_instance_ = NULL;

GetPostListResponse* GetPostListResponse::New() const {
  return new GetPostListResponse;
}

void GetPostListResponse::Clear() {
  if (_has_bits_[0 / 32] & 6) {
    has_more_ = false;
    if (has_offset_index()) {
      if (offset_index_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        offset_index_->clear();
      }
    }
  }
  post_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool GetPostListResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:weizhu.community.GetPostListResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .weizhu.community.Post post = 1;
      case 1: {
        if (tag == 10) {
         parse_post:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_post()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_post;
        if (input->ExpectTag(16)) goto parse_has_more;
        break;
      }

      // required bool has_more = 2;
      case 2: {
        if (tag == 16) {
         parse_has_more:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &has_more_)));
          set_has_has_more();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_offset_index;
        break;
      }

      // required bytes offset_index = 3;
      case 3: {
        if (tag == 26) {
         parse_offset_index:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_offset_index()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:weizhu.community.GetPostListResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:weizhu.community.GetPostListResponse)
  return false;
#undef DO_
}

void GetPostListResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:weizhu.community.GetPostListResponse)
  // repeated .weizhu.community.Post post = 1;
  for (int i = 0; i < this->post_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->post(i), output);
  }

  // required bool has_more = 2;
  if (has_has_more()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->has_more(), output);
  }

  // required bytes offset_index = 3;
  if (has_offset_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->offset_index(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:weizhu.community.GetPostListResponse)
}

int GetPostListResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // required bool has_more = 2;
    if (has_has_more()) {
      total_size += 1 + 1;
    }

    // required bytes offset_index = 3;
    if (has_offset_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->offset_index());
    }

  }
  // repeated .weizhu.community.Post post = 1;
  total_size += 1 * this->post_size();
  for (int i = 0; i < this->post_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->post(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetPostListResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GetPostListResponse*>(&from));
}

void GetPostListResponse::MergeFrom(const GetPostListResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  post_.MergeFrom(from.post_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_has_more()) {
      set_has_more(from.has_more());
    }
    if (from.has_offset_index()) {
      set_offset_index(from.offset_index());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void GetPostListResponse::CopyFrom(const GetPostListResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetPostListResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000006) != 0x00000006) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->post())) return false;
  return true;
}

void GetPostListResponse::Swap(GetPostListResponse* other) {
  if (other != this) {
    post_.Swap(&other->post_);
    std::swap(has_more_, other->has_more_);
    std::swap(offset_index_, other->offset_index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string GetPostListResponse::GetTypeName() const {
  return "weizhu.community.GetPostListResponse";
}


// ===================================================================

#ifndef _MSC_VER
const int GetCommentListRequest::kPostIdFieldNumber;
const int GetCommentListRequest::kSizeFieldNumber;
const int GetCommentListRequest::kOffsetIndexFieldNumber;
#endif  // !_MSC_VER

GetCommentListRequest::GetCommentListRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:weizhu.community.GetCommentListRequest)
}

void GetCommentListRequest::InitAsDefaultInstance() {
}

GetCommentListRequest::GetCommentListRequest(const GetCommentListRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:weizhu.community.GetCommentListRequest)
}

void GetCommentListRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  post_id_ = 0;
  size_ = 0;
  offset_index_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetCommentListRequest::~GetCommentListRequest() {
  // @@protoc_insertion_point(destructor:weizhu.community.GetCommentListRequest)
  SharedDtor();
}

void GetCommentListRequest::SharedDtor() {
  if (offset_index_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete offset_index_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void GetCommentListRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GetCommentListRequest& GetCommentListRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_community_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_community_2eproto();
#endif
  return *default_instance_;
}

GetCommentListRequest* GetCommentListRequest::default_instance_ = NULL;

GetCommentListRequest* GetCommentListRequest::New() const {
  return new GetCommentListRequest;
}

void GetCommentListRequest::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GetCommentListRequest*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(post_id_, size_);
    if (has_offset_index()) {
      if (offset_index_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        offset_index_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool GetCommentListRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:weizhu.community.GetCommentListRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 post_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &post_id_)));
          set_has_post_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_size;
        break;
      }

      // required int32 size = 2;
      case 2: {
        if (tag == 16) {
         parse_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &size_)));
          set_has_size();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_offset_index;
        break;
      }

      // optional bytes offset_index = 3;
      case 3: {
        if (tag == 26) {
         parse_offset_index:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_offset_index()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:weizhu.community.GetCommentListRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:weizhu.community.GetCommentListRequest)
  return false;
#undef DO_
}

void GetCommentListRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:weizhu.community.GetCommentListRequest)
  // required int32 post_id = 1;
  if (has_post_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->post_id(), output);
  }

  // required int32 size = 2;
  if (has_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->size(), output);
  }

  // optional bytes offset_index = 3;
  if (has_offset_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->offset_index(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:weizhu.community.GetCommentListRequest)
}

int GetCommentListRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 post_id = 1;
    if (has_post_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->post_id());
    }

    // required int32 size = 2;
    if (has_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->size());
    }

    // optional bytes offset_index = 3;
    if (has_offset_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->offset_index());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetCommentListRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GetCommentListRequest*>(&from));
}

void GetCommentListRequest::MergeFrom(const GetCommentListRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_post_id()) {
      set_post_id(from.post_id());
    }
    if (from.has_size()) {
      set_size(from.size());
    }
    if (from.has_offset_index()) {
      set_offset_index(from.offset_index());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void GetCommentListRequest::CopyFrom(const GetCommentListRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetCommentListRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void GetCommentListRequest::Swap(GetCommentListRequest* other) {
  if (other != this) {
    std::swap(post_id_, other->post_id_);
    std::swap(size_, other->size_);
    std::swap(offset_index_, other->offset_index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string GetCommentListRequest::GetTypeName() const {
  return "weizhu.community.GetCommentListRequest";
}


// ===================================================================

#ifndef _MSC_VER
const int GetCommentListResponse::kCommentFieldNumber;
const int GetCommentListResponse::kHasMoreFieldNumber;
const int GetCommentListResponse::kOffsetIndexFieldNumber;
#endif  // !_MSC_VER

GetCommentListResponse::GetCommentListResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:weizhu.community.GetCommentListResponse)
}

void GetCommentListResponse::InitAsDefaultInstance() {
}

GetCommentListResponse::GetCommentListResponse(const GetCommentListResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:weizhu.community.GetCommentListResponse)
}

void GetCommentListResponse::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  has_more_ = false;
  offset_index_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetCommentListResponse::~GetCommentListResponse() {
  // @@protoc_insertion_point(destructor:weizhu.community.GetCommentListResponse)
  SharedDtor();
}

void GetCommentListResponse::SharedDtor() {
  if (offset_index_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete offset_index_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void GetCommentListResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GetCommentListResponse& GetCommentListResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_community_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_community_2eproto();
#endif
  return *default_instance_;
}

GetCommentListResponse* GetCommentListResponse::default_instance_ = NULL;

GetCommentListResponse* GetCommentListResponse::New() const {
  return new GetCommentListResponse;
}

void GetCommentListResponse::Clear() {
  if (_has_bits_[0 / 32] & 6) {
    has_more_ = false;
    if (has_offset_index()) {
      if (offset_index_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        offset_index_->clear();
      }
    }
  }
  comment_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool GetCommentListResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:weizhu.community.GetCommentListResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .weizhu.community.Comment comment = 1;
      case 1: {
        if (tag == 10) {
         parse_comment:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_comment()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_comment;
        if (input->ExpectTag(16)) goto parse_has_more;
        break;
      }

      // required bool has_more = 2;
      case 2: {
        if (tag == 16) {
         parse_has_more:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &has_more_)));
          set_has_has_more();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_offset_index;
        break;
      }

      // required bytes offset_index = 3;
      case 3: {
        if (tag == 26) {
         parse_offset_index:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_offset_index()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:weizhu.community.GetCommentListResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:weizhu.community.GetCommentListResponse)
  return false;
#undef DO_
}

void GetCommentListResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:weizhu.community.GetCommentListResponse)
  // repeated .weizhu.community.Comment comment = 1;
  for (int i = 0; i < this->comment_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->comment(i), output);
  }

  // required bool has_more = 2;
  if (has_has_more()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->has_more(), output);
  }

  // required bytes offset_index = 3;
  if (has_offset_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->offset_index(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:weizhu.community.GetCommentListResponse)
}

int GetCommentListResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // required bool has_more = 2;
    if (has_has_more()) {
      total_size += 1 + 1;
    }

    // required bytes offset_index = 3;
    if (has_offset_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->offset_index());
    }

  }
  // repeated .weizhu.community.Comment comment = 1;
  total_size += 1 * this->comment_size();
  for (int i = 0; i < this->comment_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->comment(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetCommentListResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GetCommentListResponse*>(&from));
}

void GetCommentListResponse::MergeFrom(const GetCommentListResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  comment_.MergeFrom(from.comment_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_has_more()) {
      set_has_more(from.has_more());
    }
    if (from.has_offset_index()) {
      set_offset_index(from.offset_index());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void GetCommentListResponse::CopyFrom(const GetCommentListResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetCommentListResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000006) != 0x00000006) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->comment())) return false;
  return true;
}

void GetCommentListResponse::Swap(GetCommentListResponse* other) {
  if (other != this) {
    comment_.Swap(&other->comment_);
    std::swap(has_more_, other->has_more_);
    std::swap(offset_index_, other->offset_index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string GetCommentListResponse::GetTypeName() const {
  return "weizhu.community.GetCommentListResponse";
}


// ===================================================================

#ifndef _MSC_VER
const int GetHotCommentListRequest::kPostIdFieldNumber;
#endif  // !_MSC_VER

GetHotCommentListRequest::GetHotCommentListRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:weizhu.community.GetHotCommentListRequest)
}

void GetHotCommentListRequest::InitAsDefaultInstance() {
}

GetHotCommentListRequest::GetHotCommentListRequest(const GetHotCommentListRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:weizhu.community.GetHotCommentListRequest)
}

void GetHotCommentListRequest::SharedCtor() {
  _cached_size_ = 0;
  post_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetHotCommentListRequest::~GetHotCommentListRequest() {
  // @@protoc_insertion_point(destructor:weizhu.community.GetHotCommentListRequest)
  SharedDtor();
}

void GetHotCommentListRequest::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void GetHotCommentListRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GetHotCommentListRequest& GetHotCommentListRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_community_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_community_2eproto();
#endif
  return *default_instance_;
}

GetHotCommentListRequest* GetHotCommentListRequest::default_instance_ = NULL;

GetHotCommentListRequest* GetHotCommentListRequest::New() const {
  return new GetHotCommentListRequest;
}

void GetHotCommentListRequest::Clear() {
  post_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool GetHotCommentListRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:weizhu.community.GetHotCommentListRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 post_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &post_id_)));
          set_has_post_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:weizhu.community.GetHotCommentListRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:weizhu.community.GetHotCommentListRequest)
  return false;
#undef DO_
}

void GetHotCommentListRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:weizhu.community.GetHotCommentListRequest)
  // required int32 post_id = 1;
  if (has_post_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->post_id(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:weizhu.community.GetHotCommentListRequest)
}

int GetHotCommentListRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 post_id = 1;
    if (has_post_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->post_id());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetHotCommentListRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GetHotCommentListRequest*>(&from));
}

void GetHotCommentListRequest::MergeFrom(const GetHotCommentListRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_post_id()) {
      set_post_id(from.post_id());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void GetHotCommentListRequest::CopyFrom(const GetHotCommentListRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetHotCommentListRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GetHotCommentListRequest::Swap(GetHotCommentListRequest* other) {
  if (other != this) {
    std::swap(post_id_, other->post_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string GetHotCommentListRequest::GetTypeName() const {
  return "weizhu.community.GetHotCommentListRequest";
}


// ===================================================================

#ifndef _MSC_VER
const int GetHotCommentListResponse::kCommentFieldNumber;
#endif  // !_MSC_VER

GetHotCommentListResponse::GetHotCommentListResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:weizhu.community.GetHotCommentListResponse)
}

void GetHotCommentListResponse::InitAsDefaultInstance() {
}

GetHotCommentListResponse::GetHotCommentListResponse(const GetHotCommentListResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:weizhu.community.GetHotCommentListResponse)
}

void GetHotCommentListResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetHotCommentListResponse::~GetHotCommentListResponse() {
  // @@protoc_insertion_point(destructor:weizhu.community.GetHotCommentListResponse)
  SharedDtor();
}

void GetHotCommentListResponse::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void GetHotCommentListResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GetHotCommentListResponse& GetHotCommentListResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_community_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_community_2eproto();
#endif
  return *default_instance_;
}

GetHotCommentListResponse* GetHotCommentListResponse::default_instance_ = NULL;

GetHotCommentListResponse* GetHotCommentListResponse::New() const {
  return new GetHotCommentListResponse;
}

void GetHotCommentListResponse::Clear() {
  comment_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool GetHotCommentListResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:weizhu.community.GetHotCommentListResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .weizhu.community.Comment comment = 1;
      case 1: {
        if (tag == 10) {
         parse_comment:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_comment()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_comment;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:weizhu.community.GetHotCommentListResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:weizhu.community.GetHotCommentListResponse)
  return false;
#undef DO_
}

void GetHotCommentListResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:weizhu.community.GetHotCommentListResponse)
  // repeated .weizhu.community.Comment comment = 1;
  for (int i = 0; i < this->comment_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->comment(i), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:weizhu.community.GetHotCommentListResponse)
}

int GetHotCommentListResponse::ByteSize() const {
  int total_size = 0;

  // repeated .weizhu.community.Comment comment = 1;
  total_size += 1 * this->comment_size();
  for (int i = 0; i < this->comment_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->comment(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetHotCommentListResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GetHotCommentListResponse*>(&from));
}

void GetHotCommentListResponse::MergeFrom(const GetHotCommentListResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  comment_.MergeFrom(from.comment_);
  mutable_unknown_fields()->append(from.unknown_fields());
}

void GetHotCommentListResponse::CopyFrom(const GetHotCommentListResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetHotCommentListResponse::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->comment())) return false;
  return true;
}

void GetHotCommentListResponse::Swap(GetHotCommentListResponse* other) {
  if (other != this) {
    comment_.Swap(&other->comment_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string GetHotCommentListResponse::GetTypeName() const {
  return "weizhu.community.GetHotCommentListResponse";
}


// ===================================================================

#ifndef _MSC_VER
const int CreatePostRequest::kBoardIdFieldNumber;
const int CreatePostRequest::kTitleFieldNumber;
const int CreatePostRequest::kTextFieldNumber;
const int CreatePostRequest::kImageNameFieldNumber;
const int CreatePostRequest::kTagFieldNumber;
#endif  // !_MSC_VER

CreatePostRequest::CreatePostRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:weizhu.community.CreatePostRequest)
}

void CreatePostRequest::InitAsDefaultInstance() {
}

CreatePostRequest::CreatePostRequest(const CreatePostRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:weizhu.community.CreatePostRequest)
}

void CreatePostRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  board_id_ = 0;
  title_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  text_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  image_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CreatePostRequest::~CreatePostRequest() {
  // @@protoc_insertion_point(destructor:weizhu.community.CreatePostRequest)
  SharedDtor();
}

void CreatePostRequest::SharedDtor() {
  if (title_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete title_;
  }
  if (text_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete text_;
  }
  if (image_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete image_name_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CreatePostRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CreatePostRequest& CreatePostRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_community_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_community_2eproto();
#endif
  return *default_instance_;
}

CreatePostRequest* CreatePostRequest::default_instance_ = NULL;

CreatePostRequest* CreatePostRequest::New() const {
  return new CreatePostRequest;
}

void CreatePostRequest::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    board_id_ = 0;
    if (has_title()) {
      if (title_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        title_->clear();
      }
    }
    if (has_text()) {
      if (text_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        text_->clear();
      }
    }
    if (has_image_name()) {
      if (image_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        image_name_->clear();
      }
    }
  }
  tag_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool CreatePostRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:weizhu.community.CreatePostRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 board_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &board_id_)));
          set_has_board_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_title;
        break;
      }

      // required string title = 2;
      case 2: {
        if (tag == 18) {
         parse_title:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_title()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_text;
        break;
      }

      // optional string text = 3;
      case 3: {
        if (tag == 26) {
         parse_text:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_text()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_image_name;
        break;
      }

      // optional string image_name = 4;
      case 4: {
        if (tag == 34) {
         parse_image_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_image_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_tag;
        break;
      }

      // repeated string tag = 5;
      case 5: {
        if (tag == 42) {
         parse_tag:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_tag()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_tag;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:weizhu.community.CreatePostRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:weizhu.community.CreatePostRequest)
  return false;
#undef DO_
}

void CreatePostRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:weizhu.community.CreatePostRequest)
  // required int32 board_id = 1;
  if (has_board_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->board_id(), output);
  }

  // required string title = 2;
  if (has_title()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->title(), output);
  }

  // optional string text = 3;
  if (has_text()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->text(), output);
  }

  // optional string image_name = 4;
  if (has_image_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->image_name(), output);
  }

  // repeated string tag = 5;
  for (int i = 0; i < this->tag_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->tag(i), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:weizhu.community.CreatePostRequest)
}

int CreatePostRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 board_id = 1;
    if (has_board_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->board_id());
    }

    // required string title = 2;
    if (has_title()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->title());
    }

    // optional string text = 3;
    if (has_text()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->text());
    }

    // optional string image_name = 4;
    if (has_image_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->image_name());
    }

  }
  // repeated string tag = 5;
  total_size += 1 * this->tag_size();
  for (int i = 0; i < this->tag_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->tag(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CreatePostRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CreatePostRequest*>(&from));
}

void CreatePostRequest::MergeFrom(const CreatePostRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  tag_.MergeFrom(from.tag_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_board_id()) {
      set_board_id(from.board_id());
    }
    if (from.has_title()) {
      set_title(from.title());
    }
    if (from.has_text()) {
      set_text(from.text());
    }
    if (from.has_image_name()) {
      set_image_name(from.image_name());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void CreatePostRequest::CopyFrom(const CreatePostRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreatePostRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void CreatePostRequest::Swap(CreatePostRequest* other) {
  if (other != this) {
    std::swap(board_id_, other->board_id_);
    std::swap(title_, other->title_);
    std::swap(text_, other->text_);
    std::swap(image_name_, other->image_name_);
    tag_.Swap(&other->tag_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CreatePostRequest::GetTypeName() const {
  return "weizhu.community.CreatePostRequest";
}


// ===================================================================

bool CreatePostResponse_Result_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 99:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const CreatePostResponse_Result CreatePostResponse::SUCC;
const CreatePostResponse_Result CreatePostResponse::FAIL_BOARD_INVALID;
const CreatePostResponse_Result CreatePostResponse::FAIL_TITLE_INVALID;
const CreatePostResponse_Result CreatePostResponse::FAIL_TEXT_INVALID;
const CreatePostResponse_Result CreatePostResponse::FAIL_IMAGE_INVALID;
const CreatePostResponse_Result CreatePostResponse::FAIL_TAG_INVALID;
const CreatePostResponse_Result CreatePostResponse::FAIL_UNKNOWN;
const CreatePostResponse_Result CreatePostResponse::Result_MIN;
const CreatePostResponse_Result CreatePostResponse::Result_MAX;
const int CreatePostResponse::Result_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int CreatePostResponse::kResultFieldNumber;
const int CreatePostResponse::kFailTextFieldNumber;
const int CreatePostResponse::kPostIdFieldNumber;
#endif  // !_MSC_VER

CreatePostResponse::CreatePostResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:weizhu.community.CreatePostResponse)
}

void CreatePostResponse::InitAsDefaultInstance() {
}

CreatePostResponse::CreatePostResponse(const CreatePostResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:weizhu.community.CreatePostResponse)
}

void CreatePostResponse::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  result_ = 99;
  fail_text_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  post_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CreatePostResponse::~CreatePostResponse() {
  // @@protoc_insertion_point(destructor:weizhu.community.CreatePostResponse)
  SharedDtor();
}

void CreatePostResponse::SharedDtor() {
  if (fail_text_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete fail_text_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CreatePostResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CreatePostResponse& CreatePostResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_community_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_community_2eproto();
#endif
  return *default_instance_;
}

CreatePostResponse* CreatePostResponse::default_instance_ = NULL;

CreatePostResponse* CreatePostResponse::New() const {
  return new CreatePostResponse;
}

void CreatePostResponse::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    result_ = 99;
    if (has_fail_text()) {
      if (fail_text_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        fail_text_->clear();
      }
    }
    post_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool CreatePostResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:weizhu.community.CreatePostResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .weizhu.community.CreatePostResponse.Result result = 1 [default = FAIL_UNKNOWN];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::weizhu::community::CreatePostResponse_Result_IsValid(value)) {
            set_result(static_cast< ::weizhu::community::CreatePostResponse_Result >(value));
          } else {
            unknown_fields_stream.WriteVarint32(tag);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_fail_text;
        break;
      }

      // optional string fail_text = 2;
      case 2: {
        if (tag == 18) {
         parse_fail_text:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fail_text()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_post_id;
        break;
      }

      // optional int32 post_id = 3;
      case 3: {
        if (tag == 24) {
         parse_post_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &post_id_)));
          set_has_post_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:weizhu.community.CreatePostResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:weizhu.community.CreatePostResponse)
  return false;
#undef DO_
}

void CreatePostResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:weizhu.community.CreatePostResponse)
  // optional .weizhu.community.CreatePostResponse.Result result = 1 [default = FAIL_UNKNOWN];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  // optional string fail_text = 2;
  if (has_fail_text()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->fail_text(), output);
  }

  // optional int32 post_id = 3;
  if (has_post_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->post_id(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:weizhu.community.CreatePostResponse)
}

int CreatePostResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .weizhu.community.CreatePostResponse.Result result = 1 [default = FAIL_UNKNOWN];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

    // optional string fail_text = 2;
    if (has_fail_text()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->fail_text());
    }

    // optional int32 post_id = 3;
    if (has_post_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->post_id());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CreatePostResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CreatePostResponse*>(&from));
}

void CreatePostResponse::MergeFrom(const CreatePostResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_fail_text()) {
      set_fail_text(from.fail_text());
    }
    if (from.has_post_id()) {
      set_post_id(from.post_id());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void CreatePostResponse::CopyFrom(const CreatePostResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreatePostResponse::IsInitialized() const {

  return true;
}

void CreatePostResponse::Swap(CreatePostResponse* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(fail_text_, other->fail_text_);
    std::swap(post_id_, other->post_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CreatePostResponse::GetTypeName() const {
  return "weizhu.community.CreatePostResponse";
}


// ===================================================================

#ifndef _MSC_VER
const int DeletePostRequest::kPostIdFieldNumber;
#endif  // !_MSC_VER

DeletePostRequest::DeletePostRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:weizhu.community.DeletePostRequest)
}

void DeletePostRequest::InitAsDefaultInstance() {
}

DeletePostRequest::DeletePostRequest(const DeletePostRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:weizhu.community.DeletePostRequest)
}

void DeletePostRequest::SharedCtor() {
  _cached_size_ = 0;
  post_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DeletePostRequest::~DeletePostRequest() {
  // @@protoc_insertion_point(destructor:weizhu.community.DeletePostRequest)
  SharedDtor();
}

void DeletePostRequest::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void DeletePostRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const DeletePostRequest& DeletePostRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_community_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_community_2eproto();
#endif
  return *default_instance_;
}

DeletePostRequest* DeletePostRequest::default_instance_ = NULL;

DeletePostRequest* DeletePostRequest::New() const {
  return new DeletePostRequest;
}

void DeletePostRequest::Clear() {
  post_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool DeletePostRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:weizhu.community.DeletePostRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 post_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &post_id_)));
          set_has_post_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:weizhu.community.DeletePostRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:weizhu.community.DeletePostRequest)
  return false;
#undef DO_
}

void DeletePostRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:weizhu.community.DeletePostRequest)
  // required int32 post_id = 1;
  if (has_post_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->post_id(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:weizhu.community.DeletePostRequest)
}

int DeletePostRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 post_id = 1;
    if (has_post_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->post_id());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeletePostRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const DeletePostRequest*>(&from));
}

void DeletePostRequest::MergeFrom(const DeletePostRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_post_id()) {
      set_post_id(from.post_id());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void DeletePostRequest::CopyFrom(const DeletePostRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeletePostRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void DeletePostRequest::Swap(DeletePostRequest* other) {
  if (other != this) {
    std::swap(post_id_, other->post_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string DeletePostRequest::GetTypeName() const {
  return "weizhu.community.DeletePostRequest";
}


// ===================================================================

bool DeletePostResponse_Result_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 99:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const DeletePostResponse_Result DeletePostResponse::SUCC;
const DeletePostResponse_Result DeletePostResponse::FAIL_POST_NOT_EXIST;
const DeletePostResponse_Result DeletePostResponse::FAIL_POST_OTHER;
const DeletePostResponse_Result DeletePostResponse::FAIL_UNKNOWN;
const DeletePostResponse_Result DeletePostResponse::Result_MIN;
const DeletePostResponse_Result DeletePostResponse::Result_MAX;
const int DeletePostResponse::Result_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int DeletePostResponse::kResultFieldNumber;
const int DeletePostResponse::kFailTextFieldNumber;
#endif  // !_MSC_VER

DeletePostResponse::DeletePostResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:weizhu.community.DeletePostResponse)
}

void DeletePostResponse::InitAsDefaultInstance() {
}

DeletePostResponse::DeletePostResponse(const DeletePostResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:weizhu.community.DeletePostResponse)
}

void DeletePostResponse::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  result_ = 99;
  fail_text_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DeletePostResponse::~DeletePostResponse() {
  // @@protoc_insertion_point(destructor:weizhu.community.DeletePostResponse)
  SharedDtor();
}

void DeletePostResponse::SharedDtor() {
  if (fail_text_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete fail_text_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void DeletePostResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const DeletePostResponse& DeletePostResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_community_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_community_2eproto();
#endif
  return *default_instance_;
}

DeletePostResponse* DeletePostResponse::default_instance_ = NULL;

DeletePostResponse* DeletePostResponse::New() const {
  return new DeletePostResponse;
}

void DeletePostResponse::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    result_ = 99;
    if (has_fail_text()) {
      if (fail_text_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        fail_text_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool DeletePostResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:weizhu.community.DeletePostResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .weizhu.community.DeletePostResponse.Result result = 1 [default = FAIL_UNKNOWN];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::weizhu::community::DeletePostResponse_Result_IsValid(value)) {
            set_result(static_cast< ::weizhu::community::DeletePostResponse_Result >(value));
          } else {
            unknown_fields_stream.WriteVarint32(tag);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_fail_text;
        break;
      }

      // optional string fail_text = 2;
      case 2: {
        if (tag == 18) {
         parse_fail_text:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fail_text()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:weizhu.community.DeletePostResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:weizhu.community.DeletePostResponse)
  return false;
#undef DO_
}

void DeletePostResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:weizhu.community.DeletePostResponse)
  // optional .weizhu.community.DeletePostResponse.Result result = 1 [default = FAIL_UNKNOWN];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  // optional string fail_text = 2;
  if (has_fail_text()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->fail_text(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:weizhu.community.DeletePostResponse)
}

int DeletePostResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .weizhu.community.DeletePostResponse.Result result = 1 [default = FAIL_UNKNOWN];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

    // optional string fail_text = 2;
    if (has_fail_text()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->fail_text());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeletePostResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const DeletePostResponse*>(&from));
}

void DeletePostResponse::MergeFrom(const DeletePostResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_fail_text()) {
      set_fail_text(from.fail_text());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void DeletePostResponse::CopyFrom(const DeletePostResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeletePostResponse::IsInitialized() const {

  return true;
}

void DeletePostResponse::Swap(DeletePostResponse* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(fail_text_, other->fail_text_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string DeletePostResponse::GetTypeName() const {
  return "weizhu.community.DeletePostResponse";
}


// ===================================================================

#ifndef _MSC_VER
const int LikePostRequest::kPostIdFieldNumber;
const int LikePostRequest::kIsLikeFieldNumber;
#endif  // !_MSC_VER

LikePostRequest::LikePostRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:weizhu.community.LikePostRequest)
}

void LikePostRequest::InitAsDefaultInstance() {
}

LikePostRequest::LikePostRequest(const LikePostRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:weizhu.community.LikePostRequest)
}

void LikePostRequest::SharedCtor() {
  _cached_size_ = 0;
  post_id_ = 0;
  is_like_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LikePostRequest::~LikePostRequest() {
  // @@protoc_insertion_point(destructor:weizhu.community.LikePostRequest)
  SharedDtor();
}

void LikePostRequest::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void LikePostRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const LikePostRequest& LikePostRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_community_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_community_2eproto();
#endif
  return *default_instance_;
}

LikePostRequest* LikePostRequest::default_instance_ = NULL;

LikePostRequest* LikePostRequest::New() const {
  return new LikePostRequest;
}

void LikePostRequest::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<LikePostRequest*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(post_id_, is_like_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool LikePostRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:weizhu.community.LikePostRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 post_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &post_id_)));
          set_has_post_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_is_like;
        break;
      }

      // required bool is_like = 2;
      case 2: {
        if (tag == 16) {
         parse_is_like:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_like_)));
          set_has_is_like();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:weizhu.community.LikePostRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:weizhu.community.LikePostRequest)
  return false;
#undef DO_
}

void LikePostRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:weizhu.community.LikePostRequest)
  // required int32 post_id = 1;
  if (has_post_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->post_id(), output);
  }

  // required bool is_like = 2;
  if (has_is_like()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->is_like(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:weizhu.community.LikePostRequest)
}

int LikePostRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 post_id = 1;
    if (has_post_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->post_id());
    }

    // required bool is_like = 2;
    if (has_is_like()) {
      total_size += 1 + 1;
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LikePostRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const LikePostRequest*>(&from));
}

void LikePostRequest::MergeFrom(const LikePostRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_post_id()) {
      set_post_id(from.post_id());
    }
    if (from.has_is_like()) {
      set_is_like(from.is_like());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void LikePostRequest::CopyFrom(const LikePostRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LikePostRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void LikePostRequest::Swap(LikePostRequest* other) {
  if (other != this) {
    std::swap(post_id_, other->post_id_);
    std::swap(is_like_, other->is_like_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string LikePostRequest::GetTypeName() const {
  return "weizhu.community.LikePostRequest";
}


// ===================================================================

bool LikePostResponse_Result_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 99:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const LikePostResponse_Result LikePostResponse::SUCC;
const LikePostResponse_Result LikePostResponse::FAIL_POST_NOT_EXIST;
const LikePostResponse_Result LikePostResponse::FAIL_UNKNOWN;
const LikePostResponse_Result LikePostResponse::Result_MIN;
const LikePostResponse_Result LikePostResponse::Result_MAX;
const int LikePostResponse::Result_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int LikePostResponse::kResultFieldNumber;
const int LikePostResponse::kFailTextFieldNumber;
#endif  // !_MSC_VER

LikePostResponse::LikePostResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:weizhu.community.LikePostResponse)
}

void LikePostResponse::InitAsDefaultInstance() {
}

LikePostResponse::LikePostResponse(const LikePostResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:weizhu.community.LikePostResponse)
}

void LikePostResponse::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  result_ = 99;
  fail_text_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LikePostResponse::~LikePostResponse() {
  // @@protoc_insertion_point(destructor:weizhu.community.LikePostResponse)
  SharedDtor();
}

void LikePostResponse::SharedDtor() {
  if (fail_text_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete fail_text_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void LikePostResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const LikePostResponse& LikePostResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_community_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_community_2eproto();
#endif
  return *default_instance_;
}

LikePostResponse* LikePostResponse::default_instance_ = NULL;

LikePostResponse* LikePostResponse::New() const {
  return new LikePostResponse;
}

void LikePostResponse::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    result_ = 99;
    if (has_fail_text()) {
      if (fail_text_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        fail_text_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool LikePostResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:weizhu.community.LikePostResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .weizhu.community.LikePostResponse.Result result = 1 [default = FAIL_UNKNOWN];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::weizhu::community::LikePostResponse_Result_IsValid(value)) {
            set_result(static_cast< ::weizhu::community::LikePostResponse_Result >(value));
          } else {
            unknown_fields_stream.WriteVarint32(tag);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_fail_text;
        break;
      }

      // optional string fail_text = 2;
      case 2: {
        if (tag == 18) {
         parse_fail_text:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fail_text()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:weizhu.community.LikePostResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:weizhu.community.LikePostResponse)
  return false;
#undef DO_
}

void LikePostResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:weizhu.community.LikePostResponse)
  // optional .weizhu.community.LikePostResponse.Result result = 1 [default = FAIL_UNKNOWN];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  // optional string fail_text = 2;
  if (has_fail_text()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->fail_text(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:weizhu.community.LikePostResponse)
}

int LikePostResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .weizhu.community.LikePostResponse.Result result = 1 [default = FAIL_UNKNOWN];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

    // optional string fail_text = 2;
    if (has_fail_text()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->fail_text());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LikePostResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const LikePostResponse*>(&from));
}

void LikePostResponse::MergeFrom(const LikePostResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_fail_text()) {
      set_fail_text(from.fail_text());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void LikePostResponse::CopyFrom(const LikePostResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LikePostResponse::IsInitialized() const {

  return true;
}

void LikePostResponse::Swap(LikePostResponse* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(fail_text_, other->fail_text_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string LikePostResponse::GetTypeName() const {
  return "weizhu.community.LikePostResponse";
}


// ===================================================================

#ifndef _MSC_VER
const int CreateCommentRequest::kPostIdFieldNumber;
const int CreateCommentRequest::kReplyCommentIdFieldNumber;
const int CreateCommentRequest::kContentFieldNumber;
#endif  // !_MSC_VER

CreateCommentRequest::CreateCommentRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:weizhu.community.CreateCommentRequest)
}

void CreateCommentRequest::InitAsDefaultInstance() {
}

CreateCommentRequest::CreateCommentRequest(const CreateCommentRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:weizhu.community.CreateCommentRequest)
}

void CreateCommentRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  post_id_ = 0;
  reply_comment_id_ = 0;
  content_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CreateCommentRequest::~CreateCommentRequest() {
  // @@protoc_insertion_point(destructor:weizhu.community.CreateCommentRequest)
  SharedDtor();
}

void CreateCommentRequest::SharedDtor() {
  if (content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete content_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CreateCommentRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CreateCommentRequest& CreateCommentRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_community_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_community_2eproto();
#endif
  return *default_instance_;
}

CreateCommentRequest* CreateCommentRequest::default_instance_ = NULL;

CreateCommentRequest* CreateCommentRequest::New() const {
  return new CreateCommentRequest;
}

void CreateCommentRequest::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CreateCommentRequest*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(post_id_, reply_comment_id_);
    if (has_content()) {
      if (content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        content_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool CreateCommentRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:weizhu.community.CreateCommentRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 post_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &post_id_)));
          set_has_post_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_reply_comment_id;
        break;
      }

      // optional int32 reply_comment_id = 2;
      case 2: {
        if (tag == 16) {
         parse_reply_comment_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reply_comment_id_)));
          set_has_reply_comment_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_content;
        break;
      }

      // required string content = 3;
      case 3: {
        if (tag == 26) {
         parse_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_content()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:weizhu.community.CreateCommentRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:weizhu.community.CreateCommentRequest)
  return false;
#undef DO_
}

void CreateCommentRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:weizhu.community.CreateCommentRequest)
  // required int32 post_id = 1;
  if (has_post_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->post_id(), output);
  }

  // optional int32 reply_comment_id = 2;
  if (has_reply_comment_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->reply_comment_id(), output);
  }

  // required string content = 3;
  if (has_content()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->content(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:weizhu.community.CreateCommentRequest)
}

int CreateCommentRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 post_id = 1;
    if (has_post_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->post_id());
    }

    // optional int32 reply_comment_id = 2;
    if (has_reply_comment_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reply_comment_id());
    }

    // required string content = 3;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->content());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CreateCommentRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CreateCommentRequest*>(&from));
}

void CreateCommentRequest::MergeFrom(const CreateCommentRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_post_id()) {
      set_post_id(from.post_id());
    }
    if (from.has_reply_comment_id()) {
      set_reply_comment_id(from.reply_comment_id());
    }
    if (from.has_content()) {
      set_content(from.content());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void CreateCommentRequest::CopyFrom(const CreateCommentRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateCommentRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000005) != 0x00000005) return false;

  return true;
}

void CreateCommentRequest::Swap(CreateCommentRequest* other) {
  if (other != this) {
    std::swap(post_id_, other->post_id_);
    std::swap(reply_comment_id_, other->reply_comment_id_);
    std::swap(content_, other->content_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CreateCommentRequest::GetTypeName() const {
  return "weizhu.community.CreateCommentRequest";
}


// ===================================================================

bool CreateCommentResponse_Result_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 99:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const CreateCommentResponse_Result CreateCommentResponse::SUCC;
const CreateCommentResponse_Result CreateCommentResponse::FAIL_POST_NOT_EXIST;
const CreateCommentResponse_Result CreateCommentResponse::FAIL_REPLY_COMMENT_NOT_EXIST;
const CreateCommentResponse_Result CreateCommentResponse::FAIL_CONTENT_INVALID;
const CreateCommentResponse_Result CreateCommentResponse::FAIL_UNKNOWN;
const CreateCommentResponse_Result CreateCommentResponse::Result_MIN;
const CreateCommentResponse_Result CreateCommentResponse::Result_MAX;
const int CreateCommentResponse::Result_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int CreateCommentResponse::kResultFieldNumber;
const int CreateCommentResponse::kFailTextFieldNumber;
const int CreateCommentResponse::kCommentIdFieldNumber;
#endif  // !_MSC_VER

CreateCommentResponse::CreateCommentResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:weizhu.community.CreateCommentResponse)
}

void CreateCommentResponse::InitAsDefaultInstance() {
}

CreateCommentResponse::CreateCommentResponse(const CreateCommentResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:weizhu.community.CreateCommentResponse)
}

void CreateCommentResponse::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  result_ = 99;
  fail_text_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  comment_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CreateCommentResponse::~CreateCommentResponse() {
  // @@protoc_insertion_point(destructor:weizhu.community.CreateCommentResponse)
  SharedDtor();
}

void CreateCommentResponse::SharedDtor() {
  if (fail_text_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete fail_text_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CreateCommentResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CreateCommentResponse& CreateCommentResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_community_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_community_2eproto();
#endif
  return *default_instance_;
}

CreateCommentResponse* CreateCommentResponse::default_instance_ = NULL;

CreateCommentResponse* CreateCommentResponse::New() const {
  return new CreateCommentResponse;
}

void CreateCommentResponse::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    result_ = 99;
    if (has_fail_text()) {
      if (fail_text_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        fail_text_->clear();
      }
    }
    comment_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool CreateCommentResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:weizhu.community.CreateCommentResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .weizhu.community.CreateCommentResponse.Result result = 1 [default = FAIL_UNKNOWN];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::weizhu::community::CreateCommentResponse_Result_IsValid(value)) {
            set_result(static_cast< ::weizhu::community::CreateCommentResponse_Result >(value));
          } else {
            unknown_fields_stream.WriteVarint32(tag);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_fail_text;
        break;
      }

      // optional string fail_text = 2;
      case 2: {
        if (tag == 18) {
         parse_fail_text:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fail_text()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_comment_id;
        break;
      }

      // optional int32 comment_id = 3;
      case 3: {
        if (tag == 24) {
         parse_comment_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &comment_id_)));
          set_has_comment_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:weizhu.community.CreateCommentResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:weizhu.community.CreateCommentResponse)
  return false;
#undef DO_
}

void CreateCommentResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:weizhu.community.CreateCommentResponse)
  // optional .weizhu.community.CreateCommentResponse.Result result = 1 [default = FAIL_UNKNOWN];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  // optional string fail_text = 2;
  if (has_fail_text()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->fail_text(), output);
  }

  // optional int32 comment_id = 3;
  if (has_comment_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->comment_id(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:weizhu.community.CreateCommentResponse)
}

int CreateCommentResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .weizhu.community.CreateCommentResponse.Result result = 1 [default = FAIL_UNKNOWN];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

    // optional string fail_text = 2;
    if (has_fail_text()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->fail_text());
    }

    // optional int32 comment_id = 3;
    if (has_comment_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->comment_id());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CreateCommentResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CreateCommentResponse*>(&from));
}

void CreateCommentResponse::MergeFrom(const CreateCommentResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_fail_text()) {
      set_fail_text(from.fail_text());
    }
    if (from.has_comment_id()) {
      set_comment_id(from.comment_id());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void CreateCommentResponse::CopyFrom(const CreateCommentResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateCommentResponse::IsInitialized() const {

  return true;
}

void CreateCommentResponse::Swap(CreateCommentResponse* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(fail_text_, other->fail_text_);
    std::swap(comment_id_, other->comment_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CreateCommentResponse::GetTypeName() const {
  return "weizhu.community.CreateCommentResponse";
}


// ===================================================================

#ifndef _MSC_VER
const int DeleteCommentRequest::kPostIdFieldNumber;
const int DeleteCommentRequest::kCommentIdFieldNumber;
#endif  // !_MSC_VER

DeleteCommentRequest::DeleteCommentRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:weizhu.community.DeleteCommentRequest)
}

void DeleteCommentRequest::InitAsDefaultInstance() {
}

DeleteCommentRequest::DeleteCommentRequest(const DeleteCommentRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:weizhu.community.DeleteCommentRequest)
}

void DeleteCommentRequest::SharedCtor() {
  _cached_size_ = 0;
  post_id_ = 0;
  comment_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DeleteCommentRequest::~DeleteCommentRequest() {
  // @@protoc_insertion_point(destructor:weizhu.community.DeleteCommentRequest)
  SharedDtor();
}

void DeleteCommentRequest::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void DeleteCommentRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const DeleteCommentRequest& DeleteCommentRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_community_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_community_2eproto();
#endif
  return *default_instance_;
}

DeleteCommentRequest* DeleteCommentRequest::default_instance_ = NULL;

DeleteCommentRequest* DeleteCommentRequest::New() const {
  return new DeleteCommentRequest;
}

void DeleteCommentRequest::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<DeleteCommentRequest*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(post_id_, comment_id_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool DeleteCommentRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:weizhu.community.DeleteCommentRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 post_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &post_id_)));
          set_has_post_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_comment_id;
        break;
      }

      // required int32 comment_id = 2;
      case 2: {
        if (tag == 16) {
         parse_comment_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &comment_id_)));
          set_has_comment_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:weizhu.community.DeleteCommentRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:weizhu.community.DeleteCommentRequest)
  return false;
#undef DO_
}

void DeleteCommentRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:weizhu.community.DeleteCommentRequest)
  // required int32 post_id = 1;
  if (has_post_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->post_id(), output);
  }

  // required int32 comment_id = 2;
  if (has_comment_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->comment_id(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:weizhu.community.DeleteCommentRequest)
}

int DeleteCommentRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 post_id = 1;
    if (has_post_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->post_id());
    }

    // required int32 comment_id = 2;
    if (has_comment_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->comment_id());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeleteCommentRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const DeleteCommentRequest*>(&from));
}

void DeleteCommentRequest::MergeFrom(const DeleteCommentRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_post_id()) {
      set_post_id(from.post_id());
    }
    if (from.has_comment_id()) {
      set_comment_id(from.comment_id());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void DeleteCommentRequest::CopyFrom(const DeleteCommentRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteCommentRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void DeleteCommentRequest::Swap(DeleteCommentRequest* other) {
  if (other != this) {
    std::swap(post_id_, other->post_id_);
    std::swap(comment_id_, other->comment_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string DeleteCommentRequest::GetTypeName() const {
  return "weizhu.community.DeleteCommentRequest";
}


// ===================================================================

bool DeleteCommentResponse_Result_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 99:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const DeleteCommentResponse_Result DeleteCommentResponse::SUCC;
const DeleteCommentResponse_Result DeleteCommentResponse::FAIL_COMMENT_NOT_EXIST;
const DeleteCommentResponse_Result DeleteCommentResponse::FAIL_COMMENT_OTHER;
const DeleteCommentResponse_Result DeleteCommentResponse::FAIL_UNKNOWN;
const DeleteCommentResponse_Result DeleteCommentResponse::Result_MIN;
const DeleteCommentResponse_Result DeleteCommentResponse::Result_MAX;
const int DeleteCommentResponse::Result_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int DeleteCommentResponse::kResultFieldNumber;
const int DeleteCommentResponse::kFailTextFieldNumber;
#endif  // !_MSC_VER

DeleteCommentResponse::DeleteCommentResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:weizhu.community.DeleteCommentResponse)
}

void DeleteCommentResponse::InitAsDefaultInstance() {
}

DeleteCommentResponse::DeleteCommentResponse(const DeleteCommentResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:weizhu.community.DeleteCommentResponse)
}

void DeleteCommentResponse::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  result_ = 99;
  fail_text_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DeleteCommentResponse::~DeleteCommentResponse() {
  // @@protoc_insertion_point(destructor:weizhu.community.DeleteCommentResponse)
  SharedDtor();
}

void DeleteCommentResponse::SharedDtor() {
  if (fail_text_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete fail_text_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void DeleteCommentResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const DeleteCommentResponse& DeleteCommentResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_community_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_community_2eproto();
#endif
  return *default_instance_;
}

DeleteCommentResponse* DeleteCommentResponse::default_instance_ = NULL;

DeleteCommentResponse* DeleteCommentResponse::New() const {
  return new DeleteCommentResponse;
}

void DeleteCommentResponse::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    result_ = 99;
    if (has_fail_text()) {
      if (fail_text_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        fail_text_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool DeleteCommentResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:weizhu.community.DeleteCommentResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .weizhu.community.DeleteCommentResponse.Result result = 1 [default = FAIL_UNKNOWN];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::weizhu::community::DeleteCommentResponse_Result_IsValid(value)) {
            set_result(static_cast< ::weizhu::community::DeleteCommentResponse_Result >(value));
          } else {
            unknown_fields_stream.WriteVarint32(tag);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_fail_text;
        break;
      }

      // optional string fail_text = 2;
      case 2: {
        if (tag == 18) {
         parse_fail_text:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fail_text()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:weizhu.community.DeleteCommentResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:weizhu.community.DeleteCommentResponse)
  return false;
#undef DO_
}

void DeleteCommentResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:weizhu.community.DeleteCommentResponse)
  // optional .weizhu.community.DeleteCommentResponse.Result result = 1 [default = FAIL_UNKNOWN];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  // optional string fail_text = 2;
  if (has_fail_text()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->fail_text(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:weizhu.community.DeleteCommentResponse)
}

int DeleteCommentResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .weizhu.community.DeleteCommentResponse.Result result = 1 [default = FAIL_UNKNOWN];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

    // optional string fail_text = 2;
    if (has_fail_text()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->fail_text());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeleteCommentResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const DeleteCommentResponse*>(&from));
}

void DeleteCommentResponse::MergeFrom(const DeleteCommentResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_fail_text()) {
      set_fail_text(from.fail_text());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void DeleteCommentResponse::CopyFrom(const DeleteCommentResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteCommentResponse::IsInitialized() const {

  return true;
}

void DeleteCommentResponse::Swap(DeleteCommentResponse* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(fail_text_, other->fail_text_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string DeleteCommentResponse::GetTypeName() const {
  return "weizhu.community.DeleteCommentResponse";
}


// ===================================================================

#ifndef _MSC_VER
const int GetMyPostListRequest::kSizeFieldNumber;
const int GetMyPostListRequest::kOffsetIndexFieldNumber;
#endif  // !_MSC_VER

GetMyPostListRequest::GetMyPostListRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:weizhu.community.GetMyPostListRequest)
}

void GetMyPostListRequest::InitAsDefaultInstance() {
}

GetMyPostListRequest::GetMyPostListRequest(const GetMyPostListRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:weizhu.community.GetMyPostListRequest)
}

void GetMyPostListRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  size_ = 0;
  offset_index_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetMyPostListRequest::~GetMyPostListRequest() {
  // @@protoc_insertion_point(destructor:weizhu.community.GetMyPostListRequest)
  SharedDtor();
}

void GetMyPostListRequest::SharedDtor() {
  if (offset_index_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete offset_index_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void GetMyPostListRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GetMyPostListRequest& GetMyPostListRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_community_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_community_2eproto();
#endif
  return *default_instance_;
}

GetMyPostListRequest* GetMyPostListRequest::default_instance_ = NULL;

GetMyPostListRequest* GetMyPostListRequest::New() const {
  return new GetMyPostListRequest;
}

void GetMyPostListRequest::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    size_ = 0;
    if (has_offset_index()) {
      if (offset_index_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        offset_index_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool GetMyPostListRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:weizhu.community.GetMyPostListRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 size = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &size_)));
          set_has_size();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_offset_index;
        break;
      }

      // optional bytes offset_index = 2;
      case 2: {
        if (tag == 18) {
         parse_offset_index:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_offset_index()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:weizhu.community.GetMyPostListRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:weizhu.community.GetMyPostListRequest)
  return false;
#undef DO_
}

void GetMyPostListRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:weizhu.community.GetMyPostListRequest)
  // required int32 size = 1;
  if (has_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->size(), output);
  }

  // optional bytes offset_index = 2;
  if (has_offset_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->offset_index(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:weizhu.community.GetMyPostListRequest)
}

int GetMyPostListRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 size = 1;
    if (has_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->size());
    }

    // optional bytes offset_index = 2;
    if (has_offset_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->offset_index());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetMyPostListRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GetMyPostListRequest*>(&from));
}

void GetMyPostListRequest::MergeFrom(const GetMyPostListRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_size()) {
      set_size(from.size());
    }
    if (from.has_offset_index()) {
      set_offset_index(from.offset_index());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void GetMyPostListRequest::CopyFrom(const GetMyPostListRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetMyPostListRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GetMyPostListRequest::Swap(GetMyPostListRequest* other) {
  if (other != this) {
    std::swap(size_, other->size_);
    std::swap(offset_index_, other->offset_index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string GetMyPostListRequest::GetTypeName() const {
  return "weizhu.community.GetMyPostListRequest";
}


// ===================================================================

#ifndef _MSC_VER
const int GetMyPostListResponse::kPostFieldNumber;
const int GetMyPostListResponse::kHasMoreFieldNumber;
const int GetMyPostListResponse::kOffsetIndexFieldNumber;
#endif  // !_MSC_VER

GetMyPostListResponse::GetMyPostListResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:weizhu.community.GetMyPostListResponse)
}

void GetMyPostListResponse::InitAsDefaultInstance() {
}

GetMyPostListResponse::GetMyPostListResponse(const GetMyPostListResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:weizhu.community.GetMyPostListResponse)
}

void GetMyPostListResponse::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  has_more_ = false;
  offset_index_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetMyPostListResponse::~GetMyPostListResponse() {
  // @@protoc_insertion_point(destructor:weizhu.community.GetMyPostListResponse)
  SharedDtor();
}

void GetMyPostListResponse::SharedDtor() {
  if (offset_index_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete offset_index_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void GetMyPostListResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GetMyPostListResponse& GetMyPostListResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_community_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_community_2eproto();
#endif
  return *default_instance_;
}

GetMyPostListResponse* GetMyPostListResponse::default_instance_ = NULL;

GetMyPostListResponse* GetMyPostListResponse::New() const {
  return new GetMyPostListResponse;
}

void GetMyPostListResponse::Clear() {
  if (_has_bits_[0 / 32] & 6) {
    has_more_ = false;
    if (has_offset_index()) {
      if (offset_index_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        offset_index_->clear();
      }
    }
  }
  post_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool GetMyPostListResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:weizhu.community.GetMyPostListResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .weizhu.community.Post post = 1;
      case 1: {
        if (tag == 10) {
         parse_post:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_post()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_post;
        if (input->ExpectTag(16)) goto parse_has_more;
        break;
      }

      // required bool has_more = 2;
      case 2: {
        if (tag == 16) {
         parse_has_more:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &has_more_)));
          set_has_has_more();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_offset_index;
        break;
      }

      // required bytes offset_index = 3;
      case 3: {
        if (tag == 26) {
         parse_offset_index:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_offset_index()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:weizhu.community.GetMyPostListResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:weizhu.community.GetMyPostListResponse)
  return false;
#undef DO_
}

void GetMyPostListResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:weizhu.community.GetMyPostListResponse)
  // repeated .weizhu.community.Post post = 1;
  for (int i = 0; i < this->post_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->post(i), output);
  }

  // required bool has_more = 2;
  if (has_has_more()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->has_more(), output);
  }

  // required bytes offset_index = 3;
  if (has_offset_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->offset_index(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:weizhu.community.GetMyPostListResponse)
}

int GetMyPostListResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // required bool has_more = 2;
    if (has_has_more()) {
      total_size += 1 + 1;
    }

    // required bytes offset_index = 3;
    if (has_offset_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->offset_index());
    }

  }
  // repeated .weizhu.community.Post post = 1;
  total_size += 1 * this->post_size();
  for (int i = 0; i < this->post_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->post(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetMyPostListResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GetMyPostListResponse*>(&from));
}

void GetMyPostListResponse::MergeFrom(const GetMyPostListResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  post_.MergeFrom(from.post_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_has_more()) {
      set_has_more(from.has_more());
    }
    if (from.has_offset_index()) {
      set_offset_index(from.offset_index());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void GetMyPostListResponse::CopyFrom(const GetMyPostListResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetMyPostListResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000006) != 0x00000006) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->post())) return false;
  return true;
}

void GetMyPostListResponse::Swap(GetMyPostListResponse* other) {
  if (other != this) {
    post_.Swap(&other->post_);
    std::swap(has_more_, other->has_more_);
    std::swap(offset_index_, other->offset_index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string GetMyPostListResponse::GetTypeName() const {
  return "weizhu.community.GetMyPostListResponse";
}


// ===================================================================

#ifndef _MSC_VER
const int GetMyCommentListRequest::kSizeFieldNumber;
const int GetMyCommentListRequest::kOffsetIndexFieldNumber;
#endif  // !_MSC_VER

GetMyCommentListRequest::GetMyCommentListRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:weizhu.community.GetMyCommentListRequest)
}

void GetMyCommentListRequest::InitAsDefaultInstance() {
}

GetMyCommentListRequest::GetMyCommentListRequest(const GetMyCommentListRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:weizhu.community.GetMyCommentListRequest)
}

void GetMyCommentListRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  size_ = 0;
  offset_index_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetMyCommentListRequest::~GetMyCommentListRequest() {
  // @@protoc_insertion_point(destructor:weizhu.community.GetMyCommentListRequest)
  SharedDtor();
}

void GetMyCommentListRequest::SharedDtor() {
  if (offset_index_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete offset_index_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void GetMyCommentListRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GetMyCommentListRequest& GetMyCommentListRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_community_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_community_2eproto();
#endif
  return *default_instance_;
}

GetMyCommentListRequest* GetMyCommentListRequest::default_instance_ = NULL;

GetMyCommentListRequest* GetMyCommentListRequest::New() const {
  return new GetMyCommentListRequest;
}

void GetMyCommentListRequest::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    size_ = 0;
    if (has_offset_index()) {
      if (offset_index_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        offset_index_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool GetMyCommentListRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:weizhu.community.GetMyCommentListRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 size = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &size_)));
          set_has_size();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_offset_index;
        break;
      }

      // optional bytes offset_index = 2;
      case 2: {
        if (tag == 18) {
         parse_offset_index:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_offset_index()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:weizhu.community.GetMyCommentListRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:weizhu.community.GetMyCommentListRequest)
  return false;
#undef DO_
}

void GetMyCommentListRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:weizhu.community.GetMyCommentListRequest)
  // required int32 size = 1;
  if (has_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->size(), output);
  }

  // optional bytes offset_index = 2;
  if (has_offset_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->offset_index(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:weizhu.community.GetMyCommentListRequest)
}

int GetMyCommentListRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 size = 1;
    if (has_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->size());
    }

    // optional bytes offset_index = 2;
    if (has_offset_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->offset_index());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetMyCommentListRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GetMyCommentListRequest*>(&from));
}

void GetMyCommentListRequest::MergeFrom(const GetMyCommentListRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_size()) {
      set_size(from.size());
    }
    if (from.has_offset_index()) {
      set_offset_index(from.offset_index());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void GetMyCommentListRequest::CopyFrom(const GetMyCommentListRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetMyCommentListRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GetMyCommentListRequest::Swap(GetMyCommentListRequest* other) {
  if (other != this) {
    std::swap(size_, other->size_);
    std::swap(offset_index_, other->offset_index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string GetMyCommentListRequest::GetTypeName() const {
  return "weizhu.community.GetMyCommentListRequest";
}


// ===================================================================

#ifndef _MSC_VER
const int GetMyCommentListResponse::kCommentFieldNumber;
const int GetMyCommentListResponse::kHasMoreFieldNumber;
const int GetMyCommentListResponse::kOffsetIndexFieldNumber;
const int GetMyCommentListResponse::kRefPostFieldNumber;
#endif  // !_MSC_VER

GetMyCommentListResponse::GetMyCommentListResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:weizhu.community.GetMyCommentListResponse)
}

void GetMyCommentListResponse::InitAsDefaultInstance() {
}

GetMyCommentListResponse::GetMyCommentListResponse(const GetMyCommentListResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:weizhu.community.GetMyCommentListResponse)
}

void GetMyCommentListResponse::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  has_more_ = false;
  offset_index_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetMyCommentListResponse::~GetMyCommentListResponse() {
  // @@protoc_insertion_point(destructor:weizhu.community.GetMyCommentListResponse)
  SharedDtor();
}

void GetMyCommentListResponse::SharedDtor() {
  if (offset_index_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete offset_index_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void GetMyCommentListResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GetMyCommentListResponse& GetMyCommentListResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_community_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_community_2eproto();
#endif
  return *default_instance_;
}

GetMyCommentListResponse* GetMyCommentListResponse::default_instance_ = NULL;

GetMyCommentListResponse* GetMyCommentListResponse::New() const {
  return new GetMyCommentListResponse;
}

void GetMyCommentListResponse::Clear() {
  if (_has_bits_[0 / 32] & 6) {
    has_more_ = false;
    if (has_offset_index()) {
      if (offset_index_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        offset_index_->clear();
      }
    }
  }
  comment_.Clear();
  ref_post_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool GetMyCommentListResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:weizhu.community.GetMyCommentListResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .weizhu.community.Comment comment = 1;
      case 1: {
        if (tag == 10) {
         parse_comment:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_comment()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_comment;
        if (input->ExpectTag(16)) goto parse_has_more;
        break;
      }

      // required bool has_more = 2;
      case 2: {
        if (tag == 16) {
         parse_has_more:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &has_more_)));
          set_has_has_more();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_offset_index;
        break;
      }

      // required bytes offset_index = 3;
      case 3: {
        if (tag == 26) {
         parse_offset_index:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_offset_index()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_ref_post;
        break;
      }

      // repeated .weizhu.community.Post ref_post = 4;
      case 4: {
        if (tag == 34) {
         parse_ref_post:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_ref_post()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_ref_post;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:weizhu.community.GetMyCommentListResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:weizhu.community.GetMyCommentListResponse)
  return false;
#undef DO_
}

void GetMyCommentListResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:weizhu.community.GetMyCommentListResponse)
  // repeated .weizhu.community.Comment comment = 1;
  for (int i = 0; i < this->comment_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->comment(i), output);
  }

  // required bool has_more = 2;
  if (has_has_more()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->has_more(), output);
  }

  // required bytes offset_index = 3;
  if (has_offset_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->offset_index(), output);
  }

  // repeated .weizhu.community.Post ref_post = 4;
  for (int i = 0; i < this->ref_post_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, this->ref_post(i), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:weizhu.community.GetMyCommentListResponse)
}

int GetMyCommentListResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // required bool has_more = 2;
    if (has_has_more()) {
      total_size += 1 + 1;
    }

    // required bytes offset_index = 3;
    if (has_offset_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->offset_index());
    }

  }
  // repeated .weizhu.community.Comment comment = 1;
  total_size += 1 * this->comment_size();
  for (int i = 0; i < this->comment_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->comment(i));
  }

  // repeated .weizhu.community.Post ref_post = 4;
  total_size += 1 * this->ref_post_size();
  for (int i = 0; i < this->ref_post_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->ref_post(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetMyCommentListResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GetMyCommentListResponse*>(&from));
}

void GetMyCommentListResponse::MergeFrom(const GetMyCommentListResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  comment_.MergeFrom(from.comment_);
  ref_post_.MergeFrom(from.ref_post_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_has_more()) {
      set_has_more(from.has_more());
    }
    if (from.has_offset_index()) {
      set_offset_index(from.offset_index());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void GetMyCommentListResponse::CopyFrom(const GetMyCommentListResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetMyCommentListResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000006) != 0x00000006) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->comment())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->ref_post())) return false;
  return true;
}

void GetMyCommentListResponse::Swap(GetMyCommentListResponse* other) {
  if (other != this) {
    comment_.Swap(&other->comment_);
    std::swap(has_more_, other->has_more_);
    std::swap(offset_index_, other->offset_index_);
    ref_post_.Swap(&other->ref_post_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string GetMyCommentListResponse::GetTypeName() const {
  return "weizhu.community.GetMyCommentListResponse";
}


// ===================================================================

#ifndef _MSC_VER
const int GetRecommendPostResponse::kPostFieldNumber;
const int GetRecommendPostResponse::kRefBoardFieldNumber;
#endif  // !_MSC_VER

GetRecommendPostResponse::GetRecommendPostResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:weizhu.community.GetRecommendPostResponse)
}

void GetRecommendPostResponse::InitAsDefaultInstance() {
}

GetRecommendPostResponse::GetRecommendPostResponse(const GetRecommendPostResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:weizhu.community.GetRecommendPostResponse)
}

void GetRecommendPostResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetRecommendPostResponse::~GetRecommendPostResponse() {
  // @@protoc_insertion_point(destructor:weizhu.community.GetRecommendPostResponse)
  SharedDtor();
}

void GetRecommendPostResponse::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void GetRecommendPostResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GetRecommendPostResponse& GetRecommendPostResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_community_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_community_2eproto();
#endif
  return *default_instance_;
}

GetRecommendPostResponse* GetRecommendPostResponse::default_instance_ = NULL;

GetRecommendPostResponse* GetRecommendPostResponse::New() const {
  return new GetRecommendPostResponse;
}

void GetRecommendPostResponse::Clear() {
  post_.Clear();
  ref_board_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool GetRecommendPostResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:weizhu.community.GetRecommendPostResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .weizhu.community.Post post = 1;
      case 1: {
        if (tag == 10) {
         parse_post:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_post()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_post;
        if (input->ExpectTag(18)) goto parse_ref_board;
        break;
      }

      // repeated .weizhu.community.Board ref_board = 2;
      case 2: {
        if (tag == 18) {
         parse_ref_board:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_ref_board()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_ref_board;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:weizhu.community.GetRecommendPostResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:weizhu.community.GetRecommendPostResponse)
  return false;
#undef DO_
}

void GetRecommendPostResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:weizhu.community.GetRecommendPostResponse)
  // repeated .weizhu.community.Post post = 1;
  for (int i = 0; i < this->post_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->post(i), output);
  }

  // repeated .weizhu.community.Board ref_board = 2;
  for (int i = 0; i < this->ref_board_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->ref_board(i), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:weizhu.community.GetRecommendPostResponse)
}

int GetRecommendPostResponse::ByteSize() const {
  int total_size = 0;

  // repeated .weizhu.community.Post post = 1;
  total_size += 1 * this->post_size();
  for (int i = 0; i < this->post_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->post(i));
  }

  // repeated .weizhu.community.Board ref_board = 2;
  total_size += 1 * this->ref_board_size();
  for (int i = 0; i < this->ref_board_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->ref_board(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetRecommendPostResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GetRecommendPostResponse*>(&from));
}

void GetRecommendPostResponse::MergeFrom(const GetRecommendPostResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  post_.MergeFrom(from.post_);
  ref_board_.MergeFrom(from.ref_board_);
  mutable_unknown_fields()->append(from.unknown_fields());
}

void GetRecommendPostResponse::CopyFrom(const GetRecommendPostResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetRecommendPostResponse::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->post())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->ref_board())) return false;
  return true;
}

void GetRecommendPostResponse::Swap(GetRecommendPostResponse* other) {
  if (other != this) {
    post_.Swap(&other->post_);
    ref_board_.Swap(&other->ref_board_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string GetRecommendPostResponse::GetTypeName() const {
  return "weizhu.community.GetRecommendPostResponse";
}


// ===================================================================

#ifndef _MSC_VER
const int LikeCommentRequest::kPostIdFieldNumber;
const int LikeCommentRequest::kCommentIdFieldNumber;
const int LikeCommentRequest::kIsLikeFieldNumber;
#endif  // !_MSC_VER

LikeCommentRequest::LikeCommentRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:weizhu.community.LikeCommentRequest)
}

void LikeCommentRequest::InitAsDefaultInstance() {
}

LikeCommentRequest::LikeCommentRequest(const LikeCommentRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:weizhu.community.LikeCommentRequest)
}

void LikeCommentRequest::SharedCtor() {
  _cached_size_ = 0;
  post_id_ = 0;
  comment_id_ = 0;
  is_like_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LikeCommentRequest::~LikeCommentRequest() {
  // @@protoc_insertion_point(destructor:weizhu.community.LikeCommentRequest)
  SharedDtor();
}

void LikeCommentRequest::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void LikeCommentRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const LikeCommentRequest& LikeCommentRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_community_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_community_2eproto();
#endif
  return *default_instance_;
}

LikeCommentRequest* LikeCommentRequest::default_instance_ = NULL;

LikeCommentRequest* LikeCommentRequest::New() const {
  return new LikeCommentRequest;
}

void LikeCommentRequest::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<LikeCommentRequest*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(post_id_, is_like_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool LikeCommentRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:weizhu.community.LikeCommentRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 post_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &post_id_)));
          set_has_post_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_comment_id;
        break;
      }

      // required int32 comment_id = 2;
      case 2: {
        if (tag == 16) {
         parse_comment_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &comment_id_)));
          set_has_comment_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_is_like;
        break;
      }

      // required bool is_like = 3;
      case 3: {
        if (tag == 24) {
         parse_is_like:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_like_)));
          set_has_is_like();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:weizhu.community.LikeCommentRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:weizhu.community.LikeCommentRequest)
  return false;
#undef DO_
}

void LikeCommentRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:weizhu.community.LikeCommentRequest)
  // required int32 post_id = 1;
  if (has_post_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->post_id(), output);
  }

  // required int32 comment_id = 2;
  if (has_comment_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->comment_id(), output);
  }

  // required bool is_like = 3;
  if (has_is_like()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->is_like(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:weizhu.community.LikeCommentRequest)
}

int LikeCommentRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 post_id = 1;
    if (has_post_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->post_id());
    }

    // required int32 comment_id = 2;
    if (has_comment_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->comment_id());
    }

    // required bool is_like = 3;
    if (has_is_like()) {
      total_size += 1 + 1;
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LikeCommentRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const LikeCommentRequest*>(&from));
}

void LikeCommentRequest::MergeFrom(const LikeCommentRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_post_id()) {
      set_post_id(from.post_id());
    }
    if (from.has_comment_id()) {
      set_comment_id(from.comment_id());
    }
    if (from.has_is_like()) {
      set_is_like(from.is_like());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void LikeCommentRequest::CopyFrom(const LikeCommentRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LikeCommentRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void LikeCommentRequest::Swap(LikeCommentRequest* other) {
  if (other != this) {
    std::swap(post_id_, other->post_id_);
    std::swap(comment_id_, other->comment_id_);
    std::swap(is_like_, other->is_like_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string LikeCommentRequest::GetTypeName() const {
  return "weizhu.community.LikeCommentRequest";
}


// ===================================================================

bool LikeCommentResponse_Result_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 99:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const LikeCommentResponse_Result LikeCommentResponse::SUCC;
const LikeCommentResponse_Result LikeCommentResponse::FAIL_POST_NOT_EXIST;
const LikeCommentResponse_Result LikeCommentResponse::FAIL_COMMENT_NOT_EXIST;
const LikeCommentResponse_Result LikeCommentResponse::FAIL_UNKNOWN;
const LikeCommentResponse_Result LikeCommentResponse::Result_MIN;
const LikeCommentResponse_Result LikeCommentResponse::Result_MAX;
const int LikeCommentResponse::Result_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int LikeCommentResponse::kResultFieldNumber;
const int LikeCommentResponse::kFailTextFieldNumber;
#endif  // !_MSC_VER

LikeCommentResponse::LikeCommentResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:weizhu.community.LikeCommentResponse)
}

void LikeCommentResponse::InitAsDefaultInstance() {
}

LikeCommentResponse::LikeCommentResponse(const LikeCommentResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:weizhu.community.LikeCommentResponse)
}

void LikeCommentResponse::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  result_ = 99;
  fail_text_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LikeCommentResponse::~LikeCommentResponse() {
  // @@protoc_insertion_point(destructor:weizhu.community.LikeCommentResponse)
  SharedDtor();
}

void LikeCommentResponse::SharedDtor() {
  if (fail_text_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete fail_text_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void LikeCommentResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const LikeCommentResponse& LikeCommentResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_community_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_community_2eproto();
#endif
  return *default_instance_;
}

LikeCommentResponse* LikeCommentResponse::default_instance_ = NULL;

LikeCommentResponse* LikeCommentResponse::New() const {
  return new LikeCommentResponse;
}

void LikeCommentResponse::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    result_ = 99;
    if (has_fail_text()) {
      if (fail_text_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        fail_text_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool LikeCommentResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:weizhu.community.LikeCommentResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .weizhu.community.LikeCommentResponse.Result result = 1 [default = FAIL_UNKNOWN];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::weizhu::community::LikeCommentResponse_Result_IsValid(value)) {
            set_result(static_cast< ::weizhu::community::LikeCommentResponse_Result >(value));
          } else {
            unknown_fields_stream.WriteVarint32(tag);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_fail_text;
        break;
      }

      // optional string fail_text = 2;
      case 2: {
        if (tag == 18) {
         parse_fail_text:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fail_text()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:weizhu.community.LikeCommentResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:weizhu.community.LikeCommentResponse)
  return false;
#undef DO_
}

void LikeCommentResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:weizhu.community.LikeCommentResponse)
  // optional .weizhu.community.LikeCommentResponse.Result result = 1 [default = FAIL_UNKNOWN];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  // optional string fail_text = 2;
  if (has_fail_text()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->fail_text(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:weizhu.community.LikeCommentResponse)
}

int LikeCommentResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .weizhu.community.LikeCommentResponse.Result result = 1 [default = FAIL_UNKNOWN];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

    // optional string fail_text = 2;
    if (has_fail_text()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->fail_text());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LikeCommentResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const LikeCommentResponse*>(&from));
}

void LikeCommentResponse::MergeFrom(const LikeCommentResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_fail_text()) {
      set_fail_text(from.fail_text());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void LikeCommentResponse::CopyFrom(const LikeCommentResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LikeCommentResponse::IsInitialized() const {

  return true;
}

void LikeCommentResponse::Swap(LikeCommentResponse* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(fail_text_, other->fail_text_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string LikeCommentResponse::GetTypeName() const {
  return "weizhu.community.LikeCommentResponse";
}


// ===================================================================

#ifndef _MSC_VER
const int GetPostCommentByIdRequest_PostCommentId::kPostIdFieldNumber;
const int GetPostCommentByIdRequest_PostCommentId::kCommentIdFieldNumber;
#endif  // !_MSC_VER

GetPostCommentByIdRequest_PostCommentId::GetPostCommentByIdRequest_PostCommentId()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:weizhu.community.GetPostCommentByIdRequest.PostCommentId)
}

void GetPostCommentByIdRequest_PostCommentId::InitAsDefaultInstance() {
}

GetPostCommentByIdRequest_PostCommentId::GetPostCommentByIdRequest_PostCommentId(const GetPostCommentByIdRequest_PostCommentId& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:weizhu.community.GetPostCommentByIdRequest.PostCommentId)
}

void GetPostCommentByIdRequest_PostCommentId::SharedCtor() {
  _cached_size_ = 0;
  post_id_ = 0;
  comment_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetPostCommentByIdRequest_PostCommentId::~GetPostCommentByIdRequest_PostCommentId() {
  // @@protoc_insertion_point(destructor:weizhu.community.GetPostCommentByIdRequest.PostCommentId)
  SharedDtor();
}

void GetPostCommentByIdRequest_PostCommentId::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void GetPostCommentByIdRequest_PostCommentId::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GetPostCommentByIdRequest_PostCommentId& GetPostCommentByIdRequest_PostCommentId::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_community_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_community_2eproto();
#endif
  return *default_instance_;
}

GetPostCommentByIdRequest_PostCommentId* GetPostCommentByIdRequest_PostCommentId::default_instance_ = NULL;

GetPostCommentByIdRequest_PostCommentId* GetPostCommentByIdRequest_PostCommentId::New() const {
  return new GetPostCommentByIdRequest_PostCommentId;
}

void GetPostCommentByIdRequest_PostCommentId::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GetPostCommentByIdRequest_PostCommentId*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(post_id_, comment_id_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool GetPostCommentByIdRequest_PostCommentId::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:weizhu.community.GetPostCommentByIdRequest.PostCommentId)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 post_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &post_id_)));
          set_has_post_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_comment_id;
        break;
      }

      // required int32 comment_id = 2;
      case 2: {
        if (tag == 16) {
         parse_comment_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &comment_id_)));
          set_has_comment_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:weizhu.community.GetPostCommentByIdRequest.PostCommentId)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:weizhu.community.GetPostCommentByIdRequest.PostCommentId)
  return false;
#undef DO_
}

void GetPostCommentByIdRequest_PostCommentId::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:weizhu.community.GetPostCommentByIdRequest.PostCommentId)
  // required int32 post_id = 1;
  if (has_post_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->post_id(), output);
  }

  // required int32 comment_id = 2;
  if (has_comment_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->comment_id(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:weizhu.community.GetPostCommentByIdRequest.PostCommentId)
}

int GetPostCommentByIdRequest_PostCommentId::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 post_id = 1;
    if (has_post_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->post_id());
    }

    // required int32 comment_id = 2;
    if (has_comment_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->comment_id());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetPostCommentByIdRequest_PostCommentId::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GetPostCommentByIdRequest_PostCommentId*>(&from));
}

void GetPostCommentByIdRequest_PostCommentId::MergeFrom(const GetPostCommentByIdRequest_PostCommentId& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_post_id()) {
      set_post_id(from.post_id());
    }
    if (from.has_comment_id()) {
      set_comment_id(from.comment_id());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void GetPostCommentByIdRequest_PostCommentId::CopyFrom(const GetPostCommentByIdRequest_PostCommentId& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetPostCommentByIdRequest_PostCommentId::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void GetPostCommentByIdRequest_PostCommentId::Swap(GetPostCommentByIdRequest_PostCommentId* other) {
  if (other != this) {
    std::swap(post_id_, other->post_id_);
    std::swap(comment_id_, other->comment_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string GetPostCommentByIdRequest_PostCommentId::GetTypeName() const {
  return "weizhu.community.GetPostCommentByIdRequest.PostCommentId";
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int GetPostCommentByIdRequest::kPostCommentIdFieldNumber;
#endif  // !_MSC_VER

GetPostCommentByIdRequest::GetPostCommentByIdRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:weizhu.community.GetPostCommentByIdRequest)
}

void GetPostCommentByIdRequest::InitAsDefaultInstance() {
}

GetPostCommentByIdRequest::GetPostCommentByIdRequest(const GetPostCommentByIdRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:weizhu.community.GetPostCommentByIdRequest)
}

void GetPostCommentByIdRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetPostCommentByIdRequest::~GetPostCommentByIdRequest() {
  // @@protoc_insertion_point(destructor:weizhu.community.GetPostCommentByIdRequest)
  SharedDtor();
}

void GetPostCommentByIdRequest::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void GetPostCommentByIdRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GetPostCommentByIdRequest& GetPostCommentByIdRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_community_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_community_2eproto();
#endif
  return *default_instance_;
}

GetPostCommentByIdRequest* GetPostCommentByIdRequest::default_instance_ = NULL;

GetPostCommentByIdRequest* GetPostCommentByIdRequest::New() const {
  return new GetPostCommentByIdRequest;
}

void GetPostCommentByIdRequest::Clear() {
  postcommentid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool GetPostCommentByIdRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:weizhu.community.GetPostCommentByIdRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .weizhu.community.GetPostCommentByIdRequest.PostCommentId postCommentId = 1;
      case 1: {
        if (tag == 10) {
         parse_postCommentId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_postcommentid()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_postCommentId;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:weizhu.community.GetPostCommentByIdRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:weizhu.community.GetPostCommentByIdRequest)
  return false;
#undef DO_
}

void GetPostCommentByIdRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:weizhu.community.GetPostCommentByIdRequest)
  // repeated .weizhu.community.GetPostCommentByIdRequest.PostCommentId postCommentId = 1;
  for (int i = 0; i < this->postcommentid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->postcommentid(i), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:weizhu.community.GetPostCommentByIdRequest)
}

int GetPostCommentByIdRequest::ByteSize() const {
  int total_size = 0;

  // repeated .weizhu.community.GetPostCommentByIdRequest.PostCommentId postCommentId = 1;
  total_size += 1 * this->postcommentid_size();
  for (int i = 0; i < this->postcommentid_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->postcommentid(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetPostCommentByIdRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GetPostCommentByIdRequest*>(&from));
}

void GetPostCommentByIdRequest::MergeFrom(const GetPostCommentByIdRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  postcommentid_.MergeFrom(from.postcommentid_);
  mutable_unknown_fields()->append(from.unknown_fields());
}

void GetPostCommentByIdRequest::CopyFrom(const GetPostCommentByIdRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetPostCommentByIdRequest::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->postcommentid())) return false;
  return true;
}

void GetPostCommentByIdRequest::Swap(GetPostCommentByIdRequest* other) {
  if (other != this) {
    postcommentid_.Swap(&other->postcommentid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string GetPostCommentByIdRequest::GetTypeName() const {
  return "weizhu.community.GetPostCommentByIdRequest";
}


// ===================================================================

#ifndef _MSC_VER
const int GetPostCommentByIdResponse::kCommentFieldNumber;
const int GetPostCommentByIdResponse::kRefPostFieldNumber;
#endif  // !_MSC_VER

GetPostCommentByIdResponse::GetPostCommentByIdResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:weizhu.community.GetPostCommentByIdResponse)
}

void GetPostCommentByIdResponse::InitAsDefaultInstance() {
}

GetPostCommentByIdResponse::GetPostCommentByIdResponse(const GetPostCommentByIdResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:weizhu.community.GetPostCommentByIdResponse)
}

void GetPostCommentByIdResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetPostCommentByIdResponse::~GetPostCommentByIdResponse() {
  // @@protoc_insertion_point(destructor:weizhu.community.GetPostCommentByIdResponse)
  SharedDtor();
}

void GetPostCommentByIdResponse::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void GetPostCommentByIdResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GetPostCommentByIdResponse& GetPostCommentByIdResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_community_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_community_2eproto();
#endif
  return *default_instance_;
}

GetPostCommentByIdResponse* GetPostCommentByIdResponse::default_instance_ = NULL;

GetPostCommentByIdResponse* GetPostCommentByIdResponse::New() const {
  return new GetPostCommentByIdResponse;
}

void GetPostCommentByIdResponse::Clear() {
  comment_.Clear();
  ref_post_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool GetPostCommentByIdResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:weizhu.community.GetPostCommentByIdResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .weizhu.community.Comment comment = 1;
      case 1: {
        if (tag == 10) {
         parse_comment:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_comment()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_comment;
        if (input->ExpectTag(18)) goto parse_ref_post;
        break;
      }

      // repeated .weizhu.community.Post ref_post = 2;
      case 2: {
        if (tag == 18) {
         parse_ref_post:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_ref_post()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_ref_post;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:weizhu.community.GetPostCommentByIdResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:weizhu.community.GetPostCommentByIdResponse)
  return false;
#undef DO_
}

void GetPostCommentByIdResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:weizhu.community.GetPostCommentByIdResponse)
  // repeated .weizhu.community.Comment comment = 1;
  for (int i = 0; i < this->comment_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->comment(i), output);
  }

  // repeated .weizhu.community.Post ref_post = 2;
  for (int i = 0; i < this->ref_post_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->ref_post(i), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:weizhu.community.GetPostCommentByIdResponse)
}

int GetPostCommentByIdResponse::ByteSize() const {
  int total_size = 0;

  // repeated .weizhu.community.Comment comment = 1;
  total_size += 1 * this->comment_size();
  for (int i = 0; i < this->comment_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->comment(i));
  }

  // repeated .weizhu.community.Post ref_post = 2;
  total_size += 1 * this->ref_post_size();
  for (int i = 0; i < this->ref_post_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->ref_post(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetPostCommentByIdResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GetPostCommentByIdResponse*>(&from));
}

void GetPostCommentByIdResponse::MergeFrom(const GetPostCommentByIdResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  comment_.MergeFrom(from.comment_);
  ref_post_.MergeFrom(from.ref_post_);
  mutable_unknown_fields()->append(from.unknown_fields());
}

void GetPostCommentByIdResponse::CopyFrom(const GetPostCommentByIdResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetPostCommentByIdResponse::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->comment())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->ref_post())) return false;
  return true;
}

void GetPostCommentByIdResponse::Swap(GetPostCommentByIdResponse* other) {
  if (other != this) {
    comment_.Swap(&other->comment_);
    ref_post_.Swap(&other->ref_post_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string GetPostCommentByIdResponse::GetTypeName() const {
  return "weizhu.community.GetPostCommentByIdResponse";
}


// ===================================================================

#ifndef _MSC_VER
const int GetPostByIdsRequest::kPostIdFieldNumber;
#endif  // !_MSC_VER

GetPostByIdsRequest::GetPostByIdsRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:weizhu.community.GetPostByIdsRequest)
}

void GetPostByIdsRequest::InitAsDefaultInstance() {
}

GetPostByIdsRequest::GetPostByIdsRequest(const GetPostByIdsRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:weizhu.community.GetPostByIdsRequest)
}

void GetPostByIdsRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetPostByIdsRequest::~GetPostByIdsRequest() {
  // @@protoc_insertion_point(destructor:weizhu.community.GetPostByIdsRequest)
  SharedDtor();
}

void GetPostByIdsRequest::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void GetPostByIdsRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GetPostByIdsRequest& GetPostByIdsRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_community_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_community_2eproto();
#endif
  return *default_instance_;
}

GetPostByIdsRequest* GetPostByIdsRequest::default_instance_ = NULL;

GetPostByIdsRequest* GetPostByIdsRequest::New() const {
  return new GetPostByIdsRequest;
}

void GetPostByIdsRequest::Clear() {
  post_id_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool GetPostByIdsRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:weizhu.community.GetPostByIdsRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 post_id = 1;
      case 1: {
        if (tag == 8) {
         parse_post_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8, input, this->mutable_post_id())));
        } else if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_post_id())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8)) goto parse_post_id;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:weizhu.community.GetPostByIdsRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:weizhu.community.GetPostByIdsRequest)
  return false;
#undef DO_
}

void GetPostByIdsRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:weizhu.community.GetPostByIdsRequest)
  // repeated int32 post_id = 1;
  for (int i = 0; i < this->post_id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->post_id(i), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:weizhu.community.GetPostByIdsRequest)
}

int GetPostByIdsRequest::ByteSize() const {
  int total_size = 0;

  // repeated int32 post_id = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->post_id_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->post_id(i));
    }
    total_size += 1 * this->post_id_size() + data_size;
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetPostByIdsRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GetPostByIdsRequest*>(&from));
}

void GetPostByIdsRequest::MergeFrom(const GetPostByIdsRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  post_id_.MergeFrom(from.post_id_);
  mutable_unknown_fields()->append(from.unknown_fields());
}

void GetPostByIdsRequest::CopyFrom(const GetPostByIdsRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetPostByIdsRequest::IsInitialized() const {

  return true;
}

void GetPostByIdsRequest::Swap(GetPostByIdsRequest* other) {
  if (other != this) {
    post_id_.Swap(&other->post_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string GetPostByIdsRequest::GetTypeName() const {
  return "weizhu.community.GetPostByIdsRequest";
}


// ===================================================================

#ifndef _MSC_VER
const int GetPostByIdsResponse::kPostFieldNumber;
#endif  // !_MSC_VER

GetPostByIdsResponse::GetPostByIdsResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:weizhu.community.GetPostByIdsResponse)
}

void GetPostByIdsResponse::InitAsDefaultInstance() {
}

GetPostByIdsResponse::GetPostByIdsResponse(const GetPostByIdsResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:weizhu.community.GetPostByIdsResponse)
}

void GetPostByIdsResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetPostByIdsResponse::~GetPostByIdsResponse() {
  // @@protoc_insertion_point(destructor:weizhu.community.GetPostByIdsResponse)
  SharedDtor();
}

void GetPostByIdsResponse::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void GetPostByIdsResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GetPostByIdsResponse& GetPostByIdsResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_community_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_community_2eproto();
#endif
  return *default_instance_;
}

GetPostByIdsResponse* GetPostByIdsResponse::default_instance_ = NULL;

GetPostByIdsResponse* GetPostByIdsResponse::New() const {
  return new GetPostByIdsResponse;
}

void GetPostByIdsResponse::Clear() {
  post_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool GetPostByIdsResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:weizhu.community.GetPostByIdsResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .weizhu.community.Post post = 1;
      case 1: {
        if (tag == 10) {
         parse_post:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_post()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_post;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:weizhu.community.GetPostByIdsResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:weizhu.community.GetPostByIdsResponse)
  return false;
#undef DO_
}

void GetPostByIdsResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:weizhu.community.GetPostByIdsResponse)
  // repeated .weizhu.community.Post post = 1;
  for (int i = 0; i < this->post_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->post(i), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:weizhu.community.GetPostByIdsResponse)
}

int GetPostByIdsResponse::ByteSize() const {
  int total_size = 0;

  // repeated .weizhu.community.Post post = 1;
  total_size += 1 * this->post_size();
  for (int i = 0; i < this->post_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->post(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetPostByIdsResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GetPostByIdsResponse*>(&from));
}

void GetPostByIdsResponse::MergeFrom(const GetPostByIdsResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  post_.MergeFrom(from.post_);
  mutable_unknown_fields()->append(from.unknown_fields());
}

void GetPostByIdsResponse::CopyFrom(const GetPostByIdsResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetPostByIdsResponse::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->post())) return false;
  return true;
}

void GetPostByIdsResponse::Swap(GetPostByIdsResponse* other) {
  if (other != this) {
    post_.Swap(&other->post_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string GetPostByIdsResponse::GetTypeName() const {
  return "weizhu.community.GetPostByIdsResponse";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace community
}  // namespace weizhu

// @@protoc_insertion_point(global_scope)
