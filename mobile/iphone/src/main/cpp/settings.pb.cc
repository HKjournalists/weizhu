// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: settings.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "settings.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)

namespace weizhu {
namespace settings {

void protobuf_ShutdownFile_settings_2eproto() {
  delete Settings::default_instance_;
  delete Settings_DoNotDisturb::default_instance_;
  delete SetDoNotDisturbRequest::default_instance_;
  delete SettingsResponse::default_instance_;
  delete GetUserSettingsRequest::default_instance_;
  delete GetUserSettingsResponse::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_settings_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_settings_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  ::weizhu::protobuf_AddDesc_weizhu_2eproto();
  Settings::default_instance_ = new Settings();
  Settings_DoNotDisturb::default_instance_ = new Settings_DoNotDisturb();
  SetDoNotDisturbRequest::default_instance_ = new SetDoNotDisturbRequest();
  SettingsResponse::default_instance_ = new SettingsResponse();
  GetUserSettingsRequest::default_instance_ = new GetUserSettingsRequest();
  GetUserSettingsResponse::default_instance_ = new GetUserSettingsResponse();
  Settings::default_instance_->InitAsDefaultInstance();
  Settings_DoNotDisturb::default_instance_->InitAsDefaultInstance();
  SetDoNotDisturbRequest::default_instance_->InitAsDefaultInstance();
  SettingsResponse::default_instance_->InitAsDefaultInstance();
  GetUserSettingsRequest::default_instance_->InitAsDefaultInstance();
  GetUserSettingsResponse::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_settings_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_settings_2eproto_once_);
void protobuf_AddDesc_settings_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_settings_2eproto_once_,
                 &protobuf_AddDesc_settings_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_settings_2eproto {
  StaticDescriptorInitializer_settings_2eproto() {
    protobuf_AddDesc_settings_2eproto();
  }
} static_descriptor_initializer_settings_2eproto_;
#endif

// ===================================================================

#ifndef _MSC_VER
const int Settings_DoNotDisturb::kEnableFieldNumber;
const int Settings_DoNotDisturb::kBeginTimeFieldNumber;
const int Settings_DoNotDisturb::kEndTimeFieldNumber;
#endif  // !_MSC_VER

Settings_DoNotDisturb::Settings_DoNotDisturb()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:weizhu.settings.Settings.DoNotDisturb)
}

void Settings_DoNotDisturb::InitAsDefaultInstance() {
}

Settings_DoNotDisturb::Settings_DoNotDisturb(const Settings_DoNotDisturb& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:weizhu.settings.Settings.DoNotDisturb)
}

void Settings_DoNotDisturb::SharedCtor() {
  _cached_size_ = 0;
  enable_ = false;
  begin_time_ = 0;
  end_time_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Settings_DoNotDisturb::~Settings_DoNotDisturb() {
  // @@protoc_insertion_point(destructor:weizhu.settings.Settings.DoNotDisturb)
  SharedDtor();
}

void Settings_DoNotDisturb::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void Settings_DoNotDisturb::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Settings_DoNotDisturb& Settings_DoNotDisturb::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_settings_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_settings_2eproto();
#endif
  return *default_instance_;
}

Settings_DoNotDisturb* Settings_DoNotDisturb::default_instance_ = NULL;

Settings_DoNotDisturb* Settings_DoNotDisturb::New() const {
  return new Settings_DoNotDisturb;
}

void Settings_DoNotDisturb::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Settings_DoNotDisturb*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(enable_, end_time_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool Settings_DoNotDisturb::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:weizhu.settings.Settings.DoNotDisturb)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool enable = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enable_)));
          set_has_enable();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_begin_time;
        break;
      }

      // optional int32 begin_time = 2;
      case 2: {
        if (tag == 16) {
         parse_begin_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &begin_time_)));
          set_has_begin_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_end_time;
        break;
      }

      // optional int32 end_time = 3;
      case 3: {
        if (tag == 24) {
         parse_end_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &end_time_)));
          set_has_end_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:weizhu.settings.Settings.DoNotDisturb)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:weizhu.settings.Settings.DoNotDisturb)
  return false;
#undef DO_
}

void Settings_DoNotDisturb::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:weizhu.settings.Settings.DoNotDisturb)
  // required bool enable = 1;
  if (has_enable()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->enable(), output);
  }

  // optional int32 begin_time = 2;
  if (has_begin_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->begin_time(), output);
  }

  // optional int32 end_time = 3;
  if (has_end_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->end_time(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:weizhu.settings.Settings.DoNotDisturb)
}

int Settings_DoNotDisturb::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool enable = 1;
    if (has_enable()) {
      total_size += 1 + 1;
    }

    // optional int32 begin_time = 2;
    if (has_begin_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->begin_time());
    }

    // optional int32 end_time = 3;
    if (has_end_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->end_time());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Settings_DoNotDisturb::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Settings_DoNotDisturb*>(&from));
}

void Settings_DoNotDisturb::MergeFrom(const Settings_DoNotDisturb& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_enable()) {
      set_enable(from.enable());
    }
    if (from.has_begin_time()) {
      set_begin_time(from.begin_time());
    }
    if (from.has_end_time()) {
      set_end_time(from.end_time());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void Settings_DoNotDisturb::CopyFrom(const Settings_DoNotDisturb& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Settings_DoNotDisturb::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Settings_DoNotDisturb::Swap(Settings_DoNotDisturb* other) {
  if (other != this) {
    std::swap(enable_, other->enable_);
    std::swap(begin_time_, other->begin_time_);
    std::swap(end_time_, other->end_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string Settings_DoNotDisturb::GetTypeName() const {
  return "weizhu.settings.Settings.DoNotDisturb";
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Settings::kUserIdFieldNumber;
const int Settings::kDoNotDisturbFieldNumber;
#endif  // !_MSC_VER

Settings::Settings()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:weizhu.settings.Settings)
}

void Settings::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  do_not_disturb_ = const_cast< ::weizhu::settings::Settings_DoNotDisturb*>(
      ::weizhu::settings::Settings_DoNotDisturb::internal_default_instance());
#else
  do_not_disturb_ = const_cast< ::weizhu::settings::Settings_DoNotDisturb*>(&::weizhu::settings::Settings_DoNotDisturb::default_instance());
#endif
}

Settings::Settings(const Settings& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:weizhu.settings.Settings)
}

void Settings::SharedCtor() {
  _cached_size_ = 0;
  user_id_ = GOOGLE_LONGLONG(0);
  do_not_disturb_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Settings::~Settings() {
  // @@protoc_insertion_point(destructor:weizhu.settings.Settings)
  SharedDtor();
}

void Settings::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete do_not_disturb_;
  }
}

void Settings::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Settings& Settings::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_settings_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_settings_2eproto();
#endif
  return *default_instance_;
}

Settings* Settings::default_instance_ = NULL;

Settings* Settings::New() const {
  return new Settings;
}

void Settings::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    user_id_ = GOOGLE_LONGLONG(0);
    if (has_do_not_disturb()) {
      if (do_not_disturb_ != NULL) do_not_disturb_->::weizhu::settings::Settings_DoNotDisturb::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool Settings::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:weizhu.settings.Settings)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 user_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_do_not_disturb;
        break;
      }

      // optional .weizhu.settings.Settings.DoNotDisturb do_not_disturb = 2;
      case 2: {
        if (tag == 18) {
         parse_do_not_disturb:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_do_not_disturb()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:weizhu.settings.Settings)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:weizhu.settings.Settings)
  return false;
#undef DO_
}

void Settings::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:weizhu.settings.Settings)
  // required int64 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->user_id(), output);
  }

  // optional .weizhu.settings.Settings.DoNotDisturb do_not_disturb = 2;
  if (has_do_not_disturb()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->do_not_disturb(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:weizhu.settings.Settings)
}

int Settings::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->user_id());
    }

    // optional .weizhu.settings.Settings.DoNotDisturb do_not_disturb = 2;
    if (has_do_not_disturb()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->do_not_disturb());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Settings::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Settings*>(&from));
}

void Settings::MergeFrom(const Settings& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_do_not_disturb()) {
      mutable_do_not_disturb()->::weizhu::settings::Settings_DoNotDisturb::MergeFrom(from.do_not_disturb());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void Settings::CopyFrom(const Settings& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Settings::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_do_not_disturb()) {
    if (!this->do_not_disturb().IsInitialized()) return false;
  }
  return true;
}

void Settings::Swap(Settings* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(do_not_disturb_, other->do_not_disturb_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string Settings::GetTypeName() const {
  return "weizhu.settings.Settings";
}


// ===================================================================

#ifndef _MSC_VER
const int SetDoNotDisturbRequest::kDoNotDisturbFieldNumber;
#endif  // !_MSC_VER

SetDoNotDisturbRequest::SetDoNotDisturbRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:weizhu.settings.SetDoNotDisturbRequest)
}

void SetDoNotDisturbRequest::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  do_not_disturb_ = const_cast< ::weizhu::settings::Settings_DoNotDisturb*>(
      ::weizhu::settings::Settings_DoNotDisturb::internal_default_instance());
#else
  do_not_disturb_ = const_cast< ::weizhu::settings::Settings_DoNotDisturb*>(&::weizhu::settings::Settings_DoNotDisturb::default_instance());
#endif
}

SetDoNotDisturbRequest::SetDoNotDisturbRequest(const SetDoNotDisturbRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:weizhu.settings.SetDoNotDisturbRequest)
}

void SetDoNotDisturbRequest::SharedCtor() {
  _cached_size_ = 0;
  do_not_disturb_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SetDoNotDisturbRequest::~SetDoNotDisturbRequest() {
  // @@protoc_insertion_point(destructor:weizhu.settings.SetDoNotDisturbRequest)
  SharedDtor();
}

void SetDoNotDisturbRequest::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete do_not_disturb_;
  }
}

void SetDoNotDisturbRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const SetDoNotDisturbRequest& SetDoNotDisturbRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_settings_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_settings_2eproto();
#endif
  return *default_instance_;
}

SetDoNotDisturbRequest* SetDoNotDisturbRequest::default_instance_ = NULL;

SetDoNotDisturbRequest* SetDoNotDisturbRequest::New() const {
  return new SetDoNotDisturbRequest;
}

void SetDoNotDisturbRequest::Clear() {
  if (has_do_not_disturb()) {
    if (do_not_disturb_ != NULL) do_not_disturb_->::weizhu::settings::Settings_DoNotDisturb::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool SetDoNotDisturbRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:weizhu.settings.SetDoNotDisturbRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .weizhu.settings.Settings.DoNotDisturb do_not_disturb = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_do_not_disturb()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:weizhu.settings.SetDoNotDisturbRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:weizhu.settings.SetDoNotDisturbRequest)
  return false;
#undef DO_
}

void SetDoNotDisturbRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:weizhu.settings.SetDoNotDisturbRequest)
  // required .weizhu.settings.Settings.DoNotDisturb do_not_disturb = 1;
  if (has_do_not_disturb()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->do_not_disturb(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:weizhu.settings.SetDoNotDisturbRequest)
}

int SetDoNotDisturbRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .weizhu.settings.Settings.DoNotDisturb do_not_disturb = 1;
    if (has_do_not_disturb()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->do_not_disturb());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SetDoNotDisturbRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const SetDoNotDisturbRequest*>(&from));
}

void SetDoNotDisturbRequest::MergeFrom(const SetDoNotDisturbRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_do_not_disturb()) {
      mutable_do_not_disturb()->::weizhu::settings::Settings_DoNotDisturb::MergeFrom(from.do_not_disturb());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void SetDoNotDisturbRequest::CopyFrom(const SetDoNotDisturbRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetDoNotDisturbRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_do_not_disturb()) {
    if (!this->do_not_disturb().IsInitialized()) return false;
  }
  return true;
}

void SetDoNotDisturbRequest::Swap(SetDoNotDisturbRequest* other) {
  if (other != this) {
    std::swap(do_not_disturb_, other->do_not_disturb_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string SetDoNotDisturbRequest::GetTypeName() const {
  return "weizhu.settings.SetDoNotDisturbRequest";
}


// ===================================================================

#ifndef _MSC_VER
const int SettingsResponse::kSettingsFieldNumber;
#endif  // !_MSC_VER

SettingsResponse::SettingsResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:weizhu.settings.SettingsResponse)
}

void SettingsResponse::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  settings_ = const_cast< ::weizhu::settings::Settings*>(
      ::weizhu::settings::Settings::internal_default_instance());
#else
  settings_ = const_cast< ::weizhu::settings::Settings*>(&::weizhu::settings::Settings::default_instance());
#endif
}

SettingsResponse::SettingsResponse(const SettingsResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:weizhu.settings.SettingsResponse)
}

void SettingsResponse::SharedCtor() {
  _cached_size_ = 0;
  settings_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SettingsResponse::~SettingsResponse() {
  // @@protoc_insertion_point(destructor:weizhu.settings.SettingsResponse)
  SharedDtor();
}

void SettingsResponse::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete settings_;
  }
}

void SettingsResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const SettingsResponse& SettingsResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_settings_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_settings_2eproto();
#endif
  return *default_instance_;
}

SettingsResponse* SettingsResponse::default_instance_ = NULL;

SettingsResponse* SettingsResponse::New() const {
  return new SettingsResponse;
}

void SettingsResponse::Clear() {
  if (has_settings()) {
    if (settings_ != NULL) settings_->::weizhu::settings::Settings::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool SettingsResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:weizhu.settings.SettingsResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .weizhu.settings.Settings settings = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_settings()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:weizhu.settings.SettingsResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:weizhu.settings.SettingsResponse)
  return false;
#undef DO_
}

void SettingsResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:weizhu.settings.SettingsResponse)
  // required .weizhu.settings.Settings settings = 1;
  if (has_settings()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->settings(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:weizhu.settings.SettingsResponse)
}

int SettingsResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .weizhu.settings.Settings settings = 1;
    if (has_settings()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->settings());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SettingsResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const SettingsResponse*>(&from));
}

void SettingsResponse::MergeFrom(const SettingsResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_settings()) {
      mutable_settings()->::weizhu::settings::Settings::MergeFrom(from.settings());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void SettingsResponse::CopyFrom(const SettingsResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SettingsResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_settings()) {
    if (!this->settings().IsInitialized()) return false;
  }
  return true;
}

void SettingsResponse::Swap(SettingsResponse* other) {
  if (other != this) {
    std::swap(settings_, other->settings_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string SettingsResponse::GetTypeName() const {
  return "weizhu.settings.SettingsResponse";
}


// ===================================================================

#ifndef _MSC_VER
const int GetUserSettingsRequest::kUserIdFieldNumber;
#endif  // !_MSC_VER

GetUserSettingsRequest::GetUserSettingsRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:weizhu.settings.GetUserSettingsRequest)
}

void GetUserSettingsRequest::InitAsDefaultInstance() {
}

GetUserSettingsRequest::GetUserSettingsRequest(const GetUserSettingsRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:weizhu.settings.GetUserSettingsRequest)
}

void GetUserSettingsRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetUserSettingsRequest::~GetUserSettingsRequest() {
  // @@protoc_insertion_point(destructor:weizhu.settings.GetUserSettingsRequest)
  SharedDtor();
}

void GetUserSettingsRequest::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void GetUserSettingsRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GetUserSettingsRequest& GetUserSettingsRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_settings_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_settings_2eproto();
#endif
  return *default_instance_;
}

GetUserSettingsRequest* GetUserSettingsRequest::default_instance_ = NULL;

GetUserSettingsRequest* GetUserSettingsRequest::New() const {
  return new GetUserSettingsRequest;
}

void GetUserSettingsRequest::Clear() {
  user_id_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool GetUserSettingsRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:weizhu.settings.GetUserSettingsRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int64 user_id = 1;
      case 1: {
        if (tag == 8) {
         parse_user_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 8, input, this->mutable_user_id())));
        } else if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_user_id())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8)) goto parse_user_id;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:weizhu.settings.GetUserSettingsRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:weizhu.settings.GetUserSettingsRequest)
  return false;
#undef DO_
}

void GetUserSettingsRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:weizhu.settings.GetUserSettingsRequest)
  // repeated int64 user_id = 1;
  for (int i = 0; i < this->user_id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      1, this->user_id(i), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:weizhu.settings.GetUserSettingsRequest)
}

int GetUserSettingsRequest::ByteSize() const {
  int total_size = 0;

  // repeated int64 user_id = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->user_id_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->user_id(i));
    }
    total_size += 1 * this->user_id_size() + data_size;
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetUserSettingsRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GetUserSettingsRequest*>(&from));
}

void GetUserSettingsRequest::MergeFrom(const GetUserSettingsRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  user_id_.MergeFrom(from.user_id_);
  mutable_unknown_fields()->append(from.unknown_fields());
}

void GetUserSettingsRequest::CopyFrom(const GetUserSettingsRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetUserSettingsRequest::IsInitialized() const {

  return true;
}

void GetUserSettingsRequest::Swap(GetUserSettingsRequest* other) {
  if (other != this) {
    user_id_.Swap(&other->user_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string GetUserSettingsRequest::GetTypeName() const {
  return "weizhu.settings.GetUserSettingsRequest";
}


// ===================================================================

#ifndef _MSC_VER
const int GetUserSettingsResponse::kSettingsFieldNumber;
#endif  // !_MSC_VER

GetUserSettingsResponse::GetUserSettingsResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:weizhu.settings.GetUserSettingsResponse)
}

void GetUserSettingsResponse::InitAsDefaultInstance() {
}

GetUserSettingsResponse::GetUserSettingsResponse(const GetUserSettingsResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:weizhu.settings.GetUserSettingsResponse)
}

void GetUserSettingsResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetUserSettingsResponse::~GetUserSettingsResponse() {
  // @@protoc_insertion_point(destructor:weizhu.settings.GetUserSettingsResponse)
  SharedDtor();
}

void GetUserSettingsResponse::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void GetUserSettingsResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GetUserSettingsResponse& GetUserSettingsResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_settings_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_settings_2eproto();
#endif
  return *default_instance_;
}

GetUserSettingsResponse* GetUserSettingsResponse::default_instance_ = NULL;

GetUserSettingsResponse* GetUserSettingsResponse::New() const {
  return new GetUserSettingsResponse;
}

void GetUserSettingsResponse::Clear() {
  settings_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool GetUserSettingsResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:weizhu.settings.GetUserSettingsResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .weizhu.settings.Settings settings = 1;
      case 1: {
        if (tag == 10) {
         parse_settings:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_settings()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_settings;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:weizhu.settings.GetUserSettingsResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:weizhu.settings.GetUserSettingsResponse)
  return false;
#undef DO_
}

void GetUserSettingsResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:weizhu.settings.GetUserSettingsResponse)
  // repeated .weizhu.settings.Settings settings = 1;
  for (int i = 0; i < this->settings_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->settings(i), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:weizhu.settings.GetUserSettingsResponse)
}

int GetUserSettingsResponse::ByteSize() const {
  int total_size = 0;

  // repeated .weizhu.settings.Settings settings = 1;
  total_size += 1 * this->settings_size();
  for (int i = 0; i < this->settings_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->settings(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetUserSettingsResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GetUserSettingsResponse*>(&from));
}

void GetUserSettingsResponse::MergeFrom(const GetUserSettingsResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  settings_.MergeFrom(from.settings_);
  mutable_unknown_fields()->append(from.unknown_fields());
}

void GetUserSettingsResponse::CopyFrom(const GetUserSettingsResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetUserSettingsResponse::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->settings())) return false;
  return true;
}

void GetUserSettingsResponse::Swap(GetUserSettingsResponse* other) {
  if (other != this) {
    settings_.Swap(&other->settings_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string GetUserSettingsResponse::GetTypeName() const {
  return "weizhu.settings.GetUserSettingsResponse";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace settings
}  // namespace weizhu

// @@protoc_insertion_point(global_scope)
