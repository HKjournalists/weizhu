// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: weizhu.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "weizhu.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)

namespace weizhu {

void protobuf_ShutdownFile_weizhu_2eproto() {
  delete Invoke::default_instance_;
  delete Session::default_instance_;
  delete Network::default_instance_;
  delete Weizhu::default_instance_;
  delete Android::default_instance_;
  delete Iphone::default_instance_;
  delete Iphone::_default_app_id_;
  delete WebMobile::default_instance_;
  delete HttpApiRequest::default_instance_;
  delete HttpApiResponse::default_instance_;
  delete SocketEstablishRequest::default_instance_;
  delete SocketEstablishResponse::default_instance_;
  delete SocketApiRequest::default_instance_;
  delete SocketApiResponse::default_instance_;
  delete PushMessage::default_instance_;
  delete SocketPushMsg::default_instance_;
  delete SocketPushAck::default_instance_;
  delete SocketPing::default_instance_;
  delete SocketPong::default_instance_;
  delete SocketUpPacket::default_instance_;
  delete SocketDownPacket::default_instance_;
  delete SystemHead::default_instance_;
  delete RequestHead::default_instance_;
  delete AnonymousHead::default_instance_;
  delete EmptyRequest::default_instance_;
  delete EmptyResponse::default_instance_;
  delete TestPush::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_weizhu_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_weizhu_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  Invoke::default_instance_ = new Invoke();
  Session::default_instance_ = new Session();
  Network::default_instance_ = new Network();
  Weizhu::default_instance_ = new Weizhu();
  Android::default_instance_ = new Android();
  Iphone::_default_app_id_ =
      new ::std::string("com.21tb.weizhu", 15);
  Iphone::default_instance_ = new Iphone();
  WebMobile::default_instance_ = new WebMobile();
  HttpApiRequest::default_instance_ = new HttpApiRequest();
  HttpApiResponse::default_instance_ = new HttpApiResponse();
  SocketEstablishRequest::default_instance_ = new SocketEstablishRequest();
  SocketEstablishResponse::default_instance_ = new SocketEstablishResponse();
  SocketApiRequest::default_instance_ = new SocketApiRequest();
  SocketApiResponse::default_instance_ = new SocketApiResponse();
  PushMessage::default_instance_ = new PushMessage();
  SocketPushMsg::default_instance_ = new SocketPushMsg();
  SocketPushAck::default_instance_ = new SocketPushAck();
  SocketPing::default_instance_ = new SocketPing();
  SocketPong::default_instance_ = new SocketPong();
  SocketUpPacket::default_instance_ = new SocketUpPacket();
  SocketDownPacket::default_instance_ = new SocketDownPacket();
  SystemHead::default_instance_ = new SystemHead();
  RequestHead::default_instance_ = new RequestHead();
  AnonymousHead::default_instance_ = new AnonymousHead();
  EmptyRequest::default_instance_ = new EmptyRequest();
  EmptyResponse::default_instance_ = new EmptyResponse();
  TestPush::default_instance_ = new TestPush();
  Invoke::default_instance_->InitAsDefaultInstance();
  Session::default_instance_->InitAsDefaultInstance();
  Network::default_instance_->InitAsDefaultInstance();
  Weizhu::default_instance_->InitAsDefaultInstance();
  Android::default_instance_->InitAsDefaultInstance();
  Iphone::default_instance_->InitAsDefaultInstance();
  WebMobile::default_instance_->InitAsDefaultInstance();
  HttpApiRequest::default_instance_->InitAsDefaultInstance();
  HttpApiResponse::default_instance_->InitAsDefaultInstance();
  SocketEstablishRequest::default_instance_->InitAsDefaultInstance();
  SocketEstablishResponse::default_instance_->InitAsDefaultInstance();
  SocketApiRequest::default_instance_->InitAsDefaultInstance();
  SocketApiResponse::default_instance_->InitAsDefaultInstance();
  PushMessage::default_instance_->InitAsDefaultInstance();
  SocketPushMsg::default_instance_->InitAsDefaultInstance();
  SocketPushAck::default_instance_->InitAsDefaultInstance();
  SocketPing::default_instance_->InitAsDefaultInstance();
  SocketPong::default_instance_->InitAsDefaultInstance();
  SocketUpPacket::default_instance_->InitAsDefaultInstance();
  SocketDownPacket::default_instance_->InitAsDefaultInstance();
  SystemHead::default_instance_->InitAsDefaultInstance();
  RequestHead::default_instance_->InitAsDefaultInstance();
  AnonymousHead::default_instance_->InitAsDefaultInstance();
  EmptyRequest::default_instance_->InitAsDefaultInstance();
  EmptyResponse::default_instance_->InitAsDefaultInstance();
  TestPush::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_weizhu_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_weizhu_2eproto_once_);
void protobuf_AddDesc_weizhu_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_weizhu_2eproto_once_,
                 &protobuf_AddDesc_weizhu_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_weizhu_2eproto {
  StaticDescriptorInitializer_weizhu_2eproto() {
    protobuf_AddDesc_weizhu_2eproto();
  }
} static_descriptor_initializer_weizhu_2eproto_;
#endif

// ===================================================================

#ifndef _MSC_VER
const int Invoke::kInvokeIdFieldNumber;
const int Invoke::kServiceNameFieldNumber;
const int Invoke::kFunctionNameFieldNumber;
#endif  // !_MSC_VER

Invoke::Invoke()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:weizhu.Invoke)
}

void Invoke::InitAsDefaultInstance() {
}

Invoke::Invoke(const Invoke& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:weizhu.Invoke)
}

void Invoke::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  invoke_id_ = 0;
  service_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  function_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Invoke::~Invoke() {
  // @@protoc_insertion_point(destructor:weizhu.Invoke)
  SharedDtor();
}

void Invoke::SharedDtor() {
  if (service_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete service_name_;
  }
  if (function_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete function_name_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void Invoke::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Invoke& Invoke::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_weizhu_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_weizhu_2eproto();
#endif
  return *default_instance_;
}

Invoke* Invoke::default_instance_ = NULL;

Invoke* Invoke::New() const {
  return new Invoke;
}

void Invoke::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    invoke_id_ = 0;
    if (has_service_name()) {
      if (service_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        service_name_->clear();
      }
    }
    if (has_function_name()) {
      if (function_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        function_name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool Invoke::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:weizhu.Invoke)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 invoke_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &invoke_id_)));
          set_has_invoke_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_service_name;
        break;
      }

      // required string service_name = 2;
      case 2: {
        if (tag == 18) {
         parse_service_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_service_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_function_name;
        break;
      }

      // required string function_name = 3;
      case 3: {
        if (tag == 26) {
         parse_function_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_function_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:weizhu.Invoke)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:weizhu.Invoke)
  return false;
#undef DO_
}

void Invoke::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:weizhu.Invoke)
  // required int32 invoke_id = 1;
  if (has_invoke_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->invoke_id(), output);
  }

  // required string service_name = 2;
  if (has_service_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->service_name(), output);
  }

  // required string function_name = 3;
  if (has_function_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->function_name(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:weizhu.Invoke)
}

int Invoke::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 invoke_id = 1;
    if (has_invoke_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->invoke_id());
    }

    // required string service_name = 2;
    if (has_service_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->service_name());
    }

    // required string function_name = 3;
    if (has_function_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->function_name());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Invoke::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Invoke*>(&from));
}

void Invoke::MergeFrom(const Invoke& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_invoke_id()) {
      set_invoke_id(from.invoke_id());
    }
    if (from.has_service_name()) {
      set_service_name(from.service_name());
    }
    if (from.has_function_name()) {
      set_function_name(from.function_name());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void Invoke::CopyFrom(const Invoke& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Invoke::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void Invoke::Swap(Invoke* other) {
  if (other != this) {
    std::swap(invoke_id_, other->invoke_id_);
    std::swap(service_name_, other->service_name_);
    std::swap(function_name_, other->function_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string Invoke::GetTypeName() const {
  return "weizhu.Invoke";
}


// ===================================================================

#ifndef _MSC_VER
const int Session::kCompanyIdFieldNumber;
const int Session::kUserIdFieldNumber;
const int Session::kSessionIdFieldNumber;
#endif  // !_MSC_VER

Session::Session()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:weizhu.Session)
}

void Session::InitAsDefaultInstance() {
}

Session::Session(const Session& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:weizhu.Session)
}

void Session::SharedCtor() {
  _cached_size_ = 0;
  company_id_ = GOOGLE_LONGLONG(0);
  user_id_ = GOOGLE_LONGLONG(0);
  session_id_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Session::~Session() {
  // @@protoc_insertion_point(destructor:weizhu.Session)
  SharedDtor();
}

void Session::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void Session::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Session& Session::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_weizhu_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_weizhu_2eproto();
#endif
  return *default_instance_;
}

Session* Session::default_instance_ = NULL;

Session* Session::New() const {
  return new Session;
}

void Session::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Session*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(company_id_, session_id_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool Session::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:weizhu.Session)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 company_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &company_id_)));
          set_has_company_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_user_id;
        break;
      }

      // required int64 user_id = 2;
      case 2: {
        if (tag == 16) {
         parse_user_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_session_id;
        break;
      }

      // required int64 session_id = 3;
      case 3: {
        if (tag == 24) {
         parse_session_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &session_id_)));
          set_has_session_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:weizhu.Session)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:weizhu.Session)
  return false;
#undef DO_
}

void Session::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:weizhu.Session)
  // required int64 company_id = 1;
  if (has_company_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->company_id(), output);
  }

  // required int64 user_id = 2;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->user_id(), output);
  }

  // required int64 session_id = 3;
  if (has_session_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->session_id(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:weizhu.Session)
}

int Session::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 company_id = 1;
    if (has_company_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->company_id());
    }

    // required int64 user_id = 2;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->user_id());
    }

    // required int64 session_id = 3;
    if (has_session_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->session_id());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Session::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Session*>(&from));
}

void Session::MergeFrom(const Session& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_company_id()) {
      set_company_id(from.company_id());
    }
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_session_id()) {
      set_session_id(from.session_id());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void Session::CopyFrom(const Session& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Session::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void Session::Swap(Session* other) {
  if (other != this) {
    std::swap(company_id_, other->company_id_);
    std::swap(user_id_, other->user_id_);
    std::swap(session_id_, other->session_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string Session::GetTypeName() const {
  return "weizhu.Session";
}


// ===================================================================

bool Network_Type_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Network_Type Network::UNKNOWN;
const Network_Type Network::WIFI;
const Network_Type Network::Type_MIN;
const Network_Type Network::Type_MAX;
const int Network::Type_ARRAYSIZE;
#endif  // _MSC_VER
bool Network_Protocol_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Network_Protocol Network::HTTP_PB;
const Network_Protocol Network::SOCKET_PB;
const Network_Protocol Network::WEB_MOBILE;
const Network_Protocol Network::Protocol_MIN;
const Network_Protocol Network::Protocol_MAX;
const int Network::Protocol_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int Network::kTypeFieldNumber;
const int Network::kProtocolFieldNumber;
const int Network::kRemoteHostFieldNumber;
const int Network::kRemotePortFieldNumber;
#endif  // !_MSC_VER

Network::Network()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:weizhu.Network)
}

void Network::InitAsDefaultInstance() {
}

Network::Network(const Network& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:weizhu.Network)
}

void Network::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  type_ = 0;
  protocol_ = 0;
  remote_host_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  remote_port_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Network::~Network() {
  // @@protoc_insertion_point(destructor:weizhu.Network)
  SharedDtor();
}

void Network::SharedDtor() {
  if (remote_host_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete remote_host_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void Network::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Network& Network::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_weizhu_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_weizhu_2eproto();
#endif
  return *default_instance_;
}

Network* Network::default_instance_ = NULL;

Network* Network::New() const {
  return new Network;
}

void Network::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Network*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(type_, protocol_);
    if (has_remote_host()) {
      if (remote_host_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        remote_host_->clear();
      }
    }
    remote_port_ = 0;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool Network::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:weizhu.Network)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .weizhu.Network.Type type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::weizhu::Network_Type_IsValid(value)) {
            set_type(static_cast< ::weizhu::Network_Type >(value));
          } else {
            unknown_fields_stream.WriteVarint32(tag);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_protocol;
        break;
      }

      // required .weizhu.Network.Protocol protocol = 2;
      case 2: {
        if (tag == 16) {
         parse_protocol:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::weizhu::Network_Protocol_IsValid(value)) {
            set_protocol(static_cast< ::weizhu::Network_Protocol >(value));
          } else {
            unknown_fields_stream.WriteVarint32(tag);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_remote_host;
        break;
      }

      // required string remote_host = 3;
      case 3: {
        if (tag == 26) {
         parse_remote_host:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_remote_host()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_remote_port;
        break;
      }

      // required int32 remote_port = 4;
      case 4: {
        if (tag == 32) {
         parse_remote_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &remote_port_)));
          set_has_remote_port();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:weizhu.Network)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:weizhu.Network)
  return false;
#undef DO_
}

void Network::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:weizhu.Network)
  // required .weizhu.Network.Type type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // required .weizhu.Network.Protocol protocol = 2;
  if (has_protocol()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->protocol(), output);
  }

  // required string remote_host = 3;
  if (has_remote_host()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->remote_host(), output);
  }

  // required int32 remote_port = 4;
  if (has_remote_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->remote_port(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:weizhu.Network)
}

int Network::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .weizhu.Network.Type type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // required .weizhu.Network.Protocol protocol = 2;
    if (has_protocol()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protocol());
    }

    // required string remote_host = 3;
    if (has_remote_host()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->remote_host());
    }

    // required int32 remote_port = 4;
    if (has_remote_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->remote_port());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Network::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Network*>(&from));
}

void Network::MergeFrom(const Network& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_protocol()) {
      set_protocol(from.protocol());
    }
    if (from.has_remote_host()) {
      set_remote_host(from.remote_host());
    }
    if (from.has_remote_port()) {
      set_remote_port(from.remote_port());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void Network::CopyFrom(const Network& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Network::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void Network::Swap(Network* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(protocol_, other->protocol_);
    std::swap(remote_host_, other->remote_host_);
    std::swap(remote_port_, other->remote_port_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string Network::GetTypeName() const {
  return "weizhu.Network";
}


// ===================================================================

bool Weizhu_Platform_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Weizhu_Platform Weizhu::ANDROID;
const Weizhu_Platform Weizhu::IPHONE;
const Weizhu_Platform Weizhu::Platform_MIN;
const Weizhu_Platform Weizhu::Platform_MAX;
const int Weizhu::Platform_ARRAYSIZE;
#endif  // _MSC_VER
bool Weizhu_Stage_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Weizhu_Stage Weizhu::RELEASE;
const Weizhu_Stage Weizhu::BETA;
const Weizhu_Stage Weizhu::ALPHA;
const Weizhu_Stage Weizhu::Stage_MIN;
const Weizhu_Stage Weizhu::Stage_MAX;
const int Weizhu::Stage_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int Weizhu::kPlatformFieldNumber;
const int Weizhu::kVersionNameFieldNumber;
const int Weizhu::kVersionCodeFieldNumber;
const int Weizhu::kStageFieldNumber;
const int Weizhu::kBuildTimeFieldNumber;
const int Weizhu::kBuildHashFieldNumber;
#endif  // !_MSC_VER

Weizhu::Weizhu()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:weizhu.Weizhu)
}

void Weizhu::InitAsDefaultInstance() {
}

Weizhu::Weizhu(const Weizhu& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:weizhu.Weizhu)
}

void Weizhu::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  platform_ = 0;
  version_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  version_code_ = 0;
  stage_ = 0;
  build_time_ = 0;
  build_hash_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Weizhu::~Weizhu() {
  // @@protoc_insertion_point(destructor:weizhu.Weizhu)
  SharedDtor();
}

void Weizhu::SharedDtor() {
  if (version_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete version_name_;
  }
  if (build_hash_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete build_hash_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void Weizhu::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Weizhu& Weizhu::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_weizhu_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_weizhu_2eproto();
#endif
  return *default_instance_;
}

Weizhu* Weizhu::default_instance_ = NULL;

Weizhu* Weizhu::New() const {
  return new Weizhu;
}

void Weizhu::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Weizhu*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(platform_, build_time_);
    if (has_version_name()) {
      if (version_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        version_name_->clear();
      }
    }
    if (has_build_hash()) {
      if (build_hash_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        build_hash_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool Weizhu::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:weizhu.Weizhu)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .weizhu.Weizhu.Platform platform = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::weizhu::Weizhu_Platform_IsValid(value)) {
            set_platform(static_cast< ::weizhu::Weizhu_Platform >(value));
          } else {
            unknown_fields_stream.WriteVarint32(tag);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_version_name;
        break;
      }

      // required string version_name = 2;
      case 2: {
        if (tag == 18) {
         parse_version_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_version_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_version_code;
        break;
      }

      // required int32 version_code = 3;
      case 3: {
        if (tag == 24) {
         parse_version_code:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &version_code_)));
          set_has_version_code();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_stage;
        break;
      }

      // required .weizhu.Weizhu.Stage stage = 4;
      case 4: {
        if (tag == 32) {
         parse_stage:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::weizhu::Weizhu_Stage_IsValid(value)) {
            set_stage(static_cast< ::weizhu::Weizhu_Stage >(value));
          } else {
            unknown_fields_stream.WriteVarint32(tag);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_build_time;
        break;
      }

      // required int32 build_time = 5;
      case 5: {
        if (tag == 40) {
         parse_build_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &build_time_)));
          set_has_build_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_build_hash;
        break;
      }

      // optional string build_hash = 6;
      case 6: {
        if (tag == 50) {
         parse_build_hash:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_build_hash()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:weizhu.Weizhu)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:weizhu.Weizhu)
  return false;
#undef DO_
}

void Weizhu::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:weizhu.Weizhu)
  // required .weizhu.Weizhu.Platform platform = 1;
  if (has_platform()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->platform(), output);
  }

  // required string version_name = 2;
  if (has_version_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->version_name(), output);
  }

  // required int32 version_code = 3;
  if (has_version_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->version_code(), output);
  }

  // required .weizhu.Weizhu.Stage stage = 4;
  if (has_stage()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->stage(), output);
  }

  // required int32 build_time = 5;
  if (has_build_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->build_time(), output);
  }

  // optional string build_hash = 6;
  if (has_build_hash()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->build_hash(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:weizhu.Weizhu)
}

int Weizhu::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .weizhu.Weizhu.Platform platform = 1;
    if (has_platform()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->platform());
    }

    // required string version_name = 2;
    if (has_version_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->version_name());
    }

    // required int32 version_code = 3;
    if (has_version_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->version_code());
    }

    // required .weizhu.Weizhu.Stage stage = 4;
    if (has_stage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->stage());
    }

    // required int32 build_time = 5;
    if (has_build_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->build_time());
    }

    // optional string build_hash = 6;
    if (has_build_hash()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->build_hash());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Weizhu::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Weizhu*>(&from));
}

void Weizhu::MergeFrom(const Weizhu& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_platform()) {
      set_platform(from.platform());
    }
    if (from.has_version_name()) {
      set_version_name(from.version_name());
    }
    if (from.has_version_code()) {
      set_version_code(from.version_code());
    }
    if (from.has_stage()) {
      set_stage(from.stage());
    }
    if (from.has_build_time()) {
      set_build_time(from.build_time());
    }
    if (from.has_build_hash()) {
      set_build_hash(from.build_hash());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void Weizhu::CopyFrom(const Weizhu& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Weizhu::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void Weizhu::Swap(Weizhu* other) {
  if (other != this) {
    std::swap(platform_, other->platform_);
    std::swap(version_name_, other->version_name_);
    std::swap(version_code_, other->version_code_);
    std::swap(stage_, other->stage_);
    std::swap(build_time_, other->build_time_);
    std::swap(build_hash_, other->build_hash_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string Weizhu::GetTypeName() const {
  return "weizhu.Weizhu";
}


// ===================================================================

#ifndef _MSC_VER
const int Android::kDeviceFieldNumber;
const int Android::kManufacturerFieldNumber;
const int Android::kBrandFieldNumber;
const int Android::kModelFieldNumber;
const int Android::kSerialFieldNumber;
const int Android::kReleaseFieldNumber;
const int Android::kSdkIntFieldNumber;
const int Android::kCodenameFieldNumber;
#endif  // !_MSC_VER

Android::Android()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:weizhu.Android)
}

void Android::InitAsDefaultInstance() {
}

Android::Android(const Android& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:weizhu.Android)
}

void Android::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  device_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  manufacturer_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  brand_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  model_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  serial_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  release_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sdk_int_ = 0;
  codename_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Android::~Android() {
  // @@protoc_insertion_point(destructor:weizhu.Android)
  SharedDtor();
}

void Android::SharedDtor() {
  if (device_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete device_;
  }
  if (manufacturer_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete manufacturer_;
  }
  if (brand_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete brand_;
  }
  if (model_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete model_;
  }
  if (serial_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete serial_;
  }
  if (release_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete release_;
  }
  if (codename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete codename_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void Android::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Android& Android::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_weizhu_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_weizhu_2eproto();
#endif
  return *default_instance_;
}

Android* Android::default_instance_ = NULL;

Android* Android::New() const {
  return new Android;
}

void Android::Clear() {
  if (_has_bits_[0 / 32] & 255) {
    if (has_device()) {
      if (device_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        device_->clear();
      }
    }
    if (has_manufacturer()) {
      if (manufacturer_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        manufacturer_->clear();
      }
    }
    if (has_brand()) {
      if (brand_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        brand_->clear();
      }
    }
    if (has_model()) {
      if (model_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        model_->clear();
      }
    }
    if (has_serial()) {
      if (serial_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        serial_->clear();
      }
    }
    if (has_release()) {
      if (release_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        release_->clear();
      }
    }
    sdk_int_ = 0;
    if (has_codename()) {
      if (codename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        codename_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool Android::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:weizhu.Android)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string device = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_device()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_manufacturer;
        break;
      }

      // required string manufacturer = 2;
      case 2: {
        if (tag == 18) {
         parse_manufacturer:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_manufacturer()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_brand;
        break;
      }

      // required string brand = 3;
      case 3: {
        if (tag == 26) {
         parse_brand:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_brand()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_model;
        break;
      }

      // required string model = 4;
      case 4: {
        if (tag == 34) {
         parse_model:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_model()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_serial;
        break;
      }

      // required string serial = 5;
      case 5: {
        if (tag == 42) {
         parse_serial:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_serial()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_release;
        break;
      }

      // required string release = 6;
      case 6: {
        if (tag == 50) {
         parse_release:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_release()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_sdk_int;
        break;
      }

      // required int32 sdk_int = 7;
      case 7: {
        if (tag == 56) {
         parse_sdk_int:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sdk_int_)));
          set_has_sdk_int();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_codename;
        break;
      }

      // required string codename = 8;
      case 8: {
        if (tag == 66) {
         parse_codename:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_codename()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:weizhu.Android)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:weizhu.Android)
  return false;
#undef DO_
}

void Android::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:weizhu.Android)
  // required string device = 1;
  if (has_device()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->device(), output);
  }

  // required string manufacturer = 2;
  if (has_manufacturer()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->manufacturer(), output);
  }

  // required string brand = 3;
  if (has_brand()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->brand(), output);
  }

  // required string model = 4;
  if (has_model()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->model(), output);
  }

  // required string serial = 5;
  if (has_serial()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->serial(), output);
  }

  // required string release = 6;
  if (has_release()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->release(), output);
  }

  // required int32 sdk_int = 7;
  if (has_sdk_int()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->sdk_int(), output);
  }

  // required string codename = 8;
  if (has_codename()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->codename(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:weizhu.Android)
}

int Android::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string device = 1;
    if (has_device()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->device());
    }

    // required string manufacturer = 2;
    if (has_manufacturer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->manufacturer());
    }

    // required string brand = 3;
    if (has_brand()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->brand());
    }

    // required string model = 4;
    if (has_model()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->model());
    }

    // required string serial = 5;
    if (has_serial()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->serial());
    }

    // required string release = 6;
    if (has_release()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->release());
    }

    // required int32 sdk_int = 7;
    if (has_sdk_int()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sdk_int());
    }

    // required string codename = 8;
    if (has_codename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->codename());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Android::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Android*>(&from));
}

void Android::MergeFrom(const Android& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_device()) {
      set_device(from.device());
    }
    if (from.has_manufacturer()) {
      set_manufacturer(from.manufacturer());
    }
    if (from.has_brand()) {
      set_brand(from.brand());
    }
    if (from.has_model()) {
      set_model(from.model());
    }
    if (from.has_serial()) {
      set_serial(from.serial());
    }
    if (from.has_release()) {
      set_release(from.release());
    }
    if (from.has_sdk_int()) {
      set_sdk_int(from.sdk_int());
    }
    if (from.has_codename()) {
      set_codename(from.codename());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void Android::CopyFrom(const Android& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Android::IsInitialized() const {
  if ((_has_bits_[0] & 0x000000ff) != 0x000000ff) return false;

  return true;
}

void Android::Swap(Android* other) {
  if (other != this) {
    std::swap(device_, other->device_);
    std::swap(manufacturer_, other->manufacturer_);
    std::swap(brand_, other->brand_);
    std::swap(model_, other->model_);
    std::swap(serial_, other->serial_);
    std::swap(release_, other->release_);
    std::swap(sdk_int_, other->sdk_int_);
    std::swap(codename_, other->codename_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string Android::GetTypeName() const {
  return "weizhu.Android";
}


// ===================================================================

::std::string* Iphone::_default_app_id_ = NULL;
#ifndef _MSC_VER
const int Iphone::kNameFieldNumber;
const int Iphone::kSystemNameFieldNumber;
const int Iphone::kSystemVersionFieldNumber;
const int Iphone::kModelFieldNumber;
const int Iphone::kLocalizedModelFieldNumber;
const int Iphone::kDeviceTokenFieldNumber;
const int Iphone::kMacFieldNumber;
const int Iphone::kAppIdFieldNumber;
#endif  // !_MSC_VER

Iphone::Iphone()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:weizhu.Iphone)
}

void Iphone::InitAsDefaultInstance() {
}

Iphone::Iphone(const Iphone& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:weizhu.Iphone)
}

void Iphone::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  system_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  system_version_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  model_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  localized_model_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  device_token_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mac_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  app_id_ = const_cast< ::std::string*>(_default_app_id_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Iphone::~Iphone() {
  // @@protoc_insertion_point(destructor:weizhu.Iphone)
  SharedDtor();
}

void Iphone::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (system_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete system_name_;
  }
  if (system_version_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete system_version_;
  }
  if (model_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete model_;
  }
  if (localized_model_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete localized_model_;
  }
  if (device_token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete device_token_;
  }
  if (mac_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete mac_;
  }
  if (app_id_ != _default_app_id_) {
    delete app_id_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void Iphone::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Iphone& Iphone::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_weizhu_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_weizhu_2eproto();
#endif
  return *default_instance_;
}

Iphone* Iphone::default_instance_ = NULL;

Iphone* Iphone::New() const {
  return new Iphone;
}

void Iphone::Clear() {
  if (_has_bits_[0 / 32] & 255) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    if (has_system_name()) {
      if (system_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        system_name_->clear();
      }
    }
    if (has_system_version()) {
      if (system_version_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        system_version_->clear();
      }
    }
    if (has_model()) {
      if (model_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        model_->clear();
      }
    }
    if (has_localized_model()) {
      if (localized_model_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        localized_model_->clear();
      }
    }
    if (has_device_token()) {
      if (device_token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        device_token_->clear();
      }
    }
    if (has_mac()) {
      if (mac_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        mac_->clear();
      }
    }
    if (has_app_id()) {
      if (app_id_ != _default_app_id_) {
        app_id_->assign(*_default_app_id_);
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool Iphone::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:weizhu.Iphone)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_system_name;
        break;
      }

      // required string system_name = 2;
      case 2: {
        if (tag == 18) {
         parse_system_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_system_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_system_version;
        break;
      }

      // required string system_version = 3;
      case 3: {
        if (tag == 26) {
         parse_system_version:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_system_version()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_model;
        break;
      }

      // required string model = 4;
      case 4: {
        if (tag == 34) {
         parse_model:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_model()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_localized_model;
        break;
      }

      // required string localized_model = 5;
      case 5: {
        if (tag == 42) {
         parse_localized_model:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_localized_model()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_device_token;
        break;
      }

      // required string device_token = 6;
      case 6: {
        if (tag == 50) {
         parse_device_token:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_device_token()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_mac;
        break;
      }

      // required string mac = 7;
      case 7: {
        if (tag == 58) {
         parse_mac:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mac()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_app_id;
        break;
      }

      // optional string app_id = 8 [default = "com.21tb.weizhu"];
      case 8: {
        if (tag == 66) {
         parse_app_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_app_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:weizhu.Iphone)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:weizhu.Iphone)
  return false;
#undef DO_
}

void Iphone::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:weizhu.Iphone)
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // required string system_name = 2;
  if (has_system_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->system_name(), output);
  }

  // required string system_version = 3;
  if (has_system_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->system_version(), output);
  }

  // required string model = 4;
  if (has_model()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->model(), output);
  }

  // required string localized_model = 5;
  if (has_localized_model()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->localized_model(), output);
  }

  // required string device_token = 6;
  if (has_device_token()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->device_token(), output);
  }

  // required string mac = 7;
  if (has_mac()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->mac(), output);
  }

  // optional string app_id = 8 [default = "com.21tb.weizhu"];
  if (has_app_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->app_id(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:weizhu.Iphone)
}

int Iphone::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required string system_name = 2;
    if (has_system_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->system_name());
    }

    // required string system_version = 3;
    if (has_system_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->system_version());
    }

    // required string model = 4;
    if (has_model()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->model());
    }

    // required string localized_model = 5;
    if (has_localized_model()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->localized_model());
    }

    // required string device_token = 6;
    if (has_device_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->device_token());
    }

    // required string mac = 7;
    if (has_mac()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->mac());
    }

    // optional string app_id = 8 [default = "com.21tb.weizhu"];
    if (has_app_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->app_id());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Iphone::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Iphone*>(&from));
}

void Iphone::MergeFrom(const Iphone& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_system_name()) {
      set_system_name(from.system_name());
    }
    if (from.has_system_version()) {
      set_system_version(from.system_version());
    }
    if (from.has_model()) {
      set_model(from.model());
    }
    if (from.has_localized_model()) {
      set_localized_model(from.localized_model());
    }
    if (from.has_device_token()) {
      set_device_token(from.device_token());
    }
    if (from.has_mac()) {
      set_mac(from.mac());
    }
    if (from.has_app_id()) {
      set_app_id(from.app_id());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void Iphone::CopyFrom(const Iphone& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Iphone::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007f) != 0x0000007f) return false;

  return true;
}

void Iphone::Swap(Iphone* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(system_name_, other->system_name_);
    std::swap(system_version_, other->system_version_);
    std::swap(model_, other->model_);
    std::swap(localized_model_, other->localized_model_);
    std::swap(device_token_, other->device_token_);
    std::swap(mac_, other->mac_);
    std::swap(app_id_, other->app_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string Iphone::GetTypeName() const {
  return "weizhu.Iphone";
}


// ===================================================================

#ifndef _MSC_VER
const int WebMobile::kUserAgentFieldNumber;
#endif  // !_MSC_VER

WebMobile::WebMobile()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:weizhu.WebMobile)
}

void WebMobile::InitAsDefaultInstance() {
}

WebMobile::WebMobile(const WebMobile& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:weizhu.WebMobile)
}

void WebMobile::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  user_agent_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WebMobile::~WebMobile() {
  // @@protoc_insertion_point(destructor:weizhu.WebMobile)
  SharedDtor();
}

void WebMobile::SharedDtor() {
  if (user_agent_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete user_agent_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void WebMobile::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const WebMobile& WebMobile::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_weizhu_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_weizhu_2eproto();
#endif
  return *default_instance_;
}

WebMobile* WebMobile::default_instance_ = NULL;

WebMobile* WebMobile::New() const {
  return new WebMobile;
}

void WebMobile::Clear() {
  if (has_user_agent()) {
    if (user_agent_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      user_agent_->clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool WebMobile::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:weizhu.WebMobile)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string user_agent = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_agent()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:weizhu.WebMobile)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:weizhu.WebMobile)
  return false;
#undef DO_
}

void WebMobile::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:weizhu.WebMobile)
  // required string user_agent = 1;
  if (has_user_agent()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->user_agent(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:weizhu.WebMobile)
}

int WebMobile::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string user_agent = 1;
    if (has_user_agent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->user_agent());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WebMobile::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const WebMobile*>(&from));
}

void WebMobile::MergeFrom(const WebMobile& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_agent()) {
      set_user_agent(from.user_agent());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void WebMobile::CopyFrom(const WebMobile& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WebMobile::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void WebMobile::Swap(WebMobile* other) {
  if (other != this) {
    std::swap(user_agent_, other->user_agent_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string WebMobile::GetTypeName() const {
  return "weizhu.WebMobile";
}


// ===================================================================

#ifndef _MSC_VER
const int HttpApiRequest::kSessionKeyFieldNumber;
const int HttpApiRequest::kInvokeFieldNumber;
const int HttpApiRequest::kNetworkTypeFieldNumber;
const int HttpApiRequest::kWeizhuFieldNumber;
const int HttpApiRequest::kAndroidFieldNumber;
const int HttpApiRequest::kIphoneFieldNumber;
const int HttpApiRequest::kRequestBodyFieldNumber;
#endif  // !_MSC_VER

HttpApiRequest::HttpApiRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:weizhu.HttpApiRequest)
}

void HttpApiRequest::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  invoke_ = const_cast< ::weizhu::Invoke*>(
      ::weizhu::Invoke::internal_default_instance());
#else
  invoke_ = const_cast< ::weizhu::Invoke*>(&::weizhu::Invoke::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  weizhu_ = const_cast< ::weizhu::Weizhu*>(
      ::weizhu::Weizhu::internal_default_instance());
#else
  weizhu_ = const_cast< ::weizhu::Weizhu*>(&::weizhu::Weizhu::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  android_ = const_cast< ::weizhu::Android*>(
      ::weizhu::Android::internal_default_instance());
#else
  android_ = const_cast< ::weizhu::Android*>(&::weizhu::Android::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  iphone_ = const_cast< ::weizhu::Iphone*>(
      ::weizhu::Iphone::internal_default_instance());
#else
  iphone_ = const_cast< ::weizhu::Iphone*>(&::weizhu::Iphone::default_instance());
#endif
}

HttpApiRequest::HttpApiRequest(const HttpApiRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:weizhu.HttpApiRequest)
}

void HttpApiRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  session_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  invoke_ = NULL;
  network_type_ = 0;
  weizhu_ = NULL;
  android_ = NULL;
  iphone_ = NULL;
  request_body_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HttpApiRequest::~HttpApiRequest() {
  // @@protoc_insertion_point(destructor:weizhu.HttpApiRequest)
  SharedDtor();
}

void HttpApiRequest::SharedDtor() {
  if (session_key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete session_key_;
  }
  if (request_body_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete request_body_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete invoke_;
    delete weizhu_;
    delete android_;
    delete iphone_;
  }
}

void HttpApiRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const HttpApiRequest& HttpApiRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_weizhu_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_weizhu_2eproto();
#endif
  return *default_instance_;
}

HttpApiRequest* HttpApiRequest::default_instance_ = NULL;

HttpApiRequest* HttpApiRequest::New() const {
  return new HttpApiRequest;
}

void HttpApiRequest::Clear() {
  if (_has_bits_[0 / 32] & 127) {
    if (has_session_key()) {
      if (session_key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        session_key_->clear();
      }
    }
    if (has_invoke()) {
      if (invoke_ != NULL) invoke_->::weizhu::Invoke::Clear();
    }
    network_type_ = 0;
    if (has_weizhu()) {
      if (weizhu_ != NULL) weizhu_->::weizhu::Weizhu::Clear();
    }
    if (has_android()) {
      if (android_ != NULL) android_->::weizhu::Android::Clear();
    }
    if (has_iphone()) {
      if (iphone_ != NULL) iphone_->::weizhu::Iphone::Clear();
    }
    if (has_request_body()) {
      if (request_body_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        request_body_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool HttpApiRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:weizhu.HttpApiRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes session_key = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_session_key()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_invoke;
        break;
      }

      // required .weizhu.Invoke invoke = 2;
      case 2: {
        if (tag == 18) {
         parse_invoke:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_invoke()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_network_type;
        break;
      }

      // required .weizhu.Network.Type network_type = 3;
      case 3: {
        if (tag == 24) {
         parse_network_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::weizhu::Network_Type_IsValid(value)) {
            set_network_type(static_cast< ::weizhu::Network_Type >(value));
          } else {
            unknown_fields_stream.WriteVarint32(tag);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_weizhu;
        break;
      }

      // required .weizhu.Weizhu weizhu = 4;
      case 4: {
        if (tag == 34) {
         parse_weizhu:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_weizhu()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_android;
        break;
      }

      // optional .weizhu.Android android = 5;
      case 5: {
        if (tag == 42) {
         parse_android:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_android()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_iphone;
        break;
      }

      // optional .weizhu.Iphone iphone = 6;
      case 6: {
        if (tag == 50) {
         parse_iphone:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_iphone()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(794)) goto parse_request_body;
        break;
      }

      // required bytes request_body = 99;
      case 99: {
        if (tag == 794) {
         parse_request_body:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_request_body()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:weizhu.HttpApiRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:weizhu.HttpApiRequest)
  return false;
#undef DO_
}

void HttpApiRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:weizhu.HttpApiRequest)
  // required bytes session_key = 1;
  if (has_session_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->session_key(), output);
  }

  // required .weizhu.Invoke invoke = 2;
  if (has_invoke()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->invoke(), output);
  }

  // required .weizhu.Network.Type network_type = 3;
  if (has_network_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->network_type(), output);
  }

  // required .weizhu.Weizhu weizhu = 4;
  if (has_weizhu()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, this->weizhu(), output);
  }

  // optional .weizhu.Android android = 5;
  if (has_android()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      5, this->android(), output);
  }

  // optional .weizhu.Iphone iphone = 6;
  if (has_iphone()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      6, this->iphone(), output);
  }

  // required bytes request_body = 99;
  if (has_request_body()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      99, this->request_body(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:weizhu.HttpApiRequest)
}

int HttpApiRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes session_key = 1;
    if (has_session_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->session_key());
    }

    // required .weizhu.Invoke invoke = 2;
    if (has_invoke()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->invoke());
    }

    // required .weizhu.Network.Type network_type = 3;
    if (has_network_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->network_type());
    }

    // required .weizhu.Weizhu weizhu = 4;
    if (has_weizhu()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->weizhu());
    }

    // optional .weizhu.Android android = 5;
    if (has_android()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->android());
    }

    // optional .weizhu.Iphone iphone = 6;
    if (has_iphone()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->iphone());
    }

    // required bytes request_body = 99;
    if (has_request_body()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->request_body());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HttpApiRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const HttpApiRequest*>(&from));
}

void HttpApiRequest::MergeFrom(const HttpApiRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_session_key()) {
      set_session_key(from.session_key());
    }
    if (from.has_invoke()) {
      mutable_invoke()->::weizhu::Invoke::MergeFrom(from.invoke());
    }
    if (from.has_network_type()) {
      set_network_type(from.network_type());
    }
    if (from.has_weizhu()) {
      mutable_weizhu()->::weizhu::Weizhu::MergeFrom(from.weizhu());
    }
    if (from.has_android()) {
      mutable_android()->::weizhu::Android::MergeFrom(from.android());
    }
    if (from.has_iphone()) {
      mutable_iphone()->::weizhu::Iphone::MergeFrom(from.iphone());
    }
    if (from.has_request_body()) {
      set_request_body(from.request_body());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void HttpApiRequest::CopyFrom(const HttpApiRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HttpApiRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000004f) != 0x0000004f) return false;

  if (has_invoke()) {
    if (!this->invoke().IsInitialized()) return false;
  }
  if (has_weizhu()) {
    if (!this->weizhu().IsInitialized()) return false;
  }
  if (has_android()) {
    if (!this->android().IsInitialized()) return false;
  }
  if (has_iphone()) {
    if (!this->iphone().IsInitialized()) return false;
  }
  return true;
}

void HttpApiRequest::Swap(HttpApiRequest* other) {
  if (other != this) {
    std::swap(session_key_, other->session_key_);
    std::swap(invoke_, other->invoke_);
    std::swap(network_type_, other->network_type_);
    std::swap(weizhu_, other->weizhu_);
    std::swap(android_, other->android_);
    std::swap(iphone_, other->iphone_);
    std::swap(request_body_, other->request_body_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string HttpApiRequest::GetTypeName() const {
  return "weizhu.HttpApiRequest";
}


// ===================================================================

bool HttpApiResponse_Result_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 99:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const HttpApiResponse_Result HttpApiResponse::SUCC;
const HttpApiResponse_Result HttpApiResponse::FAIL_SESSION_DECRYPTION;
const HttpApiResponse_Result HttpApiResponse::FAIL_SESSION_EXPIRED;
const HttpApiResponse_Result HttpApiResponse::FAIL_INVOKE_UNKNOWN;
const HttpApiResponse_Result HttpApiResponse::FAIL_BODY_DECRYPTION;
const HttpApiResponse_Result HttpApiResponse::FAIL_BODY_PARSE_FAIL;
const HttpApiResponse_Result HttpApiResponse::FAIL_USER_DISABLE;
const HttpApiResponse_Result HttpApiResponse::FAIL_SERVER_EXCEPTION;
const HttpApiResponse_Result HttpApiResponse::Result_MIN;
const HttpApiResponse_Result HttpApiResponse::Result_MAX;
const int HttpApiResponse::Result_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int HttpApiResponse::kInvokeFieldNumber;
const int HttpApiResponse::kResultFieldNumber;
const int HttpApiResponse::kFailTextFieldNumber;
const int HttpApiResponse::kResponseBodyFieldNumber;
#endif  // !_MSC_VER

HttpApiResponse::HttpApiResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:weizhu.HttpApiResponse)
}

void HttpApiResponse::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  invoke_ = const_cast< ::weizhu::Invoke*>(
      ::weizhu::Invoke::internal_default_instance());
#else
  invoke_ = const_cast< ::weizhu::Invoke*>(&::weizhu::Invoke::default_instance());
#endif
}

HttpApiResponse::HttpApiResponse(const HttpApiResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:weizhu.HttpApiResponse)
}

void HttpApiResponse::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  invoke_ = NULL;
  result_ = 99;
  fail_text_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  response_body_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HttpApiResponse::~HttpApiResponse() {
  // @@protoc_insertion_point(destructor:weizhu.HttpApiResponse)
  SharedDtor();
}

void HttpApiResponse::SharedDtor() {
  if (fail_text_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete fail_text_;
  }
  if (response_body_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete response_body_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete invoke_;
  }
}

void HttpApiResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const HttpApiResponse& HttpApiResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_weizhu_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_weizhu_2eproto();
#endif
  return *default_instance_;
}

HttpApiResponse* HttpApiResponse::default_instance_ = NULL;

HttpApiResponse* HttpApiResponse::New() const {
  return new HttpApiResponse;
}

void HttpApiResponse::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    if (has_invoke()) {
      if (invoke_ != NULL) invoke_->::weizhu::Invoke::Clear();
    }
    result_ = 99;
    if (has_fail_text()) {
      if (fail_text_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        fail_text_->clear();
      }
    }
    if (has_response_body()) {
      if (response_body_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        response_body_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool HttpApiResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:weizhu.HttpApiResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .weizhu.Invoke invoke = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_invoke()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }

      // optional .weizhu.HttpApiResponse.Result result = 2 [default = FAIL_SERVER_EXCEPTION];
      case 2: {
        if (tag == 16) {
         parse_result:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::weizhu::HttpApiResponse_Result_IsValid(value)) {
            set_result(static_cast< ::weizhu::HttpApiResponse_Result >(value));
          } else {
            unknown_fields_stream.WriteVarint32(tag);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_fail_text;
        break;
      }

      // optional string fail_text = 3;
      case 3: {
        if (tag == 26) {
         parse_fail_text:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fail_text()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_response_body;
        break;
      }

      // optional bytes response_body = 4;
      case 4: {
        if (tag == 34) {
         parse_response_body:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_response_body()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:weizhu.HttpApiResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:weizhu.HttpApiResponse)
  return false;
#undef DO_
}

void HttpApiResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:weizhu.HttpApiResponse)
  // required .weizhu.Invoke invoke = 1;
  if (has_invoke()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->invoke(), output);
  }

  // optional .weizhu.HttpApiResponse.Result result = 2 [default = FAIL_SERVER_EXCEPTION];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->result(), output);
  }

  // optional string fail_text = 3;
  if (has_fail_text()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->fail_text(), output);
  }

  // optional bytes response_body = 4;
  if (has_response_body()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->response_body(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:weizhu.HttpApiResponse)
}

int HttpApiResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .weizhu.Invoke invoke = 1;
    if (has_invoke()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->invoke());
    }

    // optional .weizhu.HttpApiResponse.Result result = 2 [default = FAIL_SERVER_EXCEPTION];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

    // optional string fail_text = 3;
    if (has_fail_text()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->fail_text());
    }

    // optional bytes response_body = 4;
    if (has_response_body()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->response_body());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HttpApiResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const HttpApiResponse*>(&from));
}

void HttpApiResponse::MergeFrom(const HttpApiResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_invoke()) {
      mutable_invoke()->::weizhu::Invoke::MergeFrom(from.invoke());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_fail_text()) {
      set_fail_text(from.fail_text());
    }
    if (from.has_response_body()) {
      set_response_body(from.response_body());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void HttpApiResponse::CopyFrom(const HttpApiResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HttpApiResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_invoke()) {
    if (!this->invoke().IsInitialized()) return false;
  }
  return true;
}

void HttpApiResponse::Swap(HttpApiResponse* other) {
  if (other != this) {
    std::swap(invoke_, other->invoke_);
    std::swap(result_, other->result_);
    std::swap(fail_text_, other->fail_text_);
    std::swap(response_body_, other->response_body_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string HttpApiResponse::GetTypeName() const {
  return "weizhu.HttpApiResponse";
}


// ===================================================================

#ifndef _MSC_VER
const int SocketEstablishRequest::kSessionKeyFieldNumber;
const int SocketEstablishRequest::kNetworkTypeFieldNumber;
const int SocketEstablishRequest::kWeizhuFieldNumber;
const int SocketEstablishRequest::kAndroidFieldNumber;
const int SocketEstablishRequest::kIphoneFieldNumber;
const int SocketEstablishRequest::kPushSeqFieldNumber;
const int SocketEstablishRequest::kPushNameFieldNumber;
#endif  // !_MSC_VER

SocketEstablishRequest::SocketEstablishRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:weizhu.SocketEstablishRequest)
}

void SocketEstablishRequest::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  weizhu_ = const_cast< ::weizhu::Weizhu*>(
      ::weizhu::Weizhu::internal_default_instance());
#else
  weizhu_ = const_cast< ::weizhu::Weizhu*>(&::weizhu::Weizhu::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  android_ = const_cast< ::weizhu::Android*>(
      ::weizhu::Android::internal_default_instance());
#else
  android_ = const_cast< ::weizhu::Android*>(&::weizhu::Android::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  iphone_ = const_cast< ::weizhu::Iphone*>(
      ::weizhu::Iphone::internal_default_instance());
#else
  iphone_ = const_cast< ::weizhu::Iphone*>(&::weizhu::Iphone::default_instance());
#endif
}

SocketEstablishRequest::SocketEstablishRequest(const SocketEstablishRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:weizhu.SocketEstablishRequest)
}

void SocketEstablishRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  session_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  network_type_ = 0;
  weizhu_ = NULL;
  android_ = NULL;
  iphone_ = NULL;
  push_seq_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SocketEstablishRequest::~SocketEstablishRequest() {
  // @@protoc_insertion_point(destructor:weizhu.SocketEstablishRequest)
  SharedDtor();
}

void SocketEstablishRequest::SharedDtor() {
  if (session_key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete session_key_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete weizhu_;
    delete android_;
    delete iphone_;
  }
}

void SocketEstablishRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const SocketEstablishRequest& SocketEstablishRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_weizhu_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_weizhu_2eproto();
#endif
  return *default_instance_;
}

SocketEstablishRequest* SocketEstablishRequest::default_instance_ = NULL;

SocketEstablishRequest* SocketEstablishRequest::New() const {
  return new SocketEstablishRequest;
}

void SocketEstablishRequest::Clear() {
  if (_has_bits_[0 / 32] & 63) {
    if (has_session_key()) {
      if (session_key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        session_key_->clear();
      }
    }
    network_type_ = 0;
    if (has_weizhu()) {
      if (weizhu_ != NULL) weizhu_->::weizhu::Weizhu::Clear();
    }
    if (has_android()) {
      if (android_ != NULL) android_->::weizhu::Android::Clear();
    }
    if (has_iphone()) {
      if (iphone_ != NULL) iphone_->::weizhu::Iphone::Clear();
    }
    push_seq_ = GOOGLE_LONGLONG(0);
  }
  push_name_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool SocketEstablishRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:weizhu.SocketEstablishRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes session_key = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_session_key()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_network_type;
        break;
      }

      // required .weizhu.Network.Type network_type = 2;
      case 2: {
        if (tag == 16) {
         parse_network_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::weizhu::Network_Type_IsValid(value)) {
            set_network_type(static_cast< ::weizhu::Network_Type >(value));
          } else {
            unknown_fields_stream.WriteVarint32(tag);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_weizhu;
        break;
      }

      // required .weizhu.Weizhu weizhu = 3;
      case 3: {
        if (tag == 26) {
         parse_weizhu:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_weizhu()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_android;
        break;
      }

      // optional .weizhu.Android android = 4;
      case 4: {
        if (tag == 34) {
         parse_android:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_android()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_iphone;
        break;
      }

      // optional .weizhu.Iphone iphone = 5;
      case 5: {
        if (tag == 42) {
         parse_iphone:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_iphone()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_push_seq;
        break;
      }

      // required int64 push_seq = 6;
      case 6: {
        if (tag == 48) {
         parse_push_seq:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &push_seq_)));
          set_has_push_seq();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_push_name;
        break;
      }

      // repeated string push_name = 7;
      case 7: {
        if (tag == 58) {
         parse_push_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_push_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_push_name;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:weizhu.SocketEstablishRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:weizhu.SocketEstablishRequest)
  return false;
#undef DO_
}

void SocketEstablishRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:weizhu.SocketEstablishRequest)
  // required bytes session_key = 1;
  if (has_session_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->session_key(), output);
  }

  // required .weizhu.Network.Type network_type = 2;
  if (has_network_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->network_type(), output);
  }

  // required .weizhu.Weizhu weizhu = 3;
  if (has_weizhu()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->weizhu(), output);
  }

  // optional .weizhu.Android android = 4;
  if (has_android()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, this->android(), output);
  }

  // optional .weizhu.Iphone iphone = 5;
  if (has_iphone()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      5, this->iphone(), output);
  }

  // required int64 push_seq = 6;
  if (has_push_seq()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->push_seq(), output);
  }

  // repeated string push_name = 7;
  for (int i = 0; i < this->push_name_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->push_name(i), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:weizhu.SocketEstablishRequest)
}

int SocketEstablishRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes session_key = 1;
    if (has_session_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->session_key());
    }

    // required .weizhu.Network.Type network_type = 2;
    if (has_network_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->network_type());
    }

    // required .weizhu.Weizhu weizhu = 3;
    if (has_weizhu()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->weizhu());
    }

    // optional .weizhu.Android android = 4;
    if (has_android()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->android());
    }

    // optional .weizhu.Iphone iphone = 5;
    if (has_iphone()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->iphone());
    }

    // required int64 push_seq = 6;
    if (has_push_seq()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->push_seq());
    }

  }
  // repeated string push_name = 7;
  total_size += 1 * this->push_name_size();
  for (int i = 0; i < this->push_name_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->push_name(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SocketEstablishRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const SocketEstablishRequest*>(&from));
}

void SocketEstablishRequest::MergeFrom(const SocketEstablishRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  push_name_.MergeFrom(from.push_name_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_session_key()) {
      set_session_key(from.session_key());
    }
    if (from.has_network_type()) {
      set_network_type(from.network_type());
    }
    if (from.has_weizhu()) {
      mutable_weizhu()->::weizhu::Weizhu::MergeFrom(from.weizhu());
    }
    if (from.has_android()) {
      mutable_android()->::weizhu::Android::MergeFrom(from.android());
    }
    if (from.has_iphone()) {
      mutable_iphone()->::weizhu::Iphone::MergeFrom(from.iphone());
    }
    if (from.has_push_seq()) {
      set_push_seq(from.push_seq());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void SocketEstablishRequest::CopyFrom(const SocketEstablishRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SocketEstablishRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000027) != 0x00000027) return false;

  if (has_weizhu()) {
    if (!this->weizhu().IsInitialized()) return false;
  }
  if (has_android()) {
    if (!this->android().IsInitialized()) return false;
  }
  if (has_iphone()) {
    if (!this->iphone().IsInitialized()) return false;
  }
  return true;
}

void SocketEstablishRequest::Swap(SocketEstablishRequest* other) {
  if (other != this) {
    std::swap(session_key_, other->session_key_);
    std::swap(network_type_, other->network_type_);
    std::swap(weizhu_, other->weizhu_);
    std::swap(android_, other->android_);
    std::swap(iphone_, other->iphone_);
    std::swap(push_seq_, other->push_seq_);
    push_name_.Swap(&other->push_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string SocketEstablishRequest::GetTypeName() const {
  return "weizhu.SocketEstablishRequest";
}


// ===================================================================

bool SocketEstablishResponse_Result_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 99:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const SocketEstablishResponse_Result SocketEstablishResponse::SUCC;
const SocketEstablishResponse_Result SocketEstablishResponse::FAIL_SESSION_DECRYPTION;
const SocketEstablishResponse_Result SocketEstablishResponse::FAIL_SESSION_EXPIRED;
const SocketEstablishResponse_Result SocketEstablishResponse::FAIL_USER_DISABLE;
const SocketEstablishResponse_Result SocketEstablishResponse::FAIL_SERVER_EXCEPTION;
const SocketEstablishResponse_Result SocketEstablishResponse::Result_MIN;
const SocketEstablishResponse_Result SocketEstablishResponse::Result_MAX;
const int SocketEstablishResponse::Result_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int SocketEstablishResponse::kResultFieldNumber;
const int SocketEstablishResponse::kFailTextFieldNumber;
const int SocketEstablishResponse::kResetPushSeqFieldNumber;
#endif  // !_MSC_VER

SocketEstablishResponse::SocketEstablishResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:weizhu.SocketEstablishResponse)
}

void SocketEstablishResponse::InitAsDefaultInstance() {
}

SocketEstablishResponse::SocketEstablishResponse(const SocketEstablishResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:weizhu.SocketEstablishResponse)
}

void SocketEstablishResponse::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  result_ = 99;
  fail_text_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  reset_push_seq_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SocketEstablishResponse::~SocketEstablishResponse() {
  // @@protoc_insertion_point(destructor:weizhu.SocketEstablishResponse)
  SharedDtor();
}

void SocketEstablishResponse::SharedDtor() {
  if (fail_text_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete fail_text_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void SocketEstablishResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const SocketEstablishResponse& SocketEstablishResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_weizhu_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_weizhu_2eproto();
#endif
  return *default_instance_;
}

SocketEstablishResponse* SocketEstablishResponse::default_instance_ = NULL;

SocketEstablishResponse* SocketEstablishResponse::New() const {
  return new SocketEstablishResponse;
}

void SocketEstablishResponse::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    result_ = 99;
    if (has_fail_text()) {
      if (fail_text_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        fail_text_->clear();
      }
    }
    reset_push_seq_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool SocketEstablishResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:weizhu.SocketEstablishResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .weizhu.SocketEstablishResponse.Result result = 1 [default = FAIL_SERVER_EXCEPTION];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::weizhu::SocketEstablishResponse_Result_IsValid(value)) {
            set_result(static_cast< ::weizhu::SocketEstablishResponse_Result >(value));
          } else {
            unknown_fields_stream.WriteVarint32(tag);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_fail_text;
        break;
      }

      // optional string fail_text = 2;
      case 2: {
        if (tag == 18) {
         parse_fail_text:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fail_text()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_reset_push_seq;
        break;
      }

      // optional int64 reset_push_seq = 3;
      case 3: {
        if (tag == 24) {
         parse_reset_push_seq:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &reset_push_seq_)));
          set_has_reset_push_seq();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:weizhu.SocketEstablishResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:weizhu.SocketEstablishResponse)
  return false;
#undef DO_
}

void SocketEstablishResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:weizhu.SocketEstablishResponse)
  // optional .weizhu.SocketEstablishResponse.Result result = 1 [default = FAIL_SERVER_EXCEPTION];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  // optional string fail_text = 2;
  if (has_fail_text()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->fail_text(), output);
  }

  // optional int64 reset_push_seq = 3;
  if (has_reset_push_seq()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->reset_push_seq(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:weizhu.SocketEstablishResponse)
}

int SocketEstablishResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .weizhu.SocketEstablishResponse.Result result = 1 [default = FAIL_SERVER_EXCEPTION];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

    // optional string fail_text = 2;
    if (has_fail_text()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->fail_text());
    }

    // optional int64 reset_push_seq = 3;
    if (has_reset_push_seq()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->reset_push_seq());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SocketEstablishResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const SocketEstablishResponse*>(&from));
}

void SocketEstablishResponse::MergeFrom(const SocketEstablishResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_fail_text()) {
      set_fail_text(from.fail_text());
    }
    if (from.has_reset_push_seq()) {
      set_reset_push_seq(from.reset_push_seq());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void SocketEstablishResponse::CopyFrom(const SocketEstablishResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SocketEstablishResponse::IsInitialized() const {

  return true;
}

void SocketEstablishResponse::Swap(SocketEstablishResponse* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(fail_text_, other->fail_text_);
    std::swap(reset_push_seq_, other->reset_push_seq_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string SocketEstablishResponse::GetTypeName() const {
  return "weizhu.SocketEstablishResponse";
}


// ===================================================================

#ifndef _MSC_VER
const int SocketApiRequest::kInvokeFieldNumber;
const int SocketApiRequest::kRequestBodyFieldNumber;
#endif  // !_MSC_VER

SocketApiRequest::SocketApiRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:weizhu.SocketApiRequest)
}

void SocketApiRequest::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  invoke_ = const_cast< ::weizhu::Invoke*>(
      ::weizhu::Invoke::internal_default_instance());
#else
  invoke_ = const_cast< ::weizhu::Invoke*>(&::weizhu::Invoke::default_instance());
#endif
}

SocketApiRequest::SocketApiRequest(const SocketApiRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:weizhu.SocketApiRequest)
}

void SocketApiRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  invoke_ = NULL;
  request_body_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SocketApiRequest::~SocketApiRequest() {
  // @@protoc_insertion_point(destructor:weizhu.SocketApiRequest)
  SharedDtor();
}

void SocketApiRequest::SharedDtor() {
  if (request_body_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete request_body_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete invoke_;
  }
}

void SocketApiRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const SocketApiRequest& SocketApiRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_weizhu_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_weizhu_2eproto();
#endif
  return *default_instance_;
}

SocketApiRequest* SocketApiRequest::default_instance_ = NULL;

SocketApiRequest* SocketApiRequest::New() const {
  return new SocketApiRequest;
}

void SocketApiRequest::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_invoke()) {
      if (invoke_ != NULL) invoke_->::weizhu::Invoke::Clear();
    }
    if (has_request_body()) {
      if (request_body_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        request_body_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool SocketApiRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:weizhu.SocketApiRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .weizhu.Invoke invoke = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_invoke()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(794)) goto parse_request_body;
        break;
      }

      // required bytes request_body = 99;
      case 99: {
        if (tag == 794) {
         parse_request_body:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_request_body()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:weizhu.SocketApiRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:weizhu.SocketApiRequest)
  return false;
#undef DO_
}

void SocketApiRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:weizhu.SocketApiRequest)
  // required .weizhu.Invoke invoke = 1;
  if (has_invoke()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->invoke(), output);
  }

  // required bytes request_body = 99;
  if (has_request_body()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      99, this->request_body(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:weizhu.SocketApiRequest)
}

int SocketApiRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .weizhu.Invoke invoke = 1;
    if (has_invoke()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->invoke());
    }

    // required bytes request_body = 99;
    if (has_request_body()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->request_body());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SocketApiRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const SocketApiRequest*>(&from));
}

void SocketApiRequest::MergeFrom(const SocketApiRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_invoke()) {
      mutable_invoke()->::weizhu::Invoke::MergeFrom(from.invoke());
    }
    if (from.has_request_body()) {
      set_request_body(from.request_body());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void SocketApiRequest::CopyFrom(const SocketApiRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SocketApiRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_invoke()) {
    if (!this->invoke().IsInitialized()) return false;
  }
  return true;
}

void SocketApiRequest::Swap(SocketApiRequest* other) {
  if (other != this) {
    std::swap(invoke_, other->invoke_);
    std::swap(request_body_, other->request_body_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string SocketApiRequest::GetTypeName() const {
  return "weizhu.SocketApiRequest";
}


// ===================================================================

bool SocketApiResponse_Result_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 99:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const SocketApiResponse_Result SocketApiResponse::SUCC;
const SocketApiResponse_Result SocketApiResponse::FAIL_ESTABLISH_INVALID;
const SocketApiResponse_Result SocketApiResponse::FAIL_INVOKE_UNKNOWN;
const SocketApiResponse_Result SocketApiResponse::FAIL_BODY_DECRYPTION;
const SocketApiResponse_Result SocketApiResponse::FAIL_BODY_PARSE_FAIL;
const SocketApiResponse_Result SocketApiResponse::FAIL_SERVER_EXCEPTION;
const SocketApiResponse_Result SocketApiResponse::Result_MIN;
const SocketApiResponse_Result SocketApiResponse::Result_MAX;
const int SocketApiResponse::Result_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int SocketApiResponse::kInvokeFieldNumber;
const int SocketApiResponse::kResultFieldNumber;
const int SocketApiResponse::kFailTextFieldNumber;
const int SocketApiResponse::kResponseBodyFieldNumber;
#endif  // !_MSC_VER

SocketApiResponse::SocketApiResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:weizhu.SocketApiResponse)
}

void SocketApiResponse::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  invoke_ = const_cast< ::weizhu::Invoke*>(
      ::weizhu::Invoke::internal_default_instance());
#else
  invoke_ = const_cast< ::weizhu::Invoke*>(&::weizhu::Invoke::default_instance());
#endif
}

SocketApiResponse::SocketApiResponse(const SocketApiResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:weizhu.SocketApiResponse)
}

void SocketApiResponse::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  invoke_ = NULL;
  result_ = 99;
  fail_text_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  response_body_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SocketApiResponse::~SocketApiResponse() {
  // @@protoc_insertion_point(destructor:weizhu.SocketApiResponse)
  SharedDtor();
}

void SocketApiResponse::SharedDtor() {
  if (fail_text_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete fail_text_;
  }
  if (response_body_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete response_body_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete invoke_;
  }
}

void SocketApiResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const SocketApiResponse& SocketApiResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_weizhu_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_weizhu_2eproto();
#endif
  return *default_instance_;
}

SocketApiResponse* SocketApiResponse::default_instance_ = NULL;

SocketApiResponse* SocketApiResponse::New() const {
  return new SocketApiResponse;
}

void SocketApiResponse::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    if (has_invoke()) {
      if (invoke_ != NULL) invoke_->::weizhu::Invoke::Clear();
    }
    result_ = 99;
    if (has_fail_text()) {
      if (fail_text_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        fail_text_->clear();
      }
    }
    if (has_response_body()) {
      if (response_body_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        response_body_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool SocketApiResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:weizhu.SocketApiResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .weizhu.Invoke invoke = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_invoke()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }

      // optional .weizhu.SocketApiResponse.Result result = 2 [default = FAIL_SERVER_EXCEPTION];
      case 2: {
        if (tag == 16) {
         parse_result:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::weizhu::SocketApiResponse_Result_IsValid(value)) {
            set_result(static_cast< ::weizhu::SocketApiResponse_Result >(value));
          } else {
            unknown_fields_stream.WriteVarint32(tag);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_fail_text;
        break;
      }

      // optional string fail_text = 3;
      case 3: {
        if (tag == 26) {
         parse_fail_text:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fail_text()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_response_body;
        break;
      }

      // optional bytes response_body = 4;
      case 4: {
        if (tag == 34) {
         parse_response_body:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_response_body()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:weizhu.SocketApiResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:weizhu.SocketApiResponse)
  return false;
#undef DO_
}

void SocketApiResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:weizhu.SocketApiResponse)
  // required .weizhu.Invoke invoke = 1;
  if (has_invoke()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->invoke(), output);
  }

  // optional .weizhu.SocketApiResponse.Result result = 2 [default = FAIL_SERVER_EXCEPTION];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->result(), output);
  }

  // optional string fail_text = 3;
  if (has_fail_text()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->fail_text(), output);
  }

  // optional bytes response_body = 4;
  if (has_response_body()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->response_body(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:weizhu.SocketApiResponse)
}

int SocketApiResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .weizhu.Invoke invoke = 1;
    if (has_invoke()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->invoke());
    }

    // optional .weizhu.SocketApiResponse.Result result = 2 [default = FAIL_SERVER_EXCEPTION];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

    // optional string fail_text = 3;
    if (has_fail_text()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->fail_text());
    }

    // optional bytes response_body = 4;
    if (has_response_body()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->response_body());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SocketApiResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const SocketApiResponse*>(&from));
}

void SocketApiResponse::MergeFrom(const SocketApiResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_invoke()) {
      mutable_invoke()->::weizhu::Invoke::MergeFrom(from.invoke());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_fail_text()) {
      set_fail_text(from.fail_text());
    }
    if (from.has_response_body()) {
      set_response_body(from.response_body());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void SocketApiResponse::CopyFrom(const SocketApiResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SocketApiResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_invoke()) {
    if (!this->invoke().IsInitialized()) return false;
  }
  return true;
}

void SocketApiResponse::Swap(SocketApiResponse* other) {
  if (other != this) {
    std::swap(invoke_, other->invoke_);
    std::swap(result_, other->result_);
    std::swap(fail_text_, other->fail_text_);
    std::swap(response_body_, other->response_body_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string SocketApiResponse::GetTypeName() const {
  return "weizhu.SocketApiResponse";
}


// ===================================================================

#ifndef _MSC_VER
const int PushMessage::kPushSeqFieldNumber;
const int PushMessage::kPushNameFieldNumber;
const int PushMessage::kPushBodyFieldNumber;
#endif  // !_MSC_VER

PushMessage::PushMessage()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:weizhu.PushMessage)
}

void PushMessage::InitAsDefaultInstance() {
}

PushMessage::PushMessage(const PushMessage& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:weizhu.PushMessage)
}

void PushMessage::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  push_seq_ = GOOGLE_LONGLONG(0);
  push_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  push_body_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PushMessage::~PushMessage() {
  // @@protoc_insertion_point(destructor:weizhu.PushMessage)
  SharedDtor();
}

void PushMessage::SharedDtor() {
  if (push_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete push_name_;
  }
  if (push_body_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete push_body_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void PushMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PushMessage& PushMessage::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_weizhu_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_weizhu_2eproto();
#endif
  return *default_instance_;
}

PushMessage* PushMessage::default_instance_ = NULL;

PushMessage* PushMessage::New() const {
  return new PushMessage;
}

void PushMessage::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    push_seq_ = GOOGLE_LONGLONG(0);
    if (has_push_name()) {
      if (push_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        push_name_->clear();
      }
    }
    if (has_push_body()) {
      if (push_body_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        push_body_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool PushMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:weizhu.PushMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 push_seq = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &push_seq_)));
          set_has_push_seq();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_push_name;
        break;
      }

      // required string push_name = 2;
      case 2: {
        if (tag == 18) {
         parse_push_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_push_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_push_body;
        break;
      }

      // required bytes push_body = 3;
      case 3: {
        if (tag == 26) {
         parse_push_body:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_push_body()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:weizhu.PushMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:weizhu.PushMessage)
  return false;
#undef DO_
}

void PushMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:weizhu.PushMessage)
  // required int64 push_seq = 1;
  if (has_push_seq()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->push_seq(), output);
  }

  // required string push_name = 2;
  if (has_push_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->push_name(), output);
  }

  // required bytes push_body = 3;
  if (has_push_body()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->push_body(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:weizhu.PushMessage)
}

int PushMessage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 push_seq = 1;
    if (has_push_seq()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->push_seq());
    }

    // required string push_name = 2;
    if (has_push_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->push_name());
    }

    // required bytes push_body = 3;
    if (has_push_body()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->push_body());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PushMessage::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PushMessage*>(&from));
}

void PushMessage::MergeFrom(const PushMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_push_seq()) {
      set_push_seq(from.push_seq());
    }
    if (from.has_push_name()) {
      set_push_name(from.push_name());
    }
    if (from.has_push_body()) {
      set_push_body(from.push_body());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void PushMessage::CopyFrom(const PushMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PushMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void PushMessage::Swap(PushMessage* other) {
  if (other != this) {
    std::swap(push_seq_, other->push_seq_);
    std::swap(push_name_, other->push_name_);
    std::swap(push_body_, other->push_body_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string PushMessage::GetTypeName() const {
  return "weizhu.PushMessage";
}


// ===================================================================

#ifndef _MSC_VER
const int SocketPushMsg::kPushMsgFieldNumber;
const int SocketPushMsg::kHasMoreFieldNumber;
#endif  // !_MSC_VER

SocketPushMsg::SocketPushMsg()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:weizhu.SocketPushMsg)
}

void SocketPushMsg::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  push_msg_ = const_cast< ::weizhu::PushMessage*>(
      ::weizhu::PushMessage::internal_default_instance());
#else
  push_msg_ = const_cast< ::weizhu::PushMessage*>(&::weizhu::PushMessage::default_instance());
#endif
}

SocketPushMsg::SocketPushMsg(const SocketPushMsg& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:weizhu.SocketPushMsg)
}

void SocketPushMsg::SharedCtor() {
  _cached_size_ = 0;
  push_msg_ = NULL;
  has_more_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SocketPushMsg::~SocketPushMsg() {
  // @@protoc_insertion_point(destructor:weizhu.SocketPushMsg)
  SharedDtor();
}

void SocketPushMsg::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete push_msg_;
  }
}

void SocketPushMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const SocketPushMsg& SocketPushMsg::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_weizhu_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_weizhu_2eproto();
#endif
  return *default_instance_;
}

SocketPushMsg* SocketPushMsg::default_instance_ = NULL;

SocketPushMsg* SocketPushMsg::New() const {
  return new SocketPushMsg;
}

void SocketPushMsg::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_push_msg()) {
      if (push_msg_ != NULL) push_msg_->::weizhu::PushMessage::Clear();
    }
    has_more_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool SocketPushMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:weizhu.SocketPushMsg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .weizhu.PushMessage push_msg = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_push_msg()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_has_more;
        break;
      }

      // required bool has_more = 2;
      case 2: {
        if (tag == 16) {
         parse_has_more:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &has_more_)));
          set_has_has_more();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:weizhu.SocketPushMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:weizhu.SocketPushMsg)
  return false;
#undef DO_
}

void SocketPushMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:weizhu.SocketPushMsg)
  // required .weizhu.PushMessage push_msg = 1;
  if (has_push_msg()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->push_msg(), output);
  }

  // required bool has_more = 2;
  if (has_has_more()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->has_more(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:weizhu.SocketPushMsg)
}

int SocketPushMsg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .weizhu.PushMessage push_msg = 1;
    if (has_push_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->push_msg());
    }

    // required bool has_more = 2;
    if (has_has_more()) {
      total_size += 1 + 1;
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SocketPushMsg::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const SocketPushMsg*>(&from));
}

void SocketPushMsg::MergeFrom(const SocketPushMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_push_msg()) {
      mutable_push_msg()->::weizhu::PushMessage::MergeFrom(from.push_msg());
    }
    if (from.has_has_more()) {
      set_has_more(from.has_more());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void SocketPushMsg::CopyFrom(const SocketPushMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SocketPushMsg::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_push_msg()) {
    if (!this->push_msg().IsInitialized()) return false;
  }
  return true;
}

void SocketPushMsg::Swap(SocketPushMsg* other) {
  if (other != this) {
    std::swap(push_msg_, other->push_msg_);
    std::swap(has_more_, other->has_more_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string SocketPushMsg::GetTypeName() const {
  return "weizhu.SocketPushMsg";
}


// ===================================================================

#ifndef _MSC_VER
const int SocketPushAck::kPushSeqFieldNumber;
#endif  // !_MSC_VER

SocketPushAck::SocketPushAck()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:weizhu.SocketPushAck)
}

void SocketPushAck::InitAsDefaultInstance() {
}

SocketPushAck::SocketPushAck(const SocketPushAck& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:weizhu.SocketPushAck)
}

void SocketPushAck::SharedCtor() {
  _cached_size_ = 0;
  push_seq_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SocketPushAck::~SocketPushAck() {
  // @@protoc_insertion_point(destructor:weizhu.SocketPushAck)
  SharedDtor();
}

void SocketPushAck::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void SocketPushAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const SocketPushAck& SocketPushAck::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_weizhu_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_weizhu_2eproto();
#endif
  return *default_instance_;
}

SocketPushAck* SocketPushAck::default_instance_ = NULL;

SocketPushAck* SocketPushAck::New() const {
  return new SocketPushAck;
}

void SocketPushAck::Clear() {
  push_seq_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool SocketPushAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:weizhu.SocketPushAck)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 push_seq = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &push_seq_)));
          set_has_push_seq();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:weizhu.SocketPushAck)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:weizhu.SocketPushAck)
  return false;
#undef DO_
}

void SocketPushAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:weizhu.SocketPushAck)
  // required int64 push_seq = 1;
  if (has_push_seq()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->push_seq(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:weizhu.SocketPushAck)
}

int SocketPushAck::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 push_seq = 1;
    if (has_push_seq()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->push_seq());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SocketPushAck::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const SocketPushAck*>(&from));
}

void SocketPushAck::MergeFrom(const SocketPushAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_push_seq()) {
      set_push_seq(from.push_seq());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void SocketPushAck::CopyFrom(const SocketPushAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SocketPushAck::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void SocketPushAck::Swap(SocketPushAck* other) {
  if (other != this) {
    std::swap(push_seq_, other->push_seq_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string SocketPushAck::GetTypeName() const {
  return "weizhu.SocketPushAck";
}


// ===================================================================

#ifndef _MSC_VER
const int SocketPing::kIdFieldNumber;
#endif  // !_MSC_VER

SocketPing::SocketPing()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:weizhu.SocketPing)
}

void SocketPing::InitAsDefaultInstance() {
}

SocketPing::SocketPing(const SocketPing& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:weizhu.SocketPing)
}

void SocketPing::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SocketPing::~SocketPing() {
  // @@protoc_insertion_point(destructor:weizhu.SocketPing)
  SharedDtor();
}

void SocketPing::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void SocketPing::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const SocketPing& SocketPing::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_weizhu_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_weizhu_2eproto();
#endif
  return *default_instance_;
}

SocketPing* SocketPing::default_instance_ = NULL;

SocketPing* SocketPing::New() const {
  return new SocketPing;
}

void SocketPing::Clear() {
  id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool SocketPing::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:weizhu.SocketPing)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:weizhu.SocketPing)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:weizhu.SocketPing)
  return false;
#undef DO_
}

void SocketPing::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:weizhu.SocketPing)
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:weizhu.SocketPing)
}

int SocketPing::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SocketPing::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const SocketPing*>(&from));
}

void SocketPing::MergeFrom(const SocketPing& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void SocketPing::CopyFrom(const SocketPing& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SocketPing::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void SocketPing::Swap(SocketPing* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string SocketPing::GetTypeName() const {
  return "weizhu.SocketPing";
}


// ===================================================================

#ifndef _MSC_VER
const int SocketPong::kIdFieldNumber;
#endif  // !_MSC_VER

SocketPong::SocketPong()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:weizhu.SocketPong)
}

void SocketPong::InitAsDefaultInstance() {
}

SocketPong::SocketPong(const SocketPong& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:weizhu.SocketPong)
}

void SocketPong::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SocketPong::~SocketPong() {
  // @@protoc_insertion_point(destructor:weizhu.SocketPong)
  SharedDtor();
}

void SocketPong::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void SocketPong::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const SocketPong& SocketPong::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_weizhu_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_weizhu_2eproto();
#endif
  return *default_instance_;
}

SocketPong* SocketPong::default_instance_ = NULL;

SocketPong* SocketPong::New() const {
  return new SocketPong;
}

void SocketPong::Clear() {
  id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool SocketPong::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:weizhu.SocketPong)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:weizhu.SocketPong)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:weizhu.SocketPong)
  return false;
#undef DO_
}

void SocketPong::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:weizhu.SocketPong)
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:weizhu.SocketPong)
}

int SocketPong::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SocketPong::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const SocketPong*>(&from));
}

void SocketPong::MergeFrom(const SocketPong& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void SocketPong::CopyFrom(const SocketPong& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SocketPong::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void SocketPong::Swap(SocketPong* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string SocketPong::GetTypeName() const {
  return "weizhu.SocketPong";
}


// ===================================================================

#ifndef _MSC_VER
const int SocketUpPacket::kEstablishRequestFieldNumber;
const int SocketUpPacket::kApiRequestFieldNumber;
const int SocketUpPacket::kPushAckFieldNumber;
const int SocketUpPacket::kPingFieldNumber;
const int SocketUpPacket::kPongFieldNumber;
#endif  // !_MSC_VER

SocketUpPacket::SocketUpPacket()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:weizhu.SocketUpPacket)
}

void SocketUpPacket::InitAsDefaultInstance() {
}

SocketUpPacket::SocketUpPacket(const SocketUpPacket& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:weizhu.SocketUpPacket)
}

void SocketUpPacket::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  clear_has_packet();
}

SocketUpPacket::~SocketUpPacket() {
  // @@protoc_insertion_point(destructor:weizhu.SocketUpPacket)
  SharedDtor();
}

void SocketUpPacket::SharedDtor() {
  if (has_packet()) {
    clear_packet();
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void SocketUpPacket::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const SocketUpPacket& SocketUpPacket::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_weizhu_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_weizhu_2eproto();
#endif
  return *default_instance_;
}

SocketUpPacket* SocketUpPacket::default_instance_ = NULL;

SocketUpPacket* SocketUpPacket::New() const {
  return new SocketUpPacket;
}

void SocketUpPacket::clear_packet() {
  switch(packet_case()) {
    case kEstablishRequest: {
      delete packet_.establish_request_;
      break;
    }
    case kApiRequest: {
      delete packet_.api_request_;
      break;
    }
    case kPushAck: {
      delete packet_.push_ack_;
      break;
    }
    case kPing: {
      delete packet_.ping_;
      break;
    }
    case kPong: {
      delete packet_.pong_;
      break;
    }
    case PACKET_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = PACKET_NOT_SET;
}


void SocketUpPacket::Clear() {
  clear_packet();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool SocketUpPacket::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:weizhu.SocketUpPacket)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .weizhu.SocketEstablishRequest establish_request = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_establish_request()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_api_request;
        break;
      }

      // optional .weizhu.SocketApiRequest api_request = 2;
      case 2: {
        if (tag == 18) {
         parse_api_request:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_api_request()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_push_ack;
        break;
      }

      // optional .weizhu.SocketPushAck push_ack = 3;
      case 3: {
        if (tag == 26) {
         parse_push_ack:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_push_ack()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_ping;
        break;
      }

      // optional .weizhu.SocketPing ping = 4;
      case 4: {
        if (tag == 34) {
         parse_ping:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ping()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_pong;
        break;
      }

      // optional .weizhu.SocketPong pong = 5;
      case 5: {
        if (tag == 42) {
         parse_pong:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pong()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:weizhu.SocketUpPacket)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:weizhu.SocketUpPacket)
  return false;
#undef DO_
}

void SocketUpPacket::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:weizhu.SocketUpPacket)
  // optional .weizhu.SocketEstablishRequest establish_request = 1;
  if (has_establish_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->establish_request(), output);
  }

  // optional .weizhu.SocketApiRequest api_request = 2;
  if (has_api_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->api_request(), output);
  }

  // optional .weizhu.SocketPushAck push_ack = 3;
  if (has_push_ack()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->push_ack(), output);
  }

  // optional .weizhu.SocketPing ping = 4;
  if (has_ping()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, this->ping(), output);
  }

  // optional .weizhu.SocketPong pong = 5;
  if (has_pong()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      5, this->pong(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:weizhu.SocketUpPacket)
}

int SocketUpPacket::ByteSize() const {
  int total_size = 0;

  switch (packet_case()) {
    // optional .weizhu.SocketEstablishRequest establish_request = 1;
    case kEstablishRequest: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->establish_request());
      break;
    }
    // optional .weizhu.SocketApiRequest api_request = 2;
    case kApiRequest: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->api_request());
      break;
    }
    // optional .weizhu.SocketPushAck push_ack = 3;
    case kPushAck: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->push_ack());
      break;
    }
    // optional .weizhu.SocketPing ping = 4;
    case kPing: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ping());
      break;
    }
    // optional .weizhu.SocketPong pong = 5;
    case kPong: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pong());
      break;
    }
    case PACKET_NOT_SET: {
      break;
    }
  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SocketUpPacket::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const SocketUpPacket*>(&from));
}

void SocketUpPacket::MergeFrom(const SocketUpPacket& from) {
  GOOGLE_CHECK_NE(&from, this);
  switch (from.packet_case()) {
    case kEstablishRequest: {
      mutable_establish_request()->::weizhu::SocketEstablishRequest::MergeFrom(from.establish_request());
      break;
    }
    case kApiRequest: {
      mutable_api_request()->::weizhu::SocketApiRequest::MergeFrom(from.api_request());
      break;
    }
    case kPushAck: {
      mutable_push_ack()->::weizhu::SocketPushAck::MergeFrom(from.push_ack());
      break;
    }
    case kPing: {
      mutable_ping()->::weizhu::SocketPing::MergeFrom(from.ping());
      break;
    }
    case kPong: {
      mutable_pong()->::weizhu::SocketPong::MergeFrom(from.pong());
      break;
    }
    case PACKET_NOT_SET: {
      break;
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void SocketUpPacket::CopyFrom(const SocketUpPacket& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SocketUpPacket::IsInitialized() const {

  if (has_establish_request()) {
    if (!this->establish_request().IsInitialized()) return false;
  }
  if (has_api_request()) {
    if (!this->api_request().IsInitialized()) return false;
  }
  if (has_push_ack()) {
    if (!this->push_ack().IsInitialized()) return false;
  }
  if (has_ping()) {
    if (!this->ping().IsInitialized()) return false;
  }
  if (has_pong()) {
    if (!this->pong().IsInitialized()) return false;
  }
  return true;
}

void SocketUpPacket::Swap(SocketUpPacket* other) {
  if (other != this) {
    std::swap(packet_, other->packet_);
    std::swap(_oneof_case_[0], other->_oneof_case_[0]);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string SocketUpPacket::GetTypeName() const {
  return "weizhu.SocketUpPacket";
}


// ===================================================================

#ifndef _MSC_VER
const int SocketDownPacket::kEstablishResponseFieldNumber;
const int SocketDownPacket::kApiResponseFieldNumber;
const int SocketDownPacket::kPushMsgFieldNumber;
const int SocketDownPacket::kPingFieldNumber;
const int SocketDownPacket::kPongFieldNumber;
#endif  // !_MSC_VER

SocketDownPacket::SocketDownPacket()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:weizhu.SocketDownPacket)
}

void SocketDownPacket::InitAsDefaultInstance() {
}

SocketDownPacket::SocketDownPacket(const SocketDownPacket& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:weizhu.SocketDownPacket)
}

void SocketDownPacket::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  clear_has_packet();
}

SocketDownPacket::~SocketDownPacket() {
  // @@protoc_insertion_point(destructor:weizhu.SocketDownPacket)
  SharedDtor();
}

void SocketDownPacket::SharedDtor() {
  if (has_packet()) {
    clear_packet();
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void SocketDownPacket::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const SocketDownPacket& SocketDownPacket::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_weizhu_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_weizhu_2eproto();
#endif
  return *default_instance_;
}

SocketDownPacket* SocketDownPacket::default_instance_ = NULL;

SocketDownPacket* SocketDownPacket::New() const {
  return new SocketDownPacket;
}

void SocketDownPacket::clear_packet() {
  switch(packet_case()) {
    case kEstablishResponse: {
      delete packet_.establish_response_;
      break;
    }
    case kApiResponse: {
      delete packet_.api_response_;
      break;
    }
    case kPushMsg: {
      delete packet_.push_msg_;
      break;
    }
    case kPing: {
      delete packet_.ping_;
      break;
    }
    case kPong: {
      delete packet_.pong_;
      break;
    }
    case PACKET_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = PACKET_NOT_SET;
}


void SocketDownPacket::Clear() {
  clear_packet();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool SocketDownPacket::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:weizhu.SocketDownPacket)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .weizhu.SocketEstablishResponse establish_response = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_establish_response()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_api_response;
        break;
      }

      // optional .weizhu.SocketApiResponse api_response = 2;
      case 2: {
        if (tag == 18) {
         parse_api_response:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_api_response()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_push_msg;
        break;
      }

      // optional .weizhu.SocketPushMsg push_msg = 3;
      case 3: {
        if (tag == 26) {
         parse_push_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_push_msg()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_ping;
        break;
      }

      // optional .weizhu.SocketPing ping = 4;
      case 4: {
        if (tag == 34) {
         parse_ping:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ping()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_pong;
        break;
      }

      // optional .weizhu.SocketPong pong = 5;
      case 5: {
        if (tag == 42) {
         parse_pong:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pong()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:weizhu.SocketDownPacket)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:weizhu.SocketDownPacket)
  return false;
#undef DO_
}

void SocketDownPacket::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:weizhu.SocketDownPacket)
  // optional .weizhu.SocketEstablishResponse establish_response = 1;
  if (has_establish_response()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->establish_response(), output);
  }

  // optional .weizhu.SocketApiResponse api_response = 2;
  if (has_api_response()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->api_response(), output);
  }

  // optional .weizhu.SocketPushMsg push_msg = 3;
  if (has_push_msg()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->push_msg(), output);
  }

  // optional .weizhu.SocketPing ping = 4;
  if (has_ping()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, this->ping(), output);
  }

  // optional .weizhu.SocketPong pong = 5;
  if (has_pong()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      5, this->pong(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:weizhu.SocketDownPacket)
}

int SocketDownPacket::ByteSize() const {
  int total_size = 0;

  switch (packet_case()) {
    // optional .weizhu.SocketEstablishResponse establish_response = 1;
    case kEstablishResponse: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->establish_response());
      break;
    }
    // optional .weizhu.SocketApiResponse api_response = 2;
    case kApiResponse: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->api_response());
      break;
    }
    // optional .weizhu.SocketPushMsg push_msg = 3;
    case kPushMsg: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->push_msg());
      break;
    }
    // optional .weizhu.SocketPing ping = 4;
    case kPing: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ping());
      break;
    }
    // optional .weizhu.SocketPong pong = 5;
    case kPong: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pong());
      break;
    }
    case PACKET_NOT_SET: {
      break;
    }
  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SocketDownPacket::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const SocketDownPacket*>(&from));
}

void SocketDownPacket::MergeFrom(const SocketDownPacket& from) {
  GOOGLE_CHECK_NE(&from, this);
  switch (from.packet_case()) {
    case kEstablishResponse: {
      mutable_establish_response()->::weizhu::SocketEstablishResponse::MergeFrom(from.establish_response());
      break;
    }
    case kApiResponse: {
      mutable_api_response()->::weizhu::SocketApiResponse::MergeFrom(from.api_response());
      break;
    }
    case kPushMsg: {
      mutable_push_msg()->::weizhu::SocketPushMsg::MergeFrom(from.push_msg());
      break;
    }
    case kPing: {
      mutable_ping()->::weizhu::SocketPing::MergeFrom(from.ping());
      break;
    }
    case kPong: {
      mutable_pong()->::weizhu::SocketPong::MergeFrom(from.pong());
      break;
    }
    case PACKET_NOT_SET: {
      break;
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void SocketDownPacket::CopyFrom(const SocketDownPacket& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SocketDownPacket::IsInitialized() const {

  if (has_api_response()) {
    if (!this->api_response().IsInitialized()) return false;
  }
  if (has_push_msg()) {
    if (!this->push_msg().IsInitialized()) return false;
  }
  if (has_ping()) {
    if (!this->ping().IsInitialized()) return false;
  }
  if (has_pong()) {
    if (!this->pong().IsInitialized()) return false;
  }
  return true;
}

void SocketDownPacket::Swap(SocketDownPacket* other) {
  if (other != this) {
    std::swap(packet_, other->packet_);
    std::swap(_oneof_case_[0], other->_oneof_case_[0]);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string SocketDownPacket::GetTypeName() const {
  return "weizhu.SocketDownPacket";
}


// ===================================================================

#ifndef _MSC_VER
const int SystemHead::kCompanyIdFieldNumber;
#endif  // !_MSC_VER

SystemHead::SystemHead()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:weizhu.SystemHead)
}

void SystemHead::InitAsDefaultInstance() {
}

SystemHead::SystemHead(const SystemHead& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:weizhu.SystemHead)
}

void SystemHead::SharedCtor() {
  _cached_size_ = 0;
  company_id_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SystemHead::~SystemHead() {
  // @@protoc_insertion_point(destructor:weizhu.SystemHead)
  SharedDtor();
}

void SystemHead::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void SystemHead::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const SystemHead& SystemHead::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_weizhu_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_weizhu_2eproto();
#endif
  return *default_instance_;
}

SystemHead* SystemHead::default_instance_ = NULL;

SystemHead* SystemHead::New() const {
  return new SystemHead;
}

void SystemHead::Clear() {
  company_id_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool SystemHead::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:weizhu.SystemHead)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 company_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &company_id_)));
          set_has_company_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:weizhu.SystemHead)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:weizhu.SystemHead)
  return false;
#undef DO_
}

void SystemHead::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:weizhu.SystemHead)
  // optional int64 company_id = 1;
  if (has_company_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->company_id(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:weizhu.SystemHead)
}

int SystemHead::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 company_id = 1;
    if (has_company_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->company_id());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SystemHead::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const SystemHead*>(&from));
}

void SystemHead::MergeFrom(const SystemHead& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_company_id()) {
      set_company_id(from.company_id());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void SystemHead::CopyFrom(const SystemHead& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SystemHead::IsInitialized() const {

  return true;
}

void SystemHead::Swap(SystemHead* other) {
  if (other != this) {
    std::swap(company_id_, other->company_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string SystemHead::GetTypeName() const {
  return "weizhu.SystemHead";
}


// ===================================================================

#ifndef _MSC_VER
const int RequestHead::kSessionFieldNumber;
const int RequestHead::kInvokeFieldNumber;
const int RequestHead::kNetworkFieldNumber;
const int RequestHead::kWeizhuFieldNumber;
const int RequestHead::kAndroidFieldNumber;
const int RequestHead::kIphoneFieldNumber;
const int RequestHead::kWebMobileFieldNumber;
#endif  // !_MSC_VER

RequestHead::RequestHead()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:weizhu.RequestHead)
}

void RequestHead::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  session_ = const_cast< ::weizhu::Session*>(
      ::weizhu::Session::internal_default_instance());
#else
  session_ = const_cast< ::weizhu::Session*>(&::weizhu::Session::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  invoke_ = const_cast< ::weizhu::Invoke*>(
      ::weizhu::Invoke::internal_default_instance());
#else
  invoke_ = const_cast< ::weizhu::Invoke*>(&::weizhu::Invoke::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  network_ = const_cast< ::weizhu::Network*>(
      ::weizhu::Network::internal_default_instance());
#else
  network_ = const_cast< ::weizhu::Network*>(&::weizhu::Network::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  weizhu_ = const_cast< ::weizhu::Weizhu*>(
      ::weizhu::Weizhu::internal_default_instance());
#else
  weizhu_ = const_cast< ::weizhu::Weizhu*>(&::weizhu::Weizhu::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  android_ = const_cast< ::weizhu::Android*>(
      ::weizhu::Android::internal_default_instance());
#else
  android_ = const_cast< ::weizhu::Android*>(&::weizhu::Android::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  iphone_ = const_cast< ::weizhu::Iphone*>(
      ::weizhu::Iphone::internal_default_instance());
#else
  iphone_ = const_cast< ::weizhu::Iphone*>(&::weizhu::Iphone::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  web_mobile_ = const_cast< ::weizhu::WebMobile*>(
      ::weizhu::WebMobile::internal_default_instance());
#else
  web_mobile_ = const_cast< ::weizhu::WebMobile*>(&::weizhu::WebMobile::default_instance());
#endif
}

RequestHead::RequestHead(const RequestHead& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:weizhu.RequestHead)
}

void RequestHead::SharedCtor() {
  _cached_size_ = 0;
  session_ = NULL;
  invoke_ = NULL;
  network_ = NULL;
  weizhu_ = NULL;
  android_ = NULL;
  iphone_ = NULL;
  web_mobile_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestHead::~RequestHead() {
  // @@protoc_insertion_point(destructor:weizhu.RequestHead)
  SharedDtor();
}

void RequestHead::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete session_;
    delete invoke_;
    delete network_;
    delete weizhu_;
    delete android_;
    delete iphone_;
    delete web_mobile_;
  }
}

void RequestHead::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const RequestHead& RequestHead::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_weizhu_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_weizhu_2eproto();
#endif
  return *default_instance_;
}

RequestHead* RequestHead::default_instance_ = NULL;

RequestHead* RequestHead::New() const {
  return new RequestHead;
}

void RequestHead::Clear() {
  if (_has_bits_[0 / 32] & 127) {
    if (has_session()) {
      if (session_ != NULL) session_->::weizhu::Session::Clear();
    }
    if (has_invoke()) {
      if (invoke_ != NULL) invoke_->::weizhu::Invoke::Clear();
    }
    if (has_network()) {
      if (network_ != NULL) network_->::weizhu::Network::Clear();
    }
    if (has_weizhu()) {
      if (weizhu_ != NULL) weizhu_->::weizhu::Weizhu::Clear();
    }
    if (has_android()) {
      if (android_ != NULL) android_->::weizhu::Android::Clear();
    }
    if (has_iphone()) {
      if (iphone_ != NULL) iphone_->::weizhu::Iphone::Clear();
    }
    if (has_web_mobile()) {
      if (web_mobile_ != NULL) web_mobile_->::weizhu::WebMobile::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool RequestHead::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:weizhu.RequestHead)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .weizhu.Session session = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_session()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_invoke;
        break;
      }

      // required .weizhu.Invoke invoke = 2;
      case 2: {
        if (tag == 18) {
         parse_invoke:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_invoke()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_network;
        break;
      }

      // required .weizhu.Network network = 3;
      case 3: {
        if (tag == 26) {
         parse_network:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_network()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_weizhu;
        break;
      }

      // optional .weizhu.Weizhu weizhu = 4;
      case 4: {
        if (tag == 34) {
         parse_weizhu:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_weizhu()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_android;
        break;
      }

      // optional .weizhu.Android android = 5;
      case 5: {
        if (tag == 42) {
         parse_android:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_android()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_iphone;
        break;
      }

      // optional .weizhu.Iphone iphone = 6;
      case 6: {
        if (tag == 50) {
         parse_iphone:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_iphone()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_web_mobile;
        break;
      }

      // optional .weizhu.WebMobile web_mobile = 7;
      case 7: {
        if (tag == 58) {
         parse_web_mobile:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_web_mobile()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:weizhu.RequestHead)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:weizhu.RequestHead)
  return false;
#undef DO_
}

void RequestHead::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:weizhu.RequestHead)
  // required .weizhu.Session session = 1;
  if (has_session()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->session(), output);
  }

  // required .weizhu.Invoke invoke = 2;
  if (has_invoke()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->invoke(), output);
  }

  // required .weizhu.Network network = 3;
  if (has_network()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->network(), output);
  }

  // optional .weizhu.Weizhu weizhu = 4;
  if (has_weizhu()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, this->weizhu(), output);
  }

  // optional .weizhu.Android android = 5;
  if (has_android()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      5, this->android(), output);
  }

  // optional .weizhu.Iphone iphone = 6;
  if (has_iphone()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      6, this->iphone(), output);
  }

  // optional .weizhu.WebMobile web_mobile = 7;
  if (has_web_mobile()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      7, this->web_mobile(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:weizhu.RequestHead)
}

int RequestHead::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .weizhu.Session session = 1;
    if (has_session()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->session());
    }

    // required .weizhu.Invoke invoke = 2;
    if (has_invoke()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->invoke());
    }

    // required .weizhu.Network network = 3;
    if (has_network()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->network());
    }

    // optional .weizhu.Weizhu weizhu = 4;
    if (has_weizhu()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->weizhu());
    }

    // optional .weizhu.Android android = 5;
    if (has_android()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->android());
    }

    // optional .weizhu.Iphone iphone = 6;
    if (has_iphone()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->iphone());
    }

    // optional .weizhu.WebMobile web_mobile = 7;
    if (has_web_mobile()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->web_mobile());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestHead::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const RequestHead*>(&from));
}

void RequestHead::MergeFrom(const RequestHead& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_session()) {
      mutable_session()->::weizhu::Session::MergeFrom(from.session());
    }
    if (from.has_invoke()) {
      mutable_invoke()->::weizhu::Invoke::MergeFrom(from.invoke());
    }
    if (from.has_network()) {
      mutable_network()->::weizhu::Network::MergeFrom(from.network());
    }
    if (from.has_weizhu()) {
      mutable_weizhu()->::weizhu::Weizhu::MergeFrom(from.weizhu());
    }
    if (from.has_android()) {
      mutable_android()->::weizhu::Android::MergeFrom(from.android());
    }
    if (from.has_iphone()) {
      mutable_iphone()->::weizhu::Iphone::MergeFrom(from.iphone());
    }
    if (from.has_web_mobile()) {
      mutable_web_mobile()->::weizhu::WebMobile::MergeFrom(from.web_mobile());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void RequestHead::CopyFrom(const RequestHead& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestHead::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_session()) {
    if (!this->session().IsInitialized()) return false;
  }
  if (has_invoke()) {
    if (!this->invoke().IsInitialized()) return false;
  }
  if (has_network()) {
    if (!this->network().IsInitialized()) return false;
  }
  if (has_weizhu()) {
    if (!this->weizhu().IsInitialized()) return false;
  }
  if (has_android()) {
    if (!this->android().IsInitialized()) return false;
  }
  if (has_iphone()) {
    if (!this->iphone().IsInitialized()) return false;
  }
  if (has_web_mobile()) {
    if (!this->web_mobile().IsInitialized()) return false;
  }
  return true;
}

void RequestHead::Swap(RequestHead* other) {
  if (other != this) {
    std::swap(session_, other->session_);
    std::swap(invoke_, other->invoke_);
    std::swap(network_, other->network_);
    std::swap(weizhu_, other->weizhu_);
    std::swap(android_, other->android_);
    std::swap(iphone_, other->iphone_);
    std::swap(web_mobile_, other->web_mobile_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string RequestHead::GetTypeName() const {
  return "weizhu.RequestHead";
}


// ===================================================================

#ifndef _MSC_VER
const int AnonymousHead::kCompanyIdFieldNumber;
const int AnonymousHead::kInvokeFieldNumber;
const int AnonymousHead::kNetworkFieldNumber;
const int AnonymousHead::kWeizhuFieldNumber;
const int AnonymousHead::kAndroidFieldNumber;
const int AnonymousHead::kIphoneFieldNumber;
const int AnonymousHead::kWebMobileFieldNumber;
#endif  // !_MSC_VER

AnonymousHead::AnonymousHead()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:weizhu.AnonymousHead)
}

void AnonymousHead::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  invoke_ = const_cast< ::weizhu::Invoke*>(
      ::weizhu::Invoke::internal_default_instance());
#else
  invoke_ = const_cast< ::weizhu::Invoke*>(&::weizhu::Invoke::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  network_ = const_cast< ::weizhu::Network*>(
      ::weizhu::Network::internal_default_instance());
#else
  network_ = const_cast< ::weizhu::Network*>(&::weizhu::Network::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  weizhu_ = const_cast< ::weizhu::Weizhu*>(
      ::weizhu::Weizhu::internal_default_instance());
#else
  weizhu_ = const_cast< ::weizhu::Weizhu*>(&::weizhu::Weizhu::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  android_ = const_cast< ::weizhu::Android*>(
      ::weizhu::Android::internal_default_instance());
#else
  android_ = const_cast< ::weizhu::Android*>(&::weizhu::Android::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  iphone_ = const_cast< ::weizhu::Iphone*>(
      ::weizhu::Iphone::internal_default_instance());
#else
  iphone_ = const_cast< ::weizhu::Iphone*>(&::weizhu::Iphone::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  web_mobile_ = const_cast< ::weizhu::WebMobile*>(
      ::weizhu::WebMobile::internal_default_instance());
#else
  web_mobile_ = const_cast< ::weizhu::WebMobile*>(&::weizhu::WebMobile::default_instance());
#endif
}

AnonymousHead::AnonymousHead(const AnonymousHead& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:weizhu.AnonymousHead)
}

void AnonymousHead::SharedCtor() {
  _cached_size_ = 0;
  company_id_ = GOOGLE_LONGLONG(0);
  invoke_ = NULL;
  network_ = NULL;
  weizhu_ = NULL;
  android_ = NULL;
  iphone_ = NULL;
  web_mobile_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AnonymousHead::~AnonymousHead() {
  // @@protoc_insertion_point(destructor:weizhu.AnonymousHead)
  SharedDtor();
}

void AnonymousHead::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete invoke_;
    delete network_;
    delete weizhu_;
    delete android_;
    delete iphone_;
    delete web_mobile_;
  }
}

void AnonymousHead::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const AnonymousHead& AnonymousHead::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_weizhu_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_weizhu_2eproto();
#endif
  return *default_instance_;
}

AnonymousHead* AnonymousHead::default_instance_ = NULL;

AnonymousHead* AnonymousHead::New() const {
  return new AnonymousHead;
}

void AnonymousHead::Clear() {
  if (_has_bits_[0 / 32] & 127) {
    company_id_ = GOOGLE_LONGLONG(0);
    if (has_invoke()) {
      if (invoke_ != NULL) invoke_->::weizhu::Invoke::Clear();
    }
    if (has_network()) {
      if (network_ != NULL) network_->::weizhu::Network::Clear();
    }
    if (has_weizhu()) {
      if (weizhu_ != NULL) weizhu_->::weizhu::Weizhu::Clear();
    }
    if (has_android()) {
      if (android_ != NULL) android_->::weizhu::Android::Clear();
    }
    if (has_iphone()) {
      if (iphone_ != NULL) iphone_->::weizhu::Iphone::Clear();
    }
    if (has_web_mobile()) {
      if (web_mobile_ != NULL) web_mobile_->::weizhu::WebMobile::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool AnonymousHead::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:weizhu.AnonymousHead)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 company_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &company_id_)));
          set_has_company_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_invoke;
        break;
      }

      // required .weizhu.Invoke invoke = 2;
      case 2: {
        if (tag == 18) {
         parse_invoke:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_invoke()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_network;
        break;
      }

      // required .weizhu.Network network = 3;
      case 3: {
        if (tag == 26) {
         parse_network:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_network()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_weizhu;
        break;
      }

      // optional .weizhu.Weizhu weizhu = 4;
      case 4: {
        if (tag == 34) {
         parse_weizhu:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_weizhu()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_android;
        break;
      }

      // optional .weizhu.Android android = 5;
      case 5: {
        if (tag == 42) {
         parse_android:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_android()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_iphone;
        break;
      }

      // optional .weizhu.Iphone iphone = 6;
      case 6: {
        if (tag == 50) {
         parse_iphone:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_iphone()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_web_mobile;
        break;
      }

      // optional .weizhu.WebMobile web_mobile = 7;
      case 7: {
        if (tag == 58) {
         parse_web_mobile:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_web_mobile()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:weizhu.AnonymousHead)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:weizhu.AnonymousHead)
  return false;
#undef DO_
}

void AnonymousHead::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:weizhu.AnonymousHead)
  // optional int64 company_id = 1;
  if (has_company_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->company_id(), output);
  }

  // required .weizhu.Invoke invoke = 2;
  if (has_invoke()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->invoke(), output);
  }

  // required .weizhu.Network network = 3;
  if (has_network()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->network(), output);
  }

  // optional .weizhu.Weizhu weizhu = 4;
  if (has_weizhu()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, this->weizhu(), output);
  }

  // optional .weizhu.Android android = 5;
  if (has_android()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      5, this->android(), output);
  }

  // optional .weizhu.Iphone iphone = 6;
  if (has_iphone()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      6, this->iphone(), output);
  }

  // optional .weizhu.WebMobile web_mobile = 7;
  if (has_web_mobile()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      7, this->web_mobile(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:weizhu.AnonymousHead)
}

int AnonymousHead::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 company_id = 1;
    if (has_company_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->company_id());
    }

    // required .weizhu.Invoke invoke = 2;
    if (has_invoke()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->invoke());
    }

    // required .weizhu.Network network = 3;
    if (has_network()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->network());
    }

    // optional .weizhu.Weizhu weizhu = 4;
    if (has_weizhu()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->weizhu());
    }

    // optional .weizhu.Android android = 5;
    if (has_android()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->android());
    }

    // optional .weizhu.Iphone iphone = 6;
    if (has_iphone()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->iphone());
    }

    // optional .weizhu.WebMobile web_mobile = 7;
    if (has_web_mobile()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->web_mobile());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AnonymousHead::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const AnonymousHead*>(&from));
}

void AnonymousHead::MergeFrom(const AnonymousHead& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_company_id()) {
      set_company_id(from.company_id());
    }
    if (from.has_invoke()) {
      mutable_invoke()->::weizhu::Invoke::MergeFrom(from.invoke());
    }
    if (from.has_network()) {
      mutable_network()->::weizhu::Network::MergeFrom(from.network());
    }
    if (from.has_weizhu()) {
      mutable_weizhu()->::weizhu::Weizhu::MergeFrom(from.weizhu());
    }
    if (from.has_android()) {
      mutable_android()->::weizhu::Android::MergeFrom(from.android());
    }
    if (from.has_iphone()) {
      mutable_iphone()->::weizhu::Iphone::MergeFrom(from.iphone());
    }
    if (from.has_web_mobile()) {
      mutable_web_mobile()->::weizhu::WebMobile::MergeFrom(from.web_mobile());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void AnonymousHead::CopyFrom(const AnonymousHead& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AnonymousHead::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000006) != 0x00000006) return false;

  if (has_invoke()) {
    if (!this->invoke().IsInitialized()) return false;
  }
  if (has_network()) {
    if (!this->network().IsInitialized()) return false;
  }
  if (has_weizhu()) {
    if (!this->weizhu().IsInitialized()) return false;
  }
  if (has_android()) {
    if (!this->android().IsInitialized()) return false;
  }
  if (has_iphone()) {
    if (!this->iphone().IsInitialized()) return false;
  }
  if (has_web_mobile()) {
    if (!this->web_mobile().IsInitialized()) return false;
  }
  return true;
}

void AnonymousHead::Swap(AnonymousHead* other) {
  if (other != this) {
    std::swap(company_id_, other->company_id_);
    std::swap(invoke_, other->invoke_);
    std::swap(network_, other->network_);
    std::swap(weizhu_, other->weizhu_);
    std::swap(android_, other->android_);
    std::swap(iphone_, other->iphone_);
    std::swap(web_mobile_, other->web_mobile_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string AnonymousHead::GetTypeName() const {
  return "weizhu.AnonymousHead";
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

EmptyRequest::EmptyRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:weizhu.EmptyRequest)
}

void EmptyRequest::InitAsDefaultInstance() {
}

EmptyRequest::EmptyRequest(const EmptyRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:weizhu.EmptyRequest)
}

void EmptyRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EmptyRequest::~EmptyRequest() {
  // @@protoc_insertion_point(destructor:weizhu.EmptyRequest)
  SharedDtor();
}

void EmptyRequest::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void EmptyRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const EmptyRequest& EmptyRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_weizhu_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_weizhu_2eproto();
#endif
  return *default_instance_;
}

EmptyRequest* EmptyRequest::default_instance_ = NULL;

EmptyRequest* EmptyRequest::New() const {
  return new EmptyRequest;
}

void EmptyRequest::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool EmptyRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:weizhu.EmptyRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(
        input, tag, &unknown_fields_stream));
  }
success:
  // @@protoc_insertion_point(parse_success:weizhu.EmptyRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:weizhu.EmptyRequest)
  return false;
#undef DO_
}

void EmptyRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:weizhu.EmptyRequest)
  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:weizhu.EmptyRequest)
}

int EmptyRequest::ByteSize() const {
  int total_size = 0;

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EmptyRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const EmptyRequest*>(&from));
}

void EmptyRequest::MergeFrom(const EmptyRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->append(from.unknown_fields());
}

void EmptyRequest::CopyFrom(const EmptyRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EmptyRequest::IsInitialized() const {

  return true;
}

void EmptyRequest::Swap(EmptyRequest* other) {
  if (other != this) {
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string EmptyRequest::GetTypeName() const {
  return "weizhu.EmptyRequest";
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

EmptyResponse::EmptyResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:weizhu.EmptyResponse)
}

void EmptyResponse::InitAsDefaultInstance() {
}

EmptyResponse::EmptyResponse(const EmptyResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:weizhu.EmptyResponse)
}

void EmptyResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EmptyResponse::~EmptyResponse() {
  // @@protoc_insertion_point(destructor:weizhu.EmptyResponse)
  SharedDtor();
}

void EmptyResponse::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void EmptyResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const EmptyResponse& EmptyResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_weizhu_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_weizhu_2eproto();
#endif
  return *default_instance_;
}

EmptyResponse* EmptyResponse::default_instance_ = NULL;

EmptyResponse* EmptyResponse::New() const {
  return new EmptyResponse;
}

void EmptyResponse::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool EmptyResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:weizhu.EmptyResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(
        input, tag, &unknown_fields_stream));
  }
success:
  // @@protoc_insertion_point(parse_success:weizhu.EmptyResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:weizhu.EmptyResponse)
  return false;
#undef DO_
}

void EmptyResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:weizhu.EmptyResponse)
  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:weizhu.EmptyResponse)
}

int EmptyResponse::ByteSize() const {
  int total_size = 0;

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EmptyResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const EmptyResponse*>(&from));
}

void EmptyResponse::MergeFrom(const EmptyResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->append(from.unknown_fields());
}

void EmptyResponse::CopyFrom(const EmptyResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EmptyResponse::IsInitialized() const {

  return true;
}

void EmptyResponse::Swap(EmptyResponse* other) {
  if (other != this) {
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string EmptyResponse::GetTypeName() const {
  return "weizhu.EmptyResponse";
}


// ===================================================================

#ifndef _MSC_VER
const int TestPush::kMessageFieldNumber;
#endif  // !_MSC_VER

TestPush::TestPush()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:weizhu.TestPush)
}

void TestPush::InitAsDefaultInstance() {
}

TestPush::TestPush(const TestPush& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:weizhu.TestPush)
}

void TestPush::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  message_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TestPush::~TestPush() {
  // @@protoc_insertion_point(destructor:weizhu.TestPush)
  SharedDtor();
}

void TestPush::SharedDtor() {
  if (message_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete message_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void TestPush::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const TestPush& TestPush::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_weizhu_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_weizhu_2eproto();
#endif
  return *default_instance_;
}

TestPush* TestPush::default_instance_ = NULL;

TestPush* TestPush::New() const {
  return new TestPush;
}

void TestPush::Clear() {
  if (has_message()) {
    if (message_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      message_->clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool TestPush::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:weizhu.TestPush)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string message = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:weizhu.TestPush)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:weizhu.TestPush)
  return false;
#undef DO_
}

void TestPush::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:weizhu.TestPush)
  // required string message = 1;
  if (has_message()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->message(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:weizhu.TestPush)
}

int TestPush::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string message = 1;
    if (has_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->message());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TestPush::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const TestPush*>(&from));
}

void TestPush::MergeFrom(const TestPush& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_message()) {
      set_message(from.message());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void TestPush::CopyFrom(const TestPush& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestPush::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void TestPush::Swap(TestPush* other) {
  if (other != this) {
    std::swap(message_, other->message_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string TestPush::GetTypeName() const {
  return "weizhu.TestPush";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace weizhu

// @@protoc_insertion_point(global_scope)
