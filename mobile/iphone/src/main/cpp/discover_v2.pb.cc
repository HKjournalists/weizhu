// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: discover_v2.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "discover_v2.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)

namespace weizhu {
namespace discover_v2 {

void protobuf_ShutdownFile_discover_5fv2_2eproto() {
  delete WebUrl::default_instance_;
  delete Document::default_instance_;
  delete Video::default_instance_;
  delete Audio::default_instance_;
  delete AppUri::default_instance_;
  delete Banner::default_instance_;
  delete Module::default_instance_;
  delete Module_Category::default_instance_;
  delete Module_CategoryList::default_instance_;
  delete Item::default_instance_;
  delete Item_Base::default_instance_;
  delete Item_Count::default_instance_;
  delete Item_User::default_instance_;
  delete ItemLearn::default_instance_;
  delete ItemComment::default_instance_;
  delete ItemScore::default_instance_;
  delete ItemLike::default_instance_;
  delete ItemShare::default_instance_;
  delete GetDiscoverHomeRequest::default_instance_;
  delete GetDiscoverHomeResponse::default_instance_;
  delete GetModuleCategoryItemListRequest::default_instance_;
  delete GetModuleCategoryItemListResponse::default_instance_;
  delete GetModulePromptIndexRequest::default_instance_;
  delete GetModulePromptIndexResponse::default_instance_;
  delete GetItemByIdRequest::default_instance_;
  delete GetItemByIdResponse::default_instance_;
  delete GetItemLearnListRequest::default_instance_;
  delete GetItemLearnListResponse::default_instance_;
  delete GetUserLearnListRequest::default_instance_;
  delete GetUserLearnListResponse::default_instance_;
  delete GetItemCommentListRequest::default_instance_;
  delete GetItemCommentListResponse::default_instance_;
  delete GetUserCommentListRequest::default_instance_;
  delete GetUserCommentListResponse::default_instance_;
  delete GetItemScoreListRequest::default_instance_;
  delete GetItemScoreListResponse::default_instance_;
  delete GetUserScoreListRequest::default_instance_;
  delete GetUserScoreListResponse::default_instance_;
  delete GetItemLikeListRequest::default_instance_;
  delete GetItemLikeListResponse::default_instance_;
  delete GetUserLikeListRequest::default_instance_;
  delete GetUserLikeListResponse::default_instance_;
  delete GetItemShareListRequest::default_instance_;
  delete GetItemShareListResponse::default_instance_;
  delete GetUserShareListRequest::default_instance_;
  delete GetUserShareListResponse::default_instance_;
  delete GetUserDiscoverRequest::default_instance_;
  delete GetUserDiscoverResponse::default_instance_;
  delete SearchItemRequest::default_instance_;
  delete SearchItemResponse::default_instance_;
  delete GetItemListRequest::default_instance_;
  delete GetItemListResponse::default_instance_;
  delete LearnItemRequest::default_instance_;
  delete LearnItemResponse::default_instance_;
  delete ReportLearnItemRequest::default_instance_;
  delete CommentItemRequest::default_instance_;
  delete CommentItemResponse::default_instance_;
  delete DeleteCommentRequest::default_instance_;
  delete DeleteCommentResponse::default_instance_;
  delete ScoreItemRequest::default_instance_;
  delete ScoreItemResponse::default_instance_;
  delete LikeItemRequest::default_instance_;
  delete LikeItemResponse::default_instance_;
  delete ShareItemRequest::default_instance_;
  delete ShareItemResponse::default_instance_;
  delete ShareItemResponse_ItemShareContent::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_discover_5fv2_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_discover_5fv2_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  ::weizhu::protobuf_AddDesc_weizhu_2eproto();
  WebUrl::default_instance_ = new WebUrl();
  Document::default_instance_ = new Document();
  Video::default_instance_ = new Video();
  Audio::default_instance_ = new Audio();
  AppUri::default_instance_ = new AppUri();
  Banner::default_instance_ = new Banner();
  Module::default_instance_ = new Module();
  Module_Category::default_instance_ = new Module_Category();
  Module_CategoryList::default_instance_ = new Module_CategoryList();
  Item::default_instance_ = new Item();
  Item_Base::default_instance_ = new Item_Base();
  Item_Count::default_instance_ = new Item_Count();
  Item_User::default_instance_ = new Item_User();
  ItemLearn::default_instance_ = new ItemLearn();
  ItemComment::default_instance_ = new ItemComment();
  ItemScore::default_instance_ = new ItemScore();
  ItemLike::default_instance_ = new ItemLike();
  ItemShare::default_instance_ = new ItemShare();
  GetDiscoverHomeRequest::default_instance_ = new GetDiscoverHomeRequest();
  GetDiscoverHomeResponse::default_instance_ = new GetDiscoverHomeResponse();
  GetModuleCategoryItemListRequest::default_instance_ = new GetModuleCategoryItemListRequest();
  GetModuleCategoryItemListResponse::default_instance_ = new GetModuleCategoryItemListResponse();
  GetModulePromptIndexRequest::default_instance_ = new GetModulePromptIndexRequest();
  GetModulePromptIndexResponse::default_instance_ = new GetModulePromptIndexResponse();
  GetItemByIdRequest::default_instance_ = new GetItemByIdRequest();
  GetItemByIdResponse::default_instance_ = new GetItemByIdResponse();
  GetItemLearnListRequest::default_instance_ = new GetItemLearnListRequest();
  GetItemLearnListResponse::default_instance_ = new GetItemLearnListResponse();
  GetUserLearnListRequest::default_instance_ = new GetUserLearnListRequest();
  GetUserLearnListResponse::default_instance_ = new GetUserLearnListResponse();
  GetItemCommentListRequest::default_instance_ = new GetItemCommentListRequest();
  GetItemCommentListResponse::default_instance_ = new GetItemCommentListResponse();
  GetUserCommentListRequest::default_instance_ = new GetUserCommentListRequest();
  GetUserCommentListResponse::default_instance_ = new GetUserCommentListResponse();
  GetItemScoreListRequest::default_instance_ = new GetItemScoreListRequest();
  GetItemScoreListResponse::default_instance_ = new GetItemScoreListResponse();
  GetUserScoreListRequest::default_instance_ = new GetUserScoreListRequest();
  GetUserScoreListResponse::default_instance_ = new GetUserScoreListResponse();
  GetItemLikeListRequest::default_instance_ = new GetItemLikeListRequest();
  GetItemLikeListResponse::default_instance_ = new GetItemLikeListResponse();
  GetUserLikeListRequest::default_instance_ = new GetUserLikeListRequest();
  GetUserLikeListResponse::default_instance_ = new GetUserLikeListResponse();
  GetItemShareListRequest::default_instance_ = new GetItemShareListRequest();
  GetItemShareListResponse::default_instance_ = new GetItemShareListResponse();
  GetUserShareListRequest::default_instance_ = new GetUserShareListRequest();
  GetUserShareListResponse::default_instance_ = new GetUserShareListResponse();
  GetUserDiscoverRequest::default_instance_ = new GetUserDiscoverRequest();
  GetUserDiscoverResponse::default_instance_ = new GetUserDiscoverResponse();
  SearchItemRequest::default_instance_ = new SearchItemRequest();
  SearchItemResponse::default_instance_ = new SearchItemResponse();
  GetItemListRequest::default_instance_ = new GetItemListRequest();
  GetItemListResponse::default_instance_ = new GetItemListResponse();
  LearnItemRequest::default_instance_ = new LearnItemRequest();
  LearnItemResponse::default_instance_ = new LearnItemResponse();
  ReportLearnItemRequest::default_instance_ = new ReportLearnItemRequest();
  CommentItemRequest::default_instance_ = new CommentItemRequest();
  CommentItemResponse::default_instance_ = new CommentItemResponse();
  DeleteCommentRequest::default_instance_ = new DeleteCommentRequest();
  DeleteCommentResponse::default_instance_ = new DeleteCommentResponse();
  ScoreItemRequest::default_instance_ = new ScoreItemRequest();
  ScoreItemResponse::default_instance_ = new ScoreItemResponse();
  LikeItemRequest::default_instance_ = new LikeItemRequest();
  LikeItemResponse::default_instance_ = new LikeItemResponse();
  ShareItemRequest::default_instance_ = new ShareItemRequest();
  ShareItemResponse::default_instance_ = new ShareItemResponse();
  ShareItemResponse_ItemShareContent::default_instance_ = new ShareItemResponse_ItemShareContent();
  WebUrl::default_instance_->InitAsDefaultInstance();
  Document::default_instance_->InitAsDefaultInstance();
  Video::default_instance_->InitAsDefaultInstance();
  Audio::default_instance_->InitAsDefaultInstance();
  AppUri::default_instance_->InitAsDefaultInstance();
  Banner::default_instance_->InitAsDefaultInstance();
  Module::default_instance_->InitAsDefaultInstance();
  Module_Category::default_instance_->InitAsDefaultInstance();
  Module_CategoryList::default_instance_->InitAsDefaultInstance();
  Item::default_instance_->InitAsDefaultInstance();
  Item_Base::default_instance_->InitAsDefaultInstance();
  Item_Count::default_instance_->InitAsDefaultInstance();
  Item_User::default_instance_->InitAsDefaultInstance();
  ItemLearn::default_instance_->InitAsDefaultInstance();
  ItemComment::default_instance_->InitAsDefaultInstance();
  ItemScore::default_instance_->InitAsDefaultInstance();
  ItemLike::default_instance_->InitAsDefaultInstance();
  ItemShare::default_instance_->InitAsDefaultInstance();
  GetDiscoverHomeRequest::default_instance_->InitAsDefaultInstance();
  GetDiscoverHomeResponse::default_instance_->InitAsDefaultInstance();
  GetModuleCategoryItemListRequest::default_instance_->InitAsDefaultInstance();
  GetModuleCategoryItemListResponse::default_instance_->InitAsDefaultInstance();
  GetModulePromptIndexRequest::default_instance_->InitAsDefaultInstance();
  GetModulePromptIndexResponse::default_instance_->InitAsDefaultInstance();
  GetItemByIdRequest::default_instance_->InitAsDefaultInstance();
  GetItemByIdResponse::default_instance_->InitAsDefaultInstance();
  GetItemLearnListRequest::default_instance_->InitAsDefaultInstance();
  GetItemLearnListResponse::default_instance_->InitAsDefaultInstance();
  GetUserLearnListRequest::default_instance_->InitAsDefaultInstance();
  GetUserLearnListResponse::default_instance_->InitAsDefaultInstance();
  GetItemCommentListRequest::default_instance_->InitAsDefaultInstance();
  GetItemCommentListResponse::default_instance_->InitAsDefaultInstance();
  GetUserCommentListRequest::default_instance_->InitAsDefaultInstance();
  GetUserCommentListResponse::default_instance_->InitAsDefaultInstance();
  GetItemScoreListRequest::default_instance_->InitAsDefaultInstance();
  GetItemScoreListResponse::default_instance_->InitAsDefaultInstance();
  GetUserScoreListRequest::default_instance_->InitAsDefaultInstance();
  GetUserScoreListResponse::default_instance_->InitAsDefaultInstance();
  GetItemLikeListRequest::default_instance_->InitAsDefaultInstance();
  GetItemLikeListResponse::default_instance_->InitAsDefaultInstance();
  GetUserLikeListRequest::default_instance_->InitAsDefaultInstance();
  GetUserLikeListResponse::default_instance_->InitAsDefaultInstance();
  GetItemShareListRequest::default_instance_->InitAsDefaultInstance();
  GetItemShareListResponse::default_instance_->InitAsDefaultInstance();
  GetUserShareListRequest::default_instance_->InitAsDefaultInstance();
  GetUserShareListResponse::default_instance_->InitAsDefaultInstance();
  GetUserDiscoverRequest::default_instance_->InitAsDefaultInstance();
  GetUserDiscoverResponse::default_instance_->InitAsDefaultInstance();
  SearchItemRequest::default_instance_->InitAsDefaultInstance();
  SearchItemResponse::default_instance_->InitAsDefaultInstance();
  GetItemListRequest::default_instance_->InitAsDefaultInstance();
  GetItemListResponse::default_instance_->InitAsDefaultInstance();
  LearnItemRequest::default_instance_->InitAsDefaultInstance();
  LearnItemResponse::default_instance_->InitAsDefaultInstance();
  ReportLearnItemRequest::default_instance_->InitAsDefaultInstance();
  CommentItemRequest::default_instance_->InitAsDefaultInstance();
  CommentItemResponse::default_instance_->InitAsDefaultInstance();
  DeleteCommentRequest::default_instance_->InitAsDefaultInstance();
  DeleteCommentResponse::default_instance_->InitAsDefaultInstance();
  ScoreItemRequest::default_instance_->InitAsDefaultInstance();
  ScoreItemResponse::default_instance_->InitAsDefaultInstance();
  LikeItemRequest::default_instance_->InitAsDefaultInstance();
  LikeItemResponse::default_instance_->InitAsDefaultInstance();
  ShareItemRequest::default_instance_->InitAsDefaultInstance();
  ShareItemResponse::default_instance_->InitAsDefaultInstance();
  ShareItemResponse_ItemShareContent::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_discover_5fv2_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_discover_5fv2_2eproto_once_);
void protobuf_AddDesc_discover_5fv2_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_discover_5fv2_2eproto_once_,
                 &protobuf_AddDesc_discover_5fv2_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_discover_5fv2_2eproto {
  StaticDescriptorInitializer_discover_5fv2_2eproto() {
    protobuf_AddDesc_discover_5fv2_2eproto();
  }
} static_descriptor_initializer_discover_5fv2_2eproto_;
#endif
bool State_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int WebUrl::kWebUrlFieldNumber;
const int WebUrl::kIsWeizhuFieldNumber;
#endif  // !_MSC_VER

WebUrl::WebUrl()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:weizhu.discover_v2.WebUrl)
}

void WebUrl::InitAsDefaultInstance() {
}

WebUrl::WebUrl(const WebUrl& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:weizhu.discover_v2.WebUrl)
}

void WebUrl::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  web_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  is_weizhu_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WebUrl::~WebUrl() {
  // @@protoc_insertion_point(destructor:weizhu.discover_v2.WebUrl)
  SharedDtor();
}

void WebUrl::SharedDtor() {
  if (web_url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete web_url_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void WebUrl::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const WebUrl& WebUrl::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_discover_5fv2_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_discover_5fv2_2eproto();
#endif
  return *default_instance_;
}

WebUrl* WebUrl::default_instance_ = NULL;

WebUrl* WebUrl::New() const {
  return new WebUrl;
}

void WebUrl::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_web_url()) {
      if (web_url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        web_url_->clear();
      }
    }
    is_weizhu_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool WebUrl::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:weizhu.discover_v2.WebUrl)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string web_url = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_web_url()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_is_weizhu;
        break;
      }

      // required bool is_weizhu = 2;
      case 2: {
        if (tag == 16) {
         parse_is_weizhu:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_weizhu_)));
          set_has_is_weizhu();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:weizhu.discover_v2.WebUrl)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:weizhu.discover_v2.WebUrl)
  return false;
#undef DO_
}

void WebUrl::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:weizhu.discover_v2.WebUrl)
  // required string web_url = 1;
  if (has_web_url()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->web_url(), output);
  }

  // required bool is_weizhu = 2;
  if (has_is_weizhu()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->is_weizhu(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:weizhu.discover_v2.WebUrl)
}

int WebUrl::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string web_url = 1;
    if (has_web_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->web_url());
    }

    // required bool is_weizhu = 2;
    if (has_is_weizhu()) {
      total_size += 1 + 1;
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WebUrl::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const WebUrl*>(&from));
}

void WebUrl::MergeFrom(const WebUrl& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_web_url()) {
      set_web_url(from.web_url());
    }
    if (from.has_is_weizhu()) {
      set_is_weizhu(from.is_weizhu());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void WebUrl::CopyFrom(const WebUrl& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WebUrl::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void WebUrl::Swap(WebUrl* other) {
  if (other != this) {
    std::swap(web_url_, other->web_url_);
    std::swap(is_weizhu_, other->is_weizhu_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string WebUrl::GetTypeName() const {
  return "weizhu.discover_v2.WebUrl";
}


// ===================================================================

#ifndef _MSC_VER
const int Document::kDocumentUrlFieldNumber;
const int Document::kDocumentTypeFieldNumber;
const int Document::kDocumentSizeFieldNumber;
const int Document::kCheckMd5FieldNumber;
const int Document::kIsDownloadFieldNumber;
const int Document::kIsAuthUrlFieldNumber;
#endif  // !_MSC_VER

Document::Document()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:weizhu.discover_v2.Document)
}

void Document::InitAsDefaultInstance() {
}

Document::Document(const Document& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:weizhu.discover_v2.Document)
}

void Document::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  document_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  document_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  document_size_ = 0;
  check_md5_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  is_download_ = false;
  is_auth_url_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Document::~Document() {
  // @@protoc_insertion_point(destructor:weizhu.discover_v2.Document)
  SharedDtor();
}

void Document::SharedDtor() {
  if (document_url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete document_url_;
  }
  if (document_type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete document_type_;
  }
  if (check_md5_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete check_md5_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void Document::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Document& Document::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_discover_5fv2_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_discover_5fv2_2eproto();
#endif
  return *default_instance_;
}

Document* Document::default_instance_ = NULL;

Document* Document::New() const {
  return new Document;
}

void Document::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Document*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(document_size_, is_auth_url_);
    if (has_document_url()) {
      if (document_url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        document_url_->clear();
      }
    }
    if (has_document_type()) {
      if (document_type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        document_type_->clear();
      }
    }
    if (has_check_md5()) {
      if (check_md5_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        check_md5_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool Document::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:weizhu.discover_v2.Document)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string document_url = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_document_url()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_document_type;
        break;
      }

      // required string document_type = 2;
      case 2: {
        if (tag == 18) {
         parse_document_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_document_type()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_document_size;
        break;
      }

      // required int32 document_size = 3;
      case 3: {
        if (tag == 24) {
         parse_document_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &document_size_)));
          set_has_document_size();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_check_md5;
        break;
      }

      // optional string check_md5 = 4;
      case 4: {
        if (tag == 34) {
         parse_check_md5:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_check_md5()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_is_download;
        break;
      }

      // required bool is_download = 5;
      case 5: {
        if (tag == 40) {
         parse_is_download:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_download_)));
          set_has_is_download();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_is_auth_url;
        break;
      }

      // required bool is_auth_url = 6;
      case 6: {
        if (tag == 48) {
         parse_is_auth_url:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_auth_url_)));
          set_has_is_auth_url();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:weizhu.discover_v2.Document)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:weizhu.discover_v2.Document)
  return false;
#undef DO_
}

void Document::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:weizhu.discover_v2.Document)
  // required string document_url = 1;
  if (has_document_url()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->document_url(), output);
  }

  // required string document_type = 2;
  if (has_document_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->document_type(), output);
  }

  // required int32 document_size = 3;
  if (has_document_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->document_size(), output);
  }

  // optional string check_md5 = 4;
  if (has_check_md5()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->check_md5(), output);
  }

  // required bool is_download = 5;
  if (has_is_download()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->is_download(), output);
  }

  // required bool is_auth_url = 6;
  if (has_is_auth_url()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->is_auth_url(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:weizhu.discover_v2.Document)
}

int Document::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string document_url = 1;
    if (has_document_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->document_url());
    }

    // required string document_type = 2;
    if (has_document_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->document_type());
    }

    // required int32 document_size = 3;
    if (has_document_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->document_size());
    }

    // optional string check_md5 = 4;
    if (has_check_md5()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->check_md5());
    }

    // required bool is_download = 5;
    if (has_is_download()) {
      total_size += 1 + 1;
    }

    // required bool is_auth_url = 6;
    if (has_is_auth_url()) {
      total_size += 1 + 1;
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Document::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Document*>(&from));
}

void Document::MergeFrom(const Document& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_document_url()) {
      set_document_url(from.document_url());
    }
    if (from.has_document_type()) {
      set_document_type(from.document_type());
    }
    if (from.has_document_size()) {
      set_document_size(from.document_size());
    }
    if (from.has_check_md5()) {
      set_check_md5(from.check_md5());
    }
    if (from.has_is_download()) {
      set_is_download(from.is_download());
    }
    if (from.has_is_auth_url()) {
      set_is_auth_url(from.is_auth_url());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void Document::CopyFrom(const Document& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Document::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000037) != 0x00000037) return false;

  return true;
}

void Document::Swap(Document* other) {
  if (other != this) {
    std::swap(document_url_, other->document_url_);
    std::swap(document_type_, other->document_type_);
    std::swap(document_size_, other->document_size_);
    std::swap(check_md5_, other->check_md5_);
    std::swap(is_download_, other->is_download_);
    std::swap(is_auth_url_, other->is_auth_url_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string Document::GetTypeName() const {
  return "weizhu.discover_v2.Document";
}


// ===================================================================

#ifndef _MSC_VER
const int Video::kVideoUrlFieldNumber;
const int Video::kVideoTypeFieldNumber;
const int Video::kVideoSizeFieldNumber;
const int Video::kVideoTimeFieldNumber;
const int Video::kCheckMd5FieldNumber;
const int Video::kIsDownloadFieldNumber;
const int Video::kIsAuthUrlFieldNumber;
#endif  // !_MSC_VER

Video::Video()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:weizhu.discover_v2.Video)
}

void Video::InitAsDefaultInstance() {
}

Video::Video(const Video& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:weizhu.discover_v2.Video)
}

void Video::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  video_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  video_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  video_size_ = 0;
  video_time_ = 0;
  check_md5_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  is_download_ = false;
  is_auth_url_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Video::~Video() {
  // @@protoc_insertion_point(destructor:weizhu.discover_v2.Video)
  SharedDtor();
}

void Video::SharedDtor() {
  if (video_url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete video_url_;
  }
  if (video_type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete video_type_;
  }
  if (check_md5_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete check_md5_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void Video::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Video& Video::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_discover_5fv2_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_discover_5fv2_2eproto();
#endif
  return *default_instance_;
}

Video* Video::default_instance_ = NULL;

Video* Video::New() const {
  return new Video;
}

void Video::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Video*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(video_size_, video_time_);
    ZR_(is_download_, is_auth_url_);
    if (has_video_url()) {
      if (video_url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        video_url_->clear();
      }
    }
    if (has_video_type()) {
      if (video_type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        video_type_->clear();
      }
    }
    if (has_check_md5()) {
      if (check_md5_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        check_md5_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool Video::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:weizhu.discover_v2.Video)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string video_url = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_video_url()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_video_type;
        break;
      }

      // required string video_type = 2;
      case 2: {
        if (tag == 18) {
         parse_video_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_video_type()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_video_size;
        break;
      }

      // required int32 video_size = 3;
      case 3: {
        if (tag == 24) {
         parse_video_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &video_size_)));
          set_has_video_size();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_video_time;
        break;
      }

      // required int32 video_time = 4;
      case 4: {
        if (tag == 32) {
         parse_video_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &video_time_)));
          set_has_video_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_check_md5;
        break;
      }

      // optional string check_md5 = 5;
      case 5: {
        if (tag == 42) {
         parse_check_md5:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_check_md5()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_is_download;
        break;
      }

      // required bool is_download = 6;
      case 6: {
        if (tag == 48) {
         parse_is_download:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_download_)));
          set_has_is_download();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_is_auth_url;
        break;
      }

      // required bool is_auth_url = 7;
      case 7: {
        if (tag == 56) {
         parse_is_auth_url:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_auth_url_)));
          set_has_is_auth_url();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:weizhu.discover_v2.Video)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:weizhu.discover_v2.Video)
  return false;
#undef DO_
}

void Video::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:weizhu.discover_v2.Video)
  // required string video_url = 1;
  if (has_video_url()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->video_url(), output);
  }

  // required string video_type = 2;
  if (has_video_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->video_type(), output);
  }

  // required int32 video_size = 3;
  if (has_video_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->video_size(), output);
  }

  // required int32 video_time = 4;
  if (has_video_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->video_time(), output);
  }

  // optional string check_md5 = 5;
  if (has_check_md5()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->check_md5(), output);
  }

  // required bool is_download = 6;
  if (has_is_download()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->is_download(), output);
  }

  // required bool is_auth_url = 7;
  if (has_is_auth_url()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->is_auth_url(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:weizhu.discover_v2.Video)
}

int Video::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string video_url = 1;
    if (has_video_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->video_url());
    }

    // required string video_type = 2;
    if (has_video_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->video_type());
    }

    // required int32 video_size = 3;
    if (has_video_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->video_size());
    }

    // required int32 video_time = 4;
    if (has_video_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->video_time());
    }

    // optional string check_md5 = 5;
    if (has_check_md5()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->check_md5());
    }

    // required bool is_download = 6;
    if (has_is_download()) {
      total_size += 1 + 1;
    }

    // required bool is_auth_url = 7;
    if (has_is_auth_url()) {
      total_size += 1 + 1;
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Video::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Video*>(&from));
}

void Video::MergeFrom(const Video& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_video_url()) {
      set_video_url(from.video_url());
    }
    if (from.has_video_type()) {
      set_video_type(from.video_type());
    }
    if (from.has_video_size()) {
      set_video_size(from.video_size());
    }
    if (from.has_video_time()) {
      set_video_time(from.video_time());
    }
    if (from.has_check_md5()) {
      set_check_md5(from.check_md5());
    }
    if (from.has_is_download()) {
      set_is_download(from.is_download());
    }
    if (from.has_is_auth_url()) {
      set_is_auth_url(from.is_auth_url());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void Video::CopyFrom(const Video& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Video::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000006f) != 0x0000006f) return false;

  return true;
}

void Video::Swap(Video* other) {
  if (other != this) {
    std::swap(video_url_, other->video_url_);
    std::swap(video_type_, other->video_type_);
    std::swap(video_size_, other->video_size_);
    std::swap(video_time_, other->video_time_);
    std::swap(check_md5_, other->check_md5_);
    std::swap(is_download_, other->is_download_);
    std::swap(is_auth_url_, other->is_auth_url_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string Video::GetTypeName() const {
  return "weizhu.discover_v2.Video";
}


// ===================================================================

#ifndef _MSC_VER
const int Audio::kAudioUrlFieldNumber;
const int Audio::kAudioTypeFieldNumber;
const int Audio::kAudioSizeFieldNumber;
const int Audio::kAudioTimeFieldNumber;
const int Audio::kCheckMd5FieldNumber;
const int Audio::kIsDownloadFieldNumber;
const int Audio::kIsAuthUrlFieldNumber;
#endif  // !_MSC_VER

Audio::Audio()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:weizhu.discover_v2.Audio)
}

void Audio::InitAsDefaultInstance() {
}

Audio::Audio(const Audio& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:weizhu.discover_v2.Audio)
}

void Audio::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  audio_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  audio_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  audio_size_ = 0;
  audio_time_ = 0;
  check_md5_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  is_download_ = false;
  is_auth_url_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Audio::~Audio() {
  // @@protoc_insertion_point(destructor:weizhu.discover_v2.Audio)
  SharedDtor();
}

void Audio::SharedDtor() {
  if (audio_url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete audio_url_;
  }
  if (audio_type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete audio_type_;
  }
  if (check_md5_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete check_md5_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void Audio::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Audio& Audio::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_discover_5fv2_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_discover_5fv2_2eproto();
#endif
  return *default_instance_;
}

Audio* Audio::default_instance_ = NULL;

Audio* Audio::New() const {
  return new Audio;
}

void Audio::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Audio*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(audio_size_, audio_time_);
    ZR_(is_download_, is_auth_url_);
    if (has_audio_url()) {
      if (audio_url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        audio_url_->clear();
      }
    }
    if (has_audio_type()) {
      if (audio_type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        audio_type_->clear();
      }
    }
    if (has_check_md5()) {
      if (check_md5_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        check_md5_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool Audio::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:weizhu.discover_v2.Audio)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string audio_url = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_audio_url()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_audio_type;
        break;
      }

      // required string audio_type = 2;
      case 2: {
        if (tag == 18) {
         parse_audio_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_audio_type()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_audio_size;
        break;
      }

      // required int32 audio_size = 3;
      case 3: {
        if (tag == 24) {
         parse_audio_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &audio_size_)));
          set_has_audio_size();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_audio_time;
        break;
      }

      // required int32 audio_time = 4;
      case 4: {
        if (tag == 32) {
         parse_audio_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &audio_time_)));
          set_has_audio_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_check_md5;
        break;
      }

      // optional string check_md5 = 5;
      case 5: {
        if (tag == 42) {
         parse_check_md5:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_check_md5()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_is_download;
        break;
      }

      // required bool is_download = 6;
      case 6: {
        if (tag == 48) {
         parse_is_download:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_download_)));
          set_has_is_download();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_is_auth_url;
        break;
      }

      // required bool is_auth_url = 7;
      case 7: {
        if (tag == 56) {
         parse_is_auth_url:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_auth_url_)));
          set_has_is_auth_url();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:weizhu.discover_v2.Audio)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:weizhu.discover_v2.Audio)
  return false;
#undef DO_
}

void Audio::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:weizhu.discover_v2.Audio)
  // required string audio_url = 1;
  if (has_audio_url()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->audio_url(), output);
  }

  // required string audio_type = 2;
  if (has_audio_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->audio_type(), output);
  }

  // required int32 audio_size = 3;
  if (has_audio_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->audio_size(), output);
  }

  // required int32 audio_time = 4;
  if (has_audio_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->audio_time(), output);
  }

  // optional string check_md5 = 5;
  if (has_check_md5()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->check_md5(), output);
  }

  // required bool is_download = 6;
  if (has_is_download()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->is_download(), output);
  }

  // required bool is_auth_url = 7;
  if (has_is_auth_url()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->is_auth_url(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:weizhu.discover_v2.Audio)
}

int Audio::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string audio_url = 1;
    if (has_audio_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->audio_url());
    }

    // required string audio_type = 2;
    if (has_audio_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->audio_type());
    }

    // required int32 audio_size = 3;
    if (has_audio_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->audio_size());
    }

    // required int32 audio_time = 4;
    if (has_audio_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->audio_time());
    }

    // optional string check_md5 = 5;
    if (has_check_md5()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->check_md5());
    }

    // required bool is_download = 6;
    if (has_is_download()) {
      total_size += 1 + 1;
    }

    // required bool is_auth_url = 7;
    if (has_is_auth_url()) {
      total_size += 1 + 1;
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Audio::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Audio*>(&from));
}

void Audio::MergeFrom(const Audio& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_audio_url()) {
      set_audio_url(from.audio_url());
    }
    if (from.has_audio_type()) {
      set_audio_type(from.audio_type());
    }
    if (from.has_audio_size()) {
      set_audio_size(from.audio_size());
    }
    if (from.has_audio_time()) {
      set_audio_time(from.audio_time());
    }
    if (from.has_check_md5()) {
      set_check_md5(from.check_md5());
    }
    if (from.has_is_download()) {
      set_is_download(from.is_download());
    }
    if (from.has_is_auth_url()) {
      set_is_auth_url(from.is_auth_url());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void Audio::CopyFrom(const Audio& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Audio::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000006f) != 0x0000006f) return false;

  return true;
}

void Audio::Swap(Audio* other) {
  if (other != this) {
    std::swap(audio_url_, other->audio_url_);
    std::swap(audio_type_, other->audio_type_);
    std::swap(audio_size_, other->audio_size_);
    std::swap(audio_time_, other->audio_time_);
    std::swap(check_md5_, other->check_md5_);
    std::swap(is_download_, other->is_download_);
    std::swap(is_auth_url_, other->is_auth_url_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string Audio::GetTypeName() const {
  return "weizhu.discover_v2.Audio";
}


// ===================================================================

#ifndef _MSC_VER
const int AppUri::kAppUriFieldNumber;
#endif  // !_MSC_VER

AppUri::AppUri()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:weizhu.discover_v2.AppUri)
}

void AppUri::InitAsDefaultInstance() {
}

AppUri::AppUri(const AppUri& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:weizhu.discover_v2.AppUri)
}

void AppUri::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  app_uri_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AppUri::~AppUri() {
  // @@protoc_insertion_point(destructor:weizhu.discover_v2.AppUri)
  SharedDtor();
}

void AppUri::SharedDtor() {
  if (app_uri_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete app_uri_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void AppUri::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const AppUri& AppUri::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_discover_5fv2_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_discover_5fv2_2eproto();
#endif
  return *default_instance_;
}

AppUri* AppUri::default_instance_ = NULL;

AppUri* AppUri::New() const {
  return new AppUri;
}

void AppUri::Clear() {
  if (has_app_uri()) {
    if (app_uri_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      app_uri_->clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool AppUri::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:weizhu.discover_v2.AppUri)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string app_uri = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_app_uri()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:weizhu.discover_v2.AppUri)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:weizhu.discover_v2.AppUri)
  return false;
#undef DO_
}

void AppUri::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:weizhu.discover_v2.AppUri)
  // required string app_uri = 1;
  if (has_app_uri()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->app_uri(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:weizhu.discover_v2.AppUri)
}

int AppUri::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string app_uri = 1;
    if (has_app_uri()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->app_uri());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AppUri::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const AppUri*>(&from));
}

void AppUri::MergeFrom(const AppUri& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_app_uri()) {
      set_app_uri(from.app_uri());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void AppUri::CopyFrom(const AppUri& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AppUri::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void AppUri::Swap(AppUri* other) {
  if (other != this) {
    std::swap(app_uri_, other->app_uri_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string AppUri::GetTypeName() const {
  return "weizhu.discover_v2.AppUri";
}


// ===================================================================

#ifndef _MSC_VER
const int Banner::kBannerIdFieldNumber;
const int Banner::kBannerNameFieldNumber;
const int Banner::kImageNameFieldNumber;
const int Banner::kAllowModelIdFieldNumber;
const int Banner::kItemIdFieldNumber;
const int Banner::kWebUrlFieldNumber;
const int Banner::kAppUriFieldNumber;
const int Banner::kStateFieldNumber;
const int Banner::kCreateAdminIdFieldNumber;
const int Banner::kCreateTimeFieldNumber;
const int Banner::kUpdateAdminIdFieldNumber;
const int Banner::kUpdateTimeFieldNumber;
#endif  // !_MSC_VER

Banner::Banner()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:weizhu.discover_v2.Banner)
}

void Banner::InitAsDefaultInstance() {
}

Banner::Banner(const Banner& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:weizhu.discover_v2.Banner)
}

void Banner::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  banner_id_ = 0;
  banner_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  image_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  allow_model_id_ = 0;
  state_ = 0;
  create_admin_id_ = GOOGLE_LONGLONG(0);
  create_time_ = 0;
  update_admin_id_ = GOOGLE_LONGLONG(0);
  update_time_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  clear_has_content();
}

Banner::~Banner() {
  // @@protoc_insertion_point(destructor:weizhu.discover_v2.Banner)
  SharedDtor();
}

void Banner::SharedDtor() {
  if (banner_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete banner_name_;
  }
  if (image_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete image_name_;
  }
  if (has_content()) {
    clear_content();
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void Banner::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Banner& Banner::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_discover_5fv2_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_discover_5fv2_2eproto();
#endif
  return *default_instance_;
}

Banner* Banner::default_instance_ = NULL;

Banner* Banner::New() const {
  return new Banner;
}

void Banner::clear_content() {
  switch(content_case()) {
    case kItemId: {
      // No need to clear
      break;
    }
    case kWebUrl: {
      delete content_.web_url_;
      break;
    }
    case kAppUri: {
      delete content_.app_uri_;
      break;
    }
    case CONTENT_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = CONTENT_NOT_SET;
}


void Banner::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Banner*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 143) {
    ZR_(banner_id_, allow_model_id_);
    if (has_banner_name()) {
      if (banner_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        banner_name_->clear();
      }
    }
    if (has_image_name()) {
      if (image_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        image_name_->clear();
      }
    }
    state_ = 0;
  }
  if (_has_bits_[8 / 32] & 3840) {
    ZR_(create_time_, update_time_);
    create_admin_id_ = GOOGLE_LONGLONG(0);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  clear_content();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool Banner::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:weizhu.discover_v2.Banner)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 banner_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &banner_id_)));
          set_has_banner_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_banner_name;
        break;
      }

      // required string banner_name = 2;
      case 2: {
        if (tag == 18) {
         parse_banner_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_banner_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_image_name;
        break;
      }

      // required string image_name = 3;
      case 3: {
        if (tag == 26) {
         parse_image_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_image_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_allow_model_id;
        break;
      }

      // optional int32 allow_model_id = 4;
      case 4: {
        if (tag == 32) {
         parse_allow_model_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &allow_model_id_)));
          set_has_allow_model_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_item_id;
        break;
      }

      // optional int64 item_id = 5;
      case 5: {
        if (tag == 40) {
         parse_item_id:
          clear_content();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &content_.item_id_)));
          set_has_item_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_web_url;
        break;
      }

      // optional .weizhu.discover_v2.WebUrl web_url = 6;
      case 6: {
        if (tag == 50) {
         parse_web_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_web_url()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_app_uri;
        break;
      }

      // optional .weizhu.discover_v2.AppUri app_uri = 7;
      case 7: {
        if (tag == 58) {
         parse_app_uri:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_app_uri()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(760)) goto parse_state;
        break;
      }

      // optional .weizhu.discover_v2.State state = 95 [default = NORMAL];
      case 95: {
        if (tag == 760) {
         parse_state:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::weizhu::discover_v2::State_IsValid(value)) {
            set_state(static_cast< ::weizhu::discover_v2::State >(value));
          } else {
            unknown_fields_stream.WriteVarint32(tag);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(768)) goto parse_create_admin_id;
        break;
      }

      // optional int64 create_admin_id = 96;
      case 96: {
        if (tag == 768) {
         parse_create_admin_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &create_admin_id_)));
          set_has_create_admin_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(776)) goto parse_create_time;
        break;
      }

      // optional int32 create_time = 97;
      case 97: {
        if (tag == 776) {
         parse_create_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &create_time_)));
          set_has_create_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(784)) goto parse_update_admin_id;
        break;
      }

      // optional int64 update_admin_id = 98;
      case 98: {
        if (tag == 784) {
         parse_update_admin_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &update_admin_id_)));
          set_has_update_admin_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(792)) goto parse_update_time;
        break;
      }

      // optional int32 update_time = 99;
      case 99: {
        if (tag == 792) {
         parse_update_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &update_time_)));
          set_has_update_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:weizhu.discover_v2.Banner)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:weizhu.discover_v2.Banner)
  return false;
#undef DO_
}

void Banner::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:weizhu.discover_v2.Banner)
  // required int32 banner_id = 1;
  if (has_banner_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->banner_id(), output);
  }

  // required string banner_name = 2;
  if (has_banner_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->banner_name(), output);
  }

  // required string image_name = 3;
  if (has_image_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->image_name(), output);
  }

  // optional int32 allow_model_id = 4;
  if (has_allow_model_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->allow_model_id(), output);
  }

  // optional int64 item_id = 5;
  if (has_item_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->item_id(), output);
  }

  // optional .weizhu.discover_v2.WebUrl web_url = 6;
  if (has_web_url()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      6, this->web_url(), output);
  }

  // optional .weizhu.discover_v2.AppUri app_uri = 7;
  if (has_app_uri()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      7, this->app_uri(), output);
  }

  // optional .weizhu.discover_v2.State state = 95 [default = NORMAL];
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      95, this->state(), output);
  }

  // optional int64 create_admin_id = 96;
  if (has_create_admin_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(96, this->create_admin_id(), output);
  }

  // optional int32 create_time = 97;
  if (has_create_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(97, this->create_time(), output);
  }

  // optional int64 update_admin_id = 98;
  if (has_update_admin_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(98, this->update_admin_id(), output);
  }

  // optional int32 update_time = 99;
  if (has_update_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(99, this->update_time(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:weizhu.discover_v2.Banner)
}

int Banner::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 banner_id = 1;
    if (has_banner_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->banner_id());
    }

    // required string banner_name = 2;
    if (has_banner_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->banner_name());
    }

    // required string image_name = 3;
    if (has_image_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->image_name());
    }

    // optional int32 allow_model_id = 4;
    if (has_allow_model_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->allow_model_id());
    }

    // optional .weizhu.discover_v2.State state = 95 [default = NORMAL];
    if (has_state()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->state());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int64 create_admin_id = 96;
    if (has_create_admin_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->create_admin_id());
    }

    // optional int32 create_time = 97;
    if (has_create_time()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->create_time());
    }

    // optional int64 update_admin_id = 98;
    if (has_update_admin_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->update_admin_id());
    }

    // optional int32 update_time = 99;
    if (has_update_time()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->update_time());
    }

  }
  switch (content_case()) {
    // optional int64 item_id = 5;
    case kItemId: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->item_id());
      break;
    }
    // optional .weizhu.discover_v2.WebUrl web_url = 6;
    case kWebUrl: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->web_url());
      break;
    }
    // optional .weizhu.discover_v2.AppUri app_uri = 7;
    case kAppUri: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->app_uri());
      break;
    }
    case CONTENT_NOT_SET: {
      break;
    }
  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Banner::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Banner*>(&from));
}

void Banner::MergeFrom(const Banner& from) {
  GOOGLE_CHECK_NE(&from, this);
  switch (from.content_case()) {
    case kItemId: {
      set_item_id(from.item_id());
      break;
    }
    case kWebUrl: {
      mutable_web_url()->::weizhu::discover_v2::WebUrl::MergeFrom(from.web_url());
      break;
    }
    case kAppUri: {
      mutable_app_uri()->::weizhu::discover_v2::AppUri::MergeFrom(from.app_uri());
      break;
    }
    case CONTENT_NOT_SET: {
      break;
    }
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_banner_id()) {
      set_banner_id(from.banner_id());
    }
    if (from.has_banner_name()) {
      set_banner_name(from.banner_name());
    }
    if (from.has_image_name()) {
      set_image_name(from.image_name());
    }
    if (from.has_allow_model_id()) {
      set_allow_model_id(from.allow_model_id());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_create_admin_id()) {
      set_create_admin_id(from.create_admin_id());
    }
    if (from.has_create_time()) {
      set_create_time(from.create_time());
    }
    if (from.has_update_admin_id()) {
      set_update_admin_id(from.update_admin_id());
    }
    if (from.has_update_time()) {
      set_update_time(from.update_time());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void Banner::CopyFrom(const Banner& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Banner::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_web_url()) {
    if (!this->web_url().IsInitialized()) return false;
  }
  if (has_app_uri()) {
    if (!this->app_uri().IsInitialized()) return false;
  }
  return true;
}

void Banner::Swap(Banner* other) {
  if (other != this) {
    std::swap(banner_id_, other->banner_id_);
    std::swap(banner_name_, other->banner_name_);
    std::swap(image_name_, other->image_name_);
    std::swap(allow_model_id_, other->allow_model_id_);
    std::swap(state_, other->state_);
    std::swap(create_admin_id_, other->create_admin_id_);
    std::swap(create_time_, other->create_time_);
    std::swap(update_admin_id_, other->update_admin_id_);
    std::swap(update_time_, other->update_time_);
    std::swap(content_, other->content_);
    std::swap(_oneof_case_[0], other->_oneof_case_[0]);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string Banner::GetTypeName() const {
  return "weizhu.discover_v2.Banner";
}


// ===================================================================

#ifndef _MSC_VER
const int Module_Category::kCategoryIdFieldNumber;
const int Module_Category::kCategoryNameFieldNumber;
const int Module_Category::kModuleIdFieldNumber;
const int Module_Category::kAllowModelIdFieldNumber;
const int Module_Category::kPromptDotFieldNumber;
const int Module_Category::kPromptCntFieldNumber;
const int Module_Category::kStateFieldNumber;
const int Module_Category::kCreateAdminIdFieldNumber;
const int Module_Category::kCreateTimeFieldNumber;
const int Module_Category::kUpdateAdminIdFieldNumber;
const int Module_Category::kUpdateTimeFieldNumber;
#endif  // !_MSC_VER

Module_Category::Module_Category()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:weizhu.discover_v2.Module.Category)
}

void Module_Category::InitAsDefaultInstance() {
}

Module_Category::Module_Category(const Module_Category& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:weizhu.discover_v2.Module.Category)
}

void Module_Category::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  category_id_ = 0;
  category_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  module_id_ = 0;
  allow_model_id_ = 0;
  prompt_dot_ = false;
  prompt_cnt_ = 0;
  state_ = 0;
  create_admin_id_ = GOOGLE_LONGLONG(0);
  create_time_ = 0;
  update_admin_id_ = GOOGLE_LONGLONG(0);
  update_time_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Module_Category::~Module_Category() {
  // @@protoc_insertion_point(destructor:weizhu.discover_v2.Module.Category)
  SharedDtor();
}

void Module_Category::SharedDtor() {
  if (category_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete category_name_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void Module_Category::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Module_Category& Module_Category::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_discover_5fv2_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_discover_5fv2_2eproto();
#endif
  return *default_instance_;
}

Module_Category* Module_Category::default_instance_ = NULL;

Module_Category* Module_Category::New() const {
  return new Module_Category;
}

void Module_Category::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Module_Category*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(category_id_, create_admin_id_);
    if (has_category_name()) {
      if (category_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        category_name_->clear();
      }
    }
  }
  ZR_(update_admin_id_, update_time_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool Module_Category::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:weizhu.discover_v2.Module.Category)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 category_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &category_id_)));
          set_has_category_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_category_name;
        break;
      }

      // required string category_name = 2;
      case 2: {
        if (tag == 18) {
         parse_category_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_category_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_module_id;
        break;
      }

      // required int32 module_id = 3;
      case 3: {
        if (tag == 24) {
         parse_module_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &module_id_)));
          set_has_module_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_allow_model_id;
        break;
      }

      // optional int32 allow_model_id = 4;
      case 4: {
        if (tag == 32) {
         parse_allow_model_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &allow_model_id_)));
          set_has_allow_model_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_prompt_dot;
        break;
      }

      // optional bool prompt_dot = 5;
      case 5: {
        if (tag == 40) {
         parse_prompt_dot:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &prompt_dot_)));
          set_has_prompt_dot();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_prompt_cnt;
        break;
      }

      // optional int32 prompt_cnt = 6;
      case 6: {
        if (tag == 48) {
         parse_prompt_cnt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &prompt_cnt_)));
          set_has_prompt_cnt();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(760)) goto parse_state;
        break;
      }

      // optional .weizhu.discover_v2.State state = 95 [default = NORMAL];
      case 95: {
        if (tag == 760) {
         parse_state:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::weizhu::discover_v2::State_IsValid(value)) {
            set_state(static_cast< ::weizhu::discover_v2::State >(value));
          } else {
            unknown_fields_stream.WriteVarint32(tag);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(768)) goto parse_create_admin_id;
        break;
      }

      // optional int64 create_admin_id = 96;
      case 96: {
        if (tag == 768) {
         parse_create_admin_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &create_admin_id_)));
          set_has_create_admin_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(776)) goto parse_create_time;
        break;
      }

      // optional int32 create_time = 97;
      case 97: {
        if (tag == 776) {
         parse_create_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &create_time_)));
          set_has_create_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(784)) goto parse_update_admin_id;
        break;
      }

      // optional int64 update_admin_id = 98;
      case 98: {
        if (tag == 784) {
         parse_update_admin_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &update_admin_id_)));
          set_has_update_admin_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(792)) goto parse_update_time;
        break;
      }

      // optional int32 update_time = 99;
      case 99: {
        if (tag == 792) {
         parse_update_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &update_time_)));
          set_has_update_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:weizhu.discover_v2.Module.Category)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:weizhu.discover_v2.Module.Category)
  return false;
#undef DO_
}

void Module_Category::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:weizhu.discover_v2.Module.Category)
  // required int32 category_id = 1;
  if (has_category_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->category_id(), output);
  }

  // required string category_name = 2;
  if (has_category_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->category_name(), output);
  }

  // required int32 module_id = 3;
  if (has_module_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->module_id(), output);
  }

  // optional int32 allow_model_id = 4;
  if (has_allow_model_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->allow_model_id(), output);
  }

  // optional bool prompt_dot = 5;
  if (has_prompt_dot()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->prompt_dot(), output);
  }

  // optional int32 prompt_cnt = 6;
  if (has_prompt_cnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->prompt_cnt(), output);
  }

  // optional .weizhu.discover_v2.State state = 95 [default = NORMAL];
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      95, this->state(), output);
  }

  // optional int64 create_admin_id = 96;
  if (has_create_admin_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(96, this->create_admin_id(), output);
  }

  // optional int32 create_time = 97;
  if (has_create_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(97, this->create_time(), output);
  }

  // optional int64 update_admin_id = 98;
  if (has_update_admin_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(98, this->update_admin_id(), output);
  }

  // optional int32 update_time = 99;
  if (has_update_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(99, this->update_time(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:weizhu.discover_v2.Module.Category)
}

int Module_Category::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 category_id = 1;
    if (has_category_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->category_id());
    }

    // required string category_name = 2;
    if (has_category_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->category_name());
    }

    // required int32 module_id = 3;
    if (has_module_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->module_id());
    }

    // optional int32 allow_model_id = 4;
    if (has_allow_model_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->allow_model_id());
    }

    // optional bool prompt_dot = 5;
    if (has_prompt_dot()) {
      total_size += 1 + 1;
    }

    // optional int32 prompt_cnt = 6;
    if (has_prompt_cnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->prompt_cnt());
    }

    // optional .weizhu.discover_v2.State state = 95 [default = NORMAL];
    if (has_state()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->state());
    }

    // optional int64 create_admin_id = 96;
    if (has_create_admin_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->create_admin_id());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 create_time = 97;
    if (has_create_time()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->create_time());
    }

    // optional int64 update_admin_id = 98;
    if (has_update_admin_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->update_admin_id());
    }

    // optional int32 update_time = 99;
    if (has_update_time()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->update_time());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Module_Category::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Module_Category*>(&from));
}

void Module_Category::MergeFrom(const Module_Category& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_category_id()) {
      set_category_id(from.category_id());
    }
    if (from.has_category_name()) {
      set_category_name(from.category_name());
    }
    if (from.has_module_id()) {
      set_module_id(from.module_id());
    }
    if (from.has_allow_model_id()) {
      set_allow_model_id(from.allow_model_id());
    }
    if (from.has_prompt_dot()) {
      set_prompt_dot(from.prompt_dot());
    }
    if (from.has_prompt_cnt()) {
      set_prompt_cnt(from.prompt_cnt());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_create_admin_id()) {
      set_create_admin_id(from.create_admin_id());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_create_time()) {
      set_create_time(from.create_time());
    }
    if (from.has_update_admin_id()) {
      set_update_admin_id(from.update_admin_id());
    }
    if (from.has_update_time()) {
      set_update_time(from.update_time());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void Module_Category::CopyFrom(const Module_Category& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Module_Category::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void Module_Category::Swap(Module_Category* other) {
  if (other != this) {
    std::swap(category_id_, other->category_id_);
    std::swap(category_name_, other->category_name_);
    std::swap(module_id_, other->module_id_);
    std::swap(allow_model_id_, other->allow_model_id_);
    std::swap(prompt_dot_, other->prompt_dot_);
    std::swap(prompt_cnt_, other->prompt_cnt_);
    std::swap(state_, other->state_);
    std::swap(create_admin_id_, other->create_admin_id_);
    std::swap(create_time_, other->create_time_);
    std::swap(update_admin_id_, other->update_admin_id_);
    std::swap(update_time_, other->update_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string Module_Category::GetTypeName() const {
  return "weizhu.discover_v2.Module.Category";
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Module_CategoryList::kCategoryFieldNumber;
#endif  // !_MSC_VER

Module_CategoryList::Module_CategoryList()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:weizhu.discover_v2.Module.CategoryList)
}

void Module_CategoryList::InitAsDefaultInstance() {
}

Module_CategoryList::Module_CategoryList(const Module_CategoryList& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:weizhu.discover_v2.Module.CategoryList)
}

void Module_CategoryList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Module_CategoryList::~Module_CategoryList() {
  // @@protoc_insertion_point(destructor:weizhu.discover_v2.Module.CategoryList)
  SharedDtor();
}

void Module_CategoryList::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void Module_CategoryList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Module_CategoryList& Module_CategoryList::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_discover_5fv2_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_discover_5fv2_2eproto();
#endif
  return *default_instance_;
}

Module_CategoryList* Module_CategoryList::default_instance_ = NULL;

Module_CategoryList* Module_CategoryList::New() const {
  return new Module_CategoryList;
}

void Module_CategoryList::Clear() {
  category_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool Module_CategoryList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:weizhu.discover_v2.Module.CategoryList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .weizhu.discover_v2.Module.Category category = 1;
      case 1: {
        if (tag == 10) {
         parse_category:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_category()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_category;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:weizhu.discover_v2.Module.CategoryList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:weizhu.discover_v2.Module.CategoryList)
  return false;
#undef DO_
}

void Module_CategoryList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:weizhu.discover_v2.Module.CategoryList)
  // repeated .weizhu.discover_v2.Module.Category category = 1;
  for (int i = 0; i < this->category_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->category(i), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:weizhu.discover_v2.Module.CategoryList)
}

int Module_CategoryList::ByteSize() const {
  int total_size = 0;

  // repeated .weizhu.discover_v2.Module.Category category = 1;
  total_size += 1 * this->category_size();
  for (int i = 0; i < this->category_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->category(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Module_CategoryList::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Module_CategoryList*>(&from));
}

void Module_CategoryList::MergeFrom(const Module_CategoryList& from) {
  GOOGLE_CHECK_NE(&from, this);
  category_.MergeFrom(from.category_);
  mutable_unknown_fields()->append(from.unknown_fields());
}

void Module_CategoryList::CopyFrom(const Module_CategoryList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Module_CategoryList::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->category())) return false;
  return true;
}

void Module_CategoryList::Swap(Module_CategoryList* other) {
  if (other != this) {
    category_.Swap(&other->category_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string Module_CategoryList::GetTypeName() const {
  return "weizhu.discover_v2.Module.CategoryList";
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Module::kModuleIdFieldNumber;
const int Module::kModuleNameFieldNumber;
const int Module::kImageNameFieldNumber;
const int Module::kAllowModelIdFieldNumber;
const int Module::kPromptDotFieldNumber;
const int Module::kPromptCntFieldNumber;
const int Module::kCategoryListFieldNumber;
const int Module::kWebUrlFieldNumber;
const int Module::kAppUriFieldNumber;
const int Module::kStateFieldNumber;
const int Module::kCreateAdminIdFieldNumber;
const int Module::kCreateTimeFieldNumber;
const int Module::kUpdateAdminIdFieldNumber;
const int Module::kUpdateTimeFieldNumber;
#endif  // !_MSC_VER

Module::Module()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:weizhu.discover_v2.Module)
}

void Module::InitAsDefaultInstance() {
}

Module::Module(const Module& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:weizhu.discover_v2.Module)
}

void Module::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  module_id_ = 0;
  module_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  image_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  allow_model_id_ = 0;
  prompt_dot_ = false;
  prompt_cnt_ = 0;
  state_ = 0;
  create_admin_id_ = GOOGLE_LONGLONG(0);
  create_time_ = 0;
  update_admin_id_ = GOOGLE_LONGLONG(0);
  update_time_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  clear_has_content();
}

Module::~Module() {
  // @@protoc_insertion_point(destructor:weizhu.discover_v2.Module)
  SharedDtor();
}

void Module::SharedDtor() {
  if (module_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete module_name_;
  }
  if (image_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete image_name_;
  }
  if (has_content()) {
    clear_content();
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void Module::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Module& Module::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_discover_5fv2_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_discover_5fv2_2eproto();
#endif
  return *default_instance_;
}

Module* Module::default_instance_ = NULL;

Module* Module::New() const {
  return new Module;
}

void Module::clear_content() {
  switch(content_case()) {
    case kCategoryList: {
      delete content_.category_list_;
      break;
    }
    case kWebUrl: {
      delete content_.web_url_;
      break;
    }
    case kAppUri: {
      delete content_.app_uri_;
      break;
    }
    case CONTENT_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = CONTENT_NOT_SET;
}


void Module::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Module*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(module_id_, allow_model_id_);
    ZR_(prompt_dot_, prompt_cnt_);
    if (has_module_name()) {
      if (module_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        module_name_->clear();
      }
    }
    if (has_image_name()) {
      if (image_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        image_name_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 15872) {
    ZR_(create_admin_id_, update_time_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  clear_content();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool Module::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:weizhu.discover_v2.Module)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 module_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &module_id_)));
          set_has_module_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_module_name;
        break;
      }

      // required string module_name = 2;
      case 2: {
        if (tag == 18) {
         parse_module_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_module_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_image_name;
        break;
      }

      // required string image_name = 3;
      case 3: {
        if (tag == 26) {
         parse_image_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_image_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_allow_model_id;
        break;
      }

      // optional int32 allow_model_id = 4;
      case 4: {
        if (tag == 32) {
         parse_allow_model_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &allow_model_id_)));
          set_has_allow_model_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_prompt_dot;
        break;
      }

      // optional bool prompt_dot = 5;
      case 5: {
        if (tag == 40) {
         parse_prompt_dot:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &prompt_dot_)));
          set_has_prompt_dot();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_prompt_cnt;
        break;
      }

      // optional int32 prompt_cnt = 6;
      case 6: {
        if (tag == 48) {
         parse_prompt_cnt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &prompt_cnt_)));
          set_has_prompt_cnt();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_category_list;
        break;
      }

      // optional .weizhu.discover_v2.Module.CategoryList category_list = 7;
      case 7: {
        if (tag == 58) {
         parse_category_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_category_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_web_url;
        break;
      }

      // optional .weizhu.discover_v2.WebUrl web_url = 8;
      case 8: {
        if (tag == 66) {
         parse_web_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_web_url()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_app_uri;
        break;
      }

      // optional .weizhu.discover_v2.AppUri app_uri = 9;
      case 9: {
        if (tag == 74) {
         parse_app_uri:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_app_uri()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(760)) goto parse_state;
        break;
      }

      // optional .weizhu.discover_v2.State state = 95 [default = NORMAL];
      case 95: {
        if (tag == 760) {
         parse_state:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::weizhu::discover_v2::State_IsValid(value)) {
            set_state(static_cast< ::weizhu::discover_v2::State >(value));
          } else {
            unknown_fields_stream.WriteVarint32(tag);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(768)) goto parse_create_admin_id;
        break;
      }

      // optional int64 create_admin_id = 96;
      case 96: {
        if (tag == 768) {
         parse_create_admin_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &create_admin_id_)));
          set_has_create_admin_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(776)) goto parse_create_time;
        break;
      }

      // optional int32 create_time = 97;
      case 97: {
        if (tag == 776) {
         parse_create_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &create_time_)));
          set_has_create_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(784)) goto parse_update_admin_id;
        break;
      }

      // optional int64 update_admin_id = 98;
      case 98: {
        if (tag == 784) {
         parse_update_admin_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &update_admin_id_)));
          set_has_update_admin_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(792)) goto parse_update_time;
        break;
      }

      // optional int32 update_time = 99;
      case 99: {
        if (tag == 792) {
         parse_update_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &update_time_)));
          set_has_update_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:weizhu.discover_v2.Module)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:weizhu.discover_v2.Module)
  return false;
#undef DO_
}

void Module::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:weizhu.discover_v2.Module)
  // required int32 module_id = 1;
  if (has_module_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->module_id(), output);
  }

  // required string module_name = 2;
  if (has_module_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->module_name(), output);
  }

  // required string image_name = 3;
  if (has_image_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->image_name(), output);
  }

  // optional int32 allow_model_id = 4;
  if (has_allow_model_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->allow_model_id(), output);
  }

  // optional bool prompt_dot = 5;
  if (has_prompt_dot()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->prompt_dot(), output);
  }

  // optional int32 prompt_cnt = 6;
  if (has_prompt_cnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->prompt_cnt(), output);
  }

  // optional .weizhu.discover_v2.Module.CategoryList category_list = 7;
  if (has_category_list()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      7, this->category_list(), output);
  }

  // optional .weizhu.discover_v2.WebUrl web_url = 8;
  if (has_web_url()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      8, this->web_url(), output);
  }

  // optional .weizhu.discover_v2.AppUri app_uri = 9;
  if (has_app_uri()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      9, this->app_uri(), output);
  }

  // optional .weizhu.discover_v2.State state = 95 [default = NORMAL];
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      95, this->state(), output);
  }

  // optional int64 create_admin_id = 96;
  if (has_create_admin_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(96, this->create_admin_id(), output);
  }

  // optional int32 create_time = 97;
  if (has_create_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(97, this->create_time(), output);
  }

  // optional int64 update_admin_id = 98;
  if (has_update_admin_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(98, this->update_admin_id(), output);
  }

  // optional int32 update_time = 99;
  if (has_update_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(99, this->update_time(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:weizhu.discover_v2.Module)
}

int Module::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 module_id = 1;
    if (has_module_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->module_id());
    }

    // required string module_name = 2;
    if (has_module_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->module_name());
    }

    // required string image_name = 3;
    if (has_image_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->image_name());
    }

    // optional int32 allow_model_id = 4;
    if (has_allow_model_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->allow_model_id());
    }

    // optional bool prompt_dot = 5;
    if (has_prompt_dot()) {
      total_size += 1 + 1;
    }

    // optional int32 prompt_cnt = 6;
    if (has_prompt_cnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->prompt_cnt());
    }

  }
  if (_has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    // optional .weizhu.discover_v2.State state = 95 [default = NORMAL];
    if (has_state()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->state());
    }

    // optional int64 create_admin_id = 96;
    if (has_create_admin_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->create_admin_id());
    }

    // optional int32 create_time = 97;
    if (has_create_time()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->create_time());
    }

    // optional int64 update_admin_id = 98;
    if (has_update_admin_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->update_admin_id());
    }

    // optional int32 update_time = 99;
    if (has_update_time()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->update_time());
    }

  }
  switch (content_case()) {
    // optional .weizhu.discover_v2.Module.CategoryList category_list = 7;
    case kCategoryList: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->category_list());
      break;
    }
    // optional .weizhu.discover_v2.WebUrl web_url = 8;
    case kWebUrl: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->web_url());
      break;
    }
    // optional .weizhu.discover_v2.AppUri app_uri = 9;
    case kAppUri: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->app_uri());
      break;
    }
    case CONTENT_NOT_SET: {
      break;
    }
  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Module::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Module*>(&from));
}

void Module::MergeFrom(const Module& from) {
  GOOGLE_CHECK_NE(&from, this);
  switch (from.content_case()) {
    case kCategoryList: {
      mutable_category_list()->::weizhu::discover_v2::Module_CategoryList::MergeFrom(from.category_list());
      break;
    }
    case kWebUrl: {
      mutable_web_url()->::weizhu::discover_v2::WebUrl::MergeFrom(from.web_url());
      break;
    }
    case kAppUri: {
      mutable_app_uri()->::weizhu::discover_v2::AppUri::MergeFrom(from.app_uri());
      break;
    }
    case CONTENT_NOT_SET: {
      break;
    }
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_module_id()) {
      set_module_id(from.module_id());
    }
    if (from.has_module_name()) {
      set_module_name(from.module_name());
    }
    if (from.has_image_name()) {
      set_image_name(from.image_name());
    }
    if (from.has_allow_model_id()) {
      set_allow_model_id(from.allow_model_id());
    }
    if (from.has_prompt_dot()) {
      set_prompt_dot(from.prompt_dot());
    }
    if (from.has_prompt_cnt()) {
      set_prompt_cnt(from.prompt_cnt());
    }
  }
  if (from._has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_create_admin_id()) {
      set_create_admin_id(from.create_admin_id());
    }
    if (from.has_create_time()) {
      set_create_time(from.create_time());
    }
    if (from.has_update_admin_id()) {
      set_update_admin_id(from.update_admin_id());
    }
    if (from.has_update_time()) {
      set_update_time(from.update_time());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void Module::CopyFrom(const Module& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Module::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_category_list()) {
    if (!this->category_list().IsInitialized()) return false;
  }
  if (has_web_url()) {
    if (!this->web_url().IsInitialized()) return false;
  }
  if (has_app_uri()) {
    if (!this->app_uri().IsInitialized()) return false;
  }
  return true;
}

void Module::Swap(Module* other) {
  if (other != this) {
    std::swap(module_id_, other->module_id_);
    std::swap(module_name_, other->module_name_);
    std::swap(image_name_, other->image_name_);
    std::swap(allow_model_id_, other->allow_model_id_);
    std::swap(prompt_dot_, other->prompt_dot_);
    std::swap(prompt_cnt_, other->prompt_cnt_);
    std::swap(state_, other->state_);
    std::swap(create_admin_id_, other->create_admin_id_);
    std::swap(create_time_, other->create_time_);
    std::swap(update_admin_id_, other->update_admin_id_);
    std::swap(update_time_, other->update_time_);
    std::swap(content_, other->content_);
    std::swap(_oneof_case_[0], other->_oneof_case_[0]);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string Module::GetTypeName() const {
  return "weizhu.discover_v2.Module";
}


// ===================================================================

#ifndef _MSC_VER
const int Item_Base::kItemIdFieldNumber;
const int Item_Base::kItemNameFieldNumber;
const int Item_Base::kItemDescFieldNumber;
const int Item_Base::kImageNameFieldNumber;
const int Item_Base::kAllowModelIdFieldNumber;
const int Item_Base::kEnableCommentFieldNumber;
const int Item_Base::kEnableScoreFieldNumber;
const int Item_Base::kEnableRemindFieldNumber;
const int Item_Base::kEnableLikeFieldNumber;
const int Item_Base::kEnableShareFieldNumber;
const int Item_Base::kEnableExternalShareFieldNumber;
const int Item_Base::kWebUrlFieldNumber;
const int Item_Base::kDocumentFieldNumber;
const int Item_Base::kVideoFieldNumber;
const int Item_Base::kAudioFieldNumber;
const int Item_Base::kAppUriFieldNumber;
const int Item_Base::kStateFieldNumber;
const int Item_Base::kCreateAdminIdFieldNumber;
const int Item_Base::kCreateTimeFieldNumber;
const int Item_Base::kUpdateAdminIdFieldNumber;
const int Item_Base::kUpdateTimeFieldNumber;
#endif  // !_MSC_VER

Item_Base::Item_Base()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:weizhu.discover_v2.Item.Base)
}

void Item_Base::InitAsDefaultInstance() {
}

Item_Base::Item_Base(const Item_Base& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:weizhu.discover_v2.Item.Base)
}

void Item_Base::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  item_id_ = GOOGLE_LONGLONG(0);
  item_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  item_desc_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  image_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  allow_model_id_ = 0;
  enable_comment_ = false;
  enable_score_ = false;
  enable_remind_ = false;
  enable_like_ = false;
  enable_share_ = false;
  enable_external_share_ = false;
  state_ = 0;
  create_admin_id_ = GOOGLE_LONGLONG(0);
  create_time_ = 0;
  update_admin_id_ = GOOGLE_LONGLONG(0);
  update_time_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  clear_has_content();
}

Item_Base::~Item_Base() {
  // @@protoc_insertion_point(destructor:weizhu.discover_v2.Item.Base)
  SharedDtor();
}

void Item_Base::SharedDtor() {
  if (item_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete item_name_;
  }
  if (item_desc_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete item_desc_;
  }
  if (image_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete image_name_;
  }
  if (has_content()) {
    clear_content();
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void Item_Base::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Item_Base& Item_Base::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_discover_5fv2_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_discover_5fv2_2eproto();
#endif
  return *default_instance_;
}

Item_Base* Item_Base::default_instance_ = NULL;

Item_Base* Item_Base::New() const {
  return new Item_Base;
}

void Item_Base::clear_content() {
  switch(content_case()) {
    case kWebUrl: {
      delete content_.web_url_;
      break;
    }
    case kDocument: {
      delete content_.document_;
      break;
    }
    case kVideo: {
      delete content_.video_;
      break;
    }
    case kAudio: {
      delete content_.audio_;
      break;
    }
    case kAppUri: {
      delete content_.app_uri_;
      break;
    }
    case CONTENT_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = CONTENT_NOT_SET;
}


void Item_Base::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Item_Base*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(allow_model_id_, enable_remind_);
    item_id_ = GOOGLE_LONGLONG(0);
    if (has_item_name()) {
      if (item_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        item_name_->clear();
      }
    }
    if (has_item_desc()) {
      if (item_desc_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        item_desc_->clear();
      }
    }
    if (has_image_name()) {
      if (image_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        image_name_->clear();
      }
    }
  }
  ZR_(enable_like_, enable_external_share_);
  if (_has_bits_[16 / 32] & 2031616) {
    ZR_(state_, update_time_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  clear_content();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool Item_Base::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:weizhu.discover_v2.Item.Base)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 item_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &item_id_)));
          set_has_item_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_item_name;
        break;
      }

      // required string item_name = 2;
      case 2: {
        if (tag == 18) {
         parse_item_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_item_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_item_desc;
        break;
      }

      // required string item_desc = 3;
      case 3: {
        if (tag == 26) {
         parse_item_desc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_item_desc()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_image_name;
        break;
      }

      // required string image_name = 4;
      case 4: {
        if (tag == 34) {
         parse_image_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_image_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_allow_model_id;
        break;
      }

      // optional int32 allow_model_id = 5;
      case 5: {
        if (tag == 40) {
         parse_allow_model_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &allow_model_id_)));
          set_has_allow_model_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_enable_comment;
        break;
      }

      // required bool enable_comment = 6;
      case 6: {
        if (tag == 48) {
         parse_enable_comment:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enable_comment_)));
          set_has_enable_comment();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_enable_score;
        break;
      }

      // required bool enable_score = 7;
      case 7: {
        if (tag == 56) {
         parse_enable_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enable_score_)));
          set_has_enable_score();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_enable_remind;
        break;
      }

      // required bool enable_remind = 8;
      case 8: {
        if (tag == 64) {
         parse_enable_remind:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enable_remind_)));
          set_has_enable_remind();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_enable_like;
        break;
      }

      // required bool enable_like = 9;
      case 9: {
        if (tag == 72) {
         parse_enable_like:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enable_like_)));
          set_has_enable_like();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_enable_share;
        break;
      }

      // required bool enable_share = 10;
      case 10: {
        if (tag == 80) {
         parse_enable_share:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enable_share_)));
          set_has_enable_share();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_enable_external_share;
        break;
      }

      // optional bool enable_external_share = 11;
      case 11: {
        if (tag == 88) {
         parse_enable_external_share:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enable_external_share_)));
          set_has_enable_external_share();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(162)) goto parse_web_url;
        break;
      }

      // optional .weizhu.discover_v2.WebUrl web_url = 20;
      case 20: {
        if (tag == 162) {
         parse_web_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_web_url()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(170)) goto parse_document;
        break;
      }

      // optional .weizhu.discover_v2.Document document = 21;
      case 21: {
        if (tag == 170) {
         parse_document:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_document()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(178)) goto parse_video;
        break;
      }

      // optional .weizhu.discover_v2.Video video = 22;
      case 22: {
        if (tag == 178) {
         parse_video:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_video()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(186)) goto parse_audio;
        break;
      }

      // optional .weizhu.discover_v2.Audio audio = 23;
      case 23: {
        if (tag == 186) {
         parse_audio:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_audio()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(194)) goto parse_app_uri;
        break;
      }

      // optional .weizhu.discover_v2.AppUri app_uri = 24;
      case 24: {
        if (tag == 194) {
         parse_app_uri:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_app_uri()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(760)) goto parse_state;
        break;
      }

      // optional .weizhu.discover_v2.State state = 95 [default = NORMAL];
      case 95: {
        if (tag == 760) {
         parse_state:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::weizhu::discover_v2::State_IsValid(value)) {
            set_state(static_cast< ::weizhu::discover_v2::State >(value));
          } else {
            unknown_fields_stream.WriteVarint32(tag);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(768)) goto parse_create_admin_id;
        break;
      }

      // optional int64 create_admin_id = 96;
      case 96: {
        if (tag == 768) {
         parse_create_admin_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &create_admin_id_)));
          set_has_create_admin_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(776)) goto parse_create_time;
        break;
      }

      // optional int32 create_time = 97;
      case 97: {
        if (tag == 776) {
         parse_create_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &create_time_)));
          set_has_create_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(784)) goto parse_update_admin_id;
        break;
      }

      // optional int64 update_admin_id = 98;
      case 98: {
        if (tag == 784) {
         parse_update_admin_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &update_admin_id_)));
          set_has_update_admin_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(792)) goto parse_update_time;
        break;
      }

      // optional int32 update_time = 99;
      case 99: {
        if (tag == 792) {
         parse_update_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &update_time_)));
          set_has_update_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:weizhu.discover_v2.Item.Base)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:weizhu.discover_v2.Item.Base)
  return false;
#undef DO_
}

void Item_Base::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:weizhu.discover_v2.Item.Base)
  // required int64 item_id = 1;
  if (has_item_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->item_id(), output);
  }

  // required string item_name = 2;
  if (has_item_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->item_name(), output);
  }

  // required string item_desc = 3;
  if (has_item_desc()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->item_desc(), output);
  }

  // required string image_name = 4;
  if (has_image_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->image_name(), output);
  }

  // optional int32 allow_model_id = 5;
  if (has_allow_model_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->allow_model_id(), output);
  }

  // required bool enable_comment = 6;
  if (has_enable_comment()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->enable_comment(), output);
  }

  // required bool enable_score = 7;
  if (has_enable_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->enable_score(), output);
  }

  // required bool enable_remind = 8;
  if (has_enable_remind()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->enable_remind(), output);
  }

  // required bool enable_like = 9;
  if (has_enable_like()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->enable_like(), output);
  }

  // required bool enable_share = 10;
  if (has_enable_share()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->enable_share(), output);
  }

  // optional bool enable_external_share = 11;
  if (has_enable_external_share()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->enable_external_share(), output);
  }

  // optional .weizhu.discover_v2.WebUrl web_url = 20;
  if (has_web_url()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      20, this->web_url(), output);
  }

  // optional .weizhu.discover_v2.Document document = 21;
  if (has_document()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      21, this->document(), output);
  }

  // optional .weizhu.discover_v2.Video video = 22;
  if (has_video()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      22, this->video(), output);
  }

  // optional .weizhu.discover_v2.Audio audio = 23;
  if (has_audio()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      23, this->audio(), output);
  }

  // optional .weizhu.discover_v2.AppUri app_uri = 24;
  if (has_app_uri()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      24, this->app_uri(), output);
  }

  // optional .weizhu.discover_v2.State state = 95 [default = NORMAL];
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      95, this->state(), output);
  }

  // optional int64 create_admin_id = 96;
  if (has_create_admin_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(96, this->create_admin_id(), output);
  }

  // optional int32 create_time = 97;
  if (has_create_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(97, this->create_time(), output);
  }

  // optional int64 update_admin_id = 98;
  if (has_update_admin_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(98, this->update_admin_id(), output);
  }

  // optional int32 update_time = 99;
  if (has_update_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(99, this->update_time(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:weizhu.discover_v2.Item.Base)
}

int Item_Base::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 item_id = 1;
    if (has_item_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->item_id());
    }

    // required string item_name = 2;
    if (has_item_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->item_name());
    }

    // required string item_desc = 3;
    if (has_item_desc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->item_desc());
    }

    // required string image_name = 4;
    if (has_image_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->image_name());
    }

    // optional int32 allow_model_id = 5;
    if (has_allow_model_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->allow_model_id());
    }

    // required bool enable_comment = 6;
    if (has_enable_comment()) {
      total_size += 1 + 1;
    }

    // required bool enable_score = 7;
    if (has_enable_score()) {
      total_size += 1 + 1;
    }

    // required bool enable_remind = 8;
    if (has_enable_remind()) {
      total_size += 1 + 1;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required bool enable_like = 9;
    if (has_enable_like()) {
      total_size += 1 + 1;
    }

    // required bool enable_share = 10;
    if (has_enable_share()) {
      total_size += 1 + 1;
    }

    // optional bool enable_external_share = 11;
    if (has_enable_external_share()) {
      total_size += 1 + 1;
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional .weizhu.discover_v2.State state = 95 [default = NORMAL];
    if (has_state()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->state());
    }

    // optional int64 create_admin_id = 96;
    if (has_create_admin_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->create_admin_id());
    }

    // optional int32 create_time = 97;
    if (has_create_time()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->create_time());
    }

    // optional int64 update_admin_id = 98;
    if (has_update_admin_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->update_admin_id());
    }

    // optional int32 update_time = 99;
    if (has_update_time()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->update_time());
    }

  }
  switch (content_case()) {
    // optional .weizhu.discover_v2.WebUrl web_url = 20;
    case kWebUrl: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->web_url());
      break;
    }
    // optional .weizhu.discover_v2.Document document = 21;
    case kDocument: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->document());
      break;
    }
    // optional .weizhu.discover_v2.Video video = 22;
    case kVideo: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->video());
      break;
    }
    // optional .weizhu.discover_v2.Audio audio = 23;
    case kAudio: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->audio());
      break;
    }
    // optional .weizhu.discover_v2.AppUri app_uri = 24;
    case kAppUri: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->app_uri());
      break;
    }
    case CONTENT_NOT_SET: {
      break;
    }
  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Item_Base::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Item_Base*>(&from));
}

void Item_Base::MergeFrom(const Item_Base& from) {
  GOOGLE_CHECK_NE(&from, this);
  switch (from.content_case()) {
    case kWebUrl: {
      mutable_web_url()->::weizhu::discover_v2::WebUrl::MergeFrom(from.web_url());
      break;
    }
    case kDocument: {
      mutable_document()->::weizhu::discover_v2::Document::MergeFrom(from.document());
      break;
    }
    case kVideo: {
      mutable_video()->::weizhu::discover_v2::Video::MergeFrom(from.video());
      break;
    }
    case kAudio: {
      mutable_audio()->::weizhu::discover_v2::Audio::MergeFrom(from.audio());
      break;
    }
    case kAppUri: {
      mutable_app_uri()->::weizhu::discover_v2::AppUri::MergeFrom(from.app_uri());
      break;
    }
    case CONTENT_NOT_SET: {
      break;
    }
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_item_id()) {
      set_item_id(from.item_id());
    }
    if (from.has_item_name()) {
      set_item_name(from.item_name());
    }
    if (from.has_item_desc()) {
      set_item_desc(from.item_desc());
    }
    if (from.has_image_name()) {
      set_image_name(from.image_name());
    }
    if (from.has_allow_model_id()) {
      set_allow_model_id(from.allow_model_id());
    }
    if (from.has_enable_comment()) {
      set_enable_comment(from.enable_comment());
    }
    if (from.has_enable_score()) {
      set_enable_score(from.enable_score());
    }
    if (from.has_enable_remind()) {
      set_enable_remind(from.enable_remind());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_enable_like()) {
      set_enable_like(from.enable_like());
    }
    if (from.has_enable_share()) {
      set_enable_share(from.enable_share());
    }
    if (from.has_enable_external_share()) {
      set_enable_external_share(from.enable_external_share());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_create_admin_id()) {
      set_create_admin_id(from.create_admin_id());
    }
    if (from.has_create_time()) {
      set_create_time(from.create_time());
    }
    if (from.has_update_admin_id()) {
      set_update_admin_id(from.update_admin_id());
    }
    if (from.has_update_time()) {
      set_update_time(from.update_time());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void Item_Base::CopyFrom(const Item_Base& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Item_Base::IsInitialized() const {
  if ((_has_bits_[0] & 0x000003ef) != 0x000003ef) return false;

  if (has_web_url()) {
    if (!this->web_url().IsInitialized()) return false;
  }
  if (has_document()) {
    if (!this->document().IsInitialized()) return false;
  }
  if (has_video()) {
    if (!this->video().IsInitialized()) return false;
  }
  if (has_audio()) {
    if (!this->audio().IsInitialized()) return false;
  }
  if (has_app_uri()) {
    if (!this->app_uri().IsInitialized()) return false;
  }
  return true;
}

void Item_Base::Swap(Item_Base* other) {
  if (other != this) {
    std::swap(item_id_, other->item_id_);
    std::swap(item_name_, other->item_name_);
    std::swap(item_desc_, other->item_desc_);
    std::swap(image_name_, other->image_name_);
    std::swap(allow_model_id_, other->allow_model_id_);
    std::swap(enable_comment_, other->enable_comment_);
    std::swap(enable_score_, other->enable_score_);
    std::swap(enable_remind_, other->enable_remind_);
    std::swap(enable_like_, other->enable_like_);
    std::swap(enable_share_, other->enable_share_);
    std::swap(enable_external_share_, other->enable_external_share_);
    std::swap(state_, other->state_);
    std::swap(create_admin_id_, other->create_admin_id_);
    std::swap(create_time_, other->create_time_);
    std::swap(update_admin_id_, other->update_admin_id_);
    std::swap(update_time_, other->update_time_);
    std::swap(content_, other->content_);
    std::swap(_oneof_case_[0], other->_oneof_case_[0]);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string Item_Base::GetTypeName() const {
  return "weizhu.discover_v2.Item.Base";
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Item_Count::kLearnCntFieldNumber;
const int Item_Count::kLearnUserCntFieldNumber;
const int Item_Count::kCommentCntFieldNumber;
const int Item_Count::kCommentUserCntFieldNumber;
const int Item_Count::kScoreNumberFieldNumber;
const int Item_Count::kScoreUserCntFieldNumber;
const int Item_Count::kLikeCntFieldNumber;
const int Item_Count::kShareCntFieldNumber;
#endif  // !_MSC_VER

Item_Count::Item_Count()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:weizhu.discover_v2.Item.Count)
}

void Item_Count::InitAsDefaultInstance() {
}

Item_Count::Item_Count(const Item_Count& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:weizhu.discover_v2.Item.Count)
}

void Item_Count::SharedCtor() {
  _cached_size_ = 0;
  learn_cnt_ = 0;
  learn_user_cnt_ = 0;
  comment_cnt_ = 0;
  comment_user_cnt_ = 0;
  score_number_ = 0;
  score_user_cnt_ = 0;
  like_cnt_ = 0;
  share_cnt_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Item_Count::~Item_Count() {
  // @@protoc_insertion_point(destructor:weizhu.discover_v2.Item.Count)
  SharedDtor();
}

void Item_Count::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void Item_Count::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Item_Count& Item_Count::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_discover_5fv2_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_discover_5fv2_2eproto();
#endif
  return *default_instance_;
}

Item_Count* Item_Count::default_instance_ = NULL;

Item_Count* Item_Count::New() const {
  return new Item_Count;
}

void Item_Count::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Item_Count*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(learn_cnt_, share_cnt_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool Item_Count::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:weizhu.discover_v2.Item.Count)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 learn_cnt = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &learn_cnt_)));
          set_has_learn_cnt();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_learn_user_cnt;
        break;
      }

      // required int32 learn_user_cnt = 2;
      case 2: {
        if (tag == 16) {
         parse_learn_user_cnt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &learn_user_cnt_)));
          set_has_learn_user_cnt();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_comment_cnt;
        break;
      }

      // required int32 comment_cnt = 3;
      case 3: {
        if (tag == 24) {
         parse_comment_cnt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &comment_cnt_)));
          set_has_comment_cnt();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_comment_user_cnt;
        break;
      }

      // required int32 comment_user_cnt = 4;
      case 4: {
        if (tag == 32) {
         parse_comment_user_cnt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &comment_user_cnt_)));
          set_has_comment_user_cnt();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_score_number;
        break;
      }

      // required int32 score_number = 5;
      case 5: {
        if (tag == 40) {
         parse_score_number:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &score_number_)));
          set_has_score_number();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_score_user_cnt;
        break;
      }

      // required int32 score_user_cnt = 6;
      case 6: {
        if (tag == 48) {
         parse_score_user_cnt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &score_user_cnt_)));
          set_has_score_user_cnt();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_like_cnt;
        break;
      }

      // required int32 like_cnt = 7;
      case 7: {
        if (tag == 56) {
         parse_like_cnt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &like_cnt_)));
          set_has_like_cnt();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_share_cnt;
        break;
      }

      // required int32 share_cnt = 8;
      case 8: {
        if (tag == 64) {
         parse_share_cnt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &share_cnt_)));
          set_has_share_cnt();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:weizhu.discover_v2.Item.Count)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:weizhu.discover_v2.Item.Count)
  return false;
#undef DO_
}

void Item_Count::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:weizhu.discover_v2.Item.Count)
  // required int32 learn_cnt = 1;
  if (has_learn_cnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->learn_cnt(), output);
  }

  // required int32 learn_user_cnt = 2;
  if (has_learn_user_cnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->learn_user_cnt(), output);
  }

  // required int32 comment_cnt = 3;
  if (has_comment_cnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->comment_cnt(), output);
  }

  // required int32 comment_user_cnt = 4;
  if (has_comment_user_cnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->comment_user_cnt(), output);
  }

  // required int32 score_number = 5;
  if (has_score_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->score_number(), output);
  }

  // required int32 score_user_cnt = 6;
  if (has_score_user_cnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->score_user_cnt(), output);
  }

  // required int32 like_cnt = 7;
  if (has_like_cnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->like_cnt(), output);
  }

  // required int32 share_cnt = 8;
  if (has_share_cnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->share_cnt(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:weizhu.discover_v2.Item.Count)
}

int Item_Count::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 learn_cnt = 1;
    if (has_learn_cnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->learn_cnt());
    }

    // required int32 learn_user_cnt = 2;
    if (has_learn_user_cnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->learn_user_cnt());
    }

    // required int32 comment_cnt = 3;
    if (has_comment_cnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->comment_cnt());
    }

    // required int32 comment_user_cnt = 4;
    if (has_comment_user_cnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->comment_user_cnt());
    }

    // required int32 score_number = 5;
    if (has_score_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->score_number());
    }

    // required int32 score_user_cnt = 6;
    if (has_score_user_cnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->score_user_cnt());
    }

    // required int32 like_cnt = 7;
    if (has_like_cnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->like_cnt());
    }

    // required int32 share_cnt = 8;
    if (has_share_cnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->share_cnt());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Item_Count::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Item_Count*>(&from));
}

void Item_Count::MergeFrom(const Item_Count& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_learn_cnt()) {
      set_learn_cnt(from.learn_cnt());
    }
    if (from.has_learn_user_cnt()) {
      set_learn_user_cnt(from.learn_user_cnt());
    }
    if (from.has_comment_cnt()) {
      set_comment_cnt(from.comment_cnt());
    }
    if (from.has_comment_user_cnt()) {
      set_comment_user_cnt(from.comment_user_cnt());
    }
    if (from.has_score_number()) {
      set_score_number(from.score_number());
    }
    if (from.has_score_user_cnt()) {
      set_score_user_cnt(from.score_user_cnt());
    }
    if (from.has_like_cnt()) {
      set_like_cnt(from.like_cnt());
    }
    if (from.has_share_cnt()) {
      set_share_cnt(from.share_cnt());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void Item_Count::CopyFrom(const Item_Count& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Item_Count::IsInitialized() const {
  if ((_has_bits_[0] & 0x000000ff) != 0x000000ff) return false;

  return true;
}

void Item_Count::Swap(Item_Count* other) {
  if (other != this) {
    std::swap(learn_cnt_, other->learn_cnt_);
    std::swap(learn_user_cnt_, other->learn_user_cnt_);
    std::swap(comment_cnt_, other->comment_cnt_);
    std::swap(comment_user_cnt_, other->comment_user_cnt_);
    std::swap(score_number_, other->score_number_);
    std::swap(score_user_cnt_, other->score_user_cnt_);
    std::swap(like_cnt_, other->like_cnt_);
    std::swap(share_cnt_, other->share_cnt_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string Item_Count::GetTypeName() const {
  return "weizhu.discover_v2.Item.Count";
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Item_User::kUserIdFieldNumber;
const int Item_User::kIsLearnFieldNumber;
const int Item_User::kIsCommentFieldNumber;
const int Item_User::kIsScoreFieldNumber;
const int Item_User::kIsLikeFieldNumber;
const int Item_User::kIsShareFieldNumber;
#endif  // !_MSC_VER

Item_User::Item_User()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:weizhu.discover_v2.Item.User)
}

void Item_User::InitAsDefaultInstance() {
}

Item_User::Item_User(const Item_User& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:weizhu.discover_v2.Item.User)
}

void Item_User::SharedCtor() {
  _cached_size_ = 0;
  user_id_ = GOOGLE_LONGLONG(0);
  is_learn_ = false;
  is_comment_ = false;
  is_score_ = false;
  is_like_ = false;
  is_share_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Item_User::~Item_User() {
  // @@protoc_insertion_point(destructor:weizhu.discover_v2.Item.User)
  SharedDtor();
}

void Item_User::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void Item_User::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Item_User& Item_User::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_discover_5fv2_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_discover_5fv2_2eproto();
#endif
  return *default_instance_;
}

Item_User* Item_User::default_instance_ = NULL;

Item_User* Item_User::New() const {
  return new Item_User;
}

void Item_User::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Item_User*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(user_id_, is_share_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool Item_User::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:weizhu.discover_v2.Item.User)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 user_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_is_learn;
        break;
      }

      // optional bool is_learn = 2;
      case 2: {
        if (tag == 16) {
         parse_is_learn:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_learn_)));
          set_has_is_learn();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_is_comment;
        break;
      }

      // optional bool is_comment = 3;
      case 3: {
        if (tag == 24) {
         parse_is_comment:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_comment_)));
          set_has_is_comment();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_is_score;
        break;
      }

      // optional bool is_score = 4;
      case 4: {
        if (tag == 32) {
         parse_is_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_score_)));
          set_has_is_score();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_is_like;
        break;
      }

      // optional bool is_like = 5;
      case 5: {
        if (tag == 40) {
         parse_is_like:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_like_)));
          set_has_is_like();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_is_share;
        break;
      }

      // optional bool is_share = 6;
      case 6: {
        if (tag == 48) {
         parse_is_share:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_share_)));
          set_has_is_share();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:weizhu.discover_v2.Item.User)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:weizhu.discover_v2.Item.User)
  return false;
#undef DO_
}

void Item_User::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:weizhu.discover_v2.Item.User)
  // required int64 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->user_id(), output);
  }

  // optional bool is_learn = 2;
  if (has_is_learn()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->is_learn(), output);
  }

  // optional bool is_comment = 3;
  if (has_is_comment()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->is_comment(), output);
  }

  // optional bool is_score = 4;
  if (has_is_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->is_score(), output);
  }

  // optional bool is_like = 5;
  if (has_is_like()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->is_like(), output);
  }

  // optional bool is_share = 6;
  if (has_is_share()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->is_share(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:weizhu.discover_v2.Item.User)
}

int Item_User::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->user_id());
    }

    // optional bool is_learn = 2;
    if (has_is_learn()) {
      total_size += 1 + 1;
    }

    // optional bool is_comment = 3;
    if (has_is_comment()) {
      total_size += 1 + 1;
    }

    // optional bool is_score = 4;
    if (has_is_score()) {
      total_size += 1 + 1;
    }

    // optional bool is_like = 5;
    if (has_is_like()) {
      total_size += 1 + 1;
    }

    // optional bool is_share = 6;
    if (has_is_share()) {
      total_size += 1 + 1;
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Item_User::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Item_User*>(&from));
}

void Item_User::MergeFrom(const Item_User& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_is_learn()) {
      set_is_learn(from.is_learn());
    }
    if (from.has_is_comment()) {
      set_is_comment(from.is_comment());
    }
    if (from.has_is_score()) {
      set_is_score(from.is_score());
    }
    if (from.has_is_like()) {
      set_is_like(from.is_like());
    }
    if (from.has_is_share()) {
      set_is_share(from.is_share());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void Item_User::CopyFrom(const Item_User& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Item_User::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Item_User::Swap(Item_User* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(is_learn_, other->is_learn_);
    std::swap(is_comment_, other->is_comment_);
    std::swap(is_score_, other->is_score_);
    std::swap(is_like_, other->is_like_);
    std::swap(is_share_, other->is_share_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string Item_User::GetTypeName() const {
  return "weizhu.discover_v2.Item.User";
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Item::kBaseFieldNumber;
const int Item::kCountFieldNumber;
const int Item::kUserFieldNumber;
#endif  // !_MSC_VER

Item::Item()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:weizhu.discover_v2.Item)
}

void Item::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  base_ = const_cast< ::weizhu::discover_v2::Item_Base*>(
      ::weizhu::discover_v2::Item_Base::internal_default_instance());
#else
  base_ = const_cast< ::weizhu::discover_v2::Item_Base*>(&::weizhu::discover_v2::Item_Base::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  count_ = const_cast< ::weizhu::discover_v2::Item_Count*>(
      ::weizhu::discover_v2::Item_Count::internal_default_instance());
#else
  count_ = const_cast< ::weizhu::discover_v2::Item_Count*>(&::weizhu::discover_v2::Item_Count::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  user_ = const_cast< ::weizhu::discover_v2::Item_User*>(
      ::weizhu::discover_v2::Item_User::internal_default_instance());
#else
  user_ = const_cast< ::weizhu::discover_v2::Item_User*>(&::weizhu::discover_v2::Item_User::default_instance());
#endif
}

Item::Item(const Item& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:weizhu.discover_v2.Item)
}

void Item::SharedCtor() {
  _cached_size_ = 0;
  base_ = NULL;
  count_ = NULL;
  user_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Item::~Item() {
  // @@protoc_insertion_point(destructor:weizhu.discover_v2.Item)
  SharedDtor();
}

void Item::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete base_;
    delete count_;
    delete user_;
  }
}

void Item::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Item& Item::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_discover_5fv2_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_discover_5fv2_2eproto();
#endif
  return *default_instance_;
}

Item* Item::default_instance_ = NULL;

Item* Item::New() const {
  return new Item;
}

void Item::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    if (has_base()) {
      if (base_ != NULL) base_->::weizhu::discover_v2::Item_Base::Clear();
    }
    if (has_count()) {
      if (count_ != NULL) count_->::weizhu::discover_v2::Item_Count::Clear();
    }
    if (has_user()) {
      if (user_ != NULL) user_->::weizhu::discover_v2::Item_User::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool Item::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:weizhu.discover_v2.Item)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .weizhu.discover_v2.Item.Base base = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_base()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_count;
        break;
      }

      // required .weizhu.discover_v2.Item.Count count = 2;
      case 2: {
        if (tag == 18) {
         parse_count:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_count()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_user;
        break;
      }

      // optional .weizhu.discover_v2.Item.User user = 3;
      case 3: {
        if (tag == 26) {
         parse_user:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_user()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:weizhu.discover_v2.Item)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:weizhu.discover_v2.Item)
  return false;
#undef DO_
}

void Item::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:weizhu.discover_v2.Item)
  // required .weizhu.discover_v2.Item.Base base = 1;
  if (has_base()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->base(), output);
  }

  // required .weizhu.discover_v2.Item.Count count = 2;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->count(), output);
  }

  // optional .weizhu.discover_v2.Item.User user = 3;
  if (has_user()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->user(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:weizhu.discover_v2.Item)
}

int Item::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .weizhu.discover_v2.Item.Base base = 1;
    if (has_base()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->base());
    }

    // required .weizhu.discover_v2.Item.Count count = 2;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->count());
    }

    // optional .weizhu.discover_v2.Item.User user = 3;
    if (has_user()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->user());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Item::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Item*>(&from));
}

void Item::MergeFrom(const Item& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_base()) {
      mutable_base()->::weizhu::discover_v2::Item_Base::MergeFrom(from.base());
    }
    if (from.has_count()) {
      mutable_count()->::weizhu::discover_v2::Item_Count::MergeFrom(from.count());
    }
    if (from.has_user()) {
      mutable_user()->::weizhu::discover_v2::Item_User::MergeFrom(from.user());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void Item::CopyFrom(const Item& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Item::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_base()) {
    if (!this->base().IsInitialized()) return false;
  }
  if (has_count()) {
    if (!this->count().IsInitialized()) return false;
  }
  if (has_user()) {
    if (!this->user().IsInitialized()) return false;
  }
  return true;
}

void Item::Swap(Item* other) {
  if (other != this) {
    std::swap(base_, other->base_);
    std::swap(count_, other->count_);
    std::swap(user_, other->user_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string Item::GetTypeName() const {
  return "weizhu.discover_v2.Item";
}


// ===================================================================

#ifndef _MSC_VER
const int ItemLearn::kItemIdFieldNumber;
const int ItemLearn::kUserIdFieldNumber;
const int ItemLearn::kLearnTimeFieldNumber;
const int ItemLearn::kLearnDurationFieldNumber;
const int ItemLearn::kLearnCntFieldNumber;
#endif  // !_MSC_VER

ItemLearn::ItemLearn()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:weizhu.discover_v2.ItemLearn)
}

void ItemLearn::InitAsDefaultInstance() {
}

ItemLearn::ItemLearn(const ItemLearn& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:weizhu.discover_v2.ItemLearn)
}

void ItemLearn::SharedCtor() {
  _cached_size_ = 0;
  item_id_ = GOOGLE_LONGLONG(0);
  user_id_ = GOOGLE_LONGLONG(0);
  learn_time_ = 0;
  learn_duration_ = 0;
  learn_cnt_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ItemLearn::~ItemLearn() {
  // @@protoc_insertion_point(destructor:weizhu.discover_v2.ItemLearn)
  SharedDtor();
}

void ItemLearn::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void ItemLearn::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ItemLearn& ItemLearn::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_discover_5fv2_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_discover_5fv2_2eproto();
#endif
  return *default_instance_;
}

ItemLearn* ItemLearn::default_instance_ = NULL;

ItemLearn* ItemLearn::New() const {
  return new ItemLearn;
}

void ItemLearn::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ItemLearn*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(item_id_, learn_cnt_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool ItemLearn::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:weizhu.discover_v2.ItemLearn)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 item_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &item_id_)));
          set_has_item_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_user_id;
        break;
      }

      // required int64 user_id = 2;
      case 2: {
        if (tag == 16) {
         parse_user_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_learn_time;
        break;
      }

      // required int32 learn_time = 3;
      case 3: {
        if (tag == 24) {
         parse_learn_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &learn_time_)));
          set_has_learn_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_learn_duration;
        break;
      }

      // required int32 learn_duration = 4;
      case 4: {
        if (tag == 32) {
         parse_learn_duration:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &learn_duration_)));
          set_has_learn_duration();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_learn_cnt;
        break;
      }

      // required int32 learn_cnt = 5;
      case 5: {
        if (tag == 40) {
         parse_learn_cnt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &learn_cnt_)));
          set_has_learn_cnt();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:weizhu.discover_v2.ItemLearn)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:weizhu.discover_v2.ItemLearn)
  return false;
#undef DO_
}

void ItemLearn::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:weizhu.discover_v2.ItemLearn)
  // required int64 item_id = 1;
  if (has_item_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->item_id(), output);
  }

  // required int64 user_id = 2;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->user_id(), output);
  }

  // required int32 learn_time = 3;
  if (has_learn_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->learn_time(), output);
  }

  // required int32 learn_duration = 4;
  if (has_learn_duration()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->learn_duration(), output);
  }

  // required int32 learn_cnt = 5;
  if (has_learn_cnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->learn_cnt(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:weizhu.discover_v2.ItemLearn)
}

int ItemLearn::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 item_id = 1;
    if (has_item_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->item_id());
    }

    // required int64 user_id = 2;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->user_id());
    }

    // required int32 learn_time = 3;
    if (has_learn_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->learn_time());
    }

    // required int32 learn_duration = 4;
    if (has_learn_duration()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->learn_duration());
    }

    // required int32 learn_cnt = 5;
    if (has_learn_cnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->learn_cnt());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ItemLearn::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ItemLearn*>(&from));
}

void ItemLearn::MergeFrom(const ItemLearn& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_item_id()) {
      set_item_id(from.item_id());
    }
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_learn_time()) {
      set_learn_time(from.learn_time());
    }
    if (from.has_learn_duration()) {
      set_learn_duration(from.learn_duration());
    }
    if (from.has_learn_cnt()) {
      set_learn_cnt(from.learn_cnt());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void ItemLearn::CopyFrom(const ItemLearn& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ItemLearn::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void ItemLearn::Swap(ItemLearn* other) {
  if (other != this) {
    std::swap(item_id_, other->item_id_);
    std::swap(user_id_, other->user_id_);
    std::swap(learn_time_, other->learn_time_);
    std::swap(learn_duration_, other->learn_duration_);
    std::swap(learn_cnt_, other->learn_cnt_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string ItemLearn::GetTypeName() const {
  return "weizhu.discover_v2.ItemLearn";
}


// ===================================================================

#ifndef _MSC_VER
const int ItemComment::kCommentIdFieldNumber;
const int ItemComment::kItemIdFieldNumber;
const int ItemComment::kUserIdFieldNumber;
const int ItemComment::kCommentTimeFieldNumber;
const int ItemComment::kCommentTextFieldNumber;
const int ItemComment::kIsDeleteFieldNumber;
#endif  // !_MSC_VER

ItemComment::ItemComment()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:weizhu.discover_v2.ItemComment)
}

void ItemComment::InitAsDefaultInstance() {
}

ItemComment::ItemComment(const ItemComment& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:weizhu.discover_v2.ItemComment)
}

void ItemComment::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  comment_id_ = GOOGLE_LONGLONG(0);
  item_id_ = GOOGLE_LONGLONG(0);
  user_id_ = GOOGLE_LONGLONG(0);
  comment_time_ = 0;
  comment_text_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  is_delete_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ItemComment::~ItemComment() {
  // @@protoc_insertion_point(destructor:weizhu.discover_v2.ItemComment)
  SharedDtor();
}

void ItemComment::SharedDtor() {
  if (comment_text_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete comment_text_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void ItemComment::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ItemComment& ItemComment::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_discover_5fv2_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_discover_5fv2_2eproto();
#endif
  return *default_instance_;
}

ItemComment* ItemComment::default_instance_ = NULL;

ItemComment* ItemComment::New() const {
  return new ItemComment;
}

void ItemComment::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ItemComment*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(comment_id_, user_id_);
    ZR_(comment_time_, is_delete_);
    if (has_comment_text()) {
      if (comment_text_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        comment_text_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool ItemComment::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:weizhu.discover_v2.ItemComment)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 comment_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &comment_id_)));
          set_has_comment_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_item_id;
        break;
      }

      // required int64 item_id = 2;
      case 2: {
        if (tag == 16) {
         parse_item_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &item_id_)));
          set_has_item_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_user_id;
        break;
      }

      // required int64 user_id = 3;
      case 3: {
        if (tag == 24) {
         parse_user_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_comment_time;
        break;
      }

      // required int32 comment_time = 4;
      case 4: {
        if (tag == 32) {
         parse_comment_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &comment_time_)));
          set_has_comment_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_comment_text;
        break;
      }

      // required string comment_text = 5;
      case 5: {
        if (tag == 42) {
         parse_comment_text:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_comment_text()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_is_delete;
        break;
      }

      // required bool is_delete = 6;
      case 6: {
        if (tag == 48) {
         parse_is_delete:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_delete_)));
          set_has_is_delete();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:weizhu.discover_v2.ItemComment)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:weizhu.discover_v2.ItemComment)
  return false;
#undef DO_
}

void ItemComment::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:weizhu.discover_v2.ItemComment)
  // required int64 comment_id = 1;
  if (has_comment_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->comment_id(), output);
  }

  // required int64 item_id = 2;
  if (has_item_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->item_id(), output);
  }

  // required int64 user_id = 3;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->user_id(), output);
  }

  // required int32 comment_time = 4;
  if (has_comment_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->comment_time(), output);
  }

  // required string comment_text = 5;
  if (has_comment_text()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->comment_text(), output);
  }

  // required bool is_delete = 6;
  if (has_is_delete()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->is_delete(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:weizhu.discover_v2.ItemComment)
}

int ItemComment::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 comment_id = 1;
    if (has_comment_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->comment_id());
    }

    // required int64 item_id = 2;
    if (has_item_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->item_id());
    }

    // required int64 user_id = 3;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->user_id());
    }

    // required int32 comment_time = 4;
    if (has_comment_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->comment_time());
    }

    // required string comment_text = 5;
    if (has_comment_text()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->comment_text());
    }

    // required bool is_delete = 6;
    if (has_is_delete()) {
      total_size += 1 + 1;
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ItemComment::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ItemComment*>(&from));
}

void ItemComment::MergeFrom(const ItemComment& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_comment_id()) {
      set_comment_id(from.comment_id());
    }
    if (from.has_item_id()) {
      set_item_id(from.item_id());
    }
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_comment_time()) {
      set_comment_time(from.comment_time());
    }
    if (from.has_comment_text()) {
      set_comment_text(from.comment_text());
    }
    if (from.has_is_delete()) {
      set_is_delete(from.is_delete());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void ItemComment::CopyFrom(const ItemComment& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ItemComment::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  return true;
}

void ItemComment::Swap(ItemComment* other) {
  if (other != this) {
    std::swap(comment_id_, other->comment_id_);
    std::swap(item_id_, other->item_id_);
    std::swap(user_id_, other->user_id_);
    std::swap(comment_time_, other->comment_time_);
    std::swap(comment_text_, other->comment_text_);
    std::swap(is_delete_, other->is_delete_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string ItemComment::GetTypeName() const {
  return "weizhu.discover_v2.ItemComment";
}


// ===================================================================

#ifndef _MSC_VER
const int ItemScore::kItemIdFieldNumber;
const int ItemScore::kUserIdFieldNumber;
const int ItemScore::kScoreTimeFieldNumber;
const int ItemScore::kScoreNumberFieldNumber;
#endif  // !_MSC_VER

ItemScore::ItemScore()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:weizhu.discover_v2.ItemScore)
}

void ItemScore::InitAsDefaultInstance() {
}

ItemScore::ItemScore(const ItemScore& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:weizhu.discover_v2.ItemScore)
}

void ItemScore::SharedCtor() {
  _cached_size_ = 0;
  item_id_ = GOOGLE_LONGLONG(0);
  user_id_ = GOOGLE_LONGLONG(0);
  score_time_ = 0;
  score_number_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ItemScore::~ItemScore() {
  // @@protoc_insertion_point(destructor:weizhu.discover_v2.ItemScore)
  SharedDtor();
}

void ItemScore::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void ItemScore::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ItemScore& ItemScore::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_discover_5fv2_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_discover_5fv2_2eproto();
#endif
  return *default_instance_;
}

ItemScore* ItemScore::default_instance_ = NULL;

ItemScore* ItemScore::New() const {
  return new ItemScore;
}

void ItemScore::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ItemScore*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(item_id_, score_number_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool ItemScore::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:weizhu.discover_v2.ItemScore)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 item_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &item_id_)));
          set_has_item_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_user_id;
        break;
      }

      // required int64 user_id = 2;
      case 2: {
        if (tag == 16) {
         parse_user_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_score_time;
        break;
      }

      // required int32 score_time = 3;
      case 3: {
        if (tag == 24) {
         parse_score_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &score_time_)));
          set_has_score_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_score_number;
        break;
      }

      // required int32 score_number = 4;
      case 4: {
        if (tag == 32) {
         parse_score_number:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &score_number_)));
          set_has_score_number();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:weizhu.discover_v2.ItemScore)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:weizhu.discover_v2.ItemScore)
  return false;
#undef DO_
}

void ItemScore::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:weizhu.discover_v2.ItemScore)
  // required int64 item_id = 1;
  if (has_item_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->item_id(), output);
  }

  // required int64 user_id = 2;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->user_id(), output);
  }

  // required int32 score_time = 3;
  if (has_score_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->score_time(), output);
  }

  // required int32 score_number = 4;
  if (has_score_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->score_number(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:weizhu.discover_v2.ItemScore)
}

int ItemScore::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 item_id = 1;
    if (has_item_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->item_id());
    }

    // required int64 user_id = 2;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->user_id());
    }

    // required int32 score_time = 3;
    if (has_score_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->score_time());
    }

    // required int32 score_number = 4;
    if (has_score_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->score_number());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ItemScore::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ItemScore*>(&from));
}

void ItemScore::MergeFrom(const ItemScore& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_item_id()) {
      set_item_id(from.item_id());
    }
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_score_time()) {
      set_score_time(from.score_time());
    }
    if (from.has_score_number()) {
      set_score_number(from.score_number());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void ItemScore::CopyFrom(const ItemScore& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ItemScore::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void ItemScore::Swap(ItemScore* other) {
  if (other != this) {
    std::swap(item_id_, other->item_id_);
    std::swap(user_id_, other->user_id_);
    std::swap(score_time_, other->score_time_);
    std::swap(score_number_, other->score_number_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string ItemScore::GetTypeName() const {
  return "weizhu.discover_v2.ItemScore";
}


// ===================================================================

#ifndef _MSC_VER
const int ItemLike::kItemIdFieldNumber;
const int ItemLike::kUserIdFieldNumber;
const int ItemLike::kLikeTimeFieldNumber;
#endif  // !_MSC_VER

ItemLike::ItemLike()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:weizhu.discover_v2.ItemLike)
}

void ItemLike::InitAsDefaultInstance() {
}

ItemLike::ItemLike(const ItemLike& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:weizhu.discover_v2.ItemLike)
}

void ItemLike::SharedCtor() {
  _cached_size_ = 0;
  item_id_ = GOOGLE_LONGLONG(0);
  user_id_ = GOOGLE_LONGLONG(0);
  like_time_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ItemLike::~ItemLike() {
  // @@protoc_insertion_point(destructor:weizhu.discover_v2.ItemLike)
  SharedDtor();
}

void ItemLike::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void ItemLike::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ItemLike& ItemLike::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_discover_5fv2_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_discover_5fv2_2eproto();
#endif
  return *default_instance_;
}

ItemLike* ItemLike::default_instance_ = NULL;

ItemLike* ItemLike::New() const {
  return new ItemLike;
}

void ItemLike::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ItemLike*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(item_id_, like_time_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool ItemLike::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:weizhu.discover_v2.ItemLike)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 item_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &item_id_)));
          set_has_item_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_user_id;
        break;
      }

      // required int64 user_id = 2;
      case 2: {
        if (tag == 16) {
         parse_user_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_like_time;
        break;
      }

      // required int32 like_time = 3;
      case 3: {
        if (tag == 24) {
         parse_like_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &like_time_)));
          set_has_like_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:weizhu.discover_v2.ItemLike)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:weizhu.discover_v2.ItemLike)
  return false;
#undef DO_
}

void ItemLike::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:weizhu.discover_v2.ItemLike)
  // required int64 item_id = 1;
  if (has_item_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->item_id(), output);
  }

  // required int64 user_id = 2;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->user_id(), output);
  }

  // required int32 like_time = 3;
  if (has_like_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->like_time(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:weizhu.discover_v2.ItemLike)
}

int ItemLike::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 item_id = 1;
    if (has_item_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->item_id());
    }

    // required int64 user_id = 2;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->user_id());
    }

    // required int32 like_time = 3;
    if (has_like_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->like_time());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ItemLike::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ItemLike*>(&from));
}

void ItemLike::MergeFrom(const ItemLike& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_item_id()) {
      set_item_id(from.item_id());
    }
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_like_time()) {
      set_like_time(from.like_time());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void ItemLike::CopyFrom(const ItemLike& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ItemLike::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void ItemLike::Swap(ItemLike* other) {
  if (other != this) {
    std::swap(item_id_, other->item_id_);
    std::swap(user_id_, other->user_id_);
    std::swap(like_time_, other->like_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string ItemLike::GetTypeName() const {
  return "weizhu.discover_v2.ItemLike";
}


// ===================================================================

#ifndef _MSC_VER
const int ItemShare::kItemIdFieldNumber;
const int ItemShare::kUserIdFieldNumber;
const int ItemShare::kShareTimeFieldNumber;
#endif  // !_MSC_VER

ItemShare::ItemShare()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:weizhu.discover_v2.ItemShare)
}

void ItemShare::InitAsDefaultInstance() {
}

ItemShare::ItemShare(const ItemShare& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:weizhu.discover_v2.ItemShare)
}

void ItemShare::SharedCtor() {
  _cached_size_ = 0;
  item_id_ = GOOGLE_LONGLONG(0);
  user_id_ = GOOGLE_LONGLONG(0);
  share_time_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ItemShare::~ItemShare() {
  // @@protoc_insertion_point(destructor:weizhu.discover_v2.ItemShare)
  SharedDtor();
}

void ItemShare::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void ItemShare::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ItemShare& ItemShare::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_discover_5fv2_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_discover_5fv2_2eproto();
#endif
  return *default_instance_;
}

ItemShare* ItemShare::default_instance_ = NULL;

ItemShare* ItemShare::New() const {
  return new ItemShare;
}

void ItemShare::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ItemShare*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(item_id_, share_time_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool ItemShare::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:weizhu.discover_v2.ItemShare)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 item_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &item_id_)));
          set_has_item_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_user_id;
        break;
      }

      // required int64 user_id = 2;
      case 2: {
        if (tag == 16) {
         parse_user_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_share_time;
        break;
      }

      // required int32 share_time = 3;
      case 3: {
        if (tag == 24) {
         parse_share_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &share_time_)));
          set_has_share_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:weizhu.discover_v2.ItemShare)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:weizhu.discover_v2.ItemShare)
  return false;
#undef DO_
}

void ItemShare::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:weizhu.discover_v2.ItemShare)
  // required int64 item_id = 1;
  if (has_item_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->item_id(), output);
  }

  // required int64 user_id = 2;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->user_id(), output);
  }

  // required int32 share_time = 3;
  if (has_share_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->share_time(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:weizhu.discover_v2.ItemShare)
}

int ItemShare::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 item_id = 1;
    if (has_item_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->item_id());
    }

    // required int64 user_id = 2;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->user_id());
    }

    // required int32 share_time = 3;
    if (has_share_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->share_time());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ItemShare::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ItemShare*>(&from));
}

void ItemShare::MergeFrom(const ItemShare& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_item_id()) {
      set_item_id(from.item_id());
    }
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_share_time()) {
      set_share_time(from.share_time());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void ItemShare::CopyFrom(const ItemShare& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ItemShare::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void ItemShare::Swap(ItemShare* other) {
  if (other != this) {
    std::swap(item_id_, other->item_id_);
    std::swap(user_id_, other->user_id_);
    std::swap(share_time_, other->share_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string ItemShare::GetTypeName() const {
  return "weizhu.discover_v2.ItemShare";
}


// ===================================================================

#ifndef _MSC_VER
const int GetDiscoverHomeRequest::kPromptIndexFieldNumber;
#endif  // !_MSC_VER

GetDiscoverHomeRequest::GetDiscoverHomeRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:weizhu.discover_v2.GetDiscoverHomeRequest)
}

void GetDiscoverHomeRequest::InitAsDefaultInstance() {
}

GetDiscoverHomeRequest::GetDiscoverHomeRequest(const GetDiscoverHomeRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:weizhu.discover_v2.GetDiscoverHomeRequest)
}

void GetDiscoverHomeRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetDiscoverHomeRequest::~GetDiscoverHomeRequest() {
  // @@protoc_insertion_point(destructor:weizhu.discover_v2.GetDiscoverHomeRequest)
  SharedDtor();
}

void GetDiscoverHomeRequest::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void GetDiscoverHomeRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GetDiscoverHomeRequest& GetDiscoverHomeRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_discover_5fv2_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_discover_5fv2_2eproto();
#endif
  return *default_instance_;
}

GetDiscoverHomeRequest* GetDiscoverHomeRequest::default_instance_ = NULL;

GetDiscoverHomeRequest* GetDiscoverHomeRequest::New() const {
  return new GetDiscoverHomeRequest;
}

void GetDiscoverHomeRequest::Clear() {
  prompt_index_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool GetDiscoverHomeRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:weizhu.discover_v2.GetDiscoverHomeRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated bytes prompt_index = 1;
      case 1: {
        if (tag == 10) {
         parse_prompt_index:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_prompt_index()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_prompt_index;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:weizhu.discover_v2.GetDiscoverHomeRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:weizhu.discover_v2.GetDiscoverHomeRequest)
  return false;
#undef DO_
}

void GetDiscoverHomeRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:weizhu.discover_v2.GetDiscoverHomeRequest)
  // repeated bytes prompt_index = 1;
  for (int i = 0; i < this->prompt_index_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->prompt_index(i), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:weizhu.discover_v2.GetDiscoverHomeRequest)
}

int GetDiscoverHomeRequest::ByteSize() const {
  int total_size = 0;

  // repeated bytes prompt_index = 1;
  total_size += 1 * this->prompt_index_size();
  for (int i = 0; i < this->prompt_index_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->prompt_index(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetDiscoverHomeRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GetDiscoverHomeRequest*>(&from));
}

void GetDiscoverHomeRequest::MergeFrom(const GetDiscoverHomeRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  prompt_index_.MergeFrom(from.prompt_index_);
  mutable_unknown_fields()->append(from.unknown_fields());
}

void GetDiscoverHomeRequest::CopyFrom(const GetDiscoverHomeRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetDiscoverHomeRequest::IsInitialized() const {

  return true;
}

void GetDiscoverHomeRequest::Swap(GetDiscoverHomeRequest* other) {
  if (other != this) {
    prompt_index_.Swap(&other->prompt_index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string GetDiscoverHomeRequest::GetTypeName() const {
  return "weizhu.discover_v2.GetDiscoverHomeRequest";
}


// ===================================================================

#ifndef _MSC_VER
const int GetDiscoverHomeResponse::kBannerFieldNumber;
const int GetDiscoverHomeResponse::kModuleFieldNumber;
const int GetDiscoverHomeResponse::kRefItemFieldNumber;
#endif  // !_MSC_VER

GetDiscoverHomeResponse::GetDiscoverHomeResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:weizhu.discover_v2.GetDiscoverHomeResponse)
}

void GetDiscoverHomeResponse::InitAsDefaultInstance() {
}

GetDiscoverHomeResponse::GetDiscoverHomeResponse(const GetDiscoverHomeResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:weizhu.discover_v2.GetDiscoverHomeResponse)
}

void GetDiscoverHomeResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetDiscoverHomeResponse::~GetDiscoverHomeResponse() {
  // @@protoc_insertion_point(destructor:weizhu.discover_v2.GetDiscoverHomeResponse)
  SharedDtor();
}

void GetDiscoverHomeResponse::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void GetDiscoverHomeResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GetDiscoverHomeResponse& GetDiscoverHomeResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_discover_5fv2_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_discover_5fv2_2eproto();
#endif
  return *default_instance_;
}

GetDiscoverHomeResponse* GetDiscoverHomeResponse::default_instance_ = NULL;

GetDiscoverHomeResponse* GetDiscoverHomeResponse::New() const {
  return new GetDiscoverHomeResponse;
}

void GetDiscoverHomeResponse::Clear() {
  banner_.Clear();
  module_.Clear();
  ref_item_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool GetDiscoverHomeResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:weizhu.discover_v2.GetDiscoverHomeResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .weizhu.discover_v2.Banner banner = 1;
      case 1: {
        if (tag == 10) {
         parse_banner:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_banner()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_banner;
        if (input->ExpectTag(18)) goto parse_module;
        break;
      }

      // repeated .weizhu.discover_v2.Module module = 2;
      case 2: {
        if (tag == 18) {
         parse_module:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_module()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_module;
        if (input->ExpectTag(26)) goto parse_ref_item;
        break;
      }

      // repeated .weizhu.discover_v2.Item ref_item = 3;
      case 3: {
        if (tag == 26) {
         parse_ref_item:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_ref_item()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_ref_item;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:weizhu.discover_v2.GetDiscoverHomeResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:weizhu.discover_v2.GetDiscoverHomeResponse)
  return false;
#undef DO_
}

void GetDiscoverHomeResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:weizhu.discover_v2.GetDiscoverHomeResponse)
  // repeated .weizhu.discover_v2.Banner banner = 1;
  for (int i = 0; i < this->banner_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->banner(i), output);
  }

  // repeated .weizhu.discover_v2.Module module = 2;
  for (int i = 0; i < this->module_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->module(i), output);
  }

  // repeated .weizhu.discover_v2.Item ref_item = 3;
  for (int i = 0; i < this->ref_item_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->ref_item(i), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:weizhu.discover_v2.GetDiscoverHomeResponse)
}

int GetDiscoverHomeResponse::ByteSize() const {
  int total_size = 0;

  // repeated .weizhu.discover_v2.Banner banner = 1;
  total_size += 1 * this->banner_size();
  for (int i = 0; i < this->banner_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->banner(i));
  }

  // repeated .weizhu.discover_v2.Module module = 2;
  total_size += 1 * this->module_size();
  for (int i = 0; i < this->module_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->module(i));
  }

  // repeated .weizhu.discover_v2.Item ref_item = 3;
  total_size += 1 * this->ref_item_size();
  for (int i = 0; i < this->ref_item_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->ref_item(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetDiscoverHomeResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GetDiscoverHomeResponse*>(&from));
}

void GetDiscoverHomeResponse::MergeFrom(const GetDiscoverHomeResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  banner_.MergeFrom(from.banner_);
  module_.MergeFrom(from.module_);
  ref_item_.MergeFrom(from.ref_item_);
  mutable_unknown_fields()->append(from.unknown_fields());
}

void GetDiscoverHomeResponse::CopyFrom(const GetDiscoverHomeResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetDiscoverHomeResponse::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->banner())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->module())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->ref_item())) return false;
  return true;
}

void GetDiscoverHomeResponse::Swap(GetDiscoverHomeResponse* other) {
  if (other != this) {
    banner_.Swap(&other->banner_);
    module_.Swap(&other->module_);
    ref_item_.Swap(&other->ref_item_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string GetDiscoverHomeResponse::GetTypeName() const {
  return "weizhu.discover_v2.GetDiscoverHomeResponse";
}


// ===================================================================

#ifndef _MSC_VER
const int GetModuleCategoryItemListRequest::kModuleIdFieldNumber;
const int GetModuleCategoryItemListRequest::kCategoryIdFieldNumber;
const int GetModuleCategoryItemListRequest::kItemSizeFieldNumber;
const int GetModuleCategoryItemListRequest::kOffsetIndexFieldNumber;
#endif  // !_MSC_VER

GetModuleCategoryItemListRequest::GetModuleCategoryItemListRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:weizhu.discover_v2.GetModuleCategoryItemListRequest)
}

void GetModuleCategoryItemListRequest::InitAsDefaultInstance() {
}

GetModuleCategoryItemListRequest::GetModuleCategoryItemListRequest(const GetModuleCategoryItemListRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:weizhu.discover_v2.GetModuleCategoryItemListRequest)
}

void GetModuleCategoryItemListRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  module_id_ = 0;
  category_id_ = 0;
  item_size_ = 0;
  offset_index_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetModuleCategoryItemListRequest::~GetModuleCategoryItemListRequest() {
  // @@protoc_insertion_point(destructor:weizhu.discover_v2.GetModuleCategoryItemListRequest)
  SharedDtor();
}

void GetModuleCategoryItemListRequest::SharedDtor() {
  if (offset_index_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete offset_index_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void GetModuleCategoryItemListRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GetModuleCategoryItemListRequest& GetModuleCategoryItemListRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_discover_5fv2_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_discover_5fv2_2eproto();
#endif
  return *default_instance_;
}

GetModuleCategoryItemListRequest* GetModuleCategoryItemListRequest::default_instance_ = NULL;

GetModuleCategoryItemListRequest* GetModuleCategoryItemListRequest::New() const {
  return new GetModuleCategoryItemListRequest;
}

void GetModuleCategoryItemListRequest::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GetModuleCategoryItemListRequest*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(module_id_, category_id_);
    item_size_ = 0;
    if (has_offset_index()) {
      if (offset_index_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        offset_index_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool GetModuleCategoryItemListRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:weizhu.discover_v2.GetModuleCategoryItemListRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 module_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &module_id_)));
          set_has_module_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_category_id;
        break;
      }

      // required int32 category_id = 2;
      case 2: {
        if (tag == 16) {
         parse_category_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &category_id_)));
          set_has_category_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_item_size;
        break;
      }

      // required int32 item_size = 3;
      case 3: {
        if (tag == 24) {
         parse_item_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &item_size_)));
          set_has_item_size();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_offset_index;
        break;
      }

      // optional bytes offset_index = 4;
      case 4: {
        if (tag == 34) {
         parse_offset_index:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_offset_index()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:weizhu.discover_v2.GetModuleCategoryItemListRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:weizhu.discover_v2.GetModuleCategoryItemListRequest)
  return false;
#undef DO_
}

void GetModuleCategoryItemListRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:weizhu.discover_v2.GetModuleCategoryItemListRequest)
  // required int32 module_id = 1;
  if (has_module_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->module_id(), output);
  }

  // required int32 category_id = 2;
  if (has_category_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->category_id(), output);
  }

  // required int32 item_size = 3;
  if (has_item_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->item_size(), output);
  }

  // optional bytes offset_index = 4;
  if (has_offset_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->offset_index(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:weizhu.discover_v2.GetModuleCategoryItemListRequest)
}

int GetModuleCategoryItemListRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 module_id = 1;
    if (has_module_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->module_id());
    }

    // required int32 category_id = 2;
    if (has_category_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->category_id());
    }

    // required int32 item_size = 3;
    if (has_item_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->item_size());
    }

    // optional bytes offset_index = 4;
    if (has_offset_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->offset_index());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetModuleCategoryItemListRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GetModuleCategoryItemListRequest*>(&from));
}

void GetModuleCategoryItemListRequest::MergeFrom(const GetModuleCategoryItemListRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_module_id()) {
      set_module_id(from.module_id());
    }
    if (from.has_category_id()) {
      set_category_id(from.category_id());
    }
    if (from.has_item_size()) {
      set_item_size(from.item_size());
    }
    if (from.has_offset_index()) {
      set_offset_index(from.offset_index());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void GetModuleCategoryItemListRequest::CopyFrom(const GetModuleCategoryItemListRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetModuleCategoryItemListRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void GetModuleCategoryItemListRequest::Swap(GetModuleCategoryItemListRequest* other) {
  if (other != this) {
    std::swap(module_id_, other->module_id_);
    std::swap(category_id_, other->category_id_);
    std::swap(item_size_, other->item_size_);
    std::swap(offset_index_, other->offset_index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string GetModuleCategoryItemListRequest::GetTypeName() const {
  return "weizhu.discover_v2.GetModuleCategoryItemListRequest";
}


// ===================================================================

#ifndef _MSC_VER
const int GetModuleCategoryItemListResponse::kItemFieldNumber;
const int GetModuleCategoryItemListResponse::kHasMoreFieldNumber;
const int GetModuleCategoryItemListResponse::kOffsetIndexFieldNumber;
const int GetModuleCategoryItemListResponse::kPromptIndexFieldNumber;
#endif  // !_MSC_VER

GetModuleCategoryItemListResponse::GetModuleCategoryItemListResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:weizhu.discover_v2.GetModuleCategoryItemListResponse)
}

void GetModuleCategoryItemListResponse::InitAsDefaultInstance() {
}

GetModuleCategoryItemListResponse::GetModuleCategoryItemListResponse(const GetModuleCategoryItemListResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:weizhu.discover_v2.GetModuleCategoryItemListResponse)
}

void GetModuleCategoryItemListResponse::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  has_more_ = false;
  offset_index_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  prompt_index_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetModuleCategoryItemListResponse::~GetModuleCategoryItemListResponse() {
  // @@protoc_insertion_point(destructor:weizhu.discover_v2.GetModuleCategoryItemListResponse)
  SharedDtor();
}

void GetModuleCategoryItemListResponse::SharedDtor() {
  if (offset_index_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete offset_index_;
  }
  if (prompt_index_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete prompt_index_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void GetModuleCategoryItemListResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GetModuleCategoryItemListResponse& GetModuleCategoryItemListResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_discover_5fv2_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_discover_5fv2_2eproto();
#endif
  return *default_instance_;
}

GetModuleCategoryItemListResponse* GetModuleCategoryItemListResponse::default_instance_ = NULL;

GetModuleCategoryItemListResponse* GetModuleCategoryItemListResponse::New() const {
  return new GetModuleCategoryItemListResponse;
}

void GetModuleCategoryItemListResponse::Clear() {
  if (_has_bits_[0 / 32] & 14) {
    has_more_ = false;
    if (has_offset_index()) {
      if (offset_index_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        offset_index_->clear();
      }
    }
    if (has_prompt_index()) {
      if (prompt_index_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        prompt_index_->clear();
      }
    }
  }
  item_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool GetModuleCategoryItemListResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:weizhu.discover_v2.GetModuleCategoryItemListResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .weizhu.discover_v2.Item item = 1;
      case 1: {
        if (tag == 10) {
         parse_item:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_item()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_item;
        if (input->ExpectTag(16)) goto parse_has_more;
        break;
      }

      // required bool has_more = 2;
      case 2: {
        if (tag == 16) {
         parse_has_more:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &has_more_)));
          set_has_has_more();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_offset_index;
        break;
      }

      // required bytes offset_index = 3;
      case 3: {
        if (tag == 26) {
         parse_offset_index:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_offset_index()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_prompt_index;
        break;
      }

      // optional bytes prompt_index = 4;
      case 4: {
        if (tag == 34) {
         parse_prompt_index:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_prompt_index()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:weizhu.discover_v2.GetModuleCategoryItemListResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:weizhu.discover_v2.GetModuleCategoryItemListResponse)
  return false;
#undef DO_
}

void GetModuleCategoryItemListResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:weizhu.discover_v2.GetModuleCategoryItemListResponse)
  // repeated .weizhu.discover_v2.Item item = 1;
  for (int i = 0; i < this->item_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->item(i), output);
  }

  // required bool has_more = 2;
  if (has_has_more()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->has_more(), output);
  }

  // required bytes offset_index = 3;
  if (has_offset_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->offset_index(), output);
  }

  // optional bytes prompt_index = 4;
  if (has_prompt_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->prompt_index(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:weizhu.discover_v2.GetModuleCategoryItemListResponse)
}

int GetModuleCategoryItemListResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // required bool has_more = 2;
    if (has_has_more()) {
      total_size += 1 + 1;
    }

    // required bytes offset_index = 3;
    if (has_offset_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->offset_index());
    }

    // optional bytes prompt_index = 4;
    if (has_prompt_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->prompt_index());
    }

  }
  // repeated .weizhu.discover_v2.Item item = 1;
  total_size += 1 * this->item_size();
  for (int i = 0; i < this->item_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->item(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetModuleCategoryItemListResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GetModuleCategoryItemListResponse*>(&from));
}

void GetModuleCategoryItemListResponse::MergeFrom(const GetModuleCategoryItemListResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  item_.MergeFrom(from.item_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_has_more()) {
      set_has_more(from.has_more());
    }
    if (from.has_offset_index()) {
      set_offset_index(from.offset_index());
    }
    if (from.has_prompt_index()) {
      set_prompt_index(from.prompt_index());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void GetModuleCategoryItemListResponse::CopyFrom(const GetModuleCategoryItemListResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetModuleCategoryItemListResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000006) != 0x00000006) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->item())) return false;
  return true;
}

void GetModuleCategoryItemListResponse::Swap(GetModuleCategoryItemListResponse* other) {
  if (other != this) {
    item_.Swap(&other->item_);
    std::swap(has_more_, other->has_more_);
    std::swap(offset_index_, other->offset_index_);
    std::swap(prompt_index_, other->prompt_index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string GetModuleCategoryItemListResponse::GetTypeName() const {
  return "weizhu.discover_v2.GetModuleCategoryItemListResponse";
}


// ===================================================================

#ifndef _MSC_VER
const int GetModulePromptIndexRequest::kModuleIdFieldNumber;
#endif  // !_MSC_VER

GetModulePromptIndexRequest::GetModulePromptIndexRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:weizhu.discover_v2.GetModulePromptIndexRequest)
}

void GetModulePromptIndexRequest::InitAsDefaultInstance() {
}

GetModulePromptIndexRequest::GetModulePromptIndexRequest(const GetModulePromptIndexRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:weizhu.discover_v2.GetModulePromptIndexRequest)
}

void GetModulePromptIndexRequest::SharedCtor() {
  _cached_size_ = 0;
  module_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetModulePromptIndexRequest::~GetModulePromptIndexRequest() {
  // @@protoc_insertion_point(destructor:weizhu.discover_v2.GetModulePromptIndexRequest)
  SharedDtor();
}

void GetModulePromptIndexRequest::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void GetModulePromptIndexRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GetModulePromptIndexRequest& GetModulePromptIndexRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_discover_5fv2_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_discover_5fv2_2eproto();
#endif
  return *default_instance_;
}

GetModulePromptIndexRequest* GetModulePromptIndexRequest::default_instance_ = NULL;

GetModulePromptIndexRequest* GetModulePromptIndexRequest::New() const {
  return new GetModulePromptIndexRequest;
}

void GetModulePromptIndexRequest::Clear() {
  module_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool GetModulePromptIndexRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:weizhu.discover_v2.GetModulePromptIndexRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 module_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &module_id_)));
          set_has_module_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:weizhu.discover_v2.GetModulePromptIndexRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:weizhu.discover_v2.GetModulePromptIndexRequest)
  return false;
#undef DO_
}

void GetModulePromptIndexRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:weizhu.discover_v2.GetModulePromptIndexRequest)
  // required int32 module_id = 1;
  if (has_module_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->module_id(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:weizhu.discover_v2.GetModulePromptIndexRequest)
}

int GetModulePromptIndexRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 module_id = 1;
    if (has_module_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->module_id());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetModulePromptIndexRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GetModulePromptIndexRequest*>(&from));
}

void GetModulePromptIndexRequest::MergeFrom(const GetModulePromptIndexRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_module_id()) {
      set_module_id(from.module_id());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void GetModulePromptIndexRequest::CopyFrom(const GetModulePromptIndexRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetModulePromptIndexRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GetModulePromptIndexRequest::Swap(GetModulePromptIndexRequest* other) {
  if (other != this) {
    std::swap(module_id_, other->module_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string GetModulePromptIndexRequest::GetTypeName() const {
  return "weizhu.discover_v2.GetModulePromptIndexRequest";
}


// ===================================================================

#ifndef _MSC_VER
const int GetModulePromptIndexResponse::kPromptIndexFieldNumber;
#endif  // !_MSC_VER

GetModulePromptIndexResponse::GetModulePromptIndexResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:weizhu.discover_v2.GetModulePromptIndexResponse)
}

void GetModulePromptIndexResponse::InitAsDefaultInstance() {
}

GetModulePromptIndexResponse::GetModulePromptIndexResponse(const GetModulePromptIndexResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:weizhu.discover_v2.GetModulePromptIndexResponse)
}

void GetModulePromptIndexResponse::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  prompt_index_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetModulePromptIndexResponse::~GetModulePromptIndexResponse() {
  // @@protoc_insertion_point(destructor:weizhu.discover_v2.GetModulePromptIndexResponse)
  SharedDtor();
}

void GetModulePromptIndexResponse::SharedDtor() {
  if (prompt_index_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete prompt_index_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void GetModulePromptIndexResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GetModulePromptIndexResponse& GetModulePromptIndexResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_discover_5fv2_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_discover_5fv2_2eproto();
#endif
  return *default_instance_;
}

GetModulePromptIndexResponse* GetModulePromptIndexResponse::default_instance_ = NULL;

GetModulePromptIndexResponse* GetModulePromptIndexResponse::New() const {
  return new GetModulePromptIndexResponse;
}

void GetModulePromptIndexResponse::Clear() {
  if (has_prompt_index()) {
    if (prompt_index_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      prompt_index_->clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool GetModulePromptIndexResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:weizhu.discover_v2.GetModulePromptIndexResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes prompt_index = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_prompt_index()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:weizhu.discover_v2.GetModulePromptIndexResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:weizhu.discover_v2.GetModulePromptIndexResponse)
  return false;
#undef DO_
}

void GetModulePromptIndexResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:weizhu.discover_v2.GetModulePromptIndexResponse)
  // optional bytes prompt_index = 1;
  if (has_prompt_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->prompt_index(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:weizhu.discover_v2.GetModulePromptIndexResponse)
}

int GetModulePromptIndexResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes prompt_index = 1;
    if (has_prompt_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->prompt_index());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetModulePromptIndexResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GetModulePromptIndexResponse*>(&from));
}

void GetModulePromptIndexResponse::MergeFrom(const GetModulePromptIndexResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_prompt_index()) {
      set_prompt_index(from.prompt_index());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void GetModulePromptIndexResponse::CopyFrom(const GetModulePromptIndexResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetModulePromptIndexResponse::IsInitialized() const {

  return true;
}

void GetModulePromptIndexResponse::Swap(GetModulePromptIndexResponse* other) {
  if (other != this) {
    std::swap(prompt_index_, other->prompt_index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string GetModulePromptIndexResponse::GetTypeName() const {
  return "weizhu.discover_v2.GetModulePromptIndexResponse";
}


// ===================================================================

#ifndef _MSC_VER
const int GetItemByIdRequest::kItemIdFieldNumber;
#endif  // !_MSC_VER

GetItemByIdRequest::GetItemByIdRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:weizhu.discover_v2.GetItemByIdRequest)
}

void GetItemByIdRequest::InitAsDefaultInstance() {
}

GetItemByIdRequest::GetItemByIdRequest(const GetItemByIdRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:weizhu.discover_v2.GetItemByIdRequest)
}

void GetItemByIdRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetItemByIdRequest::~GetItemByIdRequest() {
  // @@protoc_insertion_point(destructor:weizhu.discover_v2.GetItemByIdRequest)
  SharedDtor();
}

void GetItemByIdRequest::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void GetItemByIdRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GetItemByIdRequest& GetItemByIdRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_discover_5fv2_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_discover_5fv2_2eproto();
#endif
  return *default_instance_;
}

GetItemByIdRequest* GetItemByIdRequest::default_instance_ = NULL;

GetItemByIdRequest* GetItemByIdRequest::New() const {
  return new GetItemByIdRequest;
}

void GetItemByIdRequest::Clear() {
  item_id_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool GetItemByIdRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:weizhu.discover_v2.GetItemByIdRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int64 item_id = 1;
      case 1: {
        if (tag == 8) {
         parse_item_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 8, input, this->mutable_item_id())));
        } else if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_item_id())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8)) goto parse_item_id;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:weizhu.discover_v2.GetItemByIdRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:weizhu.discover_v2.GetItemByIdRequest)
  return false;
#undef DO_
}

void GetItemByIdRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:weizhu.discover_v2.GetItemByIdRequest)
  // repeated int64 item_id = 1;
  for (int i = 0; i < this->item_id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      1, this->item_id(i), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:weizhu.discover_v2.GetItemByIdRequest)
}

int GetItemByIdRequest::ByteSize() const {
  int total_size = 0;

  // repeated int64 item_id = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->item_id_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->item_id(i));
    }
    total_size += 1 * this->item_id_size() + data_size;
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetItemByIdRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GetItemByIdRequest*>(&from));
}

void GetItemByIdRequest::MergeFrom(const GetItemByIdRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  item_id_.MergeFrom(from.item_id_);
  mutable_unknown_fields()->append(from.unknown_fields());
}

void GetItemByIdRequest::CopyFrom(const GetItemByIdRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetItemByIdRequest::IsInitialized() const {

  return true;
}

void GetItemByIdRequest::Swap(GetItemByIdRequest* other) {
  if (other != this) {
    item_id_.Swap(&other->item_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string GetItemByIdRequest::GetTypeName() const {
  return "weizhu.discover_v2.GetItemByIdRequest";
}


// ===================================================================

#ifndef _MSC_VER
const int GetItemByIdResponse::kItemFieldNumber;
#endif  // !_MSC_VER

GetItemByIdResponse::GetItemByIdResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:weizhu.discover_v2.GetItemByIdResponse)
}

void GetItemByIdResponse::InitAsDefaultInstance() {
}

GetItemByIdResponse::GetItemByIdResponse(const GetItemByIdResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:weizhu.discover_v2.GetItemByIdResponse)
}

void GetItemByIdResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetItemByIdResponse::~GetItemByIdResponse() {
  // @@protoc_insertion_point(destructor:weizhu.discover_v2.GetItemByIdResponse)
  SharedDtor();
}

void GetItemByIdResponse::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void GetItemByIdResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GetItemByIdResponse& GetItemByIdResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_discover_5fv2_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_discover_5fv2_2eproto();
#endif
  return *default_instance_;
}

GetItemByIdResponse* GetItemByIdResponse::default_instance_ = NULL;

GetItemByIdResponse* GetItemByIdResponse::New() const {
  return new GetItemByIdResponse;
}

void GetItemByIdResponse::Clear() {
  item_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool GetItemByIdResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:weizhu.discover_v2.GetItemByIdResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .weizhu.discover_v2.Item item = 1;
      case 1: {
        if (tag == 10) {
         parse_item:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_item()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_item;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:weizhu.discover_v2.GetItemByIdResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:weizhu.discover_v2.GetItemByIdResponse)
  return false;
#undef DO_
}

void GetItemByIdResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:weizhu.discover_v2.GetItemByIdResponse)
  // repeated .weizhu.discover_v2.Item item = 1;
  for (int i = 0; i < this->item_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->item(i), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:weizhu.discover_v2.GetItemByIdResponse)
}

int GetItemByIdResponse::ByteSize() const {
  int total_size = 0;

  // repeated .weizhu.discover_v2.Item item = 1;
  total_size += 1 * this->item_size();
  for (int i = 0; i < this->item_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->item(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetItemByIdResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GetItemByIdResponse*>(&from));
}

void GetItemByIdResponse::MergeFrom(const GetItemByIdResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  item_.MergeFrom(from.item_);
  mutable_unknown_fields()->append(from.unknown_fields());
}

void GetItemByIdResponse::CopyFrom(const GetItemByIdResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetItemByIdResponse::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->item())) return false;
  return true;
}

void GetItemByIdResponse::Swap(GetItemByIdResponse* other) {
  if (other != this) {
    item_.Swap(&other->item_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string GetItemByIdResponse::GetTypeName() const {
  return "weizhu.discover_v2.GetItemByIdResponse";
}


// ===================================================================

#ifndef _MSC_VER
const int GetItemLearnListRequest::kItemIdFieldNumber;
const int GetItemLearnListRequest::kSizeFieldNumber;
const int GetItemLearnListRequest::kOffsetIndexFieldNumber;
#endif  // !_MSC_VER

GetItemLearnListRequest::GetItemLearnListRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:weizhu.discover_v2.GetItemLearnListRequest)
}

void GetItemLearnListRequest::InitAsDefaultInstance() {
}

GetItemLearnListRequest::GetItemLearnListRequest(const GetItemLearnListRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:weizhu.discover_v2.GetItemLearnListRequest)
}

void GetItemLearnListRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  item_id_ = GOOGLE_LONGLONG(0);
  size_ = 0;
  offset_index_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetItemLearnListRequest::~GetItemLearnListRequest() {
  // @@protoc_insertion_point(destructor:weizhu.discover_v2.GetItemLearnListRequest)
  SharedDtor();
}

void GetItemLearnListRequest::SharedDtor() {
  if (offset_index_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete offset_index_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void GetItemLearnListRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GetItemLearnListRequest& GetItemLearnListRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_discover_5fv2_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_discover_5fv2_2eproto();
#endif
  return *default_instance_;
}

GetItemLearnListRequest* GetItemLearnListRequest::default_instance_ = NULL;

GetItemLearnListRequest* GetItemLearnListRequest::New() const {
  return new GetItemLearnListRequest;
}

void GetItemLearnListRequest::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    item_id_ = GOOGLE_LONGLONG(0);
    size_ = 0;
    if (has_offset_index()) {
      if (offset_index_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        offset_index_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool GetItemLearnListRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:weizhu.discover_v2.GetItemLearnListRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 item_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &item_id_)));
          set_has_item_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_size;
        break;
      }

      // required int32 size = 2;
      case 2: {
        if (tag == 16) {
         parse_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &size_)));
          set_has_size();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_offset_index;
        break;
      }

      // optional bytes offset_index = 3;
      case 3: {
        if (tag == 26) {
         parse_offset_index:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_offset_index()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:weizhu.discover_v2.GetItemLearnListRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:weizhu.discover_v2.GetItemLearnListRequest)
  return false;
#undef DO_
}

void GetItemLearnListRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:weizhu.discover_v2.GetItemLearnListRequest)
  // required int64 item_id = 1;
  if (has_item_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->item_id(), output);
  }

  // required int32 size = 2;
  if (has_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->size(), output);
  }

  // optional bytes offset_index = 3;
  if (has_offset_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->offset_index(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:weizhu.discover_v2.GetItemLearnListRequest)
}

int GetItemLearnListRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 item_id = 1;
    if (has_item_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->item_id());
    }

    // required int32 size = 2;
    if (has_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->size());
    }

    // optional bytes offset_index = 3;
    if (has_offset_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->offset_index());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetItemLearnListRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GetItemLearnListRequest*>(&from));
}

void GetItemLearnListRequest::MergeFrom(const GetItemLearnListRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_item_id()) {
      set_item_id(from.item_id());
    }
    if (from.has_size()) {
      set_size(from.size());
    }
    if (from.has_offset_index()) {
      set_offset_index(from.offset_index());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void GetItemLearnListRequest::CopyFrom(const GetItemLearnListRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetItemLearnListRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void GetItemLearnListRequest::Swap(GetItemLearnListRequest* other) {
  if (other != this) {
    std::swap(item_id_, other->item_id_);
    std::swap(size_, other->size_);
    std::swap(offset_index_, other->offset_index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string GetItemLearnListRequest::GetTypeName() const {
  return "weizhu.discover_v2.GetItemLearnListRequest";
}


// ===================================================================

#ifndef _MSC_VER
const int GetItemLearnListResponse::kItemLearnFieldNumber;
const int GetItemLearnListResponse::kHasMoreFieldNumber;
const int GetItemLearnListResponse::kOffsetIndexFieldNumber;
const int GetItemLearnListResponse::kItemLearnCntFieldNumber;
const int GetItemLearnListResponse::kItemLearnUserCntFieldNumber;
const int GetItemLearnListResponse::kUserItemLearnFieldNumber;
#endif  // !_MSC_VER

GetItemLearnListResponse::GetItemLearnListResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:weizhu.discover_v2.GetItemLearnListResponse)
}

void GetItemLearnListResponse::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  user_item_learn_ = const_cast< ::weizhu::discover_v2::ItemLearn*>(
      ::weizhu::discover_v2::ItemLearn::internal_default_instance());
#else
  user_item_learn_ = const_cast< ::weizhu::discover_v2::ItemLearn*>(&::weizhu::discover_v2::ItemLearn::default_instance());
#endif
}

GetItemLearnListResponse::GetItemLearnListResponse(const GetItemLearnListResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:weizhu.discover_v2.GetItemLearnListResponse)
}

void GetItemLearnListResponse::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  has_more_ = false;
  offset_index_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  item_learn_cnt_ = 0;
  item_learn_user_cnt_ = 0;
  user_item_learn_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetItemLearnListResponse::~GetItemLearnListResponse() {
  // @@protoc_insertion_point(destructor:weizhu.discover_v2.GetItemLearnListResponse)
  SharedDtor();
}

void GetItemLearnListResponse::SharedDtor() {
  if (offset_index_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete offset_index_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete user_item_learn_;
  }
}

void GetItemLearnListResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GetItemLearnListResponse& GetItemLearnListResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_discover_5fv2_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_discover_5fv2_2eproto();
#endif
  return *default_instance_;
}

GetItemLearnListResponse* GetItemLearnListResponse::default_instance_ = NULL;

GetItemLearnListResponse* GetItemLearnListResponse::New() const {
  return new GetItemLearnListResponse;
}

void GetItemLearnListResponse::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GetItemLearnListResponse*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 62) {
    ZR_(has_more_, item_learn_cnt_);
    if (has_offset_index()) {
      if (offset_index_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        offset_index_->clear();
      }
    }
    item_learn_user_cnt_ = 0;
    if (has_user_item_learn()) {
      if (user_item_learn_ != NULL) user_item_learn_->::weizhu::discover_v2::ItemLearn::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  item_learn_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool GetItemLearnListResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:weizhu.discover_v2.GetItemLearnListResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .weizhu.discover_v2.ItemLearn item_learn = 1;
      case 1: {
        if (tag == 10) {
         parse_item_learn:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_item_learn()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_item_learn;
        if (input->ExpectTag(16)) goto parse_has_more;
        break;
      }

      // required bool has_more = 2;
      case 2: {
        if (tag == 16) {
         parse_has_more:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &has_more_)));
          set_has_has_more();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_offset_index;
        break;
      }

      // required bytes offset_index = 3;
      case 3: {
        if (tag == 26) {
         parse_offset_index:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_offset_index()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_item_learn_cnt;
        break;
      }

      // optional int32 item_learn_cnt = 4;
      case 4: {
        if (tag == 32) {
         parse_item_learn_cnt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &item_learn_cnt_)));
          set_has_item_learn_cnt();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_item_learn_user_cnt;
        break;
      }

      // optional int32 item_learn_user_cnt = 5;
      case 5: {
        if (tag == 40) {
         parse_item_learn_user_cnt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &item_learn_user_cnt_)));
          set_has_item_learn_user_cnt();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_user_item_learn;
        break;
      }

      // optional .weizhu.discover_v2.ItemLearn user_item_learn = 6;
      case 6: {
        if (tag == 50) {
         parse_user_item_learn:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_user_item_learn()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:weizhu.discover_v2.GetItemLearnListResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:weizhu.discover_v2.GetItemLearnListResponse)
  return false;
#undef DO_
}

void GetItemLearnListResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:weizhu.discover_v2.GetItemLearnListResponse)
  // repeated .weizhu.discover_v2.ItemLearn item_learn = 1;
  for (int i = 0; i < this->item_learn_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->item_learn(i), output);
  }

  // required bool has_more = 2;
  if (has_has_more()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->has_more(), output);
  }

  // required bytes offset_index = 3;
  if (has_offset_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->offset_index(), output);
  }

  // optional int32 item_learn_cnt = 4;
  if (has_item_learn_cnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->item_learn_cnt(), output);
  }

  // optional int32 item_learn_user_cnt = 5;
  if (has_item_learn_user_cnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->item_learn_user_cnt(), output);
  }

  // optional .weizhu.discover_v2.ItemLearn user_item_learn = 6;
  if (has_user_item_learn()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      6, this->user_item_learn(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:weizhu.discover_v2.GetItemLearnListResponse)
}

int GetItemLearnListResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // required bool has_more = 2;
    if (has_has_more()) {
      total_size += 1 + 1;
    }

    // required bytes offset_index = 3;
    if (has_offset_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->offset_index());
    }

    // optional int32 item_learn_cnt = 4;
    if (has_item_learn_cnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->item_learn_cnt());
    }

    // optional int32 item_learn_user_cnt = 5;
    if (has_item_learn_user_cnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->item_learn_user_cnt());
    }

    // optional .weizhu.discover_v2.ItemLearn user_item_learn = 6;
    if (has_user_item_learn()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->user_item_learn());
    }

  }
  // repeated .weizhu.discover_v2.ItemLearn item_learn = 1;
  total_size += 1 * this->item_learn_size();
  for (int i = 0; i < this->item_learn_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->item_learn(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetItemLearnListResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GetItemLearnListResponse*>(&from));
}

void GetItemLearnListResponse::MergeFrom(const GetItemLearnListResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  item_learn_.MergeFrom(from.item_learn_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_has_more()) {
      set_has_more(from.has_more());
    }
    if (from.has_offset_index()) {
      set_offset_index(from.offset_index());
    }
    if (from.has_item_learn_cnt()) {
      set_item_learn_cnt(from.item_learn_cnt());
    }
    if (from.has_item_learn_user_cnt()) {
      set_item_learn_user_cnt(from.item_learn_user_cnt());
    }
    if (from.has_user_item_learn()) {
      mutable_user_item_learn()->::weizhu::discover_v2::ItemLearn::MergeFrom(from.user_item_learn());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void GetItemLearnListResponse::CopyFrom(const GetItemLearnListResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetItemLearnListResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000006) != 0x00000006) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->item_learn())) return false;
  if (has_user_item_learn()) {
    if (!this->user_item_learn().IsInitialized()) return false;
  }
  return true;
}

void GetItemLearnListResponse::Swap(GetItemLearnListResponse* other) {
  if (other != this) {
    item_learn_.Swap(&other->item_learn_);
    std::swap(has_more_, other->has_more_);
    std::swap(offset_index_, other->offset_index_);
    std::swap(item_learn_cnt_, other->item_learn_cnt_);
    std::swap(item_learn_user_cnt_, other->item_learn_user_cnt_);
    std::swap(user_item_learn_, other->user_item_learn_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string GetItemLearnListResponse::GetTypeName() const {
  return "weizhu.discover_v2.GetItemLearnListResponse";
}


// ===================================================================

#ifndef _MSC_VER
const int GetUserLearnListRequest::kUserIdFieldNumber;
const int GetUserLearnListRequest::kSizeFieldNumber;
const int GetUserLearnListRequest::kOffsetIndexFieldNumber;
#endif  // !_MSC_VER

GetUserLearnListRequest::GetUserLearnListRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:weizhu.discover_v2.GetUserLearnListRequest)
}

void GetUserLearnListRequest::InitAsDefaultInstance() {
}

GetUserLearnListRequest::GetUserLearnListRequest(const GetUserLearnListRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:weizhu.discover_v2.GetUserLearnListRequest)
}

void GetUserLearnListRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  user_id_ = GOOGLE_LONGLONG(0);
  size_ = 0;
  offset_index_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetUserLearnListRequest::~GetUserLearnListRequest() {
  // @@protoc_insertion_point(destructor:weizhu.discover_v2.GetUserLearnListRequest)
  SharedDtor();
}

void GetUserLearnListRequest::SharedDtor() {
  if (offset_index_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete offset_index_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void GetUserLearnListRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GetUserLearnListRequest& GetUserLearnListRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_discover_5fv2_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_discover_5fv2_2eproto();
#endif
  return *default_instance_;
}

GetUserLearnListRequest* GetUserLearnListRequest::default_instance_ = NULL;

GetUserLearnListRequest* GetUserLearnListRequest::New() const {
  return new GetUserLearnListRequest;
}

void GetUserLearnListRequest::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    user_id_ = GOOGLE_LONGLONG(0);
    size_ = 0;
    if (has_offset_index()) {
      if (offset_index_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        offset_index_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool GetUserLearnListRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:weizhu.discover_v2.GetUserLearnListRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 user_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_size;
        break;
      }

      // required int32 size = 2;
      case 2: {
        if (tag == 16) {
         parse_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &size_)));
          set_has_size();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_offset_index;
        break;
      }

      // optional bytes offset_index = 3;
      case 3: {
        if (tag == 26) {
         parse_offset_index:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_offset_index()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:weizhu.discover_v2.GetUserLearnListRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:weizhu.discover_v2.GetUserLearnListRequest)
  return false;
#undef DO_
}

void GetUserLearnListRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:weizhu.discover_v2.GetUserLearnListRequest)
  // required int64 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->user_id(), output);
  }

  // required int32 size = 2;
  if (has_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->size(), output);
  }

  // optional bytes offset_index = 3;
  if (has_offset_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->offset_index(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:weizhu.discover_v2.GetUserLearnListRequest)
}

int GetUserLearnListRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->user_id());
    }

    // required int32 size = 2;
    if (has_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->size());
    }

    // optional bytes offset_index = 3;
    if (has_offset_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->offset_index());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetUserLearnListRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GetUserLearnListRequest*>(&from));
}

void GetUserLearnListRequest::MergeFrom(const GetUserLearnListRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_size()) {
      set_size(from.size());
    }
    if (from.has_offset_index()) {
      set_offset_index(from.offset_index());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void GetUserLearnListRequest::CopyFrom(const GetUserLearnListRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetUserLearnListRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void GetUserLearnListRequest::Swap(GetUserLearnListRequest* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(size_, other->size_);
    std::swap(offset_index_, other->offset_index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string GetUserLearnListRequest::GetTypeName() const {
  return "weizhu.discover_v2.GetUserLearnListRequest";
}


// ===================================================================

#ifndef _MSC_VER
const int GetUserLearnListResponse::kItemLearnFieldNumber;
const int GetUserLearnListResponse::kHasMoreFieldNumber;
const int GetUserLearnListResponse::kOffsetIndexFieldNumber;
const int GetUserLearnListResponse::kRefItemFieldNumber;
#endif  // !_MSC_VER

GetUserLearnListResponse::GetUserLearnListResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:weizhu.discover_v2.GetUserLearnListResponse)
}

void GetUserLearnListResponse::InitAsDefaultInstance() {
}

GetUserLearnListResponse::GetUserLearnListResponse(const GetUserLearnListResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:weizhu.discover_v2.GetUserLearnListResponse)
}

void GetUserLearnListResponse::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  has_more_ = false;
  offset_index_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetUserLearnListResponse::~GetUserLearnListResponse() {
  // @@protoc_insertion_point(destructor:weizhu.discover_v2.GetUserLearnListResponse)
  SharedDtor();
}

void GetUserLearnListResponse::SharedDtor() {
  if (offset_index_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete offset_index_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void GetUserLearnListResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GetUserLearnListResponse& GetUserLearnListResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_discover_5fv2_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_discover_5fv2_2eproto();
#endif
  return *default_instance_;
}

GetUserLearnListResponse* GetUserLearnListResponse::default_instance_ = NULL;

GetUserLearnListResponse* GetUserLearnListResponse::New() const {
  return new GetUserLearnListResponse;
}

void GetUserLearnListResponse::Clear() {
  if (_has_bits_[0 / 32] & 6) {
    has_more_ = false;
    if (has_offset_index()) {
      if (offset_index_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        offset_index_->clear();
      }
    }
  }
  item_learn_.Clear();
  ref_item_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool GetUserLearnListResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:weizhu.discover_v2.GetUserLearnListResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .weizhu.discover_v2.ItemLearn item_learn = 1;
      case 1: {
        if (tag == 10) {
         parse_item_learn:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_item_learn()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_item_learn;
        if (input->ExpectTag(16)) goto parse_has_more;
        break;
      }

      // required bool has_more = 2;
      case 2: {
        if (tag == 16) {
         parse_has_more:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &has_more_)));
          set_has_has_more();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_offset_index;
        break;
      }

      // required bytes offset_index = 3;
      case 3: {
        if (tag == 26) {
         parse_offset_index:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_offset_index()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_ref_item;
        break;
      }

      // repeated .weizhu.discover_v2.Item ref_item = 4;
      case 4: {
        if (tag == 34) {
         parse_ref_item:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_ref_item()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_ref_item;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:weizhu.discover_v2.GetUserLearnListResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:weizhu.discover_v2.GetUserLearnListResponse)
  return false;
#undef DO_
}

void GetUserLearnListResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:weizhu.discover_v2.GetUserLearnListResponse)
  // repeated .weizhu.discover_v2.ItemLearn item_learn = 1;
  for (int i = 0; i < this->item_learn_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->item_learn(i), output);
  }

  // required bool has_more = 2;
  if (has_has_more()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->has_more(), output);
  }

  // required bytes offset_index = 3;
  if (has_offset_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->offset_index(), output);
  }

  // repeated .weizhu.discover_v2.Item ref_item = 4;
  for (int i = 0; i < this->ref_item_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, this->ref_item(i), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:weizhu.discover_v2.GetUserLearnListResponse)
}

int GetUserLearnListResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // required bool has_more = 2;
    if (has_has_more()) {
      total_size += 1 + 1;
    }

    // required bytes offset_index = 3;
    if (has_offset_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->offset_index());
    }

  }
  // repeated .weizhu.discover_v2.ItemLearn item_learn = 1;
  total_size += 1 * this->item_learn_size();
  for (int i = 0; i < this->item_learn_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->item_learn(i));
  }

  // repeated .weizhu.discover_v2.Item ref_item = 4;
  total_size += 1 * this->ref_item_size();
  for (int i = 0; i < this->ref_item_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->ref_item(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetUserLearnListResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GetUserLearnListResponse*>(&from));
}

void GetUserLearnListResponse::MergeFrom(const GetUserLearnListResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  item_learn_.MergeFrom(from.item_learn_);
  ref_item_.MergeFrom(from.ref_item_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_has_more()) {
      set_has_more(from.has_more());
    }
    if (from.has_offset_index()) {
      set_offset_index(from.offset_index());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void GetUserLearnListResponse::CopyFrom(const GetUserLearnListResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetUserLearnListResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000006) != 0x00000006) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->item_learn())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->ref_item())) return false;
  return true;
}

void GetUserLearnListResponse::Swap(GetUserLearnListResponse* other) {
  if (other != this) {
    item_learn_.Swap(&other->item_learn_);
    std::swap(has_more_, other->has_more_);
    std::swap(offset_index_, other->offset_index_);
    ref_item_.Swap(&other->ref_item_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string GetUserLearnListResponse::GetTypeName() const {
  return "weizhu.discover_v2.GetUserLearnListResponse";
}


// ===================================================================

#ifndef _MSC_VER
const int GetItemCommentListRequest::kItemIdFieldNumber;
const int GetItemCommentListRequest::kSizeFieldNumber;
const int GetItemCommentListRequest::kOffsetIndexFieldNumber;
#endif  // !_MSC_VER

GetItemCommentListRequest::GetItemCommentListRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:weizhu.discover_v2.GetItemCommentListRequest)
}

void GetItemCommentListRequest::InitAsDefaultInstance() {
}

GetItemCommentListRequest::GetItemCommentListRequest(const GetItemCommentListRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:weizhu.discover_v2.GetItemCommentListRequest)
}

void GetItemCommentListRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  item_id_ = GOOGLE_LONGLONG(0);
  size_ = 0;
  offset_index_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetItemCommentListRequest::~GetItemCommentListRequest() {
  // @@protoc_insertion_point(destructor:weizhu.discover_v2.GetItemCommentListRequest)
  SharedDtor();
}

void GetItemCommentListRequest::SharedDtor() {
  if (offset_index_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete offset_index_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void GetItemCommentListRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GetItemCommentListRequest& GetItemCommentListRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_discover_5fv2_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_discover_5fv2_2eproto();
#endif
  return *default_instance_;
}

GetItemCommentListRequest* GetItemCommentListRequest::default_instance_ = NULL;

GetItemCommentListRequest* GetItemCommentListRequest::New() const {
  return new GetItemCommentListRequest;
}

void GetItemCommentListRequest::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    item_id_ = GOOGLE_LONGLONG(0);
    size_ = 0;
    if (has_offset_index()) {
      if (offset_index_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        offset_index_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool GetItemCommentListRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:weizhu.discover_v2.GetItemCommentListRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 item_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &item_id_)));
          set_has_item_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_size;
        break;
      }

      // required int32 size = 2;
      case 2: {
        if (tag == 16) {
         parse_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &size_)));
          set_has_size();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_offset_index;
        break;
      }

      // optional bytes offset_index = 3;
      case 3: {
        if (tag == 26) {
         parse_offset_index:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_offset_index()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:weizhu.discover_v2.GetItemCommentListRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:weizhu.discover_v2.GetItemCommentListRequest)
  return false;
#undef DO_
}

void GetItemCommentListRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:weizhu.discover_v2.GetItemCommentListRequest)
  // required int64 item_id = 1;
  if (has_item_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->item_id(), output);
  }

  // required int32 size = 2;
  if (has_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->size(), output);
  }

  // optional bytes offset_index = 3;
  if (has_offset_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->offset_index(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:weizhu.discover_v2.GetItemCommentListRequest)
}

int GetItemCommentListRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 item_id = 1;
    if (has_item_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->item_id());
    }

    // required int32 size = 2;
    if (has_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->size());
    }

    // optional bytes offset_index = 3;
    if (has_offset_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->offset_index());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetItemCommentListRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GetItemCommentListRequest*>(&from));
}

void GetItemCommentListRequest::MergeFrom(const GetItemCommentListRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_item_id()) {
      set_item_id(from.item_id());
    }
    if (from.has_size()) {
      set_size(from.size());
    }
    if (from.has_offset_index()) {
      set_offset_index(from.offset_index());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void GetItemCommentListRequest::CopyFrom(const GetItemCommentListRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetItemCommentListRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void GetItemCommentListRequest::Swap(GetItemCommentListRequest* other) {
  if (other != this) {
    std::swap(item_id_, other->item_id_);
    std::swap(size_, other->size_);
    std::swap(offset_index_, other->offset_index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string GetItemCommentListRequest::GetTypeName() const {
  return "weizhu.discover_v2.GetItemCommentListRequest";
}


// ===================================================================

#ifndef _MSC_VER
const int GetItemCommentListResponse::kItemCommentFieldNumber;
const int GetItemCommentListResponse::kHasMoreFieldNumber;
const int GetItemCommentListResponse::kOffsetIndexFieldNumber;
const int GetItemCommentListResponse::kItemCommentCntFieldNumber;
const int GetItemCommentListResponse::kItemCommentUserCntFieldNumber;
#endif  // !_MSC_VER

GetItemCommentListResponse::GetItemCommentListResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:weizhu.discover_v2.GetItemCommentListResponse)
}

void GetItemCommentListResponse::InitAsDefaultInstance() {
}

GetItemCommentListResponse::GetItemCommentListResponse(const GetItemCommentListResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:weizhu.discover_v2.GetItemCommentListResponse)
}

void GetItemCommentListResponse::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  has_more_ = false;
  offset_index_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  item_comment_cnt_ = 0;
  item_comment_user_cnt_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetItemCommentListResponse::~GetItemCommentListResponse() {
  // @@protoc_insertion_point(destructor:weizhu.discover_v2.GetItemCommentListResponse)
  SharedDtor();
}

void GetItemCommentListResponse::SharedDtor() {
  if (offset_index_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete offset_index_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void GetItemCommentListResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GetItemCommentListResponse& GetItemCommentListResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_discover_5fv2_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_discover_5fv2_2eproto();
#endif
  return *default_instance_;
}

GetItemCommentListResponse* GetItemCommentListResponse::default_instance_ = NULL;

GetItemCommentListResponse* GetItemCommentListResponse::New() const {
  return new GetItemCommentListResponse;
}

void GetItemCommentListResponse::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GetItemCommentListResponse*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 30) {
    ZR_(has_more_, item_comment_user_cnt_);
    if (has_offset_index()) {
      if (offset_index_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        offset_index_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  item_comment_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool GetItemCommentListResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:weizhu.discover_v2.GetItemCommentListResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .weizhu.discover_v2.ItemComment item_comment = 1;
      case 1: {
        if (tag == 10) {
         parse_item_comment:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_item_comment()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_item_comment;
        if (input->ExpectTag(16)) goto parse_has_more;
        break;
      }

      // required bool has_more = 2;
      case 2: {
        if (tag == 16) {
         parse_has_more:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &has_more_)));
          set_has_has_more();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_offset_index;
        break;
      }

      // required bytes offset_index = 3;
      case 3: {
        if (tag == 26) {
         parse_offset_index:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_offset_index()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_item_comment_cnt;
        break;
      }

      // optional int32 item_comment_cnt = 4;
      case 4: {
        if (tag == 32) {
         parse_item_comment_cnt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &item_comment_cnt_)));
          set_has_item_comment_cnt();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_item_comment_user_cnt;
        break;
      }

      // optional int32 item_comment_user_cnt = 5;
      case 5: {
        if (tag == 40) {
         parse_item_comment_user_cnt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &item_comment_user_cnt_)));
          set_has_item_comment_user_cnt();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:weizhu.discover_v2.GetItemCommentListResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:weizhu.discover_v2.GetItemCommentListResponse)
  return false;
#undef DO_
}

void GetItemCommentListResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:weizhu.discover_v2.GetItemCommentListResponse)
  // repeated .weizhu.discover_v2.ItemComment item_comment = 1;
  for (int i = 0; i < this->item_comment_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->item_comment(i), output);
  }

  // required bool has_more = 2;
  if (has_has_more()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->has_more(), output);
  }

  // required bytes offset_index = 3;
  if (has_offset_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->offset_index(), output);
  }

  // optional int32 item_comment_cnt = 4;
  if (has_item_comment_cnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->item_comment_cnt(), output);
  }

  // optional int32 item_comment_user_cnt = 5;
  if (has_item_comment_user_cnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->item_comment_user_cnt(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:weizhu.discover_v2.GetItemCommentListResponse)
}

int GetItemCommentListResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // required bool has_more = 2;
    if (has_has_more()) {
      total_size += 1 + 1;
    }

    // required bytes offset_index = 3;
    if (has_offset_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->offset_index());
    }

    // optional int32 item_comment_cnt = 4;
    if (has_item_comment_cnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->item_comment_cnt());
    }

    // optional int32 item_comment_user_cnt = 5;
    if (has_item_comment_user_cnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->item_comment_user_cnt());
    }

  }
  // repeated .weizhu.discover_v2.ItemComment item_comment = 1;
  total_size += 1 * this->item_comment_size();
  for (int i = 0; i < this->item_comment_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->item_comment(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetItemCommentListResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GetItemCommentListResponse*>(&from));
}

void GetItemCommentListResponse::MergeFrom(const GetItemCommentListResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  item_comment_.MergeFrom(from.item_comment_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_has_more()) {
      set_has_more(from.has_more());
    }
    if (from.has_offset_index()) {
      set_offset_index(from.offset_index());
    }
    if (from.has_item_comment_cnt()) {
      set_item_comment_cnt(from.item_comment_cnt());
    }
    if (from.has_item_comment_user_cnt()) {
      set_item_comment_user_cnt(from.item_comment_user_cnt());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void GetItemCommentListResponse::CopyFrom(const GetItemCommentListResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetItemCommentListResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000006) != 0x00000006) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->item_comment())) return false;
  return true;
}

void GetItemCommentListResponse::Swap(GetItemCommentListResponse* other) {
  if (other != this) {
    item_comment_.Swap(&other->item_comment_);
    std::swap(has_more_, other->has_more_);
    std::swap(offset_index_, other->offset_index_);
    std::swap(item_comment_cnt_, other->item_comment_cnt_);
    std::swap(item_comment_user_cnt_, other->item_comment_user_cnt_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string GetItemCommentListResponse::GetTypeName() const {
  return "weizhu.discover_v2.GetItemCommentListResponse";
}


// ===================================================================

#ifndef _MSC_VER
const int GetUserCommentListRequest::kUserIdFieldNumber;
const int GetUserCommentListRequest::kSizeFieldNumber;
const int GetUserCommentListRequest::kOffsetIndexFieldNumber;
#endif  // !_MSC_VER

GetUserCommentListRequest::GetUserCommentListRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:weizhu.discover_v2.GetUserCommentListRequest)
}

void GetUserCommentListRequest::InitAsDefaultInstance() {
}

GetUserCommentListRequest::GetUserCommentListRequest(const GetUserCommentListRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:weizhu.discover_v2.GetUserCommentListRequest)
}

void GetUserCommentListRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  user_id_ = GOOGLE_LONGLONG(0);
  size_ = 0;
  offset_index_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetUserCommentListRequest::~GetUserCommentListRequest() {
  // @@protoc_insertion_point(destructor:weizhu.discover_v2.GetUserCommentListRequest)
  SharedDtor();
}

void GetUserCommentListRequest::SharedDtor() {
  if (offset_index_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete offset_index_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void GetUserCommentListRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GetUserCommentListRequest& GetUserCommentListRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_discover_5fv2_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_discover_5fv2_2eproto();
#endif
  return *default_instance_;
}

GetUserCommentListRequest* GetUserCommentListRequest::default_instance_ = NULL;

GetUserCommentListRequest* GetUserCommentListRequest::New() const {
  return new GetUserCommentListRequest;
}

void GetUserCommentListRequest::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    user_id_ = GOOGLE_LONGLONG(0);
    size_ = 0;
    if (has_offset_index()) {
      if (offset_index_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        offset_index_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool GetUserCommentListRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:weizhu.discover_v2.GetUserCommentListRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 user_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_size;
        break;
      }

      // required int32 size = 2;
      case 2: {
        if (tag == 16) {
         parse_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &size_)));
          set_has_size();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_offset_index;
        break;
      }

      // optional bytes offset_index = 3;
      case 3: {
        if (tag == 26) {
         parse_offset_index:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_offset_index()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:weizhu.discover_v2.GetUserCommentListRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:weizhu.discover_v2.GetUserCommentListRequest)
  return false;
#undef DO_
}

void GetUserCommentListRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:weizhu.discover_v2.GetUserCommentListRequest)
  // required int64 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->user_id(), output);
  }

  // required int32 size = 2;
  if (has_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->size(), output);
  }

  // optional bytes offset_index = 3;
  if (has_offset_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->offset_index(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:weizhu.discover_v2.GetUserCommentListRequest)
}

int GetUserCommentListRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->user_id());
    }

    // required int32 size = 2;
    if (has_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->size());
    }

    // optional bytes offset_index = 3;
    if (has_offset_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->offset_index());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetUserCommentListRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GetUserCommentListRequest*>(&from));
}

void GetUserCommentListRequest::MergeFrom(const GetUserCommentListRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_size()) {
      set_size(from.size());
    }
    if (from.has_offset_index()) {
      set_offset_index(from.offset_index());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void GetUserCommentListRequest::CopyFrom(const GetUserCommentListRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetUserCommentListRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void GetUserCommentListRequest::Swap(GetUserCommentListRequest* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(size_, other->size_);
    std::swap(offset_index_, other->offset_index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string GetUserCommentListRequest::GetTypeName() const {
  return "weizhu.discover_v2.GetUserCommentListRequest";
}


// ===================================================================

#ifndef _MSC_VER
const int GetUserCommentListResponse::kItemCommentFieldNumber;
const int GetUserCommentListResponse::kHasMoreFieldNumber;
const int GetUserCommentListResponse::kOffsetIndexFieldNumber;
const int GetUserCommentListResponse::kRefItemFieldNumber;
#endif  // !_MSC_VER

GetUserCommentListResponse::GetUserCommentListResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:weizhu.discover_v2.GetUserCommentListResponse)
}

void GetUserCommentListResponse::InitAsDefaultInstance() {
}

GetUserCommentListResponse::GetUserCommentListResponse(const GetUserCommentListResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:weizhu.discover_v2.GetUserCommentListResponse)
}

void GetUserCommentListResponse::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  has_more_ = false;
  offset_index_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetUserCommentListResponse::~GetUserCommentListResponse() {
  // @@protoc_insertion_point(destructor:weizhu.discover_v2.GetUserCommentListResponse)
  SharedDtor();
}

void GetUserCommentListResponse::SharedDtor() {
  if (offset_index_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete offset_index_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void GetUserCommentListResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GetUserCommentListResponse& GetUserCommentListResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_discover_5fv2_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_discover_5fv2_2eproto();
#endif
  return *default_instance_;
}

GetUserCommentListResponse* GetUserCommentListResponse::default_instance_ = NULL;

GetUserCommentListResponse* GetUserCommentListResponse::New() const {
  return new GetUserCommentListResponse;
}

void GetUserCommentListResponse::Clear() {
  if (_has_bits_[0 / 32] & 6) {
    has_more_ = false;
    if (has_offset_index()) {
      if (offset_index_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        offset_index_->clear();
      }
    }
  }
  item_comment_.Clear();
  ref_item_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool GetUserCommentListResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:weizhu.discover_v2.GetUserCommentListResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .weizhu.discover_v2.ItemComment item_comment = 1;
      case 1: {
        if (tag == 10) {
         parse_item_comment:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_item_comment()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_item_comment;
        if (input->ExpectTag(16)) goto parse_has_more;
        break;
      }

      // required bool has_more = 2;
      case 2: {
        if (tag == 16) {
         parse_has_more:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &has_more_)));
          set_has_has_more();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_offset_index;
        break;
      }

      // required bytes offset_index = 3;
      case 3: {
        if (tag == 26) {
         parse_offset_index:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_offset_index()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_ref_item;
        break;
      }

      // repeated .weizhu.discover_v2.Item ref_item = 4;
      case 4: {
        if (tag == 34) {
         parse_ref_item:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_ref_item()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_ref_item;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:weizhu.discover_v2.GetUserCommentListResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:weizhu.discover_v2.GetUserCommentListResponse)
  return false;
#undef DO_
}

void GetUserCommentListResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:weizhu.discover_v2.GetUserCommentListResponse)
  // repeated .weizhu.discover_v2.ItemComment item_comment = 1;
  for (int i = 0; i < this->item_comment_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->item_comment(i), output);
  }

  // required bool has_more = 2;
  if (has_has_more()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->has_more(), output);
  }

  // required bytes offset_index = 3;
  if (has_offset_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->offset_index(), output);
  }

  // repeated .weizhu.discover_v2.Item ref_item = 4;
  for (int i = 0; i < this->ref_item_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, this->ref_item(i), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:weizhu.discover_v2.GetUserCommentListResponse)
}

int GetUserCommentListResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // required bool has_more = 2;
    if (has_has_more()) {
      total_size += 1 + 1;
    }

    // required bytes offset_index = 3;
    if (has_offset_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->offset_index());
    }

  }
  // repeated .weizhu.discover_v2.ItemComment item_comment = 1;
  total_size += 1 * this->item_comment_size();
  for (int i = 0; i < this->item_comment_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->item_comment(i));
  }

  // repeated .weizhu.discover_v2.Item ref_item = 4;
  total_size += 1 * this->ref_item_size();
  for (int i = 0; i < this->ref_item_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->ref_item(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetUserCommentListResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GetUserCommentListResponse*>(&from));
}

void GetUserCommentListResponse::MergeFrom(const GetUserCommentListResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  item_comment_.MergeFrom(from.item_comment_);
  ref_item_.MergeFrom(from.ref_item_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_has_more()) {
      set_has_more(from.has_more());
    }
    if (from.has_offset_index()) {
      set_offset_index(from.offset_index());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void GetUserCommentListResponse::CopyFrom(const GetUserCommentListResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetUserCommentListResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000006) != 0x00000006) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->item_comment())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->ref_item())) return false;
  return true;
}

void GetUserCommentListResponse::Swap(GetUserCommentListResponse* other) {
  if (other != this) {
    item_comment_.Swap(&other->item_comment_);
    std::swap(has_more_, other->has_more_);
    std::swap(offset_index_, other->offset_index_);
    ref_item_.Swap(&other->ref_item_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string GetUserCommentListResponse::GetTypeName() const {
  return "weizhu.discover_v2.GetUserCommentListResponse";
}


// ===================================================================

#ifndef _MSC_VER
const int GetItemScoreListRequest::kItemIdFieldNumber;
const int GetItemScoreListRequest::kSizeFieldNumber;
const int GetItemScoreListRequest::kOffsetIndexFieldNumber;
#endif  // !_MSC_VER

GetItemScoreListRequest::GetItemScoreListRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:weizhu.discover_v2.GetItemScoreListRequest)
}

void GetItemScoreListRequest::InitAsDefaultInstance() {
}

GetItemScoreListRequest::GetItemScoreListRequest(const GetItemScoreListRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:weizhu.discover_v2.GetItemScoreListRequest)
}

void GetItemScoreListRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  item_id_ = GOOGLE_LONGLONG(0);
  size_ = 0;
  offset_index_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetItemScoreListRequest::~GetItemScoreListRequest() {
  // @@protoc_insertion_point(destructor:weizhu.discover_v2.GetItemScoreListRequest)
  SharedDtor();
}

void GetItemScoreListRequest::SharedDtor() {
  if (offset_index_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete offset_index_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void GetItemScoreListRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GetItemScoreListRequest& GetItemScoreListRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_discover_5fv2_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_discover_5fv2_2eproto();
#endif
  return *default_instance_;
}

GetItemScoreListRequest* GetItemScoreListRequest::default_instance_ = NULL;

GetItemScoreListRequest* GetItemScoreListRequest::New() const {
  return new GetItemScoreListRequest;
}

void GetItemScoreListRequest::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    item_id_ = GOOGLE_LONGLONG(0);
    size_ = 0;
    if (has_offset_index()) {
      if (offset_index_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        offset_index_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool GetItemScoreListRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:weizhu.discover_v2.GetItemScoreListRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 item_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &item_id_)));
          set_has_item_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_size;
        break;
      }

      // required int32 size = 2;
      case 2: {
        if (tag == 16) {
         parse_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &size_)));
          set_has_size();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_offset_index;
        break;
      }

      // optional bytes offset_index = 3;
      case 3: {
        if (tag == 26) {
         parse_offset_index:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_offset_index()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:weizhu.discover_v2.GetItemScoreListRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:weizhu.discover_v2.GetItemScoreListRequest)
  return false;
#undef DO_
}

void GetItemScoreListRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:weizhu.discover_v2.GetItemScoreListRequest)
  // required int64 item_id = 1;
  if (has_item_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->item_id(), output);
  }

  // required int32 size = 2;
  if (has_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->size(), output);
  }

  // optional bytes offset_index = 3;
  if (has_offset_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->offset_index(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:weizhu.discover_v2.GetItemScoreListRequest)
}

int GetItemScoreListRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 item_id = 1;
    if (has_item_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->item_id());
    }

    // required int32 size = 2;
    if (has_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->size());
    }

    // optional bytes offset_index = 3;
    if (has_offset_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->offset_index());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetItemScoreListRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GetItemScoreListRequest*>(&from));
}

void GetItemScoreListRequest::MergeFrom(const GetItemScoreListRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_item_id()) {
      set_item_id(from.item_id());
    }
    if (from.has_size()) {
      set_size(from.size());
    }
    if (from.has_offset_index()) {
      set_offset_index(from.offset_index());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void GetItemScoreListRequest::CopyFrom(const GetItemScoreListRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetItemScoreListRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void GetItemScoreListRequest::Swap(GetItemScoreListRequest* other) {
  if (other != this) {
    std::swap(item_id_, other->item_id_);
    std::swap(size_, other->size_);
    std::swap(offset_index_, other->offset_index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string GetItemScoreListRequest::GetTypeName() const {
  return "weizhu.discover_v2.GetItemScoreListRequest";
}


// ===================================================================

#ifndef _MSC_VER
const int GetItemScoreListResponse::kItemScoreFieldNumber;
const int GetItemScoreListResponse::kHasMoreFieldNumber;
const int GetItemScoreListResponse::kOffsetIndexFieldNumber;
const int GetItemScoreListResponse::kItemScoreNumberFieldNumber;
const int GetItemScoreListResponse::kItemScoreUserCntFieldNumber;
const int GetItemScoreListResponse::kUserItemScoreFieldNumber;
#endif  // !_MSC_VER

GetItemScoreListResponse::GetItemScoreListResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:weizhu.discover_v2.GetItemScoreListResponse)
}

void GetItemScoreListResponse::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  user_item_score_ = const_cast< ::weizhu::discover_v2::ItemScore*>(
      ::weizhu::discover_v2::ItemScore::internal_default_instance());
#else
  user_item_score_ = const_cast< ::weizhu::discover_v2::ItemScore*>(&::weizhu::discover_v2::ItemScore::default_instance());
#endif
}

GetItemScoreListResponse::GetItemScoreListResponse(const GetItemScoreListResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:weizhu.discover_v2.GetItemScoreListResponse)
}

void GetItemScoreListResponse::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  has_more_ = false;
  offset_index_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  item_score_number_ = 0;
  item_score_user_cnt_ = 0;
  user_item_score_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetItemScoreListResponse::~GetItemScoreListResponse() {
  // @@protoc_insertion_point(destructor:weizhu.discover_v2.GetItemScoreListResponse)
  SharedDtor();
}

void GetItemScoreListResponse::SharedDtor() {
  if (offset_index_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete offset_index_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete user_item_score_;
  }
}

void GetItemScoreListResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GetItemScoreListResponse& GetItemScoreListResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_discover_5fv2_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_discover_5fv2_2eproto();
#endif
  return *default_instance_;
}

GetItemScoreListResponse* GetItemScoreListResponse::default_instance_ = NULL;

GetItemScoreListResponse* GetItemScoreListResponse::New() const {
  return new GetItemScoreListResponse;
}

void GetItemScoreListResponse::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GetItemScoreListResponse*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 62) {
    ZR_(has_more_, item_score_number_);
    if (has_offset_index()) {
      if (offset_index_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        offset_index_->clear();
      }
    }
    item_score_user_cnt_ = 0;
    if (has_user_item_score()) {
      if (user_item_score_ != NULL) user_item_score_->::weizhu::discover_v2::ItemScore::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  item_score_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool GetItemScoreListResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:weizhu.discover_v2.GetItemScoreListResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .weizhu.discover_v2.ItemScore item_score = 1;
      case 1: {
        if (tag == 10) {
         parse_item_score:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_item_score()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_item_score;
        if (input->ExpectTag(16)) goto parse_has_more;
        break;
      }

      // required bool has_more = 2;
      case 2: {
        if (tag == 16) {
         parse_has_more:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &has_more_)));
          set_has_has_more();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_offset_index;
        break;
      }

      // required bytes offset_index = 3;
      case 3: {
        if (tag == 26) {
         parse_offset_index:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_offset_index()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_item_score_number;
        break;
      }

      // optional int32 item_score_number = 4;
      case 4: {
        if (tag == 32) {
         parse_item_score_number:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &item_score_number_)));
          set_has_item_score_number();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_item_score_user_cnt;
        break;
      }

      // optional int32 item_score_user_cnt = 5;
      case 5: {
        if (tag == 40) {
         parse_item_score_user_cnt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &item_score_user_cnt_)));
          set_has_item_score_user_cnt();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_user_item_score;
        break;
      }

      // optional .weizhu.discover_v2.ItemScore user_item_score = 6;
      case 6: {
        if (tag == 50) {
         parse_user_item_score:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_user_item_score()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:weizhu.discover_v2.GetItemScoreListResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:weizhu.discover_v2.GetItemScoreListResponse)
  return false;
#undef DO_
}

void GetItemScoreListResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:weizhu.discover_v2.GetItemScoreListResponse)
  // repeated .weizhu.discover_v2.ItemScore item_score = 1;
  for (int i = 0; i < this->item_score_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->item_score(i), output);
  }

  // required bool has_more = 2;
  if (has_has_more()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->has_more(), output);
  }

  // required bytes offset_index = 3;
  if (has_offset_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->offset_index(), output);
  }

  // optional int32 item_score_number = 4;
  if (has_item_score_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->item_score_number(), output);
  }

  // optional int32 item_score_user_cnt = 5;
  if (has_item_score_user_cnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->item_score_user_cnt(), output);
  }

  // optional .weizhu.discover_v2.ItemScore user_item_score = 6;
  if (has_user_item_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      6, this->user_item_score(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:weizhu.discover_v2.GetItemScoreListResponse)
}

int GetItemScoreListResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // required bool has_more = 2;
    if (has_has_more()) {
      total_size += 1 + 1;
    }

    // required bytes offset_index = 3;
    if (has_offset_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->offset_index());
    }

    // optional int32 item_score_number = 4;
    if (has_item_score_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->item_score_number());
    }

    // optional int32 item_score_user_cnt = 5;
    if (has_item_score_user_cnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->item_score_user_cnt());
    }

    // optional .weizhu.discover_v2.ItemScore user_item_score = 6;
    if (has_user_item_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->user_item_score());
    }

  }
  // repeated .weizhu.discover_v2.ItemScore item_score = 1;
  total_size += 1 * this->item_score_size();
  for (int i = 0; i < this->item_score_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->item_score(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetItemScoreListResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GetItemScoreListResponse*>(&from));
}

void GetItemScoreListResponse::MergeFrom(const GetItemScoreListResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  item_score_.MergeFrom(from.item_score_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_has_more()) {
      set_has_more(from.has_more());
    }
    if (from.has_offset_index()) {
      set_offset_index(from.offset_index());
    }
    if (from.has_item_score_number()) {
      set_item_score_number(from.item_score_number());
    }
    if (from.has_item_score_user_cnt()) {
      set_item_score_user_cnt(from.item_score_user_cnt());
    }
    if (from.has_user_item_score()) {
      mutable_user_item_score()->::weizhu::discover_v2::ItemScore::MergeFrom(from.user_item_score());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void GetItemScoreListResponse::CopyFrom(const GetItemScoreListResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetItemScoreListResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000006) != 0x00000006) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->item_score())) return false;
  if (has_user_item_score()) {
    if (!this->user_item_score().IsInitialized()) return false;
  }
  return true;
}

void GetItemScoreListResponse::Swap(GetItemScoreListResponse* other) {
  if (other != this) {
    item_score_.Swap(&other->item_score_);
    std::swap(has_more_, other->has_more_);
    std::swap(offset_index_, other->offset_index_);
    std::swap(item_score_number_, other->item_score_number_);
    std::swap(item_score_user_cnt_, other->item_score_user_cnt_);
    std::swap(user_item_score_, other->user_item_score_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string GetItemScoreListResponse::GetTypeName() const {
  return "weizhu.discover_v2.GetItemScoreListResponse";
}


// ===================================================================

#ifndef _MSC_VER
const int GetUserScoreListRequest::kUserIdFieldNumber;
const int GetUserScoreListRequest::kSizeFieldNumber;
const int GetUserScoreListRequest::kOffsetIndexFieldNumber;
#endif  // !_MSC_VER

GetUserScoreListRequest::GetUserScoreListRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:weizhu.discover_v2.GetUserScoreListRequest)
}

void GetUserScoreListRequest::InitAsDefaultInstance() {
}

GetUserScoreListRequest::GetUserScoreListRequest(const GetUserScoreListRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:weizhu.discover_v2.GetUserScoreListRequest)
}

void GetUserScoreListRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  user_id_ = GOOGLE_LONGLONG(0);
  size_ = 0;
  offset_index_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetUserScoreListRequest::~GetUserScoreListRequest() {
  // @@protoc_insertion_point(destructor:weizhu.discover_v2.GetUserScoreListRequest)
  SharedDtor();
}

void GetUserScoreListRequest::SharedDtor() {
  if (offset_index_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete offset_index_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void GetUserScoreListRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GetUserScoreListRequest& GetUserScoreListRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_discover_5fv2_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_discover_5fv2_2eproto();
#endif
  return *default_instance_;
}

GetUserScoreListRequest* GetUserScoreListRequest::default_instance_ = NULL;

GetUserScoreListRequest* GetUserScoreListRequest::New() const {
  return new GetUserScoreListRequest;
}

void GetUserScoreListRequest::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    user_id_ = GOOGLE_LONGLONG(0);
    size_ = 0;
    if (has_offset_index()) {
      if (offset_index_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        offset_index_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool GetUserScoreListRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:weizhu.discover_v2.GetUserScoreListRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 user_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_size;
        break;
      }

      // required int32 size = 2;
      case 2: {
        if (tag == 16) {
         parse_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &size_)));
          set_has_size();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_offset_index;
        break;
      }

      // optional bytes offset_index = 3;
      case 3: {
        if (tag == 26) {
         parse_offset_index:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_offset_index()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:weizhu.discover_v2.GetUserScoreListRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:weizhu.discover_v2.GetUserScoreListRequest)
  return false;
#undef DO_
}

void GetUserScoreListRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:weizhu.discover_v2.GetUserScoreListRequest)
  // required int64 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->user_id(), output);
  }

  // required int32 size = 2;
  if (has_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->size(), output);
  }

  // optional bytes offset_index = 3;
  if (has_offset_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->offset_index(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:weizhu.discover_v2.GetUserScoreListRequest)
}

int GetUserScoreListRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->user_id());
    }

    // required int32 size = 2;
    if (has_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->size());
    }

    // optional bytes offset_index = 3;
    if (has_offset_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->offset_index());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetUserScoreListRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GetUserScoreListRequest*>(&from));
}

void GetUserScoreListRequest::MergeFrom(const GetUserScoreListRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_size()) {
      set_size(from.size());
    }
    if (from.has_offset_index()) {
      set_offset_index(from.offset_index());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void GetUserScoreListRequest::CopyFrom(const GetUserScoreListRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetUserScoreListRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void GetUserScoreListRequest::Swap(GetUserScoreListRequest* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(size_, other->size_);
    std::swap(offset_index_, other->offset_index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string GetUserScoreListRequest::GetTypeName() const {
  return "weizhu.discover_v2.GetUserScoreListRequest";
}


// ===================================================================

#ifndef _MSC_VER
const int GetUserScoreListResponse::kItemScoreFieldNumber;
const int GetUserScoreListResponse::kHasMoreFieldNumber;
const int GetUserScoreListResponse::kOffsetIndexFieldNumber;
const int GetUserScoreListResponse::kRefItemFieldNumber;
#endif  // !_MSC_VER

GetUserScoreListResponse::GetUserScoreListResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:weizhu.discover_v2.GetUserScoreListResponse)
}

void GetUserScoreListResponse::InitAsDefaultInstance() {
}

GetUserScoreListResponse::GetUserScoreListResponse(const GetUserScoreListResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:weizhu.discover_v2.GetUserScoreListResponse)
}

void GetUserScoreListResponse::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  has_more_ = false;
  offset_index_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetUserScoreListResponse::~GetUserScoreListResponse() {
  // @@protoc_insertion_point(destructor:weizhu.discover_v2.GetUserScoreListResponse)
  SharedDtor();
}

void GetUserScoreListResponse::SharedDtor() {
  if (offset_index_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete offset_index_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void GetUserScoreListResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GetUserScoreListResponse& GetUserScoreListResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_discover_5fv2_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_discover_5fv2_2eproto();
#endif
  return *default_instance_;
}

GetUserScoreListResponse* GetUserScoreListResponse::default_instance_ = NULL;

GetUserScoreListResponse* GetUserScoreListResponse::New() const {
  return new GetUserScoreListResponse;
}

void GetUserScoreListResponse::Clear() {
  if (_has_bits_[0 / 32] & 6) {
    has_more_ = false;
    if (has_offset_index()) {
      if (offset_index_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        offset_index_->clear();
      }
    }
  }
  item_score_.Clear();
  ref_item_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool GetUserScoreListResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:weizhu.discover_v2.GetUserScoreListResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .weizhu.discover_v2.ItemScore item_score = 1;
      case 1: {
        if (tag == 10) {
         parse_item_score:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_item_score()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_item_score;
        if (input->ExpectTag(16)) goto parse_has_more;
        break;
      }

      // required bool has_more = 2;
      case 2: {
        if (tag == 16) {
         parse_has_more:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &has_more_)));
          set_has_has_more();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_offset_index;
        break;
      }

      // required bytes offset_index = 3;
      case 3: {
        if (tag == 26) {
         parse_offset_index:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_offset_index()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_ref_item;
        break;
      }

      // repeated .weizhu.discover_v2.Item ref_item = 4;
      case 4: {
        if (tag == 34) {
         parse_ref_item:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_ref_item()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_ref_item;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:weizhu.discover_v2.GetUserScoreListResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:weizhu.discover_v2.GetUserScoreListResponse)
  return false;
#undef DO_
}

void GetUserScoreListResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:weizhu.discover_v2.GetUserScoreListResponse)
  // repeated .weizhu.discover_v2.ItemScore item_score = 1;
  for (int i = 0; i < this->item_score_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->item_score(i), output);
  }

  // required bool has_more = 2;
  if (has_has_more()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->has_more(), output);
  }

  // required bytes offset_index = 3;
  if (has_offset_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->offset_index(), output);
  }

  // repeated .weizhu.discover_v2.Item ref_item = 4;
  for (int i = 0; i < this->ref_item_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, this->ref_item(i), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:weizhu.discover_v2.GetUserScoreListResponse)
}

int GetUserScoreListResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // required bool has_more = 2;
    if (has_has_more()) {
      total_size += 1 + 1;
    }

    // required bytes offset_index = 3;
    if (has_offset_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->offset_index());
    }

  }
  // repeated .weizhu.discover_v2.ItemScore item_score = 1;
  total_size += 1 * this->item_score_size();
  for (int i = 0; i < this->item_score_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->item_score(i));
  }

  // repeated .weizhu.discover_v2.Item ref_item = 4;
  total_size += 1 * this->ref_item_size();
  for (int i = 0; i < this->ref_item_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->ref_item(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetUserScoreListResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GetUserScoreListResponse*>(&from));
}

void GetUserScoreListResponse::MergeFrom(const GetUserScoreListResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  item_score_.MergeFrom(from.item_score_);
  ref_item_.MergeFrom(from.ref_item_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_has_more()) {
      set_has_more(from.has_more());
    }
    if (from.has_offset_index()) {
      set_offset_index(from.offset_index());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void GetUserScoreListResponse::CopyFrom(const GetUserScoreListResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetUserScoreListResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000006) != 0x00000006) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->item_score())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->ref_item())) return false;
  return true;
}

void GetUserScoreListResponse::Swap(GetUserScoreListResponse* other) {
  if (other != this) {
    item_score_.Swap(&other->item_score_);
    std::swap(has_more_, other->has_more_);
    std::swap(offset_index_, other->offset_index_);
    ref_item_.Swap(&other->ref_item_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string GetUserScoreListResponse::GetTypeName() const {
  return "weizhu.discover_v2.GetUserScoreListResponse";
}


// ===================================================================

#ifndef _MSC_VER
const int GetItemLikeListRequest::kItemIdFieldNumber;
const int GetItemLikeListRequest::kSizeFieldNumber;
const int GetItemLikeListRequest::kOffsetIndexFieldNumber;
#endif  // !_MSC_VER

GetItemLikeListRequest::GetItemLikeListRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:weizhu.discover_v2.GetItemLikeListRequest)
}

void GetItemLikeListRequest::InitAsDefaultInstance() {
}

GetItemLikeListRequest::GetItemLikeListRequest(const GetItemLikeListRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:weizhu.discover_v2.GetItemLikeListRequest)
}

void GetItemLikeListRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  item_id_ = GOOGLE_LONGLONG(0);
  size_ = 0;
  offset_index_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetItemLikeListRequest::~GetItemLikeListRequest() {
  // @@protoc_insertion_point(destructor:weizhu.discover_v2.GetItemLikeListRequest)
  SharedDtor();
}

void GetItemLikeListRequest::SharedDtor() {
  if (offset_index_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete offset_index_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void GetItemLikeListRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GetItemLikeListRequest& GetItemLikeListRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_discover_5fv2_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_discover_5fv2_2eproto();
#endif
  return *default_instance_;
}

GetItemLikeListRequest* GetItemLikeListRequest::default_instance_ = NULL;

GetItemLikeListRequest* GetItemLikeListRequest::New() const {
  return new GetItemLikeListRequest;
}

void GetItemLikeListRequest::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    item_id_ = GOOGLE_LONGLONG(0);
    size_ = 0;
    if (has_offset_index()) {
      if (offset_index_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        offset_index_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool GetItemLikeListRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:weizhu.discover_v2.GetItemLikeListRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 item_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &item_id_)));
          set_has_item_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_size;
        break;
      }

      // required int32 size = 2;
      case 2: {
        if (tag == 16) {
         parse_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &size_)));
          set_has_size();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_offset_index;
        break;
      }

      // optional bytes offset_index = 3;
      case 3: {
        if (tag == 26) {
         parse_offset_index:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_offset_index()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:weizhu.discover_v2.GetItemLikeListRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:weizhu.discover_v2.GetItemLikeListRequest)
  return false;
#undef DO_
}

void GetItemLikeListRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:weizhu.discover_v2.GetItemLikeListRequest)
  // required int64 item_id = 1;
  if (has_item_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->item_id(), output);
  }

  // required int32 size = 2;
  if (has_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->size(), output);
  }

  // optional bytes offset_index = 3;
  if (has_offset_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->offset_index(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:weizhu.discover_v2.GetItemLikeListRequest)
}

int GetItemLikeListRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 item_id = 1;
    if (has_item_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->item_id());
    }

    // required int32 size = 2;
    if (has_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->size());
    }

    // optional bytes offset_index = 3;
    if (has_offset_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->offset_index());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetItemLikeListRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GetItemLikeListRequest*>(&from));
}

void GetItemLikeListRequest::MergeFrom(const GetItemLikeListRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_item_id()) {
      set_item_id(from.item_id());
    }
    if (from.has_size()) {
      set_size(from.size());
    }
    if (from.has_offset_index()) {
      set_offset_index(from.offset_index());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void GetItemLikeListRequest::CopyFrom(const GetItemLikeListRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetItemLikeListRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void GetItemLikeListRequest::Swap(GetItemLikeListRequest* other) {
  if (other != this) {
    std::swap(item_id_, other->item_id_);
    std::swap(size_, other->size_);
    std::swap(offset_index_, other->offset_index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string GetItemLikeListRequest::GetTypeName() const {
  return "weizhu.discover_v2.GetItemLikeListRequest";
}


// ===================================================================

#ifndef _MSC_VER
const int GetItemLikeListResponse::kItemLikeFieldNumber;
const int GetItemLikeListResponse::kHasMoreFieldNumber;
const int GetItemLikeListResponse::kOffsetIndexFieldNumber;
const int GetItemLikeListResponse::kItemLikeCntFieldNumber;
const int GetItemLikeListResponse::kUserItemLikeFieldNumber;
#endif  // !_MSC_VER

GetItemLikeListResponse::GetItemLikeListResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:weizhu.discover_v2.GetItemLikeListResponse)
}

void GetItemLikeListResponse::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  user_item_like_ = const_cast< ::weizhu::discover_v2::ItemLike*>(
      ::weizhu::discover_v2::ItemLike::internal_default_instance());
#else
  user_item_like_ = const_cast< ::weizhu::discover_v2::ItemLike*>(&::weizhu::discover_v2::ItemLike::default_instance());
#endif
}

GetItemLikeListResponse::GetItemLikeListResponse(const GetItemLikeListResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:weizhu.discover_v2.GetItemLikeListResponse)
}

void GetItemLikeListResponse::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  has_more_ = false;
  offset_index_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  item_like_cnt_ = 0;
  user_item_like_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetItemLikeListResponse::~GetItemLikeListResponse() {
  // @@protoc_insertion_point(destructor:weizhu.discover_v2.GetItemLikeListResponse)
  SharedDtor();
}

void GetItemLikeListResponse::SharedDtor() {
  if (offset_index_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete offset_index_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete user_item_like_;
  }
}

void GetItemLikeListResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GetItemLikeListResponse& GetItemLikeListResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_discover_5fv2_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_discover_5fv2_2eproto();
#endif
  return *default_instance_;
}

GetItemLikeListResponse* GetItemLikeListResponse::default_instance_ = NULL;

GetItemLikeListResponse* GetItemLikeListResponse::New() const {
  return new GetItemLikeListResponse;
}

void GetItemLikeListResponse::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GetItemLikeListResponse*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 30) {
    ZR_(has_more_, item_like_cnt_);
    if (has_offset_index()) {
      if (offset_index_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        offset_index_->clear();
      }
    }
    if (has_user_item_like()) {
      if (user_item_like_ != NULL) user_item_like_->::weizhu::discover_v2::ItemLike::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  item_like_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool GetItemLikeListResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:weizhu.discover_v2.GetItemLikeListResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .weizhu.discover_v2.ItemLike item_like = 1;
      case 1: {
        if (tag == 10) {
         parse_item_like:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_item_like()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_item_like;
        if (input->ExpectTag(16)) goto parse_has_more;
        break;
      }

      // required bool has_more = 2;
      case 2: {
        if (tag == 16) {
         parse_has_more:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &has_more_)));
          set_has_has_more();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_offset_index;
        break;
      }

      // required bytes offset_index = 3;
      case 3: {
        if (tag == 26) {
         parse_offset_index:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_offset_index()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_item_like_cnt;
        break;
      }

      // optional int32 item_like_cnt = 4;
      case 4: {
        if (tag == 32) {
         parse_item_like_cnt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &item_like_cnt_)));
          set_has_item_like_cnt();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_user_item_like;
        break;
      }

      // optional .weizhu.discover_v2.ItemLike user_item_like = 5;
      case 5: {
        if (tag == 42) {
         parse_user_item_like:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_user_item_like()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:weizhu.discover_v2.GetItemLikeListResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:weizhu.discover_v2.GetItemLikeListResponse)
  return false;
#undef DO_
}

void GetItemLikeListResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:weizhu.discover_v2.GetItemLikeListResponse)
  // repeated .weizhu.discover_v2.ItemLike item_like = 1;
  for (int i = 0; i < this->item_like_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->item_like(i), output);
  }

  // required bool has_more = 2;
  if (has_has_more()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->has_more(), output);
  }

  // required bytes offset_index = 3;
  if (has_offset_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->offset_index(), output);
  }

  // optional int32 item_like_cnt = 4;
  if (has_item_like_cnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->item_like_cnt(), output);
  }

  // optional .weizhu.discover_v2.ItemLike user_item_like = 5;
  if (has_user_item_like()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      5, this->user_item_like(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:weizhu.discover_v2.GetItemLikeListResponse)
}

int GetItemLikeListResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // required bool has_more = 2;
    if (has_has_more()) {
      total_size += 1 + 1;
    }

    // required bytes offset_index = 3;
    if (has_offset_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->offset_index());
    }

    // optional int32 item_like_cnt = 4;
    if (has_item_like_cnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->item_like_cnt());
    }

    // optional .weizhu.discover_v2.ItemLike user_item_like = 5;
    if (has_user_item_like()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->user_item_like());
    }

  }
  // repeated .weizhu.discover_v2.ItemLike item_like = 1;
  total_size += 1 * this->item_like_size();
  for (int i = 0; i < this->item_like_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->item_like(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetItemLikeListResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GetItemLikeListResponse*>(&from));
}

void GetItemLikeListResponse::MergeFrom(const GetItemLikeListResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  item_like_.MergeFrom(from.item_like_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_has_more()) {
      set_has_more(from.has_more());
    }
    if (from.has_offset_index()) {
      set_offset_index(from.offset_index());
    }
    if (from.has_item_like_cnt()) {
      set_item_like_cnt(from.item_like_cnt());
    }
    if (from.has_user_item_like()) {
      mutable_user_item_like()->::weizhu::discover_v2::ItemLike::MergeFrom(from.user_item_like());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void GetItemLikeListResponse::CopyFrom(const GetItemLikeListResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetItemLikeListResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000006) != 0x00000006) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->item_like())) return false;
  if (has_user_item_like()) {
    if (!this->user_item_like().IsInitialized()) return false;
  }
  return true;
}

void GetItemLikeListResponse::Swap(GetItemLikeListResponse* other) {
  if (other != this) {
    item_like_.Swap(&other->item_like_);
    std::swap(has_more_, other->has_more_);
    std::swap(offset_index_, other->offset_index_);
    std::swap(item_like_cnt_, other->item_like_cnt_);
    std::swap(user_item_like_, other->user_item_like_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string GetItemLikeListResponse::GetTypeName() const {
  return "weizhu.discover_v2.GetItemLikeListResponse";
}


// ===================================================================

#ifndef _MSC_VER
const int GetUserLikeListRequest::kUserIdFieldNumber;
const int GetUserLikeListRequest::kSizeFieldNumber;
const int GetUserLikeListRequest::kOffsetIndexFieldNumber;
#endif  // !_MSC_VER

GetUserLikeListRequest::GetUserLikeListRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:weizhu.discover_v2.GetUserLikeListRequest)
}

void GetUserLikeListRequest::InitAsDefaultInstance() {
}

GetUserLikeListRequest::GetUserLikeListRequest(const GetUserLikeListRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:weizhu.discover_v2.GetUserLikeListRequest)
}

void GetUserLikeListRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  user_id_ = GOOGLE_LONGLONG(0);
  size_ = 0;
  offset_index_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetUserLikeListRequest::~GetUserLikeListRequest() {
  // @@protoc_insertion_point(destructor:weizhu.discover_v2.GetUserLikeListRequest)
  SharedDtor();
}

void GetUserLikeListRequest::SharedDtor() {
  if (offset_index_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete offset_index_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void GetUserLikeListRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GetUserLikeListRequest& GetUserLikeListRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_discover_5fv2_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_discover_5fv2_2eproto();
#endif
  return *default_instance_;
}

GetUserLikeListRequest* GetUserLikeListRequest::default_instance_ = NULL;

GetUserLikeListRequest* GetUserLikeListRequest::New() const {
  return new GetUserLikeListRequest;
}

void GetUserLikeListRequest::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    user_id_ = GOOGLE_LONGLONG(0);
    size_ = 0;
    if (has_offset_index()) {
      if (offset_index_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        offset_index_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool GetUserLikeListRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:weizhu.discover_v2.GetUserLikeListRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 user_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_size;
        break;
      }

      // required int32 size = 2;
      case 2: {
        if (tag == 16) {
         parse_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &size_)));
          set_has_size();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_offset_index;
        break;
      }

      // optional bytes offset_index = 3;
      case 3: {
        if (tag == 26) {
         parse_offset_index:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_offset_index()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:weizhu.discover_v2.GetUserLikeListRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:weizhu.discover_v2.GetUserLikeListRequest)
  return false;
#undef DO_
}

void GetUserLikeListRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:weizhu.discover_v2.GetUserLikeListRequest)
  // required int64 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->user_id(), output);
  }

  // required int32 size = 2;
  if (has_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->size(), output);
  }

  // optional bytes offset_index = 3;
  if (has_offset_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->offset_index(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:weizhu.discover_v2.GetUserLikeListRequest)
}

int GetUserLikeListRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->user_id());
    }

    // required int32 size = 2;
    if (has_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->size());
    }

    // optional bytes offset_index = 3;
    if (has_offset_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->offset_index());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetUserLikeListRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GetUserLikeListRequest*>(&from));
}

void GetUserLikeListRequest::MergeFrom(const GetUserLikeListRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_size()) {
      set_size(from.size());
    }
    if (from.has_offset_index()) {
      set_offset_index(from.offset_index());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void GetUserLikeListRequest::CopyFrom(const GetUserLikeListRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetUserLikeListRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void GetUserLikeListRequest::Swap(GetUserLikeListRequest* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(size_, other->size_);
    std::swap(offset_index_, other->offset_index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string GetUserLikeListRequest::GetTypeName() const {
  return "weizhu.discover_v2.GetUserLikeListRequest";
}


// ===================================================================

#ifndef _MSC_VER
const int GetUserLikeListResponse::kItemLikeFieldNumber;
const int GetUserLikeListResponse::kHasMoreFieldNumber;
const int GetUserLikeListResponse::kOffsetIndexFieldNumber;
const int GetUserLikeListResponse::kRefItemFieldNumber;
#endif  // !_MSC_VER

GetUserLikeListResponse::GetUserLikeListResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:weizhu.discover_v2.GetUserLikeListResponse)
}

void GetUserLikeListResponse::InitAsDefaultInstance() {
}

GetUserLikeListResponse::GetUserLikeListResponse(const GetUserLikeListResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:weizhu.discover_v2.GetUserLikeListResponse)
}

void GetUserLikeListResponse::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  has_more_ = false;
  offset_index_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetUserLikeListResponse::~GetUserLikeListResponse() {
  // @@protoc_insertion_point(destructor:weizhu.discover_v2.GetUserLikeListResponse)
  SharedDtor();
}

void GetUserLikeListResponse::SharedDtor() {
  if (offset_index_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete offset_index_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void GetUserLikeListResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GetUserLikeListResponse& GetUserLikeListResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_discover_5fv2_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_discover_5fv2_2eproto();
#endif
  return *default_instance_;
}

GetUserLikeListResponse* GetUserLikeListResponse::default_instance_ = NULL;

GetUserLikeListResponse* GetUserLikeListResponse::New() const {
  return new GetUserLikeListResponse;
}

void GetUserLikeListResponse::Clear() {
  if (_has_bits_[0 / 32] & 6) {
    has_more_ = false;
    if (has_offset_index()) {
      if (offset_index_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        offset_index_->clear();
      }
    }
  }
  item_like_.Clear();
  ref_item_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool GetUserLikeListResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:weizhu.discover_v2.GetUserLikeListResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .weizhu.discover_v2.ItemLike item_like = 1;
      case 1: {
        if (tag == 10) {
         parse_item_like:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_item_like()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_item_like;
        if (input->ExpectTag(16)) goto parse_has_more;
        break;
      }

      // required bool has_more = 2;
      case 2: {
        if (tag == 16) {
         parse_has_more:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &has_more_)));
          set_has_has_more();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_offset_index;
        break;
      }

      // required bytes offset_index = 3;
      case 3: {
        if (tag == 26) {
         parse_offset_index:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_offset_index()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_ref_item;
        break;
      }

      // repeated .weizhu.discover_v2.Item ref_item = 4;
      case 4: {
        if (tag == 34) {
         parse_ref_item:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_ref_item()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_ref_item;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:weizhu.discover_v2.GetUserLikeListResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:weizhu.discover_v2.GetUserLikeListResponse)
  return false;
#undef DO_
}

void GetUserLikeListResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:weizhu.discover_v2.GetUserLikeListResponse)
  // repeated .weizhu.discover_v2.ItemLike item_like = 1;
  for (int i = 0; i < this->item_like_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->item_like(i), output);
  }

  // required bool has_more = 2;
  if (has_has_more()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->has_more(), output);
  }

  // required bytes offset_index = 3;
  if (has_offset_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->offset_index(), output);
  }

  // repeated .weizhu.discover_v2.Item ref_item = 4;
  for (int i = 0; i < this->ref_item_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, this->ref_item(i), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:weizhu.discover_v2.GetUserLikeListResponse)
}

int GetUserLikeListResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // required bool has_more = 2;
    if (has_has_more()) {
      total_size += 1 + 1;
    }

    // required bytes offset_index = 3;
    if (has_offset_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->offset_index());
    }

  }
  // repeated .weizhu.discover_v2.ItemLike item_like = 1;
  total_size += 1 * this->item_like_size();
  for (int i = 0; i < this->item_like_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->item_like(i));
  }

  // repeated .weizhu.discover_v2.Item ref_item = 4;
  total_size += 1 * this->ref_item_size();
  for (int i = 0; i < this->ref_item_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->ref_item(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetUserLikeListResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GetUserLikeListResponse*>(&from));
}

void GetUserLikeListResponse::MergeFrom(const GetUserLikeListResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  item_like_.MergeFrom(from.item_like_);
  ref_item_.MergeFrom(from.ref_item_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_has_more()) {
      set_has_more(from.has_more());
    }
    if (from.has_offset_index()) {
      set_offset_index(from.offset_index());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void GetUserLikeListResponse::CopyFrom(const GetUserLikeListResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetUserLikeListResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000006) != 0x00000006) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->item_like())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->ref_item())) return false;
  return true;
}

void GetUserLikeListResponse::Swap(GetUserLikeListResponse* other) {
  if (other != this) {
    item_like_.Swap(&other->item_like_);
    std::swap(has_more_, other->has_more_);
    std::swap(offset_index_, other->offset_index_);
    ref_item_.Swap(&other->ref_item_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string GetUserLikeListResponse::GetTypeName() const {
  return "weizhu.discover_v2.GetUserLikeListResponse";
}


// ===================================================================

#ifndef _MSC_VER
const int GetItemShareListRequest::kItemIdFieldNumber;
const int GetItemShareListRequest::kSizeFieldNumber;
const int GetItemShareListRequest::kOffsetIndexFieldNumber;
#endif  // !_MSC_VER

GetItemShareListRequest::GetItemShareListRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:weizhu.discover_v2.GetItemShareListRequest)
}

void GetItemShareListRequest::InitAsDefaultInstance() {
}

GetItemShareListRequest::GetItemShareListRequest(const GetItemShareListRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:weizhu.discover_v2.GetItemShareListRequest)
}

void GetItemShareListRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  item_id_ = GOOGLE_LONGLONG(0);
  size_ = 0;
  offset_index_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetItemShareListRequest::~GetItemShareListRequest() {
  // @@protoc_insertion_point(destructor:weizhu.discover_v2.GetItemShareListRequest)
  SharedDtor();
}

void GetItemShareListRequest::SharedDtor() {
  if (offset_index_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete offset_index_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void GetItemShareListRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GetItemShareListRequest& GetItemShareListRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_discover_5fv2_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_discover_5fv2_2eproto();
#endif
  return *default_instance_;
}

GetItemShareListRequest* GetItemShareListRequest::default_instance_ = NULL;

GetItemShareListRequest* GetItemShareListRequest::New() const {
  return new GetItemShareListRequest;
}

void GetItemShareListRequest::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    item_id_ = GOOGLE_LONGLONG(0);
    size_ = 0;
    if (has_offset_index()) {
      if (offset_index_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        offset_index_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool GetItemShareListRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:weizhu.discover_v2.GetItemShareListRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 item_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &item_id_)));
          set_has_item_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_size;
        break;
      }

      // required int32 size = 2;
      case 2: {
        if (tag == 16) {
         parse_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &size_)));
          set_has_size();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_offset_index;
        break;
      }

      // optional bytes offset_index = 3;
      case 3: {
        if (tag == 26) {
         parse_offset_index:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_offset_index()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:weizhu.discover_v2.GetItemShareListRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:weizhu.discover_v2.GetItemShareListRequest)
  return false;
#undef DO_
}

void GetItemShareListRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:weizhu.discover_v2.GetItemShareListRequest)
  // required int64 item_id = 1;
  if (has_item_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->item_id(), output);
  }

  // required int32 size = 2;
  if (has_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->size(), output);
  }

  // optional bytes offset_index = 3;
  if (has_offset_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->offset_index(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:weizhu.discover_v2.GetItemShareListRequest)
}

int GetItemShareListRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 item_id = 1;
    if (has_item_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->item_id());
    }

    // required int32 size = 2;
    if (has_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->size());
    }

    // optional bytes offset_index = 3;
    if (has_offset_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->offset_index());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetItemShareListRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GetItemShareListRequest*>(&from));
}

void GetItemShareListRequest::MergeFrom(const GetItemShareListRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_item_id()) {
      set_item_id(from.item_id());
    }
    if (from.has_size()) {
      set_size(from.size());
    }
    if (from.has_offset_index()) {
      set_offset_index(from.offset_index());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void GetItemShareListRequest::CopyFrom(const GetItemShareListRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetItemShareListRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void GetItemShareListRequest::Swap(GetItemShareListRequest* other) {
  if (other != this) {
    std::swap(item_id_, other->item_id_);
    std::swap(size_, other->size_);
    std::swap(offset_index_, other->offset_index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string GetItemShareListRequest::GetTypeName() const {
  return "weizhu.discover_v2.GetItemShareListRequest";
}


// ===================================================================

#ifndef _MSC_VER
const int GetItemShareListResponse::kItemShareFieldNumber;
const int GetItemShareListResponse::kHasMoreFieldNumber;
const int GetItemShareListResponse::kOffsetIndexFieldNumber;
const int GetItemShareListResponse::kItemShareCntFieldNumber;
const int GetItemShareListResponse::kUserItemShareFieldNumber;
#endif  // !_MSC_VER

GetItemShareListResponse::GetItemShareListResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:weizhu.discover_v2.GetItemShareListResponse)
}

void GetItemShareListResponse::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  user_item_share_ = const_cast< ::weizhu::discover_v2::ItemShare*>(
      ::weizhu::discover_v2::ItemShare::internal_default_instance());
#else
  user_item_share_ = const_cast< ::weizhu::discover_v2::ItemShare*>(&::weizhu::discover_v2::ItemShare::default_instance());
#endif
}

GetItemShareListResponse::GetItemShareListResponse(const GetItemShareListResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:weizhu.discover_v2.GetItemShareListResponse)
}

void GetItemShareListResponse::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  has_more_ = false;
  offset_index_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  item_share_cnt_ = 0;
  user_item_share_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetItemShareListResponse::~GetItemShareListResponse() {
  // @@protoc_insertion_point(destructor:weizhu.discover_v2.GetItemShareListResponse)
  SharedDtor();
}

void GetItemShareListResponse::SharedDtor() {
  if (offset_index_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete offset_index_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete user_item_share_;
  }
}

void GetItemShareListResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GetItemShareListResponse& GetItemShareListResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_discover_5fv2_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_discover_5fv2_2eproto();
#endif
  return *default_instance_;
}

GetItemShareListResponse* GetItemShareListResponse::default_instance_ = NULL;

GetItemShareListResponse* GetItemShareListResponse::New() const {
  return new GetItemShareListResponse;
}

void GetItemShareListResponse::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GetItemShareListResponse*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 30) {
    ZR_(has_more_, item_share_cnt_);
    if (has_offset_index()) {
      if (offset_index_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        offset_index_->clear();
      }
    }
    if (has_user_item_share()) {
      if (user_item_share_ != NULL) user_item_share_->::weizhu::discover_v2::ItemShare::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  item_share_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool GetItemShareListResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:weizhu.discover_v2.GetItemShareListResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .weizhu.discover_v2.ItemShare item_share = 1;
      case 1: {
        if (tag == 10) {
         parse_item_share:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_item_share()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_item_share;
        if (input->ExpectTag(16)) goto parse_has_more;
        break;
      }

      // required bool has_more = 2;
      case 2: {
        if (tag == 16) {
         parse_has_more:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &has_more_)));
          set_has_has_more();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_offset_index;
        break;
      }

      // required bytes offset_index = 3;
      case 3: {
        if (tag == 26) {
         parse_offset_index:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_offset_index()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_item_share_cnt;
        break;
      }

      // optional int32 item_share_cnt = 4;
      case 4: {
        if (tag == 32) {
         parse_item_share_cnt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &item_share_cnt_)));
          set_has_item_share_cnt();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_user_item_share;
        break;
      }

      // optional .weizhu.discover_v2.ItemShare user_item_share = 5;
      case 5: {
        if (tag == 42) {
         parse_user_item_share:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_user_item_share()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:weizhu.discover_v2.GetItemShareListResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:weizhu.discover_v2.GetItemShareListResponse)
  return false;
#undef DO_
}

void GetItemShareListResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:weizhu.discover_v2.GetItemShareListResponse)
  // repeated .weizhu.discover_v2.ItemShare item_share = 1;
  for (int i = 0; i < this->item_share_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->item_share(i), output);
  }

  // required bool has_more = 2;
  if (has_has_more()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->has_more(), output);
  }

  // required bytes offset_index = 3;
  if (has_offset_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->offset_index(), output);
  }

  // optional int32 item_share_cnt = 4;
  if (has_item_share_cnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->item_share_cnt(), output);
  }

  // optional .weizhu.discover_v2.ItemShare user_item_share = 5;
  if (has_user_item_share()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      5, this->user_item_share(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:weizhu.discover_v2.GetItemShareListResponse)
}

int GetItemShareListResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // required bool has_more = 2;
    if (has_has_more()) {
      total_size += 1 + 1;
    }

    // required bytes offset_index = 3;
    if (has_offset_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->offset_index());
    }

    // optional int32 item_share_cnt = 4;
    if (has_item_share_cnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->item_share_cnt());
    }

    // optional .weizhu.discover_v2.ItemShare user_item_share = 5;
    if (has_user_item_share()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->user_item_share());
    }

  }
  // repeated .weizhu.discover_v2.ItemShare item_share = 1;
  total_size += 1 * this->item_share_size();
  for (int i = 0; i < this->item_share_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->item_share(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetItemShareListResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GetItemShareListResponse*>(&from));
}

void GetItemShareListResponse::MergeFrom(const GetItemShareListResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  item_share_.MergeFrom(from.item_share_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_has_more()) {
      set_has_more(from.has_more());
    }
    if (from.has_offset_index()) {
      set_offset_index(from.offset_index());
    }
    if (from.has_item_share_cnt()) {
      set_item_share_cnt(from.item_share_cnt());
    }
    if (from.has_user_item_share()) {
      mutable_user_item_share()->::weizhu::discover_v2::ItemShare::MergeFrom(from.user_item_share());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void GetItemShareListResponse::CopyFrom(const GetItemShareListResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetItemShareListResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000006) != 0x00000006) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->item_share())) return false;
  if (has_user_item_share()) {
    if (!this->user_item_share().IsInitialized()) return false;
  }
  return true;
}

void GetItemShareListResponse::Swap(GetItemShareListResponse* other) {
  if (other != this) {
    item_share_.Swap(&other->item_share_);
    std::swap(has_more_, other->has_more_);
    std::swap(offset_index_, other->offset_index_);
    std::swap(item_share_cnt_, other->item_share_cnt_);
    std::swap(user_item_share_, other->user_item_share_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string GetItemShareListResponse::GetTypeName() const {
  return "weizhu.discover_v2.GetItemShareListResponse";
}


// ===================================================================

#ifndef _MSC_VER
const int GetUserShareListRequest::kUserIdFieldNumber;
const int GetUserShareListRequest::kSizeFieldNumber;
const int GetUserShareListRequest::kOffsetIndexFieldNumber;
#endif  // !_MSC_VER

GetUserShareListRequest::GetUserShareListRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:weizhu.discover_v2.GetUserShareListRequest)
}

void GetUserShareListRequest::InitAsDefaultInstance() {
}

GetUserShareListRequest::GetUserShareListRequest(const GetUserShareListRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:weizhu.discover_v2.GetUserShareListRequest)
}

void GetUserShareListRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  user_id_ = GOOGLE_LONGLONG(0);
  size_ = 0;
  offset_index_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetUserShareListRequest::~GetUserShareListRequest() {
  // @@protoc_insertion_point(destructor:weizhu.discover_v2.GetUserShareListRequest)
  SharedDtor();
}

void GetUserShareListRequest::SharedDtor() {
  if (offset_index_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete offset_index_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void GetUserShareListRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GetUserShareListRequest& GetUserShareListRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_discover_5fv2_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_discover_5fv2_2eproto();
#endif
  return *default_instance_;
}

GetUserShareListRequest* GetUserShareListRequest::default_instance_ = NULL;

GetUserShareListRequest* GetUserShareListRequest::New() const {
  return new GetUserShareListRequest;
}

void GetUserShareListRequest::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    user_id_ = GOOGLE_LONGLONG(0);
    size_ = 0;
    if (has_offset_index()) {
      if (offset_index_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        offset_index_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool GetUserShareListRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:weizhu.discover_v2.GetUserShareListRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 user_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_size;
        break;
      }

      // required int32 size = 2;
      case 2: {
        if (tag == 16) {
         parse_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &size_)));
          set_has_size();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_offset_index;
        break;
      }

      // optional bytes offset_index = 3;
      case 3: {
        if (tag == 26) {
         parse_offset_index:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_offset_index()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:weizhu.discover_v2.GetUserShareListRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:weizhu.discover_v2.GetUserShareListRequest)
  return false;
#undef DO_
}

void GetUserShareListRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:weizhu.discover_v2.GetUserShareListRequest)
  // required int64 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->user_id(), output);
  }

  // required int32 size = 2;
  if (has_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->size(), output);
  }

  // optional bytes offset_index = 3;
  if (has_offset_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->offset_index(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:weizhu.discover_v2.GetUserShareListRequest)
}

int GetUserShareListRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->user_id());
    }

    // required int32 size = 2;
    if (has_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->size());
    }

    // optional bytes offset_index = 3;
    if (has_offset_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->offset_index());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetUserShareListRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GetUserShareListRequest*>(&from));
}

void GetUserShareListRequest::MergeFrom(const GetUserShareListRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_size()) {
      set_size(from.size());
    }
    if (from.has_offset_index()) {
      set_offset_index(from.offset_index());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void GetUserShareListRequest::CopyFrom(const GetUserShareListRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetUserShareListRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void GetUserShareListRequest::Swap(GetUserShareListRequest* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(size_, other->size_);
    std::swap(offset_index_, other->offset_index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string GetUserShareListRequest::GetTypeName() const {
  return "weizhu.discover_v2.GetUserShareListRequest";
}


// ===================================================================

#ifndef _MSC_VER
const int GetUserShareListResponse::kItemShareFieldNumber;
const int GetUserShareListResponse::kHasMoreFieldNumber;
const int GetUserShareListResponse::kOffsetIndexFieldNumber;
const int GetUserShareListResponse::kRefItemFieldNumber;
#endif  // !_MSC_VER

GetUserShareListResponse::GetUserShareListResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:weizhu.discover_v2.GetUserShareListResponse)
}

void GetUserShareListResponse::InitAsDefaultInstance() {
}

GetUserShareListResponse::GetUserShareListResponse(const GetUserShareListResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:weizhu.discover_v2.GetUserShareListResponse)
}

void GetUserShareListResponse::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  has_more_ = false;
  offset_index_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetUserShareListResponse::~GetUserShareListResponse() {
  // @@protoc_insertion_point(destructor:weizhu.discover_v2.GetUserShareListResponse)
  SharedDtor();
}

void GetUserShareListResponse::SharedDtor() {
  if (offset_index_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete offset_index_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void GetUserShareListResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GetUserShareListResponse& GetUserShareListResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_discover_5fv2_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_discover_5fv2_2eproto();
#endif
  return *default_instance_;
}

GetUserShareListResponse* GetUserShareListResponse::default_instance_ = NULL;

GetUserShareListResponse* GetUserShareListResponse::New() const {
  return new GetUserShareListResponse;
}

void GetUserShareListResponse::Clear() {
  if (_has_bits_[0 / 32] & 6) {
    has_more_ = false;
    if (has_offset_index()) {
      if (offset_index_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        offset_index_->clear();
      }
    }
  }
  item_share_.Clear();
  ref_item_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool GetUserShareListResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:weizhu.discover_v2.GetUserShareListResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .weizhu.discover_v2.ItemShare item_share = 1;
      case 1: {
        if (tag == 10) {
         parse_item_share:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_item_share()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_item_share;
        if (input->ExpectTag(16)) goto parse_has_more;
        break;
      }

      // required bool has_more = 2;
      case 2: {
        if (tag == 16) {
         parse_has_more:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &has_more_)));
          set_has_has_more();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_offset_index;
        break;
      }

      // required bytes offset_index = 3;
      case 3: {
        if (tag == 26) {
         parse_offset_index:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_offset_index()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_ref_item;
        break;
      }

      // repeated .weizhu.discover_v2.Item ref_item = 4;
      case 4: {
        if (tag == 34) {
         parse_ref_item:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_ref_item()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_ref_item;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:weizhu.discover_v2.GetUserShareListResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:weizhu.discover_v2.GetUserShareListResponse)
  return false;
#undef DO_
}

void GetUserShareListResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:weizhu.discover_v2.GetUserShareListResponse)
  // repeated .weizhu.discover_v2.ItemShare item_share = 1;
  for (int i = 0; i < this->item_share_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->item_share(i), output);
  }

  // required bool has_more = 2;
  if (has_has_more()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->has_more(), output);
  }

  // required bytes offset_index = 3;
  if (has_offset_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->offset_index(), output);
  }

  // repeated .weizhu.discover_v2.Item ref_item = 4;
  for (int i = 0; i < this->ref_item_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, this->ref_item(i), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:weizhu.discover_v2.GetUserShareListResponse)
}

int GetUserShareListResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // required bool has_more = 2;
    if (has_has_more()) {
      total_size += 1 + 1;
    }

    // required bytes offset_index = 3;
    if (has_offset_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->offset_index());
    }

  }
  // repeated .weizhu.discover_v2.ItemShare item_share = 1;
  total_size += 1 * this->item_share_size();
  for (int i = 0; i < this->item_share_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->item_share(i));
  }

  // repeated .weizhu.discover_v2.Item ref_item = 4;
  total_size += 1 * this->ref_item_size();
  for (int i = 0; i < this->ref_item_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->ref_item(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetUserShareListResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GetUserShareListResponse*>(&from));
}

void GetUserShareListResponse::MergeFrom(const GetUserShareListResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  item_share_.MergeFrom(from.item_share_);
  ref_item_.MergeFrom(from.ref_item_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_has_more()) {
      set_has_more(from.has_more());
    }
    if (from.has_offset_index()) {
      set_offset_index(from.offset_index());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void GetUserShareListResponse::CopyFrom(const GetUserShareListResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetUserShareListResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000006) != 0x00000006) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->item_share())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->ref_item())) return false;
  return true;
}

void GetUserShareListResponse::Swap(GetUserShareListResponse* other) {
  if (other != this) {
    item_share_.Swap(&other->item_share_);
    std::swap(has_more_, other->has_more_);
    std::swap(offset_index_, other->offset_index_);
    ref_item_.Swap(&other->ref_item_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string GetUserShareListResponse::GetTypeName() const {
  return "weizhu.discover_v2.GetUserShareListResponse";
}


// ===================================================================

#ifndef _MSC_VER
const int GetUserDiscoverRequest::kUserIdFieldNumber;
#endif  // !_MSC_VER

GetUserDiscoverRequest::GetUserDiscoverRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:weizhu.discover_v2.GetUserDiscoverRequest)
}

void GetUserDiscoverRequest::InitAsDefaultInstance() {
}

GetUserDiscoverRequest::GetUserDiscoverRequest(const GetUserDiscoverRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:weizhu.discover_v2.GetUserDiscoverRequest)
}

void GetUserDiscoverRequest::SharedCtor() {
  _cached_size_ = 0;
  user_id_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetUserDiscoverRequest::~GetUserDiscoverRequest() {
  // @@protoc_insertion_point(destructor:weizhu.discover_v2.GetUserDiscoverRequest)
  SharedDtor();
}

void GetUserDiscoverRequest::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void GetUserDiscoverRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GetUserDiscoverRequest& GetUserDiscoverRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_discover_5fv2_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_discover_5fv2_2eproto();
#endif
  return *default_instance_;
}

GetUserDiscoverRequest* GetUserDiscoverRequest::default_instance_ = NULL;

GetUserDiscoverRequest* GetUserDiscoverRequest::New() const {
  return new GetUserDiscoverRequest;
}

void GetUserDiscoverRequest::Clear() {
  user_id_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool GetUserDiscoverRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:weizhu.discover_v2.GetUserDiscoverRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 user_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:weizhu.discover_v2.GetUserDiscoverRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:weizhu.discover_v2.GetUserDiscoverRequest)
  return false;
#undef DO_
}

void GetUserDiscoverRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:weizhu.discover_v2.GetUserDiscoverRequest)
  // required int64 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->user_id(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:weizhu.discover_v2.GetUserDiscoverRequest)
}

int GetUserDiscoverRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->user_id());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetUserDiscoverRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GetUserDiscoverRequest*>(&from));
}

void GetUserDiscoverRequest::MergeFrom(const GetUserDiscoverRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void GetUserDiscoverRequest::CopyFrom(const GetUserDiscoverRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetUserDiscoverRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GetUserDiscoverRequest::Swap(GetUserDiscoverRequest* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string GetUserDiscoverRequest::GetTypeName() const {
  return "weizhu.discover_v2.GetUserDiscoverRequest";
}


// ===================================================================

#ifndef _MSC_VER
const int GetUserDiscoverResponse::kWeekLearnCntFieldNumber;
const int GetUserDiscoverResponse::kWeekLearnDurationFieldNumber;
const int GetUserDiscoverResponse::kWeekLearnItemCntFieldNumber;
const int GetUserDiscoverResponse::kWeekCommentCntFieldNumber;
const int GetUserDiscoverResponse::kWeekCommentItemCntFieldNumber;
const int GetUserDiscoverResponse::kWeekScoreItemCntFieldNumber;
const int GetUserDiscoverResponse::kWeekLikeItemCntFieldNumber;
const int GetUserDiscoverResponse::kWeekShareItemCntFieldNumber;
#endif  // !_MSC_VER

GetUserDiscoverResponse::GetUserDiscoverResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:weizhu.discover_v2.GetUserDiscoverResponse)
}

void GetUserDiscoverResponse::InitAsDefaultInstance() {
}

GetUserDiscoverResponse::GetUserDiscoverResponse(const GetUserDiscoverResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:weizhu.discover_v2.GetUserDiscoverResponse)
}

void GetUserDiscoverResponse::SharedCtor() {
  _cached_size_ = 0;
  week_learn_cnt_ = 0;
  week_learn_duration_ = 0;
  week_learn_item_cnt_ = 0;
  week_comment_cnt_ = 0;
  week_comment_item_cnt_ = 0;
  week_score_item_cnt_ = 0;
  week_like_item_cnt_ = 0;
  week_share_item_cnt_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetUserDiscoverResponse::~GetUserDiscoverResponse() {
  // @@protoc_insertion_point(destructor:weizhu.discover_v2.GetUserDiscoverResponse)
  SharedDtor();
}

void GetUserDiscoverResponse::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void GetUserDiscoverResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GetUserDiscoverResponse& GetUserDiscoverResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_discover_5fv2_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_discover_5fv2_2eproto();
#endif
  return *default_instance_;
}

GetUserDiscoverResponse* GetUserDiscoverResponse::default_instance_ = NULL;

GetUserDiscoverResponse* GetUserDiscoverResponse::New() const {
  return new GetUserDiscoverResponse;
}

void GetUserDiscoverResponse::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GetUserDiscoverResponse*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(week_learn_cnt_, week_share_item_cnt_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool GetUserDiscoverResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:weizhu.discover_v2.GetUserDiscoverResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 week_learn_cnt = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &week_learn_cnt_)));
          set_has_week_learn_cnt();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_week_learn_duration;
        break;
      }

      // required int32 week_learn_duration = 2;
      case 2: {
        if (tag == 16) {
         parse_week_learn_duration:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &week_learn_duration_)));
          set_has_week_learn_duration();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_week_learn_item_cnt;
        break;
      }

      // required int32 week_learn_item_cnt = 3;
      case 3: {
        if (tag == 24) {
         parse_week_learn_item_cnt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &week_learn_item_cnt_)));
          set_has_week_learn_item_cnt();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_week_comment_cnt;
        break;
      }

      // required int32 week_comment_cnt = 4;
      case 4: {
        if (tag == 32) {
         parse_week_comment_cnt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &week_comment_cnt_)));
          set_has_week_comment_cnt();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_week_comment_item_cnt;
        break;
      }

      // required int32 week_comment_item_cnt = 5;
      case 5: {
        if (tag == 40) {
         parse_week_comment_item_cnt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &week_comment_item_cnt_)));
          set_has_week_comment_item_cnt();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_week_score_item_cnt;
        break;
      }

      // required int32 week_score_item_cnt = 6;
      case 6: {
        if (tag == 48) {
         parse_week_score_item_cnt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &week_score_item_cnt_)));
          set_has_week_score_item_cnt();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_week_like_item_cnt;
        break;
      }

      // required int32 week_like_item_cnt = 7;
      case 7: {
        if (tag == 56) {
         parse_week_like_item_cnt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &week_like_item_cnt_)));
          set_has_week_like_item_cnt();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_week_share_item_cnt;
        break;
      }

      // required int32 week_share_item_cnt = 8;
      case 8: {
        if (tag == 64) {
         parse_week_share_item_cnt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &week_share_item_cnt_)));
          set_has_week_share_item_cnt();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:weizhu.discover_v2.GetUserDiscoverResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:weizhu.discover_v2.GetUserDiscoverResponse)
  return false;
#undef DO_
}

void GetUserDiscoverResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:weizhu.discover_v2.GetUserDiscoverResponse)
  // required int32 week_learn_cnt = 1;
  if (has_week_learn_cnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->week_learn_cnt(), output);
  }

  // required int32 week_learn_duration = 2;
  if (has_week_learn_duration()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->week_learn_duration(), output);
  }

  // required int32 week_learn_item_cnt = 3;
  if (has_week_learn_item_cnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->week_learn_item_cnt(), output);
  }

  // required int32 week_comment_cnt = 4;
  if (has_week_comment_cnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->week_comment_cnt(), output);
  }

  // required int32 week_comment_item_cnt = 5;
  if (has_week_comment_item_cnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->week_comment_item_cnt(), output);
  }

  // required int32 week_score_item_cnt = 6;
  if (has_week_score_item_cnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->week_score_item_cnt(), output);
  }

  // required int32 week_like_item_cnt = 7;
  if (has_week_like_item_cnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->week_like_item_cnt(), output);
  }

  // required int32 week_share_item_cnt = 8;
  if (has_week_share_item_cnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->week_share_item_cnt(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:weizhu.discover_v2.GetUserDiscoverResponse)
}

int GetUserDiscoverResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 week_learn_cnt = 1;
    if (has_week_learn_cnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->week_learn_cnt());
    }

    // required int32 week_learn_duration = 2;
    if (has_week_learn_duration()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->week_learn_duration());
    }

    // required int32 week_learn_item_cnt = 3;
    if (has_week_learn_item_cnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->week_learn_item_cnt());
    }

    // required int32 week_comment_cnt = 4;
    if (has_week_comment_cnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->week_comment_cnt());
    }

    // required int32 week_comment_item_cnt = 5;
    if (has_week_comment_item_cnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->week_comment_item_cnt());
    }

    // required int32 week_score_item_cnt = 6;
    if (has_week_score_item_cnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->week_score_item_cnt());
    }

    // required int32 week_like_item_cnt = 7;
    if (has_week_like_item_cnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->week_like_item_cnt());
    }

    // required int32 week_share_item_cnt = 8;
    if (has_week_share_item_cnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->week_share_item_cnt());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetUserDiscoverResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GetUserDiscoverResponse*>(&from));
}

void GetUserDiscoverResponse::MergeFrom(const GetUserDiscoverResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_week_learn_cnt()) {
      set_week_learn_cnt(from.week_learn_cnt());
    }
    if (from.has_week_learn_duration()) {
      set_week_learn_duration(from.week_learn_duration());
    }
    if (from.has_week_learn_item_cnt()) {
      set_week_learn_item_cnt(from.week_learn_item_cnt());
    }
    if (from.has_week_comment_cnt()) {
      set_week_comment_cnt(from.week_comment_cnt());
    }
    if (from.has_week_comment_item_cnt()) {
      set_week_comment_item_cnt(from.week_comment_item_cnt());
    }
    if (from.has_week_score_item_cnt()) {
      set_week_score_item_cnt(from.week_score_item_cnt());
    }
    if (from.has_week_like_item_cnt()) {
      set_week_like_item_cnt(from.week_like_item_cnt());
    }
    if (from.has_week_share_item_cnt()) {
      set_week_share_item_cnt(from.week_share_item_cnt());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void GetUserDiscoverResponse::CopyFrom(const GetUserDiscoverResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetUserDiscoverResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x000000ff) != 0x000000ff) return false;

  return true;
}

void GetUserDiscoverResponse::Swap(GetUserDiscoverResponse* other) {
  if (other != this) {
    std::swap(week_learn_cnt_, other->week_learn_cnt_);
    std::swap(week_learn_duration_, other->week_learn_duration_);
    std::swap(week_learn_item_cnt_, other->week_learn_item_cnt_);
    std::swap(week_comment_cnt_, other->week_comment_cnt_);
    std::swap(week_comment_item_cnt_, other->week_comment_item_cnt_);
    std::swap(week_score_item_cnt_, other->week_score_item_cnt_);
    std::swap(week_like_item_cnt_, other->week_like_item_cnt_);
    std::swap(week_share_item_cnt_, other->week_share_item_cnt_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string GetUserDiscoverResponse::GetTypeName() const {
  return "weizhu.discover_v2.GetUserDiscoverResponse";
}


// ===================================================================

#ifndef _MSC_VER
const int SearchItemRequest::kKeywordFieldNumber;
#endif  // !_MSC_VER

SearchItemRequest::SearchItemRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:weizhu.discover_v2.SearchItemRequest)
}

void SearchItemRequest::InitAsDefaultInstance() {
}

SearchItemRequest::SearchItemRequest(const SearchItemRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:weizhu.discover_v2.SearchItemRequest)
}

void SearchItemRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  keyword_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SearchItemRequest::~SearchItemRequest() {
  // @@protoc_insertion_point(destructor:weizhu.discover_v2.SearchItemRequest)
  SharedDtor();
}

void SearchItemRequest::SharedDtor() {
  if (keyword_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete keyword_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void SearchItemRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const SearchItemRequest& SearchItemRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_discover_5fv2_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_discover_5fv2_2eproto();
#endif
  return *default_instance_;
}

SearchItemRequest* SearchItemRequest::default_instance_ = NULL;

SearchItemRequest* SearchItemRequest::New() const {
  return new SearchItemRequest;
}

void SearchItemRequest::Clear() {
  if (has_keyword()) {
    if (keyword_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      keyword_->clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool SearchItemRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:weizhu.discover_v2.SearchItemRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string keyword = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_keyword()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:weizhu.discover_v2.SearchItemRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:weizhu.discover_v2.SearchItemRequest)
  return false;
#undef DO_
}

void SearchItemRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:weizhu.discover_v2.SearchItemRequest)
  // required string keyword = 1;
  if (has_keyword()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->keyword(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:weizhu.discover_v2.SearchItemRequest)
}

int SearchItemRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string keyword = 1;
    if (has_keyword()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->keyword());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SearchItemRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const SearchItemRequest*>(&from));
}

void SearchItemRequest::MergeFrom(const SearchItemRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_keyword()) {
      set_keyword(from.keyword());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void SearchItemRequest::CopyFrom(const SearchItemRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SearchItemRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void SearchItemRequest::Swap(SearchItemRequest* other) {
  if (other != this) {
    std::swap(keyword_, other->keyword_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string SearchItemRequest::GetTypeName() const {
  return "weizhu.discover_v2.SearchItemRequest";
}


// ===================================================================

#ifndef _MSC_VER
const int SearchItemResponse::kItemFieldNumber;
#endif  // !_MSC_VER

SearchItemResponse::SearchItemResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:weizhu.discover_v2.SearchItemResponse)
}

void SearchItemResponse::InitAsDefaultInstance() {
}

SearchItemResponse::SearchItemResponse(const SearchItemResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:weizhu.discover_v2.SearchItemResponse)
}

void SearchItemResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SearchItemResponse::~SearchItemResponse() {
  // @@protoc_insertion_point(destructor:weizhu.discover_v2.SearchItemResponse)
  SharedDtor();
}

void SearchItemResponse::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void SearchItemResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const SearchItemResponse& SearchItemResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_discover_5fv2_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_discover_5fv2_2eproto();
#endif
  return *default_instance_;
}

SearchItemResponse* SearchItemResponse::default_instance_ = NULL;

SearchItemResponse* SearchItemResponse::New() const {
  return new SearchItemResponse;
}

void SearchItemResponse::Clear() {
  item_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool SearchItemResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:weizhu.discover_v2.SearchItemResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .weizhu.discover_v2.Item item = 1;
      case 1: {
        if (tag == 10) {
         parse_item:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_item()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_item;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:weizhu.discover_v2.SearchItemResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:weizhu.discover_v2.SearchItemResponse)
  return false;
#undef DO_
}

void SearchItemResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:weizhu.discover_v2.SearchItemResponse)
  // repeated .weizhu.discover_v2.Item item = 1;
  for (int i = 0; i < this->item_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->item(i), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:weizhu.discover_v2.SearchItemResponse)
}

int SearchItemResponse::ByteSize() const {
  int total_size = 0;

  // repeated .weizhu.discover_v2.Item item = 1;
  total_size += 1 * this->item_size();
  for (int i = 0; i < this->item_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->item(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SearchItemResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const SearchItemResponse*>(&from));
}

void SearchItemResponse::MergeFrom(const SearchItemResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  item_.MergeFrom(from.item_);
  mutable_unknown_fields()->append(from.unknown_fields());
}

void SearchItemResponse::CopyFrom(const SearchItemResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SearchItemResponse::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->item())) return false;
  return true;
}

void SearchItemResponse::Swap(SearchItemResponse* other) {
  if (other != this) {
    item_.Swap(&other->item_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string SearchItemResponse::GetTypeName() const {
  return "weizhu.discover_v2.SearchItemResponse";
}


// ===================================================================

#ifndef _MSC_VER
const int GetItemListRequest::kItemSizeFieldNumber;
const int GetItemListRequest::kOffsetIndexFieldNumber;
#endif  // !_MSC_VER

GetItemListRequest::GetItemListRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:weizhu.discover_v2.GetItemListRequest)
}

void GetItemListRequest::InitAsDefaultInstance() {
}

GetItemListRequest::GetItemListRequest(const GetItemListRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:weizhu.discover_v2.GetItemListRequest)
}

void GetItemListRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  item_size_ = 0;
  offset_index_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetItemListRequest::~GetItemListRequest() {
  // @@protoc_insertion_point(destructor:weizhu.discover_v2.GetItemListRequest)
  SharedDtor();
}

void GetItemListRequest::SharedDtor() {
  if (offset_index_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete offset_index_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void GetItemListRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GetItemListRequest& GetItemListRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_discover_5fv2_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_discover_5fv2_2eproto();
#endif
  return *default_instance_;
}

GetItemListRequest* GetItemListRequest::default_instance_ = NULL;

GetItemListRequest* GetItemListRequest::New() const {
  return new GetItemListRequest;
}

void GetItemListRequest::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    item_size_ = 0;
    if (has_offset_index()) {
      if (offset_index_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        offset_index_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool GetItemListRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:weizhu.discover_v2.GetItemListRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 item_size = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &item_size_)));
          set_has_item_size();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_offset_index;
        break;
      }

      // optional bytes offset_index = 2;
      case 2: {
        if (tag == 18) {
         parse_offset_index:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_offset_index()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:weizhu.discover_v2.GetItemListRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:weizhu.discover_v2.GetItemListRequest)
  return false;
#undef DO_
}

void GetItemListRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:weizhu.discover_v2.GetItemListRequest)
  // required int32 item_size = 1;
  if (has_item_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->item_size(), output);
  }

  // optional bytes offset_index = 2;
  if (has_offset_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->offset_index(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:weizhu.discover_v2.GetItemListRequest)
}

int GetItemListRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 item_size = 1;
    if (has_item_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->item_size());
    }

    // optional bytes offset_index = 2;
    if (has_offset_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->offset_index());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetItemListRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GetItemListRequest*>(&from));
}

void GetItemListRequest::MergeFrom(const GetItemListRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_item_size()) {
      set_item_size(from.item_size());
    }
    if (from.has_offset_index()) {
      set_offset_index(from.offset_index());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void GetItemListRequest::CopyFrom(const GetItemListRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetItemListRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GetItemListRequest::Swap(GetItemListRequest* other) {
  if (other != this) {
    std::swap(item_size_, other->item_size_);
    std::swap(offset_index_, other->offset_index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string GetItemListRequest::GetTypeName() const {
  return "weizhu.discover_v2.GetItemListRequest";
}


// ===================================================================

#ifndef _MSC_VER
const int GetItemListResponse::kItemFieldNumber;
const int GetItemListResponse::kHasMoreFieldNumber;
const int GetItemListResponse::kOffsetIndexFieldNumber;
#endif  // !_MSC_VER

GetItemListResponse::GetItemListResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:weizhu.discover_v2.GetItemListResponse)
}

void GetItemListResponse::InitAsDefaultInstance() {
}

GetItemListResponse::GetItemListResponse(const GetItemListResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:weizhu.discover_v2.GetItemListResponse)
}

void GetItemListResponse::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  has_more_ = false;
  offset_index_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetItemListResponse::~GetItemListResponse() {
  // @@protoc_insertion_point(destructor:weizhu.discover_v2.GetItemListResponse)
  SharedDtor();
}

void GetItemListResponse::SharedDtor() {
  if (offset_index_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete offset_index_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void GetItemListResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GetItemListResponse& GetItemListResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_discover_5fv2_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_discover_5fv2_2eproto();
#endif
  return *default_instance_;
}

GetItemListResponse* GetItemListResponse::default_instance_ = NULL;

GetItemListResponse* GetItemListResponse::New() const {
  return new GetItemListResponse;
}

void GetItemListResponse::Clear() {
  if (_has_bits_[0 / 32] & 6) {
    has_more_ = false;
    if (has_offset_index()) {
      if (offset_index_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        offset_index_->clear();
      }
    }
  }
  item_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool GetItemListResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:weizhu.discover_v2.GetItemListResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .weizhu.discover_v2.Item item = 1;
      case 1: {
        if (tag == 10) {
         parse_item:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_item()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_item;
        if (input->ExpectTag(16)) goto parse_has_more;
        break;
      }

      // required bool has_more = 2;
      case 2: {
        if (tag == 16) {
         parse_has_more:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &has_more_)));
          set_has_has_more();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_offset_index;
        break;
      }

      // required bytes offset_index = 3;
      case 3: {
        if (tag == 26) {
         parse_offset_index:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_offset_index()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:weizhu.discover_v2.GetItemListResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:weizhu.discover_v2.GetItemListResponse)
  return false;
#undef DO_
}

void GetItemListResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:weizhu.discover_v2.GetItemListResponse)
  // repeated .weizhu.discover_v2.Item item = 1;
  for (int i = 0; i < this->item_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->item(i), output);
  }

  // required bool has_more = 2;
  if (has_has_more()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->has_more(), output);
  }

  // required bytes offset_index = 3;
  if (has_offset_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->offset_index(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:weizhu.discover_v2.GetItemListResponse)
}

int GetItemListResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // required bool has_more = 2;
    if (has_has_more()) {
      total_size += 1 + 1;
    }

    // required bytes offset_index = 3;
    if (has_offset_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->offset_index());
    }

  }
  // repeated .weizhu.discover_v2.Item item = 1;
  total_size += 1 * this->item_size();
  for (int i = 0; i < this->item_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->item(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetItemListResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GetItemListResponse*>(&from));
}

void GetItemListResponse::MergeFrom(const GetItemListResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  item_.MergeFrom(from.item_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_has_more()) {
      set_has_more(from.has_more());
    }
    if (from.has_offset_index()) {
      set_offset_index(from.offset_index());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void GetItemListResponse::CopyFrom(const GetItemListResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetItemListResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000006) != 0x00000006) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->item())) return false;
  return true;
}

void GetItemListResponse::Swap(GetItemListResponse* other) {
  if (other != this) {
    item_.Swap(&other->item_);
    std::swap(has_more_, other->has_more_);
    std::swap(offset_index_, other->offset_index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string GetItemListResponse::GetTypeName() const {
  return "weizhu.discover_v2.GetItemListResponse";
}


// ===================================================================

#ifndef _MSC_VER
const int LearnItemRequest::kItemIdFieldNumber;
const int LearnItemRequest::kLearnDurationFieldNumber;
#endif  // !_MSC_VER

LearnItemRequest::LearnItemRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:weizhu.discover_v2.LearnItemRequest)
}

void LearnItemRequest::InitAsDefaultInstance() {
}

LearnItemRequest::LearnItemRequest(const LearnItemRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:weizhu.discover_v2.LearnItemRequest)
}

void LearnItemRequest::SharedCtor() {
  _cached_size_ = 0;
  item_id_ = GOOGLE_LONGLONG(0);
  learn_duration_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LearnItemRequest::~LearnItemRequest() {
  // @@protoc_insertion_point(destructor:weizhu.discover_v2.LearnItemRequest)
  SharedDtor();
}

void LearnItemRequest::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void LearnItemRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const LearnItemRequest& LearnItemRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_discover_5fv2_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_discover_5fv2_2eproto();
#endif
  return *default_instance_;
}

LearnItemRequest* LearnItemRequest::default_instance_ = NULL;

LearnItemRequest* LearnItemRequest::New() const {
  return new LearnItemRequest;
}

void LearnItemRequest::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<LearnItemRequest*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(item_id_, learn_duration_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool LearnItemRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:weizhu.discover_v2.LearnItemRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 item_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &item_id_)));
          set_has_item_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_learn_duration;
        break;
      }

      // required int32 learn_duration = 2;
      case 2: {
        if (tag == 16) {
         parse_learn_duration:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &learn_duration_)));
          set_has_learn_duration();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:weizhu.discover_v2.LearnItemRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:weizhu.discover_v2.LearnItemRequest)
  return false;
#undef DO_
}

void LearnItemRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:weizhu.discover_v2.LearnItemRequest)
  // required int64 item_id = 1;
  if (has_item_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->item_id(), output);
  }

  // required int32 learn_duration = 2;
  if (has_learn_duration()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->learn_duration(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:weizhu.discover_v2.LearnItemRequest)
}

int LearnItemRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 item_id = 1;
    if (has_item_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->item_id());
    }

    // required int32 learn_duration = 2;
    if (has_learn_duration()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->learn_duration());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LearnItemRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const LearnItemRequest*>(&from));
}

void LearnItemRequest::MergeFrom(const LearnItemRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_item_id()) {
      set_item_id(from.item_id());
    }
    if (from.has_learn_duration()) {
      set_learn_duration(from.learn_duration());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void LearnItemRequest::CopyFrom(const LearnItemRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LearnItemRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void LearnItemRequest::Swap(LearnItemRequest* other) {
  if (other != this) {
    std::swap(item_id_, other->item_id_);
    std::swap(learn_duration_, other->learn_duration_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string LearnItemRequest::GetTypeName() const {
  return "weizhu.discover_v2.LearnItemRequest";
}


// ===================================================================

bool LearnItemResponse_Result_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 99:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const LearnItemResponse_Result LearnItemResponse::SUCC;
const LearnItemResponse_Result LearnItemResponse::FAIL_DURATION_INVALID;
const LearnItemResponse_Result LearnItemResponse::FAIL_ITEM_NOT_EXSIT;
const LearnItemResponse_Result LearnItemResponse::FAIL_UNKNOWN;
const LearnItemResponse_Result LearnItemResponse::Result_MIN;
const LearnItemResponse_Result LearnItemResponse::Result_MAX;
const int LearnItemResponse::Result_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int LearnItemResponse::kResultFieldNumber;
const int LearnItemResponse::kFailTextFieldNumber;
#endif  // !_MSC_VER

LearnItemResponse::LearnItemResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:weizhu.discover_v2.LearnItemResponse)
}

void LearnItemResponse::InitAsDefaultInstance() {
}

LearnItemResponse::LearnItemResponse(const LearnItemResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:weizhu.discover_v2.LearnItemResponse)
}

void LearnItemResponse::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  result_ = 99;
  fail_text_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LearnItemResponse::~LearnItemResponse() {
  // @@protoc_insertion_point(destructor:weizhu.discover_v2.LearnItemResponse)
  SharedDtor();
}

void LearnItemResponse::SharedDtor() {
  if (fail_text_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete fail_text_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void LearnItemResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const LearnItemResponse& LearnItemResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_discover_5fv2_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_discover_5fv2_2eproto();
#endif
  return *default_instance_;
}

LearnItemResponse* LearnItemResponse::default_instance_ = NULL;

LearnItemResponse* LearnItemResponse::New() const {
  return new LearnItemResponse;
}

void LearnItemResponse::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    result_ = 99;
    if (has_fail_text()) {
      if (fail_text_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        fail_text_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool LearnItemResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:weizhu.discover_v2.LearnItemResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .weizhu.discover_v2.LearnItemResponse.Result result = 1 [default = FAIL_UNKNOWN];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::weizhu::discover_v2::LearnItemResponse_Result_IsValid(value)) {
            set_result(static_cast< ::weizhu::discover_v2::LearnItemResponse_Result >(value));
          } else {
            unknown_fields_stream.WriteVarint32(tag);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_fail_text;
        break;
      }

      // optional string fail_text = 2;
      case 2: {
        if (tag == 18) {
         parse_fail_text:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fail_text()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:weizhu.discover_v2.LearnItemResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:weizhu.discover_v2.LearnItemResponse)
  return false;
#undef DO_
}

void LearnItemResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:weizhu.discover_v2.LearnItemResponse)
  // optional .weizhu.discover_v2.LearnItemResponse.Result result = 1 [default = FAIL_UNKNOWN];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  // optional string fail_text = 2;
  if (has_fail_text()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->fail_text(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:weizhu.discover_v2.LearnItemResponse)
}

int LearnItemResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .weizhu.discover_v2.LearnItemResponse.Result result = 1 [default = FAIL_UNKNOWN];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

    // optional string fail_text = 2;
    if (has_fail_text()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->fail_text());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LearnItemResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const LearnItemResponse*>(&from));
}

void LearnItemResponse::MergeFrom(const LearnItemResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_fail_text()) {
      set_fail_text(from.fail_text());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void LearnItemResponse::CopyFrom(const LearnItemResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LearnItemResponse::IsInitialized() const {

  return true;
}

void LearnItemResponse::Swap(LearnItemResponse* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(fail_text_, other->fail_text_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string LearnItemResponse::GetTypeName() const {
  return "weizhu.discover_v2.LearnItemResponse";
}


// ===================================================================

#ifndef _MSC_VER
const int ReportLearnItemRequest::kItemLearnFieldNumber;
#endif  // !_MSC_VER

ReportLearnItemRequest::ReportLearnItemRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:weizhu.discover_v2.ReportLearnItemRequest)
}

void ReportLearnItemRequest::InitAsDefaultInstance() {
}

ReportLearnItemRequest::ReportLearnItemRequest(const ReportLearnItemRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:weizhu.discover_v2.ReportLearnItemRequest)
}

void ReportLearnItemRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReportLearnItemRequest::~ReportLearnItemRequest() {
  // @@protoc_insertion_point(destructor:weizhu.discover_v2.ReportLearnItemRequest)
  SharedDtor();
}

void ReportLearnItemRequest::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void ReportLearnItemRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ReportLearnItemRequest& ReportLearnItemRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_discover_5fv2_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_discover_5fv2_2eproto();
#endif
  return *default_instance_;
}

ReportLearnItemRequest* ReportLearnItemRequest::default_instance_ = NULL;

ReportLearnItemRequest* ReportLearnItemRequest::New() const {
  return new ReportLearnItemRequest;
}

void ReportLearnItemRequest::Clear() {
  item_learn_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool ReportLearnItemRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:weizhu.discover_v2.ReportLearnItemRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .weizhu.discover_v2.ItemLearn item_learn = 1;
      case 1: {
        if (tag == 10) {
         parse_item_learn:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_item_learn()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_item_learn;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:weizhu.discover_v2.ReportLearnItemRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:weizhu.discover_v2.ReportLearnItemRequest)
  return false;
#undef DO_
}

void ReportLearnItemRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:weizhu.discover_v2.ReportLearnItemRequest)
  // repeated .weizhu.discover_v2.ItemLearn item_learn = 1;
  for (int i = 0; i < this->item_learn_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->item_learn(i), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:weizhu.discover_v2.ReportLearnItemRequest)
}

int ReportLearnItemRequest::ByteSize() const {
  int total_size = 0;

  // repeated .weizhu.discover_v2.ItemLearn item_learn = 1;
  total_size += 1 * this->item_learn_size();
  for (int i = 0; i < this->item_learn_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->item_learn(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReportLearnItemRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ReportLearnItemRequest*>(&from));
}

void ReportLearnItemRequest::MergeFrom(const ReportLearnItemRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  item_learn_.MergeFrom(from.item_learn_);
  mutable_unknown_fields()->append(from.unknown_fields());
}

void ReportLearnItemRequest::CopyFrom(const ReportLearnItemRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReportLearnItemRequest::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->item_learn())) return false;
  return true;
}

void ReportLearnItemRequest::Swap(ReportLearnItemRequest* other) {
  if (other != this) {
    item_learn_.Swap(&other->item_learn_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string ReportLearnItemRequest::GetTypeName() const {
  return "weizhu.discover_v2.ReportLearnItemRequest";
}


// ===================================================================

#ifndef _MSC_VER
const int CommentItemRequest::kItemIdFieldNumber;
const int CommentItemRequest::kCommentTextFieldNumber;
#endif  // !_MSC_VER

CommentItemRequest::CommentItemRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:weizhu.discover_v2.CommentItemRequest)
}

void CommentItemRequest::InitAsDefaultInstance() {
}

CommentItemRequest::CommentItemRequest(const CommentItemRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:weizhu.discover_v2.CommentItemRequest)
}

void CommentItemRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  item_id_ = GOOGLE_LONGLONG(0);
  comment_text_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CommentItemRequest::~CommentItemRequest() {
  // @@protoc_insertion_point(destructor:weizhu.discover_v2.CommentItemRequest)
  SharedDtor();
}

void CommentItemRequest::SharedDtor() {
  if (comment_text_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete comment_text_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CommentItemRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CommentItemRequest& CommentItemRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_discover_5fv2_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_discover_5fv2_2eproto();
#endif
  return *default_instance_;
}

CommentItemRequest* CommentItemRequest::default_instance_ = NULL;

CommentItemRequest* CommentItemRequest::New() const {
  return new CommentItemRequest;
}

void CommentItemRequest::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    item_id_ = GOOGLE_LONGLONG(0);
    if (has_comment_text()) {
      if (comment_text_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        comment_text_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool CommentItemRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:weizhu.discover_v2.CommentItemRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 item_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &item_id_)));
          set_has_item_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_comment_text;
        break;
      }

      // required string comment_text = 2;
      case 2: {
        if (tag == 18) {
         parse_comment_text:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_comment_text()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:weizhu.discover_v2.CommentItemRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:weizhu.discover_v2.CommentItemRequest)
  return false;
#undef DO_
}

void CommentItemRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:weizhu.discover_v2.CommentItemRequest)
  // required int64 item_id = 1;
  if (has_item_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->item_id(), output);
  }

  // required string comment_text = 2;
  if (has_comment_text()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->comment_text(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:weizhu.discover_v2.CommentItemRequest)
}

int CommentItemRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 item_id = 1;
    if (has_item_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->item_id());
    }

    // required string comment_text = 2;
    if (has_comment_text()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->comment_text());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CommentItemRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CommentItemRequest*>(&from));
}

void CommentItemRequest::MergeFrom(const CommentItemRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_item_id()) {
      set_item_id(from.item_id());
    }
    if (from.has_comment_text()) {
      set_comment_text(from.comment_text());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void CommentItemRequest::CopyFrom(const CommentItemRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommentItemRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void CommentItemRequest::Swap(CommentItemRequest* other) {
  if (other != this) {
    std::swap(item_id_, other->item_id_);
    std::swap(comment_text_, other->comment_text_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CommentItemRequest::GetTypeName() const {
  return "weizhu.discover_v2.CommentItemRequest";
}


// ===================================================================

bool CommentItemResponse_Result_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 99:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const CommentItemResponse_Result CommentItemResponse::SUCC;
const CommentItemResponse_Result CommentItemResponse::FAIL_CONTENT_INVALID;
const CommentItemResponse_Result CommentItemResponse::FAIL_ITEM_NOT_EXSIT;
const CommentItemResponse_Result CommentItemResponse::FAIL_ITEM_DISABLE;
const CommentItemResponse_Result CommentItemResponse::FAIL_UNKNOWN;
const CommentItemResponse_Result CommentItemResponse::Result_MIN;
const CommentItemResponse_Result CommentItemResponse::Result_MAX;
const int CommentItemResponse::Result_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int CommentItemResponse::kResultFieldNumber;
const int CommentItemResponse::kFailTextFieldNumber;
const int CommentItemResponse::kCommentIdFieldNumber;
#endif  // !_MSC_VER

CommentItemResponse::CommentItemResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:weizhu.discover_v2.CommentItemResponse)
}

void CommentItemResponse::InitAsDefaultInstance() {
}

CommentItemResponse::CommentItemResponse(const CommentItemResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:weizhu.discover_v2.CommentItemResponse)
}

void CommentItemResponse::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  result_ = 99;
  fail_text_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  comment_id_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CommentItemResponse::~CommentItemResponse() {
  // @@protoc_insertion_point(destructor:weizhu.discover_v2.CommentItemResponse)
  SharedDtor();
}

void CommentItemResponse::SharedDtor() {
  if (fail_text_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete fail_text_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CommentItemResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CommentItemResponse& CommentItemResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_discover_5fv2_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_discover_5fv2_2eproto();
#endif
  return *default_instance_;
}

CommentItemResponse* CommentItemResponse::default_instance_ = NULL;

CommentItemResponse* CommentItemResponse::New() const {
  return new CommentItemResponse;
}

void CommentItemResponse::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    result_ = 99;
    if (has_fail_text()) {
      if (fail_text_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        fail_text_->clear();
      }
    }
    comment_id_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool CommentItemResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:weizhu.discover_v2.CommentItemResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .weizhu.discover_v2.CommentItemResponse.Result result = 1 [default = FAIL_UNKNOWN];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::weizhu::discover_v2::CommentItemResponse_Result_IsValid(value)) {
            set_result(static_cast< ::weizhu::discover_v2::CommentItemResponse_Result >(value));
          } else {
            unknown_fields_stream.WriteVarint32(tag);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_fail_text;
        break;
      }

      // optional string fail_text = 2;
      case 2: {
        if (tag == 18) {
         parse_fail_text:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fail_text()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_comment_id;
        break;
      }

      // optional int64 comment_id = 3;
      case 3: {
        if (tag == 24) {
         parse_comment_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &comment_id_)));
          set_has_comment_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:weizhu.discover_v2.CommentItemResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:weizhu.discover_v2.CommentItemResponse)
  return false;
#undef DO_
}

void CommentItemResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:weizhu.discover_v2.CommentItemResponse)
  // optional .weizhu.discover_v2.CommentItemResponse.Result result = 1 [default = FAIL_UNKNOWN];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  // optional string fail_text = 2;
  if (has_fail_text()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->fail_text(), output);
  }

  // optional int64 comment_id = 3;
  if (has_comment_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->comment_id(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:weizhu.discover_v2.CommentItemResponse)
}

int CommentItemResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .weizhu.discover_v2.CommentItemResponse.Result result = 1 [default = FAIL_UNKNOWN];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

    // optional string fail_text = 2;
    if (has_fail_text()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->fail_text());
    }

    // optional int64 comment_id = 3;
    if (has_comment_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->comment_id());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CommentItemResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CommentItemResponse*>(&from));
}

void CommentItemResponse::MergeFrom(const CommentItemResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_fail_text()) {
      set_fail_text(from.fail_text());
    }
    if (from.has_comment_id()) {
      set_comment_id(from.comment_id());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void CommentItemResponse::CopyFrom(const CommentItemResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommentItemResponse::IsInitialized() const {

  return true;
}

void CommentItemResponse::Swap(CommentItemResponse* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(fail_text_, other->fail_text_);
    std::swap(comment_id_, other->comment_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CommentItemResponse::GetTypeName() const {
  return "weizhu.discover_v2.CommentItemResponse";
}


// ===================================================================

#ifndef _MSC_VER
const int DeleteCommentRequest::kItemIdFieldNumber;
const int DeleteCommentRequest::kCommentIdFieldNumber;
#endif  // !_MSC_VER

DeleteCommentRequest::DeleteCommentRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:weizhu.discover_v2.DeleteCommentRequest)
}

void DeleteCommentRequest::InitAsDefaultInstance() {
}

DeleteCommentRequest::DeleteCommentRequest(const DeleteCommentRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:weizhu.discover_v2.DeleteCommentRequest)
}

void DeleteCommentRequest::SharedCtor() {
  _cached_size_ = 0;
  item_id_ = GOOGLE_LONGLONG(0);
  comment_id_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DeleteCommentRequest::~DeleteCommentRequest() {
  // @@protoc_insertion_point(destructor:weizhu.discover_v2.DeleteCommentRequest)
  SharedDtor();
}

void DeleteCommentRequest::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void DeleteCommentRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const DeleteCommentRequest& DeleteCommentRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_discover_5fv2_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_discover_5fv2_2eproto();
#endif
  return *default_instance_;
}

DeleteCommentRequest* DeleteCommentRequest::default_instance_ = NULL;

DeleteCommentRequest* DeleteCommentRequest::New() const {
  return new DeleteCommentRequest;
}

void DeleteCommentRequest::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<DeleteCommentRequest*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(item_id_, comment_id_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool DeleteCommentRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:weizhu.discover_v2.DeleteCommentRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 item_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &item_id_)));
          set_has_item_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_comment_id;
        break;
      }

      // required int64 comment_id = 2;
      case 2: {
        if (tag == 16) {
         parse_comment_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &comment_id_)));
          set_has_comment_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:weizhu.discover_v2.DeleteCommentRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:weizhu.discover_v2.DeleteCommentRequest)
  return false;
#undef DO_
}

void DeleteCommentRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:weizhu.discover_v2.DeleteCommentRequest)
  // required int64 item_id = 1;
  if (has_item_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->item_id(), output);
  }

  // required int64 comment_id = 2;
  if (has_comment_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->comment_id(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:weizhu.discover_v2.DeleteCommentRequest)
}

int DeleteCommentRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 item_id = 1;
    if (has_item_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->item_id());
    }

    // required int64 comment_id = 2;
    if (has_comment_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->comment_id());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeleteCommentRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const DeleteCommentRequest*>(&from));
}

void DeleteCommentRequest::MergeFrom(const DeleteCommentRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_item_id()) {
      set_item_id(from.item_id());
    }
    if (from.has_comment_id()) {
      set_comment_id(from.comment_id());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void DeleteCommentRequest::CopyFrom(const DeleteCommentRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteCommentRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void DeleteCommentRequest::Swap(DeleteCommentRequest* other) {
  if (other != this) {
    std::swap(item_id_, other->item_id_);
    std::swap(comment_id_, other->comment_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string DeleteCommentRequest::GetTypeName() const {
  return "weizhu.discover_v2.DeleteCommentRequest";
}


// ===================================================================

bool DeleteCommentResponse_Result_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 99:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const DeleteCommentResponse_Result DeleteCommentResponse::SUCC;
const DeleteCommentResponse_Result DeleteCommentResponse::FAIL_COMMENT_NOT_EXSIT;
const DeleteCommentResponse_Result DeleteCommentResponse::FAIL_COMMENT_OTHER;
const DeleteCommentResponse_Result DeleteCommentResponse::FAIL_UNKNOWN;
const DeleteCommentResponse_Result DeleteCommentResponse::Result_MIN;
const DeleteCommentResponse_Result DeleteCommentResponse::Result_MAX;
const int DeleteCommentResponse::Result_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int DeleteCommentResponse::kResultFieldNumber;
const int DeleteCommentResponse::kFailTextFieldNumber;
#endif  // !_MSC_VER

DeleteCommentResponse::DeleteCommentResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:weizhu.discover_v2.DeleteCommentResponse)
}

void DeleteCommentResponse::InitAsDefaultInstance() {
}

DeleteCommentResponse::DeleteCommentResponse(const DeleteCommentResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:weizhu.discover_v2.DeleteCommentResponse)
}

void DeleteCommentResponse::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  result_ = 99;
  fail_text_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DeleteCommentResponse::~DeleteCommentResponse() {
  // @@protoc_insertion_point(destructor:weizhu.discover_v2.DeleteCommentResponse)
  SharedDtor();
}

void DeleteCommentResponse::SharedDtor() {
  if (fail_text_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete fail_text_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void DeleteCommentResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const DeleteCommentResponse& DeleteCommentResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_discover_5fv2_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_discover_5fv2_2eproto();
#endif
  return *default_instance_;
}

DeleteCommentResponse* DeleteCommentResponse::default_instance_ = NULL;

DeleteCommentResponse* DeleteCommentResponse::New() const {
  return new DeleteCommentResponse;
}

void DeleteCommentResponse::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    result_ = 99;
    if (has_fail_text()) {
      if (fail_text_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        fail_text_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool DeleteCommentResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:weizhu.discover_v2.DeleteCommentResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .weizhu.discover_v2.DeleteCommentResponse.Result result = 1 [default = FAIL_UNKNOWN];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::weizhu::discover_v2::DeleteCommentResponse_Result_IsValid(value)) {
            set_result(static_cast< ::weizhu::discover_v2::DeleteCommentResponse_Result >(value));
          } else {
            unknown_fields_stream.WriteVarint32(tag);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_fail_text;
        break;
      }

      // optional string fail_text = 2;
      case 2: {
        if (tag == 18) {
         parse_fail_text:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fail_text()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:weizhu.discover_v2.DeleteCommentResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:weizhu.discover_v2.DeleteCommentResponse)
  return false;
#undef DO_
}

void DeleteCommentResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:weizhu.discover_v2.DeleteCommentResponse)
  // optional .weizhu.discover_v2.DeleteCommentResponse.Result result = 1 [default = FAIL_UNKNOWN];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  // optional string fail_text = 2;
  if (has_fail_text()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->fail_text(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:weizhu.discover_v2.DeleteCommentResponse)
}

int DeleteCommentResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .weizhu.discover_v2.DeleteCommentResponse.Result result = 1 [default = FAIL_UNKNOWN];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

    // optional string fail_text = 2;
    if (has_fail_text()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->fail_text());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeleteCommentResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const DeleteCommentResponse*>(&from));
}

void DeleteCommentResponse::MergeFrom(const DeleteCommentResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_fail_text()) {
      set_fail_text(from.fail_text());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void DeleteCommentResponse::CopyFrom(const DeleteCommentResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteCommentResponse::IsInitialized() const {

  return true;
}

void DeleteCommentResponse::Swap(DeleteCommentResponse* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(fail_text_, other->fail_text_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string DeleteCommentResponse::GetTypeName() const {
  return "weizhu.discover_v2.DeleteCommentResponse";
}


// ===================================================================

#ifndef _MSC_VER
const int ScoreItemRequest::kItemIdFieldNumber;
const int ScoreItemRequest::kScoreFieldNumber;
#endif  // !_MSC_VER

ScoreItemRequest::ScoreItemRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:weizhu.discover_v2.ScoreItemRequest)
}

void ScoreItemRequest::InitAsDefaultInstance() {
}

ScoreItemRequest::ScoreItemRequest(const ScoreItemRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:weizhu.discover_v2.ScoreItemRequest)
}

void ScoreItemRequest::SharedCtor() {
  _cached_size_ = 0;
  item_id_ = GOOGLE_LONGLONG(0);
  score_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ScoreItemRequest::~ScoreItemRequest() {
  // @@protoc_insertion_point(destructor:weizhu.discover_v2.ScoreItemRequest)
  SharedDtor();
}

void ScoreItemRequest::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void ScoreItemRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ScoreItemRequest& ScoreItemRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_discover_5fv2_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_discover_5fv2_2eproto();
#endif
  return *default_instance_;
}

ScoreItemRequest* ScoreItemRequest::default_instance_ = NULL;

ScoreItemRequest* ScoreItemRequest::New() const {
  return new ScoreItemRequest;
}

void ScoreItemRequest::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ScoreItemRequest*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(item_id_, score_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool ScoreItemRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:weizhu.discover_v2.ScoreItemRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 item_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &item_id_)));
          set_has_item_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_score;
        break;
      }

      // required int32 score = 2;
      case 2: {
        if (tag == 16) {
         parse_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &score_)));
          set_has_score();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:weizhu.discover_v2.ScoreItemRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:weizhu.discover_v2.ScoreItemRequest)
  return false;
#undef DO_
}

void ScoreItemRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:weizhu.discover_v2.ScoreItemRequest)
  // required int64 item_id = 1;
  if (has_item_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->item_id(), output);
  }

  // required int32 score = 2;
  if (has_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->score(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:weizhu.discover_v2.ScoreItemRequest)
}

int ScoreItemRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 item_id = 1;
    if (has_item_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->item_id());
    }

    // required int32 score = 2;
    if (has_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->score());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ScoreItemRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ScoreItemRequest*>(&from));
}

void ScoreItemRequest::MergeFrom(const ScoreItemRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_item_id()) {
      set_item_id(from.item_id());
    }
    if (from.has_score()) {
      set_score(from.score());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void ScoreItemRequest::CopyFrom(const ScoreItemRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScoreItemRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void ScoreItemRequest::Swap(ScoreItemRequest* other) {
  if (other != this) {
    std::swap(item_id_, other->item_id_);
    std::swap(score_, other->score_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string ScoreItemRequest::GetTypeName() const {
  return "weizhu.discover_v2.ScoreItemRequest";
}


// ===================================================================

bool ScoreItemResponse_Result_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 99:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ScoreItemResponse_Result ScoreItemResponse::SUCC;
const ScoreItemResponse_Result ScoreItemResponse::FAIL_SCORE_INVALID;
const ScoreItemResponse_Result ScoreItemResponse::FAIL_ITEM_NOT_EXSIT;
const ScoreItemResponse_Result ScoreItemResponse::FAIL_ITEM_DISABLE;
const ScoreItemResponse_Result ScoreItemResponse::FAIL_ITEM_IS_SCORED;
const ScoreItemResponse_Result ScoreItemResponse::FAIL_UNKNOWN;
const ScoreItemResponse_Result ScoreItemResponse::Result_MIN;
const ScoreItemResponse_Result ScoreItemResponse::Result_MAX;
const int ScoreItemResponse::Result_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ScoreItemResponse::kResultFieldNumber;
const int ScoreItemResponse::kFailTextFieldNumber;
#endif  // !_MSC_VER

ScoreItemResponse::ScoreItemResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:weizhu.discover_v2.ScoreItemResponse)
}

void ScoreItemResponse::InitAsDefaultInstance() {
}

ScoreItemResponse::ScoreItemResponse(const ScoreItemResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:weizhu.discover_v2.ScoreItemResponse)
}

void ScoreItemResponse::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  result_ = 99;
  fail_text_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ScoreItemResponse::~ScoreItemResponse() {
  // @@protoc_insertion_point(destructor:weizhu.discover_v2.ScoreItemResponse)
  SharedDtor();
}

void ScoreItemResponse::SharedDtor() {
  if (fail_text_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete fail_text_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void ScoreItemResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ScoreItemResponse& ScoreItemResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_discover_5fv2_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_discover_5fv2_2eproto();
#endif
  return *default_instance_;
}

ScoreItemResponse* ScoreItemResponse::default_instance_ = NULL;

ScoreItemResponse* ScoreItemResponse::New() const {
  return new ScoreItemResponse;
}

void ScoreItemResponse::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    result_ = 99;
    if (has_fail_text()) {
      if (fail_text_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        fail_text_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool ScoreItemResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:weizhu.discover_v2.ScoreItemResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .weizhu.discover_v2.ScoreItemResponse.Result result = 1 [default = FAIL_UNKNOWN];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::weizhu::discover_v2::ScoreItemResponse_Result_IsValid(value)) {
            set_result(static_cast< ::weizhu::discover_v2::ScoreItemResponse_Result >(value));
          } else {
            unknown_fields_stream.WriteVarint32(tag);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_fail_text;
        break;
      }

      // optional string fail_text = 2;
      case 2: {
        if (tag == 18) {
         parse_fail_text:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fail_text()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:weizhu.discover_v2.ScoreItemResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:weizhu.discover_v2.ScoreItemResponse)
  return false;
#undef DO_
}

void ScoreItemResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:weizhu.discover_v2.ScoreItemResponse)
  // optional .weizhu.discover_v2.ScoreItemResponse.Result result = 1 [default = FAIL_UNKNOWN];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  // optional string fail_text = 2;
  if (has_fail_text()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->fail_text(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:weizhu.discover_v2.ScoreItemResponse)
}

int ScoreItemResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .weizhu.discover_v2.ScoreItemResponse.Result result = 1 [default = FAIL_UNKNOWN];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

    // optional string fail_text = 2;
    if (has_fail_text()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->fail_text());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ScoreItemResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ScoreItemResponse*>(&from));
}

void ScoreItemResponse::MergeFrom(const ScoreItemResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_fail_text()) {
      set_fail_text(from.fail_text());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void ScoreItemResponse::CopyFrom(const ScoreItemResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScoreItemResponse::IsInitialized() const {

  return true;
}

void ScoreItemResponse::Swap(ScoreItemResponse* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(fail_text_, other->fail_text_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string ScoreItemResponse::GetTypeName() const {
  return "weizhu.discover_v2.ScoreItemResponse";
}


// ===================================================================

#ifndef _MSC_VER
const int LikeItemRequest::kItemIdFieldNumber;
const int LikeItemRequest::kIsLikeFieldNumber;
#endif  // !_MSC_VER

LikeItemRequest::LikeItemRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:weizhu.discover_v2.LikeItemRequest)
}

void LikeItemRequest::InitAsDefaultInstance() {
}

LikeItemRequest::LikeItemRequest(const LikeItemRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:weizhu.discover_v2.LikeItemRequest)
}

void LikeItemRequest::SharedCtor() {
  _cached_size_ = 0;
  item_id_ = GOOGLE_LONGLONG(0);
  is_like_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LikeItemRequest::~LikeItemRequest() {
  // @@protoc_insertion_point(destructor:weizhu.discover_v2.LikeItemRequest)
  SharedDtor();
}

void LikeItemRequest::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void LikeItemRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const LikeItemRequest& LikeItemRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_discover_5fv2_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_discover_5fv2_2eproto();
#endif
  return *default_instance_;
}

LikeItemRequest* LikeItemRequest::default_instance_ = NULL;

LikeItemRequest* LikeItemRequest::New() const {
  return new LikeItemRequest;
}

void LikeItemRequest::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<LikeItemRequest*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(item_id_, is_like_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool LikeItemRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:weizhu.discover_v2.LikeItemRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 item_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &item_id_)));
          set_has_item_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_is_like;
        break;
      }

      // required bool is_like = 2;
      case 2: {
        if (tag == 16) {
         parse_is_like:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_like_)));
          set_has_is_like();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:weizhu.discover_v2.LikeItemRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:weizhu.discover_v2.LikeItemRequest)
  return false;
#undef DO_
}

void LikeItemRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:weizhu.discover_v2.LikeItemRequest)
  // required int64 item_id = 1;
  if (has_item_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->item_id(), output);
  }

  // required bool is_like = 2;
  if (has_is_like()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->is_like(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:weizhu.discover_v2.LikeItemRequest)
}

int LikeItemRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 item_id = 1;
    if (has_item_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->item_id());
    }

    // required bool is_like = 2;
    if (has_is_like()) {
      total_size += 1 + 1;
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LikeItemRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const LikeItemRequest*>(&from));
}

void LikeItemRequest::MergeFrom(const LikeItemRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_item_id()) {
      set_item_id(from.item_id());
    }
    if (from.has_is_like()) {
      set_is_like(from.is_like());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void LikeItemRequest::CopyFrom(const LikeItemRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LikeItemRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void LikeItemRequest::Swap(LikeItemRequest* other) {
  if (other != this) {
    std::swap(item_id_, other->item_id_);
    std::swap(is_like_, other->is_like_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string LikeItemRequest::GetTypeName() const {
  return "weizhu.discover_v2.LikeItemRequest";
}


// ===================================================================

bool LikeItemResponse_Result_IsValid(int value) {
  switch(value) {
    case 0:
    case 2:
    case 3:
    case 99:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const LikeItemResponse_Result LikeItemResponse::SUCC;
const LikeItemResponse_Result LikeItemResponse::FAIL_ITEM_NOT_EXSIT;
const LikeItemResponse_Result LikeItemResponse::FAIL_ITEM_DISABLE;
const LikeItemResponse_Result LikeItemResponse::FAIL_UNKNOWN;
const LikeItemResponse_Result LikeItemResponse::Result_MIN;
const LikeItemResponse_Result LikeItemResponse::Result_MAX;
const int LikeItemResponse::Result_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int LikeItemResponse::kResultFieldNumber;
const int LikeItemResponse::kFailTextFieldNumber;
#endif  // !_MSC_VER

LikeItemResponse::LikeItemResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:weizhu.discover_v2.LikeItemResponse)
}

void LikeItemResponse::InitAsDefaultInstance() {
}

LikeItemResponse::LikeItemResponse(const LikeItemResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:weizhu.discover_v2.LikeItemResponse)
}

void LikeItemResponse::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  result_ = 99;
  fail_text_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LikeItemResponse::~LikeItemResponse() {
  // @@protoc_insertion_point(destructor:weizhu.discover_v2.LikeItemResponse)
  SharedDtor();
}

void LikeItemResponse::SharedDtor() {
  if (fail_text_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete fail_text_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void LikeItemResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const LikeItemResponse& LikeItemResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_discover_5fv2_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_discover_5fv2_2eproto();
#endif
  return *default_instance_;
}

LikeItemResponse* LikeItemResponse::default_instance_ = NULL;

LikeItemResponse* LikeItemResponse::New() const {
  return new LikeItemResponse;
}

void LikeItemResponse::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    result_ = 99;
    if (has_fail_text()) {
      if (fail_text_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        fail_text_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool LikeItemResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:weizhu.discover_v2.LikeItemResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .weizhu.discover_v2.LikeItemResponse.Result result = 1 [default = FAIL_UNKNOWN];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::weizhu::discover_v2::LikeItemResponse_Result_IsValid(value)) {
            set_result(static_cast< ::weizhu::discover_v2::LikeItemResponse_Result >(value));
          } else {
            unknown_fields_stream.WriteVarint32(tag);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_fail_text;
        break;
      }

      // optional string fail_text = 2;
      case 2: {
        if (tag == 18) {
         parse_fail_text:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fail_text()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:weizhu.discover_v2.LikeItemResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:weizhu.discover_v2.LikeItemResponse)
  return false;
#undef DO_
}

void LikeItemResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:weizhu.discover_v2.LikeItemResponse)
  // optional .weizhu.discover_v2.LikeItemResponse.Result result = 1 [default = FAIL_UNKNOWN];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  // optional string fail_text = 2;
  if (has_fail_text()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->fail_text(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:weizhu.discover_v2.LikeItemResponse)
}

int LikeItemResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .weizhu.discover_v2.LikeItemResponse.Result result = 1 [default = FAIL_UNKNOWN];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

    // optional string fail_text = 2;
    if (has_fail_text()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->fail_text());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LikeItemResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const LikeItemResponse*>(&from));
}

void LikeItemResponse::MergeFrom(const LikeItemResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_fail_text()) {
      set_fail_text(from.fail_text());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void LikeItemResponse::CopyFrom(const LikeItemResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LikeItemResponse::IsInitialized() const {

  return true;
}

void LikeItemResponse::Swap(LikeItemResponse* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(fail_text_, other->fail_text_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string LikeItemResponse::GetTypeName() const {
  return "weizhu.discover_v2.LikeItemResponse";
}


// ===================================================================

#ifndef _MSC_VER
const int ShareItemRequest::kItemIdFieldNumber;
#endif  // !_MSC_VER

ShareItemRequest::ShareItemRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:weizhu.discover_v2.ShareItemRequest)
}

void ShareItemRequest::InitAsDefaultInstance() {
}

ShareItemRequest::ShareItemRequest(const ShareItemRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:weizhu.discover_v2.ShareItemRequest)
}

void ShareItemRequest::SharedCtor() {
  _cached_size_ = 0;
  item_id_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ShareItemRequest::~ShareItemRequest() {
  // @@protoc_insertion_point(destructor:weizhu.discover_v2.ShareItemRequest)
  SharedDtor();
}

void ShareItemRequest::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void ShareItemRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ShareItemRequest& ShareItemRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_discover_5fv2_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_discover_5fv2_2eproto();
#endif
  return *default_instance_;
}

ShareItemRequest* ShareItemRequest::default_instance_ = NULL;

ShareItemRequest* ShareItemRequest::New() const {
  return new ShareItemRequest;
}

void ShareItemRequest::Clear() {
  item_id_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool ShareItemRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:weizhu.discover_v2.ShareItemRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 item_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &item_id_)));
          set_has_item_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:weizhu.discover_v2.ShareItemRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:weizhu.discover_v2.ShareItemRequest)
  return false;
#undef DO_
}

void ShareItemRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:weizhu.discover_v2.ShareItemRequest)
  // required int64 item_id = 1;
  if (has_item_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->item_id(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:weizhu.discover_v2.ShareItemRequest)
}

int ShareItemRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 item_id = 1;
    if (has_item_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->item_id());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ShareItemRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ShareItemRequest*>(&from));
}

void ShareItemRequest::MergeFrom(const ShareItemRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_item_id()) {
      set_item_id(from.item_id());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void ShareItemRequest::CopyFrom(const ShareItemRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShareItemRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ShareItemRequest::Swap(ShareItemRequest* other) {
  if (other != this) {
    std::swap(item_id_, other->item_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string ShareItemRequest::GetTypeName() const {
  return "weizhu.discover_v2.ShareItemRequest";
}


// ===================================================================

bool ShareItemResponse_Result_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 99:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ShareItemResponse_Result ShareItemResponse::SUCC;
const ShareItemResponse_Result ShareItemResponse::FAIL_PERMISSION_DENIED;
const ShareItemResponse_Result ShareItemResponse::FAIL_ITEM_NOT_EXSIT;
const ShareItemResponse_Result ShareItemResponse::FAIL_UNKNOWN;
const ShareItemResponse_Result ShareItemResponse::Result_MIN;
const ShareItemResponse_Result ShareItemResponse::Result_MAX;
const int ShareItemResponse::Result_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ShareItemResponse_ItemShareContent::kItemNameFieldNumber;
const int ShareItemResponse_ItemShareContent::kItemDescFieldNumber;
const int ShareItemResponse_ItemShareContent::kImageNameFieldNumber;
const int ShareItemResponse_ItemShareContent::kWebUrlFieldNumber;
#endif  // !_MSC_VER

ShareItemResponse_ItemShareContent::ShareItemResponse_ItemShareContent()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:weizhu.discover_v2.ShareItemResponse.ItemShareContent)
}

void ShareItemResponse_ItemShareContent::InitAsDefaultInstance() {
}

ShareItemResponse_ItemShareContent::ShareItemResponse_ItemShareContent(const ShareItemResponse_ItemShareContent& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:weizhu.discover_v2.ShareItemResponse.ItemShareContent)
}

void ShareItemResponse_ItemShareContent::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  item_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  item_desc_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  image_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  web_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ShareItemResponse_ItemShareContent::~ShareItemResponse_ItemShareContent() {
  // @@protoc_insertion_point(destructor:weizhu.discover_v2.ShareItemResponse.ItemShareContent)
  SharedDtor();
}

void ShareItemResponse_ItemShareContent::SharedDtor() {
  if (item_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete item_name_;
  }
  if (item_desc_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete item_desc_;
  }
  if (image_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete image_name_;
  }
  if (web_url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete web_url_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void ShareItemResponse_ItemShareContent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ShareItemResponse_ItemShareContent& ShareItemResponse_ItemShareContent::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_discover_5fv2_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_discover_5fv2_2eproto();
#endif
  return *default_instance_;
}

ShareItemResponse_ItemShareContent* ShareItemResponse_ItemShareContent::default_instance_ = NULL;

ShareItemResponse_ItemShareContent* ShareItemResponse_ItemShareContent::New() const {
  return new ShareItemResponse_ItemShareContent;
}

void ShareItemResponse_ItemShareContent::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    if (has_item_name()) {
      if (item_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        item_name_->clear();
      }
    }
    if (has_item_desc()) {
      if (item_desc_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        item_desc_->clear();
      }
    }
    if (has_image_name()) {
      if (image_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        image_name_->clear();
      }
    }
    if (has_web_url()) {
      if (web_url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        web_url_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool ShareItemResponse_ItemShareContent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:weizhu.discover_v2.ShareItemResponse.ItemShareContent)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string item_name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_item_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_item_desc;
        break;
      }

      // required string item_desc = 2;
      case 2: {
        if (tag == 18) {
         parse_item_desc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_item_desc()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_image_name;
        break;
      }

      // required string image_name = 3;
      case 3: {
        if (tag == 26) {
         parse_image_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_image_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_web_url;
        break;
      }

      // required string web_url = 4;
      case 4: {
        if (tag == 34) {
         parse_web_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_web_url()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:weizhu.discover_v2.ShareItemResponse.ItemShareContent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:weizhu.discover_v2.ShareItemResponse.ItemShareContent)
  return false;
#undef DO_
}

void ShareItemResponse_ItemShareContent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:weizhu.discover_v2.ShareItemResponse.ItemShareContent)
  // required string item_name = 1;
  if (has_item_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->item_name(), output);
  }

  // required string item_desc = 2;
  if (has_item_desc()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->item_desc(), output);
  }

  // required string image_name = 3;
  if (has_image_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->image_name(), output);
  }

  // required string web_url = 4;
  if (has_web_url()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->web_url(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:weizhu.discover_v2.ShareItemResponse.ItemShareContent)
}

int ShareItemResponse_ItemShareContent::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string item_name = 1;
    if (has_item_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->item_name());
    }

    // required string item_desc = 2;
    if (has_item_desc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->item_desc());
    }

    // required string image_name = 3;
    if (has_image_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->image_name());
    }

    // required string web_url = 4;
    if (has_web_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->web_url());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ShareItemResponse_ItemShareContent::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ShareItemResponse_ItemShareContent*>(&from));
}

void ShareItemResponse_ItemShareContent::MergeFrom(const ShareItemResponse_ItemShareContent& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_item_name()) {
      set_item_name(from.item_name());
    }
    if (from.has_item_desc()) {
      set_item_desc(from.item_desc());
    }
    if (from.has_image_name()) {
      set_image_name(from.image_name());
    }
    if (from.has_web_url()) {
      set_web_url(from.web_url());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void ShareItemResponse_ItemShareContent::CopyFrom(const ShareItemResponse_ItemShareContent& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShareItemResponse_ItemShareContent::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void ShareItemResponse_ItemShareContent::Swap(ShareItemResponse_ItemShareContent* other) {
  if (other != this) {
    std::swap(item_name_, other->item_name_);
    std::swap(item_desc_, other->item_desc_);
    std::swap(image_name_, other->image_name_);
    std::swap(web_url_, other->web_url_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string ShareItemResponse_ItemShareContent::GetTypeName() const {
  return "weizhu.discover_v2.ShareItemResponse.ItemShareContent";
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int ShareItemResponse::kResultFieldNumber;
const int ShareItemResponse::kFailTextFieldNumber;
const int ShareItemResponse::kItemShareContentFieldNumber;
#endif  // !_MSC_VER

ShareItemResponse::ShareItemResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:weizhu.discover_v2.ShareItemResponse)
}

void ShareItemResponse::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  itemsharecontent_ = const_cast< ::weizhu::discover_v2::ShareItemResponse_ItemShareContent*>(
      ::weizhu::discover_v2::ShareItemResponse_ItemShareContent::internal_default_instance());
#else
  itemsharecontent_ = const_cast< ::weizhu::discover_v2::ShareItemResponse_ItemShareContent*>(&::weizhu::discover_v2::ShareItemResponse_ItemShareContent::default_instance());
#endif
}

ShareItemResponse::ShareItemResponse(const ShareItemResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:weizhu.discover_v2.ShareItemResponse)
}

void ShareItemResponse::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  result_ = 99;
  fail_text_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  itemsharecontent_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ShareItemResponse::~ShareItemResponse() {
  // @@protoc_insertion_point(destructor:weizhu.discover_v2.ShareItemResponse)
  SharedDtor();
}

void ShareItemResponse::SharedDtor() {
  if (fail_text_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete fail_text_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete itemsharecontent_;
  }
}

void ShareItemResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ShareItemResponse& ShareItemResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_discover_5fv2_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_discover_5fv2_2eproto();
#endif
  return *default_instance_;
}

ShareItemResponse* ShareItemResponse::default_instance_ = NULL;

ShareItemResponse* ShareItemResponse::New() const {
  return new ShareItemResponse;
}

void ShareItemResponse::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    result_ = 99;
    if (has_fail_text()) {
      if (fail_text_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        fail_text_->clear();
      }
    }
    if (has_itemsharecontent()) {
      if (itemsharecontent_ != NULL) itemsharecontent_->::weizhu::discover_v2::ShareItemResponse_ItemShareContent::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool ShareItemResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:weizhu.discover_v2.ShareItemResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .weizhu.discover_v2.ShareItemResponse.Result result = 1 [default = FAIL_UNKNOWN];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::weizhu::discover_v2::ShareItemResponse_Result_IsValid(value)) {
            set_result(static_cast< ::weizhu::discover_v2::ShareItemResponse_Result >(value));
          } else {
            unknown_fields_stream.WriteVarint32(tag);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_fail_text;
        break;
      }

      // optional string fail_text = 2;
      case 2: {
        if (tag == 18) {
         parse_fail_text:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fail_text()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_itemShareContent;
        break;
      }

      // optional .weizhu.discover_v2.ShareItemResponse.ItemShareContent itemShareContent = 3;
      case 3: {
        if (tag == 26) {
         parse_itemShareContent:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_itemsharecontent()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:weizhu.discover_v2.ShareItemResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:weizhu.discover_v2.ShareItemResponse)
  return false;
#undef DO_
}

void ShareItemResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:weizhu.discover_v2.ShareItemResponse)
  // optional .weizhu.discover_v2.ShareItemResponse.Result result = 1 [default = FAIL_UNKNOWN];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  // optional string fail_text = 2;
  if (has_fail_text()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->fail_text(), output);
  }

  // optional .weizhu.discover_v2.ShareItemResponse.ItemShareContent itemShareContent = 3;
  if (has_itemsharecontent()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->itemsharecontent(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:weizhu.discover_v2.ShareItemResponse)
}

int ShareItemResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .weizhu.discover_v2.ShareItemResponse.Result result = 1 [default = FAIL_UNKNOWN];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

    // optional string fail_text = 2;
    if (has_fail_text()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->fail_text());
    }

    // optional .weizhu.discover_v2.ShareItemResponse.ItemShareContent itemShareContent = 3;
    if (has_itemsharecontent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->itemsharecontent());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ShareItemResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ShareItemResponse*>(&from));
}

void ShareItemResponse::MergeFrom(const ShareItemResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_fail_text()) {
      set_fail_text(from.fail_text());
    }
    if (from.has_itemsharecontent()) {
      mutable_itemsharecontent()->::weizhu::discover_v2::ShareItemResponse_ItemShareContent::MergeFrom(from.itemsharecontent());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void ShareItemResponse::CopyFrom(const ShareItemResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShareItemResponse::IsInitialized() const {

  if (has_itemsharecontent()) {
    if (!this->itemsharecontent().IsInitialized()) return false;
  }
  return true;
}

void ShareItemResponse::Swap(ShareItemResponse* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(fail_text_, other->fail_text_);
    std::swap(itemsharecontent_, other->itemsharecontent_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string ShareItemResponse::GetTypeName() const {
  return "weizhu.discover_v2.ShareItemResponse";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace discover_v2
}  // namespace weizhu

// @@protoc_insertion_point(global_scope)
