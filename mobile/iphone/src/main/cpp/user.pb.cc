// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: user.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "user.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)

namespace weizhu {
namespace user {

void protobuf_ShutdownFile_user_2eproto() {
  delete Team::default_instance_;
  delete Position::default_instance_;
  delete Level::default_instance_;
  delete UserBase::default_instance_;
  delete UserMark::default_instance_;
  delete UserTeam::default_instance_;
  delete UserExtends::default_instance_;
  delete UserExperience::default_instance_;
  delete UserAbilityTag::default_instance_;
  delete User::default_instance_;
  delete GetUserByIdRequest::default_instance_;
  delete GetUserByMobileNoRequest::default_instance_;
  delete GetUserResponse::default_instance_;
  delete GetTeamRequest::default_instance_;
  delete GetTeamResponse::default_instance_;
  delete UpdateUserAvatarRequest::default_instance_;
  delete UpdateUserAvatarResponse::default_instance_;
  delete UpdateUserSignatureRequest::default_instance_;
  delete UpdateUserSignatureResponse::default_instance_;
  delete UpdateUserInterestRequest::default_instance_;
  delete UpdateUserInterestResponse::default_instance_;
  delete GetUserExperienceRequest::default_instance_;
  delete GetUserExperienceResponse::default_instance_;
  delete CreateUserExperienceRequest::default_instance_;
  delete CreateUserExperienceResponse::default_instance_;
  delete UpdateUserExperienceRequest::default_instance_;
  delete UpdateUserExperienceResponse::default_instance_;
  delete DeleteUserExperienceRequest::default_instance_;
  delete DeleteUserExperienceResponse::default_instance_;
  delete MarkUserNameRequest::default_instance_;
  delete MarkUserNameResponse::default_instance_;
  delete MarkUserStarRequest::default_instance_;
  delete MarkUserStarResponse::default_instance_;
  delete GetMarkStarUserRequest::default_instance_;
  delete GetMarkStarUserResponse::default_instance_;
  delete GetUserAbilityTagRequest::default_instance_;
  delete GetUserAbilityTagResponse::default_instance_;
  delete TagUserAbilityRequest::default_instance_;
  delete TagUserAbilityResponse::default_instance_;
  delete CreateAbilityTagRequest::default_instance_;
  delete CreateAbilityTagResponse::default_instance_;
  delete DeleteAbilityTagRequest::default_instance_;
  delete GetRandomAbilityTagUserRequest::default_instance_;
  delete GetRandomAbilityTagUserResponse::default_instance_;
  delete GetAbilityTagUserIdRequest::default_instance_;
  delete GetAbilityTagUserIdResponse::default_instance_;
  delete GetAllPositionRequest::default_instance_;
  delete GetAllPositionResponse::default_instance_;
  delete GetAllLevelRequest::default_instance_;
  delete GetAllLevelResponse::default_instance_;
  delete SearchUserRequest::default_instance_;
  delete SearchUserResponse::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_user_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_user_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  ::weizhu::protobuf_AddDesc_weizhu_2eproto();
  Team::default_instance_ = new Team();
  Position::default_instance_ = new Position();
  Level::default_instance_ = new Level();
  UserBase::default_instance_ = new UserBase();
  UserMark::default_instance_ = new UserMark();
  UserTeam::default_instance_ = new UserTeam();
  UserExtends::default_instance_ = new UserExtends();
  UserExperience::default_instance_ = new UserExperience();
  UserAbilityTag::default_instance_ = new UserAbilityTag();
  User::default_instance_ = new User();
  GetUserByIdRequest::default_instance_ = new GetUserByIdRequest();
  GetUserByMobileNoRequest::default_instance_ = new GetUserByMobileNoRequest();
  GetUserResponse::default_instance_ = new GetUserResponse();
  GetTeamRequest::default_instance_ = new GetTeamRequest();
  GetTeamResponse::default_instance_ = new GetTeamResponse();
  UpdateUserAvatarRequest::default_instance_ = new UpdateUserAvatarRequest();
  UpdateUserAvatarResponse::default_instance_ = new UpdateUserAvatarResponse();
  UpdateUserSignatureRequest::default_instance_ = new UpdateUserSignatureRequest();
  UpdateUserSignatureResponse::default_instance_ = new UpdateUserSignatureResponse();
  UpdateUserInterestRequest::default_instance_ = new UpdateUserInterestRequest();
  UpdateUserInterestResponse::default_instance_ = new UpdateUserInterestResponse();
  GetUserExperienceRequest::default_instance_ = new GetUserExperienceRequest();
  GetUserExperienceResponse::default_instance_ = new GetUserExperienceResponse();
  CreateUserExperienceRequest::default_instance_ = new CreateUserExperienceRequest();
  CreateUserExperienceResponse::default_instance_ = new CreateUserExperienceResponse();
  UpdateUserExperienceRequest::default_instance_ = new UpdateUserExperienceRequest();
  UpdateUserExperienceResponse::default_instance_ = new UpdateUserExperienceResponse();
  DeleteUserExperienceRequest::default_instance_ = new DeleteUserExperienceRequest();
  DeleteUserExperienceResponse::default_instance_ = new DeleteUserExperienceResponse();
  MarkUserNameRequest::default_instance_ = new MarkUserNameRequest();
  MarkUserNameResponse::default_instance_ = new MarkUserNameResponse();
  MarkUserStarRequest::default_instance_ = new MarkUserStarRequest();
  MarkUserStarResponse::default_instance_ = new MarkUserStarResponse();
  GetMarkStarUserRequest::default_instance_ = new GetMarkStarUserRequest();
  GetMarkStarUserResponse::default_instance_ = new GetMarkStarUserResponse();
  GetUserAbilityTagRequest::default_instance_ = new GetUserAbilityTagRequest();
  GetUserAbilityTagResponse::default_instance_ = new GetUserAbilityTagResponse();
  TagUserAbilityRequest::default_instance_ = new TagUserAbilityRequest();
  TagUserAbilityResponse::default_instance_ = new TagUserAbilityResponse();
  CreateAbilityTagRequest::default_instance_ = new CreateAbilityTagRequest();
  CreateAbilityTagResponse::default_instance_ = new CreateAbilityTagResponse();
  DeleteAbilityTagRequest::default_instance_ = new DeleteAbilityTagRequest();
  GetRandomAbilityTagUserRequest::default_instance_ = new GetRandomAbilityTagUserRequest();
  GetRandomAbilityTagUserResponse::default_instance_ = new GetRandomAbilityTagUserResponse();
  GetAbilityTagUserIdRequest::default_instance_ = new GetAbilityTagUserIdRequest();
  GetAbilityTagUserIdResponse::default_instance_ = new GetAbilityTagUserIdResponse();
  GetAllPositionRequest::default_instance_ = new GetAllPositionRequest();
  GetAllPositionResponse::default_instance_ = new GetAllPositionResponse();
  GetAllLevelRequest::default_instance_ = new GetAllLevelRequest();
  GetAllLevelResponse::default_instance_ = new GetAllLevelResponse();
  SearchUserRequest::default_instance_ = new SearchUserRequest();
  SearchUserResponse::default_instance_ = new SearchUserResponse();
  Team::default_instance_->InitAsDefaultInstance();
  Position::default_instance_->InitAsDefaultInstance();
  Level::default_instance_->InitAsDefaultInstance();
  UserBase::default_instance_->InitAsDefaultInstance();
  UserMark::default_instance_->InitAsDefaultInstance();
  UserTeam::default_instance_->InitAsDefaultInstance();
  UserExtends::default_instance_->InitAsDefaultInstance();
  UserExperience::default_instance_->InitAsDefaultInstance();
  UserAbilityTag::default_instance_->InitAsDefaultInstance();
  User::default_instance_->InitAsDefaultInstance();
  GetUserByIdRequest::default_instance_->InitAsDefaultInstance();
  GetUserByMobileNoRequest::default_instance_->InitAsDefaultInstance();
  GetUserResponse::default_instance_->InitAsDefaultInstance();
  GetTeamRequest::default_instance_->InitAsDefaultInstance();
  GetTeamResponse::default_instance_->InitAsDefaultInstance();
  UpdateUserAvatarRequest::default_instance_->InitAsDefaultInstance();
  UpdateUserAvatarResponse::default_instance_->InitAsDefaultInstance();
  UpdateUserSignatureRequest::default_instance_->InitAsDefaultInstance();
  UpdateUserSignatureResponse::default_instance_->InitAsDefaultInstance();
  UpdateUserInterestRequest::default_instance_->InitAsDefaultInstance();
  UpdateUserInterestResponse::default_instance_->InitAsDefaultInstance();
  GetUserExperienceRequest::default_instance_->InitAsDefaultInstance();
  GetUserExperienceResponse::default_instance_->InitAsDefaultInstance();
  CreateUserExperienceRequest::default_instance_->InitAsDefaultInstance();
  CreateUserExperienceResponse::default_instance_->InitAsDefaultInstance();
  UpdateUserExperienceRequest::default_instance_->InitAsDefaultInstance();
  UpdateUserExperienceResponse::default_instance_->InitAsDefaultInstance();
  DeleteUserExperienceRequest::default_instance_->InitAsDefaultInstance();
  DeleteUserExperienceResponse::default_instance_->InitAsDefaultInstance();
  MarkUserNameRequest::default_instance_->InitAsDefaultInstance();
  MarkUserNameResponse::default_instance_->InitAsDefaultInstance();
  MarkUserStarRequest::default_instance_->InitAsDefaultInstance();
  MarkUserStarResponse::default_instance_->InitAsDefaultInstance();
  GetMarkStarUserRequest::default_instance_->InitAsDefaultInstance();
  GetMarkStarUserResponse::default_instance_->InitAsDefaultInstance();
  GetUserAbilityTagRequest::default_instance_->InitAsDefaultInstance();
  GetUserAbilityTagResponse::default_instance_->InitAsDefaultInstance();
  TagUserAbilityRequest::default_instance_->InitAsDefaultInstance();
  TagUserAbilityResponse::default_instance_->InitAsDefaultInstance();
  CreateAbilityTagRequest::default_instance_->InitAsDefaultInstance();
  CreateAbilityTagResponse::default_instance_->InitAsDefaultInstance();
  DeleteAbilityTagRequest::default_instance_->InitAsDefaultInstance();
  GetRandomAbilityTagUserRequest::default_instance_->InitAsDefaultInstance();
  GetRandomAbilityTagUserResponse::default_instance_->InitAsDefaultInstance();
  GetAbilityTagUserIdRequest::default_instance_->InitAsDefaultInstance();
  GetAbilityTagUserIdResponse::default_instance_->InitAsDefaultInstance();
  GetAllPositionRequest::default_instance_->InitAsDefaultInstance();
  GetAllPositionResponse::default_instance_->InitAsDefaultInstance();
  GetAllLevelRequest::default_instance_->InitAsDefaultInstance();
  GetAllLevelResponse::default_instance_->InitAsDefaultInstance();
  SearchUserRequest::default_instance_->InitAsDefaultInstance();
  SearchUserResponse::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_user_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_user_2eproto_once_);
void protobuf_AddDesc_user_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_user_2eproto_once_,
                 &protobuf_AddDesc_user_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_user_2eproto {
  StaticDescriptorInitializer_user_2eproto() {
    protobuf_AddDesc_user_2eproto();
  }
} static_descriptor_initializer_user_2eproto_;
#endif
bool State_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int Team::kTeamIdFieldNumber;
const int Team::kTeamNameFieldNumber;
const int Team::kParentTeamIdFieldNumber;
const int Team::kStateFieldNumber;
const int Team::kCreateAdminIdFieldNumber;
const int Team::kCreateTimeFieldNumber;
const int Team::kUpdateAdminIdFieldNumber;
const int Team::kUpdateTimeFieldNumber;
#endif  // !_MSC_VER

Team::Team()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:weizhu.user.Team)
}

void Team::InitAsDefaultInstance() {
}

Team::Team(const Team& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:weizhu.user.Team)
}

void Team::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  team_id_ = 0;
  team_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  parent_team_id_ = 0;
  state_ = 0;
  create_admin_id_ = GOOGLE_LONGLONG(0);
  create_time_ = 0;
  update_admin_id_ = GOOGLE_LONGLONG(0);
  update_time_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Team::~Team() {
  // @@protoc_insertion_point(destructor:weizhu.user.Team)
  SharedDtor();
}

void Team::SharedDtor() {
  if (team_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete team_name_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void Team::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Team& Team::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_user_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_user_2eproto();
#endif
  return *default_instance_;
}

Team* Team::default_instance_ = NULL;

Team* Team::New() const {
  return new Team;
}

void Team::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Team*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(team_id_, update_time_);
    if (has_team_name()) {
      if (team_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        team_name_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool Team::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:weizhu.user.Team)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 team_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &team_id_)));
          set_has_team_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_team_name;
        break;
      }

      // required string team_name = 2;
      case 2: {
        if (tag == 18) {
         parse_team_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_team_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_parent_team_id;
        break;
      }

      // optional int32 parent_team_id = 3;
      case 3: {
        if (tag == 24) {
         parse_parent_team_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &parent_team_id_)));
          set_has_parent_team_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(760)) goto parse_state;
        break;
      }

      // optional .weizhu.user.State state = 95 [default = NORMAL];
      case 95: {
        if (tag == 760) {
         parse_state:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::weizhu::user::State_IsValid(value)) {
            set_state(static_cast< ::weizhu::user::State >(value));
          } else {
            unknown_fields_stream.WriteVarint32(tag);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(768)) goto parse_create_admin_id;
        break;
      }

      // optional int64 create_admin_id = 96;
      case 96: {
        if (tag == 768) {
         parse_create_admin_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &create_admin_id_)));
          set_has_create_admin_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(776)) goto parse_create_time;
        break;
      }

      // optional int32 create_time = 97;
      case 97: {
        if (tag == 776) {
         parse_create_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &create_time_)));
          set_has_create_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(784)) goto parse_update_admin_id;
        break;
      }

      // optional int64 update_admin_id = 98;
      case 98: {
        if (tag == 784) {
         parse_update_admin_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &update_admin_id_)));
          set_has_update_admin_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(792)) goto parse_update_time;
        break;
      }

      // optional int32 update_time = 99;
      case 99: {
        if (tag == 792) {
         parse_update_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &update_time_)));
          set_has_update_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:weizhu.user.Team)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:weizhu.user.Team)
  return false;
#undef DO_
}

void Team::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:weizhu.user.Team)
  // required int32 team_id = 1;
  if (has_team_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->team_id(), output);
  }

  // required string team_name = 2;
  if (has_team_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->team_name(), output);
  }

  // optional int32 parent_team_id = 3;
  if (has_parent_team_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->parent_team_id(), output);
  }

  // optional .weizhu.user.State state = 95 [default = NORMAL];
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      95, this->state(), output);
  }

  // optional int64 create_admin_id = 96;
  if (has_create_admin_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(96, this->create_admin_id(), output);
  }

  // optional int32 create_time = 97;
  if (has_create_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(97, this->create_time(), output);
  }

  // optional int64 update_admin_id = 98;
  if (has_update_admin_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(98, this->update_admin_id(), output);
  }

  // optional int32 update_time = 99;
  if (has_update_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(99, this->update_time(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:weizhu.user.Team)
}

int Team::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 team_id = 1;
    if (has_team_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->team_id());
    }

    // required string team_name = 2;
    if (has_team_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->team_name());
    }

    // optional int32 parent_team_id = 3;
    if (has_parent_team_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->parent_team_id());
    }

    // optional .weizhu.user.State state = 95 [default = NORMAL];
    if (has_state()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->state());
    }

    // optional int64 create_admin_id = 96;
    if (has_create_admin_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->create_admin_id());
    }

    // optional int32 create_time = 97;
    if (has_create_time()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->create_time());
    }

    // optional int64 update_admin_id = 98;
    if (has_update_admin_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->update_admin_id());
    }

    // optional int32 update_time = 99;
    if (has_update_time()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->update_time());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Team::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Team*>(&from));
}

void Team::MergeFrom(const Team& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_team_id()) {
      set_team_id(from.team_id());
    }
    if (from.has_team_name()) {
      set_team_name(from.team_name());
    }
    if (from.has_parent_team_id()) {
      set_parent_team_id(from.parent_team_id());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_create_admin_id()) {
      set_create_admin_id(from.create_admin_id());
    }
    if (from.has_create_time()) {
      set_create_time(from.create_time());
    }
    if (from.has_update_admin_id()) {
      set_update_admin_id(from.update_admin_id());
    }
    if (from.has_update_time()) {
      set_update_time(from.update_time());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void Team::CopyFrom(const Team& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Team::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Team::Swap(Team* other) {
  if (other != this) {
    std::swap(team_id_, other->team_id_);
    std::swap(team_name_, other->team_name_);
    std::swap(parent_team_id_, other->parent_team_id_);
    std::swap(state_, other->state_);
    std::swap(create_admin_id_, other->create_admin_id_);
    std::swap(create_time_, other->create_time_);
    std::swap(update_admin_id_, other->update_admin_id_);
    std::swap(update_time_, other->update_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string Team::GetTypeName() const {
  return "weizhu.user.Team";
}


// ===================================================================

#ifndef _MSC_VER
const int Position::kPositionIdFieldNumber;
const int Position::kPositionNameFieldNumber;
const int Position::kPositionDescFieldNumber;
const int Position::kStateFieldNumber;
const int Position::kCreateAdminIdFieldNumber;
const int Position::kCreateTimeFieldNumber;
const int Position::kUpdateAdminIdFieldNumber;
const int Position::kUpdateTimeFieldNumber;
#endif  // !_MSC_VER

Position::Position()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:weizhu.user.Position)
}

void Position::InitAsDefaultInstance() {
}

Position::Position(const Position& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:weizhu.user.Position)
}

void Position::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  position_id_ = 0;
  position_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  position_desc_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  state_ = 0;
  create_admin_id_ = GOOGLE_LONGLONG(0);
  create_time_ = 0;
  update_admin_id_ = GOOGLE_LONGLONG(0);
  update_time_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Position::~Position() {
  // @@protoc_insertion_point(destructor:weizhu.user.Position)
  SharedDtor();
}

void Position::SharedDtor() {
  if (position_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete position_name_;
  }
  if (position_desc_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete position_desc_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void Position::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Position& Position::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_user_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_user_2eproto();
#endif
  return *default_instance_;
}

Position* Position::default_instance_ = NULL;

Position* Position::New() const {
  return new Position;
}

void Position::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Position*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(position_id_, state_);
    ZR_(create_admin_id_, update_time_);
    if (has_position_name()) {
      if (position_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        position_name_->clear();
      }
    }
    if (has_position_desc()) {
      if (position_desc_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        position_desc_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool Position::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:weizhu.user.Position)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 position_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &position_id_)));
          set_has_position_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_position_name;
        break;
      }

      // required string position_name = 2;
      case 2: {
        if (tag == 18) {
         parse_position_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_position_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_position_desc;
        break;
      }

      // required string position_desc = 3;
      case 3: {
        if (tag == 26) {
         parse_position_desc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_position_desc()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(760)) goto parse_state;
        break;
      }

      // optional .weizhu.user.State state = 95 [default = NORMAL];
      case 95: {
        if (tag == 760) {
         parse_state:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::weizhu::user::State_IsValid(value)) {
            set_state(static_cast< ::weizhu::user::State >(value));
          } else {
            unknown_fields_stream.WriteVarint32(tag);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(768)) goto parse_create_admin_id;
        break;
      }

      // optional int64 create_admin_id = 96;
      case 96: {
        if (tag == 768) {
         parse_create_admin_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &create_admin_id_)));
          set_has_create_admin_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(776)) goto parse_create_time;
        break;
      }

      // optional int32 create_time = 97;
      case 97: {
        if (tag == 776) {
         parse_create_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &create_time_)));
          set_has_create_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(784)) goto parse_update_admin_id;
        break;
      }

      // optional int64 update_admin_id = 98;
      case 98: {
        if (tag == 784) {
         parse_update_admin_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &update_admin_id_)));
          set_has_update_admin_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(792)) goto parse_update_time;
        break;
      }

      // optional int32 update_time = 99;
      case 99: {
        if (tag == 792) {
         parse_update_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &update_time_)));
          set_has_update_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:weizhu.user.Position)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:weizhu.user.Position)
  return false;
#undef DO_
}

void Position::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:weizhu.user.Position)
  // required int32 position_id = 1;
  if (has_position_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->position_id(), output);
  }

  // required string position_name = 2;
  if (has_position_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->position_name(), output);
  }

  // required string position_desc = 3;
  if (has_position_desc()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->position_desc(), output);
  }

  // optional .weizhu.user.State state = 95 [default = NORMAL];
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      95, this->state(), output);
  }

  // optional int64 create_admin_id = 96;
  if (has_create_admin_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(96, this->create_admin_id(), output);
  }

  // optional int32 create_time = 97;
  if (has_create_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(97, this->create_time(), output);
  }

  // optional int64 update_admin_id = 98;
  if (has_update_admin_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(98, this->update_admin_id(), output);
  }

  // optional int32 update_time = 99;
  if (has_update_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(99, this->update_time(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:weizhu.user.Position)
}

int Position::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 position_id = 1;
    if (has_position_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->position_id());
    }

    // required string position_name = 2;
    if (has_position_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->position_name());
    }

    // required string position_desc = 3;
    if (has_position_desc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->position_desc());
    }

    // optional .weizhu.user.State state = 95 [default = NORMAL];
    if (has_state()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->state());
    }

    // optional int64 create_admin_id = 96;
    if (has_create_admin_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->create_admin_id());
    }

    // optional int32 create_time = 97;
    if (has_create_time()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->create_time());
    }

    // optional int64 update_admin_id = 98;
    if (has_update_admin_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->update_admin_id());
    }

    // optional int32 update_time = 99;
    if (has_update_time()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->update_time());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Position::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Position*>(&from));
}

void Position::MergeFrom(const Position& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_position_id()) {
      set_position_id(from.position_id());
    }
    if (from.has_position_name()) {
      set_position_name(from.position_name());
    }
    if (from.has_position_desc()) {
      set_position_desc(from.position_desc());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_create_admin_id()) {
      set_create_admin_id(from.create_admin_id());
    }
    if (from.has_create_time()) {
      set_create_time(from.create_time());
    }
    if (from.has_update_admin_id()) {
      set_update_admin_id(from.update_admin_id());
    }
    if (from.has_update_time()) {
      set_update_time(from.update_time());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void Position::CopyFrom(const Position& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Position::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void Position::Swap(Position* other) {
  if (other != this) {
    std::swap(position_id_, other->position_id_);
    std::swap(position_name_, other->position_name_);
    std::swap(position_desc_, other->position_desc_);
    std::swap(state_, other->state_);
    std::swap(create_admin_id_, other->create_admin_id_);
    std::swap(create_time_, other->create_time_);
    std::swap(update_admin_id_, other->update_admin_id_);
    std::swap(update_time_, other->update_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string Position::GetTypeName() const {
  return "weizhu.user.Position";
}


// ===================================================================

#ifndef _MSC_VER
const int Level::kLevelIdFieldNumber;
const int Level::kLevelNameFieldNumber;
const int Level::kStateFieldNumber;
const int Level::kCreateAdminIdFieldNumber;
const int Level::kCreateTimeFieldNumber;
const int Level::kUpdateAdminIdFieldNumber;
const int Level::kUpdateTimeFieldNumber;
#endif  // !_MSC_VER

Level::Level()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:weizhu.user.Level)
}

void Level::InitAsDefaultInstance() {
}

Level::Level(const Level& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:weizhu.user.Level)
}

void Level::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  level_id_ = 0;
  level_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  state_ = 0;
  create_admin_id_ = GOOGLE_LONGLONG(0);
  create_time_ = 0;
  update_admin_id_ = GOOGLE_LONGLONG(0);
  update_time_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Level::~Level() {
  // @@protoc_insertion_point(destructor:weizhu.user.Level)
  SharedDtor();
}

void Level::SharedDtor() {
  if (level_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete level_name_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void Level::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Level& Level::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_user_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_user_2eproto();
#endif
  return *default_instance_;
}

Level* Level::default_instance_ = NULL;

Level* Level::New() const {
  return new Level;
}

void Level::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Level*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(level_id_, update_time_);
    if (has_level_name()) {
      if (level_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        level_name_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool Level::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:weizhu.user.Level)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 level_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_id_)));
          set_has_level_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_level_name;
        break;
      }

      // required string level_name = 2;
      case 2: {
        if (tag == 18) {
         parse_level_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_level_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(760)) goto parse_state;
        break;
      }

      // optional .weizhu.user.State state = 95 [default = NORMAL];
      case 95: {
        if (tag == 760) {
         parse_state:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::weizhu::user::State_IsValid(value)) {
            set_state(static_cast< ::weizhu::user::State >(value));
          } else {
            unknown_fields_stream.WriteVarint32(tag);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(768)) goto parse_create_admin_id;
        break;
      }

      // optional int64 create_admin_id = 96;
      case 96: {
        if (tag == 768) {
         parse_create_admin_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &create_admin_id_)));
          set_has_create_admin_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(776)) goto parse_create_time;
        break;
      }

      // optional int32 create_time = 97;
      case 97: {
        if (tag == 776) {
         parse_create_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &create_time_)));
          set_has_create_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(784)) goto parse_update_admin_id;
        break;
      }

      // optional int64 update_admin_id = 98;
      case 98: {
        if (tag == 784) {
         parse_update_admin_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &update_admin_id_)));
          set_has_update_admin_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(792)) goto parse_update_time;
        break;
      }

      // optional int32 update_time = 99;
      case 99: {
        if (tag == 792) {
         parse_update_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &update_time_)));
          set_has_update_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:weizhu.user.Level)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:weizhu.user.Level)
  return false;
#undef DO_
}

void Level::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:weizhu.user.Level)
  // required int32 level_id = 1;
  if (has_level_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->level_id(), output);
  }

  // required string level_name = 2;
  if (has_level_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->level_name(), output);
  }

  // optional .weizhu.user.State state = 95 [default = NORMAL];
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      95, this->state(), output);
  }

  // optional int64 create_admin_id = 96;
  if (has_create_admin_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(96, this->create_admin_id(), output);
  }

  // optional int32 create_time = 97;
  if (has_create_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(97, this->create_time(), output);
  }

  // optional int64 update_admin_id = 98;
  if (has_update_admin_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(98, this->update_admin_id(), output);
  }

  // optional int32 update_time = 99;
  if (has_update_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(99, this->update_time(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:weizhu.user.Level)
}

int Level::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 level_id = 1;
    if (has_level_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level_id());
    }

    // required string level_name = 2;
    if (has_level_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->level_name());
    }

    // optional .weizhu.user.State state = 95 [default = NORMAL];
    if (has_state()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->state());
    }

    // optional int64 create_admin_id = 96;
    if (has_create_admin_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->create_admin_id());
    }

    // optional int32 create_time = 97;
    if (has_create_time()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->create_time());
    }

    // optional int64 update_admin_id = 98;
    if (has_update_admin_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->update_admin_id());
    }

    // optional int32 update_time = 99;
    if (has_update_time()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->update_time());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Level::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Level*>(&from));
}

void Level::MergeFrom(const Level& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_level_id()) {
      set_level_id(from.level_id());
    }
    if (from.has_level_name()) {
      set_level_name(from.level_name());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_create_admin_id()) {
      set_create_admin_id(from.create_admin_id());
    }
    if (from.has_create_time()) {
      set_create_time(from.create_time());
    }
    if (from.has_update_admin_id()) {
      set_update_admin_id(from.update_admin_id());
    }
    if (from.has_update_time()) {
      set_update_time(from.update_time());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void Level::CopyFrom(const Level& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Level::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Level::Swap(Level* other) {
  if (other != this) {
    std::swap(level_id_, other->level_id_);
    std::swap(level_name_, other->level_name_);
    std::swap(state_, other->state_);
    std::swap(create_admin_id_, other->create_admin_id_);
    std::swap(create_time_, other->create_time_);
    std::swap(update_admin_id_, other->update_admin_id_);
    std::swap(update_time_, other->update_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string Level::GetTypeName() const {
  return "weizhu.user.Level";
}


// ===================================================================

bool UserBase_Gender_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const UserBase_Gender UserBase::MALE;
const UserBase_Gender UserBase::FEMALE;
const UserBase_Gender UserBase::Gender_MIN;
const UserBase_Gender UserBase::Gender_MAX;
const int UserBase::Gender_ARRAYSIZE;
#endif  // _MSC_VER
bool UserBase_State_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const UserBase_State UserBase::NORMAL;
const UserBase_State UserBase::DISABLE;
const UserBase_State UserBase::DELETE;
const UserBase_State UserBase::APPROVE;
const UserBase_State UserBase::State_MIN;
const UserBase_State UserBase::State_MAX;
const int UserBase::State_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int UserBase::kUserIdFieldNumber;
const int UserBase::kRawIdFieldNumber;
const int UserBase::kUserNameFieldNumber;
const int UserBase::kGenderFieldNumber;
const int UserBase::kAvatarFieldNumber;
const int UserBase::kMobileNoFieldNumber;
const int UserBase::kPhoneNoFieldNumber;
const int UserBase::kEmailFieldNumber;
const int UserBase::kSignatureFieldNumber;
const int UserBase::kInterestFieldNumber;
const int UserBase::kIsExpertFieldNumber;
const int UserBase::kLevelIdFieldNumber;
const int UserBase::kStateFieldNumber;
const int UserBase::kCreateAdminIdFieldNumber;
const int UserBase::kCreateTimeFieldNumber;
const int UserBase::kUpdateAdminIdFieldNumber;
const int UserBase::kUpdateTimeFieldNumber;
#endif  // !_MSC_VER

UserBase::UserBase()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:weizhu.user.UserBase)
}

void UserBase::InitAsDefaultInstance() {
}

UserBase::UserBase(const UserBase& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:weizhu.user.UserBase)
}

void UserBase::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  user_id_ = GOOGLE_LONGLONG(0);
  raw_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  gender_ = 0;
  avatar_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  email_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  signature_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  interest_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  is_expert_ = false;
  level_id_ = 0;
  state_ = 0;
  create_admin_id_ = GOOGLE_LONGLONG(0);
  create_time_ = 0;
  update_admin_id_ = GOOGLE_LONGLONG(0);
  update_time_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserBase::~UserBase() {
  // @@protoc_insertion_point(destructor:weizhu.user.UserBase)
  SharedDtor();
}

void UserBase::SharedDtor() {
  if (raw_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete raw_id_;
  }
  if (user_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete user_name_;
  }
  if (avatar_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete avatar_;
  }
  if (email_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete email_;
  }
  if (signature_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete signature_;
  }
  if (interest_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete interest_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void UserBase::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const UserBase& UserBase::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_user_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_user_2eproto();
#endif
  return *default_instance_;
}

UserBase* UserBase::default_instance_ = NULL;

UserBase* UserBase::New() const {
  return new UserBase;
}

void UserBase::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<UserBase*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 159) {
    user_id_ = GOOGLE_LONGLONG(0);
    if (has_raw_id()) {
      if (raw_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        raw_id_->clear();
      }
    }
    if (has_user_name()) {
      if (user_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        user_name_->clear();
      }
    }
    gender_ = 0;
    if (has_avatar()) {
      if (avatar_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        avatar_->clear();
      }
    }
    if (has_email()) {
      if (email_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        email_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 65280) {
    ZR_(level_id_, create_time_);
    if (has_signature()) {
      if (signature_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        signature_->clear();
      }
    }
    if (has_interest()) {
      if (interest_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        interest_->clear();
      }
    }
    is_expert_ = false;
  }
  update_time_ = 0;

#undef OFFSET_OF_FIELD_
#undef ZR_

  mobile_no_.Clear();
  phone_no_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool UserBase::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:weizhu.user.UserBase)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 user_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_raw_id;
        break;
      }

      // required string raw_id = 2;
      case 2: {
        if (tag == 18) {
         parse_raw_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_raw_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_user_name;
        break;
      }

      // required string user_name = 3;
      case 3: {
        if (tag == 26) {
         parse_user_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_gender;
        break;
      }

      // optional .weizhu.user.UserBase.Gender gender = 4;
      case 4: {
        if (tag == 32) {
         parse_gender:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::weizhu::user::UserBase_Gender_IsValid(value)) {
            set_gender(static_cast< ::weizhu::user::UserBase_Gender >(value));
          } else {
            unknown_fields_stream.WriteVarint32(tag);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_avatar;
        break;
      }

      // optional string avatar = 5;
      case 5: {
        if (tag == 42) {
         parse_avatar:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_avatar()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_mobile_no;
        break;
      }

      // repeated string mobile_no = 6;
      case 6: {
        if (tag == 50) {
         parse_mobile_no:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_mobile_no()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_mobile_no;
        if (input->ExpectTag(58)) goto parse_phone_no;
        break;
      }

      // repeated string phone_no = 7;
      case 7: {
        if (tag == 58) {
         parse_phone_no:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_phone_no()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_phone_no;
        if (input->ExpectTag(66)) goto parse_email;
        break;
      }

      // optional string email = 8;
      case 8: {
        if (tag == 66) {
         parse_email:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_email()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_signature;
        break;
      }

      // optional string signature = 9;
      case 9: {
        if (tag == 74) {
         parse_signature:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_signature()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_interest;
        break;
      }

      // optional string interest = 10;
      case 10: {
        if (tag == 82) {
         parse_interest:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_interest()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_is_expert;
        break;
      }

      // optional bool is_expert = 11;
      case 11: {
        if (tag == 88) {
         parse_is_expert:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_expert_)));
          set_has_is_expert();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_level_id;
        break;
      }

      // optional int32 level_id = 12;
      case 12: {
        if (tag == 96) {
         parse_level_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_id_)));
          set_has_level_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_state;
        break;
      }

      // optional .weizhu.user.UserBase.State state = 13 [default = NORMAL];
      case 13: {
        if (tag == 104) {
         parse_state:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::weizhu::user::UserBase_State_IsValid(value)) {
            set_state(static_cast< ::weizhu::user::UserBase_State >(value));
          } else {
            unknown_fields_stream.WriteVarint32(tag);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_create_admin_id;
        break;
      }

      // optional int64 create_admin_id = 14;
      case 14: {
        if (tag == 112) {
         parse_create_admin_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &create_admin_id_)));
          set_has_create_admin_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_create_time;
        break;
      }

      // optional int32 create_time = 15;
      case 15: {
        if (tag == 120) {
         parse_create_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &create_time_)));
          set_has_create_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(128)) goto parse_update_admin_id;
        break;
      }

      // optional int64 update_admin_id = 16;
      case 16: {
        if (tag == 128) {
         parse_update_admin_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &update_admin_id_)));
          set_has_update_admin_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(136)) goto parse_update_time;
        break;
      }

      // optional int32 update_time = 17;
      case 17: {
        if (tag == 136) {
         parse_update_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &update_time_)));
          set_has_update_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:weizhu.user.UserBase)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:weizhu.user.UserBase)
  return false;
#undef DO_
}

void UserBase::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:weizhu.user.UserBase)
  // required int64 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->user_id(), output);
  }

  // required string raw_id = 2;
  if (has_raw_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->raw_id(), output);
  }

  // required string user_name = 3;
  if (has_user_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->user_name(), output);
  }

  // optional .weizhu.user.UserBase.Gender gender = 4;
  if (has_gender()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->gender(), output);
  }

  // optional string avatar = 5;
  if (has_avatar()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->avatar(), output);
  }

  // repeated string mobile_no = 6;
  for (int i = 0; i < this->mobile_no_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->mobile_no(i), output);
  }

  // repeated string phone_no = 7;
  for (int i = 0; i < this->phone_no_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->phone_no(i), output);
  }

  // optional string email = 8;
  if (has_email()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->email(), output);
  }

  // optional string signature = 9;
  if (has_signature()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->signature(), output);
  }

  // optional string interest = 10;
  if (has_interest()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->interest(), output);
  }

  // optional bool is_expert = 11;
  if (has_is_expert()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->is_expert(), output);
  }

  // optional int32 level_id = 12;
  if (has_level_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->level_id(), output);
  }

  // optional .weizhu.user.UserBase.State state = 13 [default = NORMAL];
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      13, this->state(), output);
  }

  // optional int64 create_admin_id = 14;
  if (has_create_admin_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(14, this->create_admin_id(), output);
  }

  // optional int32 create_time = 15;
  if (has_create_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->create_time(), output);
  }

  // optional int64 update_admin_id = 16;
  if (has_update_admin_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(16, this->update_admin_id(), output);
  }

  // optional int32 update_time = 17;
  if (has_update_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->update_time(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:weizhu.user.UserBase)
}

int UserBase::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->user_id());
    }

    // required string raw_id = 2;
    if (has_raw_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->raw_id());
    }

    // required string user_name = 3;
    if (has_user_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->user_name());
    }

    // optional .weizhu.user.UserBase.Gender gender = 4;
    if (has_gender()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->gender());
    }

    // optional string avatar = 5;
    if (has_avatar()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->avatar());
    }

    // optional string email = 8;
    if (has_email()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->email());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string signature = 9;
    if (has_signature()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->signature());
    }

    // optional string interest = 10;
    if (has_interest()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->interest());
    }

    // optional bool is_expert = 11;
    if (has_is_expert()) {
      total_size += 1 + 1;
    }

    // optional int32 level_id = 12;
    if (has_level_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level_id());
    }

    // optional .weizhu.user.UserBase.State state = 13 [default = NORMAL];
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->state());
    }

    // optional int64 create_admin_id = 14;
    if (has_create_admin_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->create_admin_id());
    }

    // optional int32 create_time = 15;
    if (has_create_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->create_time());
    }

    // optional int64 update_admin_id = 16;
    if (has_update_admin_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->update_admin_id());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional int32 update_time = 17;
    if (has_update_time()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->update_time());
    }

  }
  // repeated string mobile_no = 6;
  total_size += 1 * this->mobile_no_size();
  for (int i = 0; i < this->mobile_no_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->mobile_no(i));
  }

  // repeated string phone_no = 7;
  total_size += 1 * this->phone_no_size();
  for (int i = 0; i < this->phone_no_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->phone_no(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserBase::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const UserBase*>(&from));
}

void UserBase::MergeFrom(const UserBase& from) {
  GOOGLE_CHECK_NE(&from, this);
  mobile_no_.MergeFrom(from.mobile_no_);
  phone_no_.MergeFrom(from.phone_no_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_raw_id()) {
      set_raw_id(from.raw_id());
    }
    if (from.has_user_name()) {
      set_user_name(from.user_name());
    }
    if (from.has_gender()) {
      set_gender(from.gender());
    }
    if (from.has_avatar()) {
      set_avatar(from.avatar());
    }
    if (from.has_email()) {
      set_email(from.email());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_signature()) {
      set_signature(from.signature());
    }
    if (from.has_interest()) {
      set_interest(from.interest());
    }
    if (from.has_is_expert()) {
      set_is_expert(from.is_expert());
    }
    if (from.has_level_id()) {
      set_level_id(from.level_id());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_create_admin_id()) {
      set_create_admin_id(from.create_admin_id());
    }
    if (from.has_create_time()) {
      set_create_time(from.create_time());
    }
    if (from.has_update_admin_id()) {
      set_update_admin_id(from.update_admin_id());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_update_time()) {
      set_update_time(from.update_time());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void UserBase::CopyFrom(const UserBase& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserBase::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void UserBase::Swap(UserBase* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(raw_id_, other->raw_id_);
    std::swap(user_name_, other->user_name_);
    std::swap(gender_, other->gender_);
    std::swap(avatar_, other->avatar_);
    mobile_no_.Swap(&other->mobile_no_);
    phone_no_.Swap(&other->phone_no_);
    std::swap(email_, other->email_);
    std::swap(signature_, other->signature_);
    std::swap(interest_, other->interest_);
    std::swap(is_expert_, other->is_expert_);
    std::swap(level_id_, other->level_id_);
    std::swap(state_, other->state_);
    std::swap(create_admin_id_, other->create_admin_id_);
    std::swap(create_time_, other->create_time_);
    std::swap(update_admin_id_, other->update_admin_id_);
    std::swap(update_time_, other->update_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string UserBase::GetTypeName() const {
  return "weizhu.user.UserBase";
}


// ===================================================================

#ifndef _MSC_VER
const int UserMark::kUserIdFieldNumber;
const int UserMark::kIsStarFieldNumber;
const int UserMark::kStarTimeFieldNumber;
const int UserMark::kMarkNameFieldNumber;
#endif  // !_MSC_VER

UserMark::UserMark()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:weizhu.user.UserMark)
}

void UserMark::InitAsDefaultInstance() {
}

UserMark::UserMark(const UserMark& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:weizhu.user.UserMark)
}

void UserMark::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  user_id_ = GOOGLE_LONGLONG(0);
  is_star_ = false;
  star_time_ = 0;
  mark_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserMark::~UserMark() {
  // @@protoc_insertion_point(destructor:weizhu.user.UserMark)
  SharedDtor();
}

void UserMark::SharedDtor() {
  if (mark_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete mark_name_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void UserMark::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const UserMark& UserMark::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_user_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_user_2eproto();
#endif
  return *default_instance_;
}

UserMark* UserMark::default_instance_ = NULL;

UserMark* UserMark::New() const {
  return new UserMark;
}

void UserMark::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<UserMark*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(user_id_, star_time_);
    if (has_mark_name()) {
      if (mark_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        mark_name_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool UserMark::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:weizhu.user.UserMark)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 user_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_is_star;
        break;
      }

      // required bool is_star = 2;
      case 2: {
        if (tag == 16) {
         parse_is_star:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_star_)));
          set_has_is_star();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_star_time;
        break;
      }

      // optional int32 star_time = 3;
      case 3: {
        if (tag == 24) {
         parse_star_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &star_time_)));
          set_has_star_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_mark_name;
        break;
      }

      // optional string mark_name = 4;
      case 4: {
        if (tag == 34) {
         parse_mark_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mark_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:weizhu.user.UserMark)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:weizhu.user.UserMark)
  return false;
#undef DO_
}

void UserMark::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:weizhu.user.UserMark)
  // required int64 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->user_id(), output);
  }

  // required bool is_star = 2;
  if (has_is_star()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->is_star(), output);
  }

  // optional int32 star_time = 3;
  if (has_star_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->star_time(), output);
  }

  // optional string mark_name = 4;
  if (has_mark_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->mark_name(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:weizhu.user.UserMark)
}

int UserMark::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->user_id());
    }

    // required bool is_star = 2;
    if (has_is_star()) {
      total_size += 1 + 1;
    }

    // optional int32 star_time = 3;
    if (has_star_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->star_time());
    }

    // optional string mark_name = 4;
    if (has_mark_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->mark_name());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserMark::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const UserMark*>(&from));
}

void UserMark::MergeFrom(const UserMark& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_is_star()) {
      set_is_star(from.is_star());
    }
    if (from.has_star_time()) {
      set_star_time(from.star_time());
    }
    if (from.has_mark_name()) {
      set_mark_name(from.mark_name());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void UserMark::CopyFrom(const UserMark& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserMark::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void UserMark::Swap(UserMark* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(is_star_, other->is_star_);
    std::swap(star_time_, other->star_time_);
    std::swap(mark_name_, other->mark_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string UserMark::GetTypeName() const {
  return "weizhu.user.UserMark";
}


// ===================================================================

#ifndef _MSC_VER
const int UserTeam::kUserIdFieldNumber;
const int UserTeam::kTeamIdFieldNumber;
const int UserTeam::kPositionIdFieldNumber;
#endif  // !_MSC_VER

UserTeam::UserTeam()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:weizhu.user.UserTeam)
}

void UserTeam::InitAsDefaultInstance() {
}

UserTeam::UserTeam(const UserTeam& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:weizhu.user.UserTeam)
}

void UserTeam::SharedCtor() {
  _cached_size_ = 0;
  user_id_ = GOOGLE_LONGLONG(0);
  team_id_ = 0;
  position_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserTeam::~UserTeam() {
  // @@protoc_insertion_point(destructor:weizhu.user.UserTeam)
  SharedDtor();
}

void UserTeam::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void UserTeam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const UserTeam& UserTeam::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_user_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_user_2eproto();
#endif
  return *default_instance_;
}

UserTeam* UserTeam::default_instance_ = NULL;

UserTeam* UserTeam::New() const {
  return new UserTeam;
}

void UserTeam::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<UserTeam*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(user_id_, position_id_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool UserTeam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:weizhu.user.UserTeam)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 user_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_team_id;
        break;
      }

      // required int32 team_id = 2;
      case 2: {
        if (tag == 16) {
         parse_team_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &team_id_)));
          set_has_team_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_position_id;
        break;
      }

      // optional int32 position_id = 3;
      case 3: {
        if (tag == 24) {
         parse_position_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &position_id_)));
          set_has_position_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:weizhu.user.UserTeam)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:weizhu.user.UserTeam)
  return false;
#undef DO_
}

void UserTeam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:weizhu.user.UserTeam)
  // required int64 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->user_id(), output);
  }

  // required int32 team_id = 2;
  if (has_team_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->team_id(), output);
  }

  // optional int32 position_id = 3;
  if (has_position_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->position_id(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:weizhu.user.UserTeam)
}

int UserTeam::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->user_id());
    }

    // required int32 team_id = 2;
    if (has_team_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->team_id());
    }

    // optional int32 position_id = 3;
    if (has_position_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->position_id());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserTeam::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const UserTeam*>(&from));
}

void UserTeam::MergeFrom(const UserTeam& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_team_id()) {
      set_team_id(from.team_id());
    }
    if (from.has_position_id()) {
      set_position_id(from.position_id());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void UserTeam::CopyFrom(const UserTeam& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserTeam::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void UserTeam::Swap(UserTeam* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(team_id_, other->team_id_);
    std::swap(position_id_, other->position_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string UserTeam::GetTypeName() const {
  return "weizhu.user.UserTeam";
}


// ===================================================================

#ifndef _MSC_VER
const int UserExtends::kUserIdFieldNumber;
const int UserExtends::kNameFieldNumber;
const int UserExtends::kValueFieldNumber;
#endif  // !_MSC_VER

UserExtends::UserExtends()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:weizhu.user.UserExtends)
}

void UserExtends::InitAsDefaultInstance() {
}

UserExtends::UserExtends(const UserExtends& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:weizhu.user.UserExtends)
}

void UserExtends::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  user_id_ = GOOGLE_LONGLONG(0);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserExtends::~UserExtends() {
  // @@protoc_insertion_point(destructor:weizhu.user.UserExtends)
  SharedDtor();
}

void UserExtends::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete value_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void UserExtends::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const UserExtends& UserExtends::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_user_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_user_2eproto();
#endif
  return *default_instance_;
}

UserExtends* UserExtends::default_instance_ = NULL;

UserExtends* UserExtends::New() const {
  return new UserExtends;
}

void UserExtends::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    user_id_ = GOOGLE_LONGLONG(0);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    if (has_value()) {
      if (value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        value_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool UserExtends::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:weizhu.user.UserExtends)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 user_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // required string name = 2;
      case 2: {
        if (tag == 18) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_value;
        break;
      }

      // required string value = 3;
      case 3: {
        if (tag == 26) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:weizhu.user.UserExtends)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:weizhu.user.UserExtends)
  return false;
#undef DO_
}

void UserExtends::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:weizhu.user.UserExtends)
  // required int64 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->user_id(), output);
  }

  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // required string value = 3;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->value(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:weizhu.user.UserExtends)
}

int UserExtends::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->user_id());
    }

    // required string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required string value = 3;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->value());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserExtends::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const UserExtends*>(&from));
}

void UserExtends::MergeFrom(const UserExtends& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void UserExtends::CopyFrom(const UserExtends& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserExtends::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void UserExtends::Swap(UserExtends* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(name_, other->name_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string UserExtends::GetTypeName() const {
  return "weizhu.user.UserExtends";
}


// ===================================================================

#ifndef _MSC_VER
const int UserExperience::kExperienceIdFieldNumber;
const int UserExperience::kExperienceContentFieldNumber;
#endif  // !_MSC_VER

UserExperience::UserExperience()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:weizhu.user.UserExperience)
}

void UserExperience::InitAsDefaultInstance() {
}

UserExperience::UserExperience(const UserExperience& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:weizhu.user.UserExperience)
}

void UserExperience::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  experience_id_ = 0;
  experience_content_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserExperience::~UserExperience() {
  // @@protoc_insertion_point(destructor:weizhu.user.UserExperience)
  SharedDtor();
}

void UserExperience::SharedDtor() {
  if (experience_content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete experience_content_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void UserExperience::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const UserExperience& UserExperience::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_user_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_user_2eproto();
#endif
  return *default_instance_;
}

UserExperience* UserExperience::default_instance_ = NULL;

UserExperience* UserExperience::New() const {
  return new UserExperience;
}

void UserExperience::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    experience_id_ = 0;
    if (has_experience_content()) {
      if (experience_content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        experience_content_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool UserExperience::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:weizhu.user.UserExperience)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 experience_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &experience_id_)));
          set_has_experience_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_experience_content;
        break;
      }

      // required string experience_content = 2;
      case 2: {
        if (tag == 18) {
         parse_experience_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_experience_content()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:weizhu.user.UserExperience)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:weizhu.user.UserExperience)
  return false;
#undef DO_
}

void UserExperience::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:weizhu.user.UserExperience)
  // required int32 experience_id = 1;
  if (has_experience_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->experience_id(), output);
  }

  // required string experience_content = 2;
  if (has_experience_content()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->experience_content(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:weizhu.user.UserExperience)
}

int UserExperience::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 experience_id = 1;
    if (has_experience_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->experience_id());
    }

    // required string experience_content = 2;
    if (has_experience_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->experience_content());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserExperience::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const UserExperience*>(&from));
}

void UserExperience::MergeFrom(const UserExperience& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_experience_id()) {
      set_experience_id(from.experience_id());
    }
    if (from.has_experience_content()) {
      set_experience_content(from.experience_content());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void UserExperience::CopyFrom(const UserExperience& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserExperience::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void UserExperience::Swap(UserExperience* other) {
  if (other != this) {
    std::swap(experience_id_, other->experience_id_);
    std::swap(experience_content_, other->experience_content_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string UserExperience::GetTypeName() const {
  return "weizhu.user.UserExperience";
}


// ===================================================================

#ifndef _MSC_VER
const int UserAbilityTag::kUserIdFieldNumber;
const int UserAbilityTag::kTagNameFieldNumber;
const int UserAbilityTag::kTagTimeFieldNumber;
const int UserAbilityTag::kTagCountFieldNumber;
const int UserAbilityTag::kCreateUserIdFieldNumber;
const int UserAbilityTag::kCreateTimeFieldNumber;
const int UserAbilityTag::kIsTagFieldNumber;
#endif  // !_MSC_VER

UserAbilityTag::UserAbilityTag()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:weizhu.user.UserAbilityTag)
}

void UserAbilityTag::InitAsDefaultInstance() {
}

UserAbilityTag::UserAbilityTag(const UserAbilityTag& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:weizhu.user.UserAbilityTag)
}

void UserAbilityTag::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  user_id_ = GOOGLE_LONGLONG(0);
  tag_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tag_time_ = 0;
  tag_count_ = 0;
  create_user_id_ = GOOGLE_LONGLONG(0);
  create_time_ = 0;
  is_tag_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserAbilityTag::~UserAbilityTag() {
  // @@protoc_insertion_point(destructor:weizhu.user.UserAbilityTag)
  SharedDtor();
}

void UserAbilityTag::SharedDtor() {
  if (tag_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete tag_name_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void UserAbilityTag::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const UserAbilityTag& UserAbilityTag::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_user_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_user_2eproto();
#endif
  return *default_instance_;
}

UserAbilityTag* UserAbilityTag::default_instance_ = NULL;

UserAbilityTag* UserAbilityTag::New() const {
  return new UserAbilityTag;
}

void UserAbilityTag::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<UserAbilityTag*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(tag_time_, is_tag_);
    user_id_ = GOOGLE_LONGLONG(0);
    if (has_tag_name()) {
      if (tag_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        tag_name_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool UserAbilityTag::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:weizhu.user.UserAbilityTag)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 user_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_tag_name;
        break;
      }

      // required string tag_name = 2;
      case 2: {
        if (tag == 18) {
         parse_tag_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tag_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_tag_time;
        break;
      }

      // required int32 tag_time = 3;
      case 3: {
        if (tag == 24) {
         parse_tag_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tag_time_)));
          set_has_tag_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_tag_count;
        break;
      }

      // required int32 tag_count = 4;
      case 4: {
        if (tag == 32) {
         parse_tag_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tag_count_)));
          set_has_tag_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_create_user_id;
        break;
      }

      // optional int64 create_user_id = 5;
      case 5: {
        if (tag == 40) {
         parse_create_user_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &create_user_id_)));
          set_has_create_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_create_time;
        break;
      }

      // optional int32 create_time = 6;
      case 6: {
        if (tag == 48) {
         parse_create_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &create_time_)));
          set_has_create_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_is_tag;
        break;
      }

      // optional bool is_tag = 7;
      case 7: {
        if (tag == 56) {
         parse_is_tag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_tag_)));
          set_has_is_tag();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:weizhu.user.UserAbilityTag)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:weizhu.user.UserAbilityTag)
  return false;
#undef DO_
}

void UserAbilityTag::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:weizhu.user.UserAbilityTag)
  // required int64 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->user_id(), output);
  }

  // required string tag_name = 2;
  if (has_tag_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->tag_name(), output);
  }

  // required int32 tag_time = 3;
  if (has_tag_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->tag_time(), output);
  }

  // required int32 tag_count = 4;
  if (has_tag_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->tag_count(), output);
  }

  // optional int64 create_user_id = 5;
  if (has_create_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->create_user_id(), output);
  }

  // optional int32 create_time = 6;
  if (has_create_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->create_time(), output);
  }

  // optional bool is_tag = 7;
  if (has_is_tag()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->is_tag(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:weizhu.user.UserAbilityTag)
}

int UserAbilityTag::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->user_id());
    }

    // required string tag_name = 2;
    if (has_tag_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->tag_name());
    }

    // required int32 tag_time = 3;
    if (has_tag_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tag_time());
    }

    // required int32 tag_count = 4;
    if (has_tag_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tag_count());
    }

    // optional int64 create_user_id = 5;
    if (has_create_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->create_user_id());
    }

    // optional int32 create_time = 6;
    if (has_create_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->create_time());
    }

    // optional bool is_tag = 7;
    if (has_is_tag()) {
      total_size += 1 + 1;
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserAbilityTag::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const UserAbilityTag*>(&from));
}

void UserAbilityTag::MergeFrom(const UserAbilityTag& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_tag_name()) {
      set_tag_name(from.tag_name());
    }
    if (from.has_tag_time()) {
      set_tag_time(from.tag_time());
    }
    if (from.has_tag_count()) {
      set_tag_count(from.tag_count());
    }
    if (from.has_create_user_id()) {
      set_create_user_id(from.create_user_id());
    }
    if (from.has_create_time()) {
      set_create_time(from.create_time());
    }
    if (from.has_is_tag()) {
      set_is_tag(from.is_tag());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void UserAbilityTag::CopyFrom(const UserAbilityTag& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserAbilityTag::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void UserAbilityTag::Swap(UserAbilityTag* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(tag_name_, other->tag_name_);
    std::swap(tag_time_, other->tag_time_);
    std::swap(tag_count_, other->tag_count_);
    std::swap(create_user_id_, other->create_user_id_);
    std::swap(create_time_, other->create_time_);
    std::swap(is_tag_, other->is_tag_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string UserAbilityTag::GetTypeName() const {
  return "weizhu.user.UserAbilityTag";
}


// ===================================================================

#ifndef _MSC_VER
const int User::kBaseFieldNumber;
const int User::kMarkFieldNumber;
const int User::kTeamFieldNumber;
const int User::kExtFieldNumber;
#endif  // !_MSC_VER

User::User()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:weizhu.user.User)
}

void User::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  base_ = const_cast< ::weizhu::user::UserBase*>(
      ::weizhu::user::UserBase::internal_default_instance());
#else
  base_ = const_cast< ::weizhu::user::UserBase*>(&::weizhu::user::UserBase::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  mark_ = const_cast< ::weizhu::user::UserMark*>(
      ::weizhu::user::UserMark::internal_default_instance());
#else
  mark_ = const_cast< ::weizhu::user::UserMark*>(&::weizhu::user::UserMark::default_instance());
#endif
}

User::User(const User& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:weizhu.user.User)
}

void User::SharedCtor() {
  _cached_size_ = 0;
  base_ = NULL;
  mark_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

User::~User() {
  // @@protoc_insertion_point(destructor:weizhu.user.User)
  SharedDtor();
}

void User::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete base_;
    delete mark_;
  }
}

void User::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const User& User::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_user_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_user_2eproto();
#endif
  return *default_instance_;
}

User* User::default_instance_ = NULL;

User* User::New() const {
  return new User;
}

void User::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_base()) {
      if (base_ != NULL) base_->::weizhu::user::UserBase::Clear();
    }
    if (has_mark()) {
      if (mark_ != NULL) mark_->::weizhu::user::UserMark::Clear();
    }
  }
  team_.Clear();
  ext_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool User::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:weizhu.user.User)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .weizhu.user.UserBase base = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_base()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_mark;
        break;
      }

      // optional .weizhu.user.UserMark mark = 2;
      case 2: {
        if (tag == 18) {
         parse_mark:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mark()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_team;
        break;
      }

      // repeated .weizhu.user.UserTeam team = 3;
      case 3: {
        if (tag == 26) {
         parse_team:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_team()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_team;
        if (input->ExpectTag(34)) goto parse_ext;
        break;
      }

      // repeated .weizhu.user.UserExtends ext = 4;
      case 4: {
        if (tag == 34) {
         parse_ext:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_ext()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_ext;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:weizhu.user.User)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:weizhu.user.User)
  return false;
#undef DO_
}

void User::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:weizhu.user.User)
  // required .weizhu.user.UserBase base = 1;
  if (has_base()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->base(), output);
  }

  // optional .weizhu.user.UserMark mark = 2;
  if (has_mark()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->mark(), output);
  }

  // repeated .weizhu.user.UserTeam team = 3;
  for (int i = 0; i < this->team_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->team(i), output);
  }

  // repeated .weizhu.user.UserExtends ext = 4;
  for (int i = 0; i < this->ext_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, this->ext(i), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:weizhu.user.User)
}

int User::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .weizhu.user.UserBase base = 1;
    if (has_base()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->base());
    }

    // optional .weizhu.user.UserMark mark = 2;
    if (has_mark()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->mark());
    }

  }
  // repeated .weizhu.user.UserTeam team = 3;
  total_size += 1 * this->team_size();
  for (int i = 0; i < this->team_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->team(i));
  }

  // repeated .weizhu.user.UserExtends ext = 4;
  total_size += 1 * this->ext_size();
  for (int i = 0; i < this->ext_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->ext(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void User::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const User*>(&from));
}

void User::MergeFrom(const User& from) {
  GOOGLE_CHECK_NE(&from, this);
  team_.MergeFrom(from.team_);
  ext_.MergeFrom(from.ext_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_base()) {
      mutable_base()->::weizhu::user::UserBase::MergeFrom(from.base());
    }
    if (from.has_mark()) {
      mutable_mark()->::weizhu::user::UserMark::MergeFrom(from.mark());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void User::CopyFrom(const User& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool User::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_base()) {
    if (!this->base().IsInitialized()) return false;
  }
  if (has_mark()) {
    if (!this->mark().IsInitialized()) return false;
  }
  if (!::google::protobuf::internal::AllAreInitialized(this->team())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->ext())) return false;
  return true;
}

void User::Swap(User* other) {
  if (other != this) {
    std::swap(base_, other->base_);
    std::swap(mark_, other->mark_);
    team_.Swap(&other->team_);
    ext_.Swap(&other->ext_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string User::GetTypeName() const {
  return "weizhu.user.User";
}


// ===================================================================

#ifndef _MSC_VER
const int GetUserByIdRequest::kUserIdFieldNumber;
#endif  // !_MSC_VER

GetUserByIdRequest::GetUserByIdRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:weizhu.user.GetUserByIdRequest)
}

void GetUserByIdRequest::InitAsDefaultInstance() {
}

GetUserByIdRequest::GetUserByIdRequest(const GetUserByIdRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:weizhu.user.GetUserByIdRequest)
}

void GetUserByIdRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetUserByIdRequest::~GetUserByIdRequest() {
  // @@protoc_insertion_point(destructor:weizhu.user.GetUserByIdRequest)
  SharedDtor();
}

void GetUserByIdRequest::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void GetUserByIdRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GetUserByIdRequest& GetUserByIdRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_user_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_user_2eproto();
#endif
  return *default_instance_;
}

GetUserByIdRequest* GetUserByIdRequest::default_instance_ = NULL;

GetUserByIdRequest* GetUserByIdRequest::New() const {
  return new GetUserByIdRequest;
}

void GetUserByIdRequest::Clear() {
  user_id_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool GetUserByIdRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:weizhu.user.GetUserByIdRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int64 user_id = 1;
      case 1: {
        if (tag == 8) {
         parse_user_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 8, input, this->mutable_user_id())));
        } else if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_user_id())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8)) goto parse_user_id;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:weizhu.user.GetUserByIdRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:weizhu.user.GetUserByIdRequest)
  return false;
#undef DO_
}

void GetUserByIdRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:weizhu.user.GetUserByIdRequest)
  // repeated int64 user_id = 1;
  for (int i = 0; i < this->user_id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      1, this->user_id(i), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:weizhu.user.GetUserByIdRequest)
}

int GetUserByIdRequest::ByteSize() const {
  int total_size = 0;

  // repeated int64 user_id = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->user_id_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->user_id(i));
    }
    total_size += 1 * this->user_id_size() + data_size;
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetUserByIdRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GetUserByIdRequest*>(&from));
}

void GetUserByIdRequest::MergeFrom(const GetUserByIdRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  user_id_.MergeFrom(from.user_id_);
  mutable_unknown_fields()->append(from.unknown_fields());
}

void GetUserByIdRequest::CopyFrom(const GetUserByIdRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetUserByIdRequest::IsInitialized() const {

  return true;
}

void GetUserByIdRequest::Swap(GetUserByIdRequest* other) {
  if (other != this) {
    user_id_.Swap(&other->user_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string GetUserByIdRequest::GetTypeName() const {
  return "weizhu.user.GetUserByIdRequest";
}


// ===================================================================

#ifndef _MSC_VER
const int GetUserByMobileNoRequest::kMobileNoFieldNumber;
#endif  // !_MSC_VER

GetUserByMobileNoRequest::GetUserByMobileNoRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:weizhu.user.GetUserByMobileNoRequest)
}

void GetUserByMobileNoRequest::InitAsDefaultInstance() {
}

GetUserByMobileNoRequest::GetUserByMobileNoRequest(const GetUserByMobileNoRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:weizhu.user.GetUserByMobileNoRequest)
}

void GetUserByMobileNoRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  mobile_no_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetUserByMobileNoRequest::~GetUserByMobileNoRequest() {
  // @@protoc_insertion_point(destructor:weizhu.user.GetUserByMobileNoRequest)
  SharedDtor();
}

void GetUserByMobileNoRequest::SharedDtor() {
  if (mobile_no_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete mobile_no_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void GetUserByMobileNoRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GetUserByMobileNoRequest& GetUserByMobileNoRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_user_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_user_2eproto();
#endif
  return *default_instance_;
}

GetUserByMobileNoRequest* GetUserByMobileNoRequest::default_instance_ = NULL;

GetUserByMobileNoRequest* GetUserByMobileNoRequest::New() const {
  return new GetUserByMobileNoRequest;
}

void GetUserByMobileNoRequest::Clear() {
  if (has_mobile_no()) {
    if (mobile_no_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      mobile_no_->clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool GetUserByMobileNoRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:weizhu.user.GetUserByMobileNoRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string mobile_no = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mobile_no()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:weizhu.user.GetUserByMobileNoRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:weizhu.user.GetUserByMobileNoRequest)
  return false;
#undef DO_
}

void GetUserByMobileNoRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:weizhu.user.GetUserByMobileNoRequest)
  // required string mobile_no = 1;
  if (has_mobile_no()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->mobile_no(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:weizhu.user.GetUserByMobileNoRequest)
}

int GetUserByMobileNoRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string mobile_no = 1;
    if (has_mobile_no()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->mobile_no());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetUserByMobileNoRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GetUserByMobileNoRequest*>(&from));
}

void GetUserByMobileNoRequest::MergeFrom(const GetUserByMobileNoRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mobile_no()) {
      set_mobile_no(from.mobile_no());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void GetUserByMobileNoRequest::CopyFrom(const GetUserByMobileNoRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetUserByMobileNoRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GetUserByMobileNoRequest::Swap(GetUserByMobileNoRequest* other) {
  if (other != this) {
    std::swap(mobile_no_, other->mobile_no_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string GetUserByMobileNoRequest::GetTypeName() const {
  return "weizhu.user.GetUserByMobileNoRequest";
}


// ===================================================================

#ifndef _MSC_VER
const int GetUserResponse::kUserFieldNumber;
const int GetUserResponse::kRefTeamFieldNumber;
const int GetUserResponse::kRefPositionFieldNumber;
const int GetUserResponse::kRefLevelFieldNumber;
#endif  // !_MSC_VER

GetUserResponse::GetUserResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:weizhu.user.GetUserResponse)
}

void GetUserResponse::InitAsDefaultInstance() {
}

GetUserResponse::GetUserResponse(const GetUserResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:weizhu.user.GetUserResponse)
}

void GetUserResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetUserResponse::~GetUserResponse() {
  // @@protoc_insertion_point(destructor:weizhu.user.GetUserResponse)
  SharedDtor();
}

void GetUserResponse::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void GetUserResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GetUserResponse& GetUserResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_user_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_user_2eproto();
#endif
  return *default_instance_;
}

GetUserResponse* GetUserResponse::default_instance_ = NULL;

GetUserResponse* GetUserResponse::New() const {
  return new GetUserResponse;
}

void GetUserResponse::Clear() {
  user_.Clear();
  ref_team_.Clear();
  ref_position_.Clear();
  ref_level_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool GetUserResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:weizhu.user.GetUserResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .weizhu.user.User user = 1;
      case 1: {
        if (tag == 10) {
         parse_user:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_user()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_user;
        if (input->ExpectTag(18)) goto parse_ref_team;
        break;
      }

      // repeated .weizhu.user.Team ref_team = 2;
      case 2: {
        if (tag == 18) {
         parse_ref_team:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_ref_team()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_ref_team;
        if (input->ExpectTag(26)) goto parse_ref_position;
        break;
      }

      // repeated .weizhu.user.Position ref_position = 3;
      case 3: {
        if (tag == 26) {
         parse_ref_position:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_ref_position()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_ref_position;
        if (input->ExpectTag(34)) goto parse_ref_level;
        break;
      }

      // repeated .weizhu.user.Level ref_level = 4;
      case 4: {
        if (tag == 34) {
         parse_ref_level:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_ref_level()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_ref_level;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:weizhu.user.GetUserResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:weizhu.user.GetUserResponse)
  return false;
#undef DO_
}

void GetUserResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:weizhu.user.GetUserResponse)
  // repeated .weizhu.user.User user = 1;
  for (int i = 0; i < this->user_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->user(i), output);
  }

  // repeated .weizhu.user.Team ref_team = 2;
  for (int i = 0; i < this->ref_team_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->ref_team(i), output);
  }

  // repeated .weizhu.user.Position ref_position = 3;
  for (int i = 0; i < this->ref_position_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->ref_position(i), output);
  }

  // repeated .weizhu.user.Level ref_level = 4;
  for (int i = 0; i < this->ref_level_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, this->ref_level(i), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:weizhu.user.GetUserResponse)
}

int GetUserResponse::ByteSize() const {
  int total_size = 0;

  // repeated .weizhu.user.User user = 1;
  total_size += 1 * this->user_size();
  for (int i = 0; i < this->user_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->user(i));
  }

  // repeated .weizhu.user.Team ref_team = 2;
  total_size += 1 * this->ref_team_size();
  for (int i = 0; i < this->ref_team_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->ref_team(i));
  }

  // repeated .weizhu.user.Position ref_position = 3;
  total_size += 1 * this->ref_position_size();
  for (int i = 0; i < this->ref_position_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->ref_position(i));
  }

  // repeated .weizhu.user.Level ref_level = 4;
  total_size += 1 * this->ref_level_size();
  for (int i = 0; i < this->ref_level_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->ref_level(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetUserResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GetUserResponse*>(&from));
}

void GetUserResponse::MergeFrom(const GetUserResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  user_.MergeFrom(from.user_);
  ref_team_.MergeFrom(from.ref_team_);
  ref_position_.MergeFrom(from.ref_position_);
  ref_level_.MergeFrom(from.ref_level_);
  mutable_unknown_fields()->append(from.unknown_fields());
}

void GetUserResponse::CopyFrom(const GetUserResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetUserResponse::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->user())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->ref_team())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->ref_position())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->ref_level())) return false;
  return true;
}

void GetUserResponse::Swap(GetUserResponse* other) {
  if (other != this) {
    user_.Swap(&other->user_);
    ref_team_.Swap(&other->ref_team_);
    ref_position_.Swap(&other->ref_position_);
    ref_level_.Swap(&other->ref_level_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string GetUserResponse::GetTypeName() const {
  return "weizhu.user.GetUserResponse";
}


// ===================================================================

#ifndef _MSC_VER
const int GetTeamRequest::kTeamIdFieldNumber;
#endif  // !_MSC_VER

GetTeamRequest::GetTeamRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:weizhu.user.GetTeamRequest)
}

void GetTeamRequest::InitAsDefaultInstance() {
}

GetTeamRequest::GetTeamRequest(const GetTeamRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:weizhu.user.GetTeamRequest)
}

void GetTeamRequest::SharedCtor() {
  _cached_size_ = 0;
  team_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetTeamRequest::~GetTeamRequest() {
  // @@protoc_insertion_point(destructor:weizhu.user.GetTeamRequest)
  SharedDtor();
}

void GetTeamRequest::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void GetTeamRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GetTeamRequest& GetTeamRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_user_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_user_2eproto();
#endif
  return *default_instance_;
}

GetTeamRequest* GetTeamRequest::default_instance_ = NULL;

GetTeamRequest* GetTeamRequest::New() const {
  return new GetTeamRequest;
}

void GetTeamRequest::Clear() {
  team_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool GetTeamRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:weizhu.user.GetTeamRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 team_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &team_id_)));
          set_has_team_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:weizhu.user.GetTeamRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:weizhu.user.GetTeamRequest)
  return false;
#undef DO_
}

void GetTeamRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:weizhu.user.GetTeamRequest)
  // optional int32 team_id = 1;
  if (has_team_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->team_id(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:weizhu.user.GetTeamRequest)
}

int GetTeamRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 team_id = 1;
    if (has_team_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->team_id());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetTeamRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GetTeamRequest*>(&from));
}

void GetTeamRequest::MergeFrom(const GetTeamRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_team_id()) {
      set_team_id(from.team_id());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void GetTeamRequest::CopyFrom(const GetTeamRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetTeamRequest::IsInitialized() const {

  return true;
}

void GetTeamRequest::Swap(GetTeamRequest* other) {
  if (other != this) {
    std::swap(team_id_, other->team_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string GetTeamRequest::GetTypeName() const {
  return "weizhu.user.GetTeamRequest";
}


// ===================================================================

#ifndef _MSC_VER
const int GetTeamResponse::kTeamFieldNumber;
const int GetTeamResponse::kSubUserTeamFieldNumber;
const int GetTeamResponse::kSubTeamIdFieldNumber;
const int GetTeamResponse::kRefUserFieldNumber;
const int GetTeamResponse::kRefTeamFieldNumber;
const int GetTeamResponse::kRefPositionFieldNumber;
const int GetTeamResponse::kRefLevelFieldNumber;
#endif  // !_MSC_VER

GetTeamResponse::GetTeamResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:weizhu.user.GetTeamResponse)
}

void GetTeamResponse::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  team_ = const_cast< ::weizhu::user::Team*>(
      ::weizhu::user::Team::internal_default_instance());
#else
  team_ = const_cast< ::weizhu::user::Team*>(&::weizhu::user::Team::default_instance());
#endif
}

GetTeamResponse::GetTeamResponse(const GetTeamResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:weizhu.user.GetTeamResponse)
}

void GetTeamResponse::SharedCtor() {
  _cached_size_ = 0;
  team_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetTeamResponse::~GetTeamResponse() {
  // @@protoc_insertion_point(destructor:weizhu.user.GetTeamResponse)
  SharedDtor();
}

void GetTeamResponse::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete team_;
  }
}

void GetTeamResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GetTeamResponse& GetTeamResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_user_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_user_2eproto();
#endif
  return *default_instance_;
}

GetTeamResponse* GetTeamResponse::default_instance_ = NULL;

GetTeamResponse* GetTeamResponse::New() const {
  return new GetTeamResponse;
}

void GetTeamResponse::Clear() {
  if (has_team()) {
    if (team_ != NULL) team_->::weizhu::user::Team::Clear();
  }
  sub_user_team_.Clear();
  sub_team_id_.Clear();
  ref_user_.Clear();
  ref_team_.Clear();
  ref_position_.Clear();
  ref_level_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool GetTeamResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:weizhu.user.GetTeamResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .weizhu.user.Team team = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_team()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_sub_user_team;
        break;
      }

      // repeated .weizhu.user.UserTeam sub_user_team = 2;
      case 2: {
        if (tag == 18) {
         parse_sub_user_team:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_sub_user_team()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_sub_user_team;
        if (input->ExpectTag(24)) goto parse_sub_team_id;
        break;
      }

      // repeated int32 sub_team_id = 3;
      case 3: {
        if (tag == 24) {
         parse_sub_team_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_sub_team_id())));
        } else if (tag == 26) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_sub_team_id())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_sub_team_id;
        if (input->ExpectTag(34)) goto parse_ref_user;
        break;
      }

      // repeated .weizhu.user.User ref_user = 4;
      case 4: {
        if (tag == 34) {
         parse_ref_user:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_ref_user()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_ref_user;
        if (input->ExpectTag(42)) goto parse_ref_team;
        break;
      }

      // repeated .weizhu.user.Team ref_team = 5;
      case 5: {
        if (tag == 42) {
         parse_ref_team:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_ref_team()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_ref_team;
        if (input->ExpectTag(50)) goto parse_ref_position;
        break;
      }

      // repeated .weizhu.user.Position ref_position = 6;
      case 6: {
        if (tag == 50) {
         parse_ref_position:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_ref_position()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_ref_position;
        if (input->ExpectTag(58)) goto parse_ref_level;
        break;
      }

      // repeated .weizhu.user.Level ref_level = 7;
      case 7: {
        if (tag == 58) {
         parse_ref_level:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_ref_level()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_ref_level;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:weizhu.user.GetTeamResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:weizhu.user.GetTeamResponse)
  return false;
#undef DO_
}

void GetTeamResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:weizhu.user.GetTeamResponse)
  // optional .weizhu.user.Team team = 1;
  if (has_team()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->team(), output);
  }

  // repeated .weizhu.user.UserTeam sub_user_team = 2;
  for (int i = 0; i < this->sub_user_team_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->sub_user_team(i), output);
  }

  // repeated int32 sub_team_id = 3;
  for (int i = 0; i < this->sub_team_id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->sub_team_id(i), output);
  }

  // repeated .weizhu.user.User ref_user = 4;
  for (int i = 0; i < this->ref_user_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, this->ref_user(i), output);
  }

  // repeated .weizhu.user.Team ref_team = 5;
  for (int i = 0; i < this->ref_team_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      5, this->ref_team(i), output);
  }

  // repeated .weizhu.user.Position ref_position = 6;
  for (int i = 0; i < this->ref_position_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      6, this->ref_position(i), output);
  }

  // repeated .weizhu.user.Level ref_level = 7;
  for (int i = 0; i < this->ref_level_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      7, this->ref_level(i), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:weizhu.user.GetTeamResponse)
}

int GetTeamResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .weizhu.user.Team team = 1;
    if (has_team()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->team());
    }

  }
  // repeated .weizhu.user.UserTeam sub_user_team = 2;
  total_size += 1 * this->sub_user_team_size();
  for (int i = 0; i < this->sub_user_team_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->sub_user_team(i));
  }

  // repeated int32 sub_team_id = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->sub_team_id_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->sub_team_id(i));
    }
    total_size += 1 * this->sub_team_id_size() + data_size;
  }

  // repeated .weizhu.user.User ref_user = 4;
  total_size += 1 * this->ref_user_size();
  for (int i = 0; i < this->ref_user_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->ref_user(i));
  }

  // repeated .weizhu.user.Team ref_team = 5;
  total_size += 1 * this->ref_team_size();
  for (int i = 0; i < this->ref_team_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->ref_team(i));
  }

  // repeated .weizhu.user.Position ref_position = 6;
  total_size += 1 * this->ref_position_size();
  for (int i = 0; i < this->ref_position_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->ref_position(i));
  }

  // repeated .weizhu.user.Level ref_level = 7;
  total_size += 1 * this->ref_level_size();
  for (int i = 0; i < this->ref_level_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->ref_level(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetTeamResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GetTeamResponse*>(&from));
}

void GetTeamResponse::MergeFrom(const GetTeamResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  sub_user_team_.MergeFrom(from.sub_user_team_);
  sub_team_id_.MergeFrom(from.sub_team_id_);
  ref_user_.MergeFrom(from.ref_user_);
  ref_team_.MergeFrom(from.ref_team_);
  ref_position_.MergeFrom(from.ref_position_);
  ref_level_.MergeFrom(from.ref_level_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_team()) {
      mutable_team()->::weizhu::user::Team::MergeFrom(from.team());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void GetTeamResponse::CopyFrom(const GetTeamResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetTeamResponse::IsInitialized() const {

  if (has_team()) {
    if (!this->team().IsInitialized()) return false;
  }
  if (!::google::protobuf::internal::AllAreInitialized(this->sub_user_team())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->ref_user())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->ref_team())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->ref_position())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->ref_level())) return false;
  return true;
}

void GetTeamResponse::Swap(GetTeamResponse* other) {
  if (other != this) {
    std::swap(team_, other->team_);
    sub_user_team_.Swap(&other->sub_user_team_);
    sub_team_id_.Swap(&other->sub_team_id_);
    ref_user_.Swap(&other->ref_user_);
    ref_team_.Swap(&other->ref_team_);
    ref_position_.Swap(&other->ref_position_);
    ref_level_.Swap(&other->ref_level_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string GetTeamResponse::GetTypeName() const {
  return "weizhu.user.GetTeamResponse";
}


// ===================================================================

#ifndef _MSC_VER
const int UpdateUserAvatarRequest::kAvatarFieldNumber;
#endif  // !_MSC_VER

UpdateUserAvatarRequest::UpdateUserAvatarRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:weizhu.user.UpdateUserAvatarRequest)
}

void UpdateUserAvatarRequest::InitAsDefaultInstance() {
}

UpdateUserAvatarRequest::UpdateUserAvatarRequest(const UpdateUserAvatarRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:weizhu.user.UpdateUserAvatarRequest)
}

void UpdateUserAvatarRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  avatar_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UpdateUserAvatarRequest::~UpdateUserAvatarRequest() {
  // @@protoc_insertion_point(destructor:weizhu.user.UpdateUserAvatarRequest)
  SharedDtor();
}

void UpdateUserAvatarRequest::SharedDtor() {
  if (avatar_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete avatar_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void UpdateUserAvatarRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const UpdateUserAvatarRequest& UpdateUserAvatarRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_user_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_user_2eproto();
#endif
  return *default_instance_;
}

UpdateUserAvatarRequest* UpdateUserAvatarRequest::default_instance_ = NULL;

UpdateUserAvatarRequest* UpdateUserAvatarRequest::New() const {
  return new UpdateUserAvatarRequest;
}

void UpdateUserAvatarRequest::Clear() {
  if (has_avatar()) {
    if (avatar_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      avatar_->clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool UpdateUserAvatarRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:weizhu.user.UpdateUserAvatarRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string avatar = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_avatar()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:weizhu.user.UpdateUserAvatarRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:weizhu.user.UpdateUserAvatarRequest)
  return false;
#undef DO_
}

void UpdateUserAvatarRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:weizhu.user.UpdateUserAvatarRequest)
  // required string avatar = 1;
  if (has_avatar()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->avatar(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:weizhu.user.UpdateUserAvatarRequest)
}

int UpdateUserAvatarRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string avatar = 1;
    if (has_avatar()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->avatar());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpdateUserAvatarRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const UpdateUserAvatarRequest*>(&from));
}

void UpdateUserAvatarRequest::MergeFrom(const UpdateUserAvatarRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_avatar()) {
      set_avatar(from.avatar());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void UpdateUserAvatarRequest::CopyFrom(const UpdateUserAvatarRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateUserAvatarRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void UpdateUserAvatarRequest::Swap(UpdateUserAvatarRequest* other) {
  if (other != this) {
    std::swap(avatar_, other->avatar_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string UpdateUserAvatarRequest::GetTypeName() const {
  return "weizhu.user.UpdateUserAvatarRequest";
}


// ===================================================================

bool UpdateUserAvatarResponse_Result_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 99:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const UpdateUserAvatarResponse_Result UpdateUserAvatarResponse::SUCC;
const UpdateUserAvatarResponse_Result UpdateUserAvatarResponse::FAIL_AVATAR_INVALID;
const UpdateUserAvatarResponse_Result UpdateUserAvatarResponse::FAIL_UNKNOWN;
const UpdateUserAvatarResponse_Result UpdateUserAvatarResponse::Result_MIN;
const UpdateUserAvatarResponse_Result UpdateUserAvatarResponse::Result_MAX;
const int UpdateUserAvatarResponse::Result_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int UpdateUserAvatarResponse::kResultFieldNumber;
const int UpdateUserAvatarResponse::kFailTextFieldNumber;
#endif  // !_MSC_VER

UpdateUserAvatarResponse::UpdateUserAvatarResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:weizhu.user.UpdateUserAvatarResponse)
}

void UpdateUserAvatarResponse::InitAsDefaultInstance() {
}

UpdateUserAvatarResponse::UpdateUserAvatarResponse(const UpdateUserAvatarResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:weizhu.user.UpdateUserAvatarResponse)
}

void UpdateUserAvatarResponse::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  result_ = 99;
  fail_text_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UpdateUserAvatarResponse::~UpdateUserAvatarResponse() {
  // @@protoc_insertion_point(destructor:weizhu.user.UpdateUserAvatarResponse)
  SharedDtor();
}

void UpdateUserAvatarResponse::SharedDtor() {
  if (fail_text_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete fail_text_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void UpdateUserAvatarResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const UpdateUserAvatarResponse& UpdateUserAvatarResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_user_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_user_2eproto();
#endif
  return *default_instance_;
}

UpdateUserAvatarResponse* UpdateUserAvatarResponse::default_instance_ = NULL;

UpdateUserAvatarResponse* UpdateUserAvatarResponse::New() const {
  return new UpdateUserAvatarResponse;
}

void UpdateUserAvatarResponse::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    result_ = 99;
    if (has_fail_text()) {
      if (fail_text_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        fail_text_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool UpdateUserAvatarResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:weizhu.user.UpdateUserAvatarResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .weizhu.user.UpdateUserAvatarResponse.Result result = 1 [default = FAIL_UNKNOWN];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::weizhu::user::UpdateUserAvatarResponse_Result_IsValid(value)) {
            set_result(static_cast< ::weizhu::user::UpdateUserAvatarResponse_Result >(value));
          } else {
            unknown_fields_stream.WriteVarint32(tag);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_fail_text;
        break;
      }

      // optional string fail_text = 2;
      case 2: {
        if (tag == 18) {
         parse_fail_text:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fail_text()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:weizhu.user.UpdateUserAvatarResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:weizhu.user.UpdateUserAvatarResponse)
  return false;
#undef DO_
}

void UpdateUserAvatarResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:weizhu.user.UpdateUserAvatarResponse)
  // optional .weizhu.user.UpdateUserAvatarResponse.Result result = 1 [default = FAIL_UNKNOWN];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  // optional string fail_text = 2;
  if (has_fail_text()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->fail_text(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:weizhu.user.UpdateUserAvatarResponse)
}

int UpdateUserAvatarResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .weizhu.user.UpdateUserAvatarResponse.Result result = 1 [default = FAIL_UNKNOWN];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

    // optional string fail_text = 2;
    if (has_fail_text()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->fail_text());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpdateUserAvatarResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const UpdateUserAvatarResponse*>(&from));
}

void UpdateUserAvatarResponse::MergeFrom(const UpdateUserAvatarResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_fail_text()) {
      set_fail_text(from.fail_text());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void UpdateUserAvatarResponse::CopyFrom(const UpdateUserAvatarResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateUserAvatarResponse::IsInitialized() const {

  return true;
}

void UpdateUserAvatarResponse::Swap(UpdateUserAvatarResponse* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(fail_text_, other->fail_text_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string UpdateUserAvatarResponse::GetTypeName() const {
  return "weizhu.user.UpdateUserAvatarResponse";
}


// ===================================================================

#ifndef _MSC_VER
const int UpdateUserSignatureRequest::kSignatureFieldNumber;
#endif  // !_MSC_VER

UpdateUserSignatureRequest::UpdateUserSignatureRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:weizhu.user.UpdateUserSignatureRequest)
}

void UpdateUserSignatureRequest::InitAsDefaultInstance() {
}

UpdateUserSignatureRequest::UpdateUserSignatureRequest(const UpdateUserSignatureRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:weizhu.user.UpdateUserSignatureRequest)
}

void UpdateUserSignatureRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  signature_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UpdateUserSignatureRequest::~UpdateUserSignatureRequest() {
  // @@protoc_insertion_point(destructor:weizhu.user.UpdateUserSignatureRequest)
  SharedDtor();
}

void UpdateUserSignatureRequest::SharedDtor() {
  if (signature_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete signature_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void UpdateUserSignatureRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const UpdateUserSignatureRequest& UpdateUserSignatureRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_user_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_user_2eproto();
#endif
  return *default_instance_;
}

UpdateUserSignatureRequest* UpdateUserSignatureRequest::default_instance_ = NULL;

UpdateUserSignatureRequest* UpdateUserSignatureRequest::New() const {
  return new UpdateUserSignatureRequest;
}

void UpdateUserSignatureRequest::Clear() {
  if (has_signature()) {
    if (signature_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      signature_->clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool UpdateUserSignatureRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:weizhu.user.UpdateUserSignatureRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string signature = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_signature()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:weizhu.user.UpdateUserSignatureRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:weizhu.user.UpdateUserSignatureRequest)
  return false;
#undef DO_
}

void UpdateUserSignatureRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:weizhu.user.UpdateUserSignatureRequest)
  // required string signature = 1;
  if (has_signature()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->signature(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:weizhu.user.UpdateUserSignatureRequest)
}

int UpdateUserSignatureRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string signature = 1;
    if (has_signature()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->signature());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpdateUserSignatureRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const UpdateUserSignatureRequest*>(&from));
}

void UpdateUserSignatureRequest::MergeFrom(const UpdateUserSignatureRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_signature()) {
      set_signature(from.signature());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void UpdateUserSignatureRequest::CopyFrom(const UpdateUserSignatureRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateUserSignatureRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void UpdateUserSignatureRequest::Swap(UpdateUserSignatureRequest* other) {
  if (other != this) {
    std::swap(signature_, other->signature_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string UpdateUserSignatureRequest::GetTypeName() const {
  return "weizhu.user.UpdateUserSignatureRequest";
}


// ===================================================================

bool UpdateUserSignatureResponse_Result_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 99:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const UpdateUserSignatureResponse_Result UpdateUserSignatureResponse::SUCC;
const UpdateUserSignatureResponse_Result UpdateUserSignatureResponse::FAIL_SIGNATURE_INVALID;
const UpdateUserSignatureResponse_Result UpdateUserSignatureResponse::FAIL_UNKNOWN;
const UpdateUserSignatureResponse_Result UpdateUserSignatureResponse::Result_MIN;
const UpdateUserSignatureResponse_Result UpdateUserSignatureResponse::Result_MAX;
const int UpdateUserSignatureResponse::Result_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int UpdateUserSignatureResponse::kResultFieldNumber;
const int UpdateUserSignatureResponse::kFailTextFieldNumber;
#endif  // !_MSC_VER

UpdateUserSignatureResponse::UpdateUserSignatureResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:weizhu.user.UpdateUserSignatureResponse)
}

void UpdateUserSignatureResponse::InitAsDefaultInstance() {
}

UpdateUserSignatureResponse::UpdateUserSignatureResponse(const UpdateUserSignatureResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:weizhu.user.UpdateUserSignatureResponse)
}

void UpdateUserSignatureResponse::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  result_ = 99;
  fail_text_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UpdateUserSignatureResponse::~UpdateUserSignatureResponse() {
  // @@protoc_insertion_point(destructor:weizhu.user.UpdateUserSignatureResponse)
  SharedDtor();
}

void UpdateUserSignatureResponse::SharedDtor() {
  if (fail_text_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete fail_text_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void UpdateUserSignatureResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const UpdateUserSignatureResponse& UpdateUserSignatureResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_user_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_user_2eproto();
#endif
  return *default_instance_;
}

UpdateUserSignatureResponse* UpdateUserSignatureResponse::default_instance_ = NULL;

UpdateUserSignatureResponse* UpdateUserSignatureResponse::New() const {
  return new UpdateUserSignatureResponse;
}

void UpdateUserSignatureResponse::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    result_ = 99;
    if (has_fail_text()) {
      if (fail_text_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        fail_text_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool UpdateUserSignatureResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:weizhu.user.UpdateUserSignatureResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .weizhu.user.UpdateUserSignatureResponse.Result result = 1 [default = FAIL_UNKNOWN];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::weizhu::user::UpdateUserSignatureResponse_Result_IsValid(value)) {
            set_result(static_cast< ::weizhu::user::UpdateUserSignatureResponse_Result >(value));
          } else {
            unknown_fields_stream.WriteVarint32(tag);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_fail_text;
        break;
      }

      // optional string fail_text = 2;
      case 2: {
        if (tag == 18) {
         parse_fail_text:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fail_text()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:weizhu.user.UpdateUserSignatureResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:weizhu.user.UpdateUserSignatureResponse)
  return false;
#undef DO_
}

void UpdateUserSignatureResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:weizhu.user.UpdateUserSignatureResponse)
  // optional .weizhu.user.UpdateUserSignatureResponse.Result result = 1 [default = FAIL_UNKNOWN];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  // optional string fail_text = 2;
  if (has_fail_text()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->fail_text(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:weizhu.user.UpdateUserSignatureResponse)
}

int UpdateUserSignatureResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .weizhu.user.UpdateUserSignatureResponse.Result result = 1 [default = FAIL_UNKNOWN];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

    // optional string fail_text = 2;
    if (has_fail_text()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->fail_text());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpdateUserSignatureResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const UpdateUserSignatureResponse*>(&from));
}

void UpdateUserSignatureResponse::MergeFrom(const UpdateUserSignatureResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_fail_text()) {
      set_fail_text(from.fail_text());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void UpdateUserSignatureResponse::CopyFrom(const UpdateUserSignatureResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateUserSignatureResponse::IsInitialized() const {

  return true;
}

void UpdateUserSignatureResponse::Swap(UpdateUserSignatureResponse* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(fail_text_, other->fail_text_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string UpdateUserSignatureResponse::GetTypeName() const {
  return "weizhu.user.UpdateUserSignatureResponse";
}


// ===================================================================

#ifndef _MSC_VER
const int UpdateUserInterestRequest::kInterestFieldNumber;
#endif  // !_MSC_VER

UpdateUserInterestRequest::UpdateUserInterestRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:weizhu.user.UpdateUserInterestRequest)
}

void UpdateUserInterestRequest::InitAsDefaultInstance() {
}

UpdateUserInterestRequest::UpdateUserInterestRequest(const UpdateUserInterestRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:weizhu.user.UpdateUserInterestRequest)
}

void UpdateUserInterestRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  interest_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UpdateUserInterestRequest::~UpdateUserInterestRequest() {
  // @@protoc_insertion_point(destructor:weizhu.user.UpdateUserInterestRequest)
  SharedDtor();
}

void UpdateUserInterestRequest::SharedDtor() {
  if (interest_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete interest_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void UpdateUserInterestRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const UpdateUserInterestRequest& UpdateUserInterestRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_user_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_user_2eproto();
#endif
  return *default_instance_;
}

UpdateUserInterestRequest* UpdateUserInterestRequest::default_instance_ = NULL;

UpdateUserInterestRequest* UpdateUserInterestRequest::New() const {
  return new UpdateUserInterestRequest;
}

void UpdateUserInterestRequest::Clear() {
  if (has_interest()) {
    if (interest_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      interest_->clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool UpdateUserInterestRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:weizhu.user.UpdateUserInterestRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string interest = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_interest()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:weizhu.user.UpdateUserInterestRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:weizhu.user.UpdateUserInterestRequest)
  return false;
#undef DO_
}

void UpdateUserInterestRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:weizhu.user.UpdateUserInterestRequest)
  // required string interest = 1;
  if (has_interest()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->interest(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:weizhu.user.UpdateUserInterestRequest)
}

int UpdateUserInterestRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string interest = 1;
    if (has_interest()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->interest());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpdateUserInterestRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const UpdateUserInterestRequest*>(&from));
}

void UpdateUserInterestRequest::MergeFrom(const UpdateUserInterestRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_interest()) {
      set_interest(from.interest());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void UpdateUserInterestRequest::CopyFrom(const UpdateUserInterestRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateUserInterestRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void UpdateUserInterestRequest::Swap(UpdateUserInterestRequest* other) {
  if (other != this) {
    std::swap(interest_, other->interest_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string UpdateUserInterestRequest::GetTypeName() const {
  return "weizhu.user.UpdateUserInterestRequest";
}


// ===================================================================

bool UpdateUserInterestResponse_Result_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 99:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const UpdateUserInterestResponse_Result UpdateUserInterestResponse::SUCC;
const UpdateUserInterestResponse_Result UpdateUserInterestResponse::FAIL_INTEREST_INVALID;
const UpdateUserInterestResponse_Result UpdateUserInterestResponse::FAIL_UNKNOWN;
const UpdateUserInterestResponse_Result UpdateUserInterestResponse::Result_MIN;
const UpdateUserInterestResponse_Result UpdateUserInterestResponse::Result_MAX;
const int UpdateUserInterestResponse::Result_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int UpdateUserInterestResponse::kResultFieldNumber;
const int UpdateUserInterestResponse::kFailTextFieldNumber;
#endif  // !_MSC_VER

UpdateUserInterestResponse::UpdateUserInterestResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:weizhu.user.UpdateUserInterestResponse)
}

void UpdateUserInterestResponse::InitAsDefaultInstance() {
}

UpdateUserInterestResponse::UpdateUserInterestResponse(const UpdateUserInterestResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:weizhu.user.UpdateUserInterestResponse)
}

void UpdateUserInterestResponse::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  result_ = 99;
  fail_text_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UpdateUserInterestResponse::~UpdateUserInterestResponse() {
  // @@protoc_insertion_point(destructor:weizhu.user.UpdateUserInterestResponse)
  SharedDtor();
}

void UpdateUserInterestResponse::SharedDtor() {
  if (fail_text_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete fail_text_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void UpdateUserInterestResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const UpdateUserInterestResponse& UpdateUserInterestResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_user_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_user_2eproto();
#endif
  return *default_instance_;
}

UpdateUserInterestResponse* UpdateUserInterestResponse::default_instance_ = NULL;

UpdateUserInterestResponse* UpdateUserInterestResponse::New() const {
  return new UpdateUserInterestResponse;
}

void UpdateUserInterestResponse::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    result_ = 99;
    if (has_fail_text()) {
      if (fail_text_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        fail_text_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool UpdateUserInterestResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:weizhu.user.UpdateUserInterestResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .weizhu.user.UpdateUserInterestResponse.Result result = 1 [default = FAIL_UNKNOWN];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::weizhu::user::UpdateUserInterestResponse_Result_IsValid(value)) {
            set_result(static_cast< ::weizhu::user::UpdateUserInterestResponse_Result >(value));
          } else {
            unknown_fields_stream.WriteVarint32(tag);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_fail_text;
        break;
      }

      // optional string fail_text = 2;
      case 2: {
        if (tag == 18) {
         parse_fail_text:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fail_text()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:weizhu.user.UpdateUserInterestResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:weizhu.user.UpdateUserInterestResponse)
  return false;
#undef DO_
}

void UpdateUserInterestResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:weizhu.user.UpdateUserInterestResponse)
  // optional .weizhu.user.UpdateUserInterestResponse.Result result = 1 [default = FAIL_UNKNOWN];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  // optional string fail_text = 2;
  if (has_fail_text()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->fail_text(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:weizhu.user.UpdateUserInterestResponse)
}

int UpdateUserInterestResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .weizhu.user.UpdateUserInterestResponse.Result result = 1 [default = FAIL_UNKNOWN];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

    // optional string fail_text = 2;
    if (has_fail_text()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->fail_text());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpdateUserInterestResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const UpdateUserInterestResponse*>(&from));
}

void UpdateUserInterestResponse::MergeFrom(const UpdateUserInterestResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_fail_text()) {
      set_fail_text(from.fail_text());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void UpdateUserInterestResponse::CopyFrom(const UpdateUserInterestResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateUserInterestResponse::IsInitialized() const {

  return true;
}

void UpdateUserInterestResponse::Swap(UpdateUserInterestResponse* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(fail_text_, other->fail_text_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string UpdateUserInterestResponse::GetTypeName() const {
  return "weizhu.user.UpdateUserInterestResponse";
}


// ===================================================================

#ifndef _MSC_VER
const int GetUserExperienceRequest::kUserIdFieldNumber;
#endif  // !_MSC_VER

GetUserExperienceRequest::GetUserExperienceRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:weizhu.user.GetUserExperienceRequest)
}

void GetUserExperienceRequest::InitAsDefaultInstance() {
}

GetUserExperienceRequest::GetUserExperienceRequest(const GetUserExperienceRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:weizhu.user.GetUserExperienceRequest)
}

void GetUserExperienceRequest::SharedCtor() {
  _cached_size_ = 0;
  user_id_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetUserExperienceRequest::~GetUserExperienceRequest() {
  // @@protoc_insertion_point(destructor:weizhu.user.GetUserExperienceRequest)
  SharedDtor();
}

void GetUserExperienceRequest::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void GetUserExperienceRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GetUserExperienceRequest& GetUserExperienceRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_user_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_user_2eproto();
#endif
  return *default_instance_;
}

GetUserExperienceRequest* GetUserExperienceRequest::default_instance_ = NULL;

GetUserExperienceRequest* GetUserExperienceRequest::New() const {
  return new GetUserExperienceRequest;
}

void GetUserExperienceRequest::Clear() {
  user_id_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool GetUserExperienceRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:weizhu.user.GetUserExperienceRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 user_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:weizhu.user.GetUserExperienceRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:weizhu.user.GetUserExperienceRequest)
  return false;
#undef DO_
}

void GetUserExperienceRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:weizhu.user.GetUserExperienceRequest)
  // required int64 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->user_id(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:weizhu.user.GetUserExperienceRequest)
}

int GetUserExperienceRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->user_id());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetUserExperienceRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GetUserExperienceRequest*>(&from));
}

void GetUserExperienceRequest::MergeFrom(const GetUserExperienceRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void GetUserExperienceRequest::CopyFrom(const GetUserExperienceRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetUserExperienceRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GetUserExperienceRequest::Swap(GetUserExperienceRequest* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string GetUserExperienceRequest::GetTypeName() const {
  return "weizhu.user.GetUserExperienceRequest";
}


// ===================================================================

#ifndef _MSC_VER
const int GetUserExperienceResponse::kExperienceFieldNumber;
#endif  // !_MSC_VER

GetUserExperienceResponse::GetUserExperienceResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:weizhu.user.GetUserExperienceResponse)
}

void GetUserExperienceResponse::InitAsDefaultInstance() {
}

GetUserExperienceResponse::GetUserExperienceResponse(const GetUserExperienceResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:weizhu.user.GetUserExperienceResponse)
}

void GetUserExperienceResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetUserExperienceResponse::~GetUserExperienceResponse() {
  // @@protoc_insertion_point(destructor:weizhu.user.GetUserExperienceResponse)
  SharedDtor();
}

void GetUserExperienceResponse::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void GetUserExperienceResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GetUserExperienceResponse& GetUserExperienceResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_user_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_user_2eproto();
#endif
  return *default_instance_;
}

GetUserExperienceResponse* GetUserExperienceResponse::default_instance_ = NULL;

GetUserExperienceResponse* GetUserExperienceResponse::New() const {
  return new GetUserExperienceResponse;
}

void GetUserExperienceResponse::Clear() {
  experience_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool GetUserExperienceResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:weizhu.user.GetUserExperienceResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .weizhu.user.UserExperience experience = 1;
      case 1: {
        if (tag == 10) {
         parse_experience:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_experience()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_experience;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:weizhu.user.GetUserExperienceResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:weizhu.user.GetUserExperienceResponse)
  return false;
#undef DO_
}

void GetUserExperienceResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:weizhu.user.GetUserExperienceResponse)
  // repeated .weizhu.user.UserExperience experience = 1;
  for (int i = 0; i < this->experience_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->experience(i), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:weizhu.user.GetUserExperienceResponse)
}

int GetUserExperienceResponse::ByteSize() const {
  int total_size = 0;

  // repeated .weizhu.user.UserExperience experience = 1;
  total_size += 1 * this->experience_size();
  for (int i = 0; i < this->experience_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->experience(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetUserExperienceResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GetUserExperienceResponse*>(&from));
}

void GetUserExperienceResponse::MergeFrom(const GetUserExperienceResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  experience_.MergeFrom(from.experience_);
  mutable_unknown_fields()->append(from.unknown_fields());
}

void GetUserExperienceResponse::CopyFrom(const GetUserExperienceResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetUserExperienceResponse::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->experience())) return false;
  return true;
}

void GetUserExperienceResponse::Swap(GetUserExperienceResponse* other) {
  if (other != this) {
    experience_.Swap(&other->experience_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string GetUserExperienceResponse::GetTypeName() const {
  return "weizhu.user.GetUserExperienceResponse";
}


// ===================================================================

#ifndef _MSC_VER
const int CreateUserExperienceRequest::kExperienceFieldNumber;
#endif  // !_MSC_VER

CreateUserExperienceRequest::CreateUserExperienceRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:weizhu.user.CreateUserExperienceRequest)
}

void CreateUserExperienceRequest::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  experience_ = const_cast< ::weizhu::user::UserExperience*>(
      ::weizhu::user::UserExperience::internal_default_instance());
#else
  experience_ = const_cast< ::weizhu::user::UserExperience*>(&::weizhu::user::UserExperience::default_instance());
#endif
}

CreateUserExperienceRequest::CreateUserExperienceRequest(const CreateUserExperienceRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:weizhu.user.CreateUserExperienceRequest)
}

void CreateUserExperienceRequest::SharedCtor() {
  _cached_size_ = 0;
  experience_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CreateUserExperienceRequest::~CreateUserExperienceRequest() {
  // @@protoc_insertion_point(destructor:weizhu.user.CreateUserExperienceRequest)
  SharedDtor();
}

void CreateUserExperienceRequest::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete experience_;
  }
}

void CreateUserExperienceRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CreateUserExperienceRequest& CreateUserExperienceRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_user_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_user_2eproto();
#endif
  return *default_instance_;
}

CreateUserExperienceRequest* CreateUserExperienceRequest::default_instance_ = NULL;

CreateUserExperienceRequest* CreateUserExperienceRequest::New() const {
  return new CreateUserExperienceRequest;
}

void CreateUserExperienceRequest::Clear() {
  if (has_experience()) {
    if (experience_ != NULL) experience_->::weizhu::user::UserExperience::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool CreateUserExperienceRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:weizhu.user.CreateUserExperienceRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .weizhu.user.UserExperience experience = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_experience()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:weizhu.user.CreateUserExperienceRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:weizhu.user.CreateUserExperienceRequest)
  return false;
#undef DO_
}

void CreateUserExperienceRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:weizhu.user.CreateUserExperienceRequest)
  // required .weizhu.user.UserExperience experience = 1;
  if (has_experience()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->experience(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:weizhu.user.CreateUserExperienceRequest)
}

int CreateUserExperienceRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .weizhu.user.UserExperience experience = 1;
    if (has_experience()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->experience());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CreateUserExperienceRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CreateUserExperienceRequest*>(&from));
}

void CreateUserExperienceRequest::MergeFrom(const CreateUserExperienceRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_experience()) {
      mutable_experience()->::weizhu::user::UserExperience::MergeFrom(from.experience());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void CreateUserExperienceRequest::CopyFrom(const CreateUserExperienceRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateUserExperienceRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_experience()) {
    if (!this->experience().IsInitialized()) return false;
  }
  return true;
}

void CreateUserExperienceRequest::Swap(CreateUserExperienceRequest* other) {
  if (other != this) {
    std::swap(experience_, other->experience_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CreateUserExperienceRequest::GetTypeName() const {
  return "weizhu.user.CreateUserExperienceRequest";
}


// ===================================================================

bool CreateUserExperienceResponse_Result_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 99:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const CreateUserExperienceResponse_Result CreateUserExperienceResponse::SUCC;
const CreateUserExperienceResponse_Result CreateUserExperienceResponse::FAIL_EXPERIENCE_CONTENT_INVALID;
const CreateUserExperienceResponse_Result CreateUserExperienceResponse::FAIL_EXPERIENCE_NUM_LIMIT;
const CreateUserExperienceResponse_Result CreateUserExperienceResponse::FAIL_UNKNOWN;
const CreateUserExperienceResponse_Result CreateUserExperienceResponse::Result_MIN;
const CreateUserExperienceResponse_Result CreateUserExperienceResponse::Result_MAX;
const int CreateUserExperienceResponse::Result_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int CreateUserExperienceResponse::kResultFieldNumber;
const int CreateUserExperienceResponse::kFailTextFieldNumber;
const int CreateUserExperienceResponse::kExperienceFieldNumber;
#endif  // !_MSC_VER

CreateUserExperienceResponse::CreateUserExperienceResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:weizhu.user.CreateUserExperienceResponse)
}

void CreateUserExperienceResponse::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  experience_ = const_cast< ::weizhu::user::UserExperience*>(
      ::weizhu::user::UserExperience::internal_default_instance());
#else
  experience_ = const_cast< ::weizhu::user::UserExperience*>(&::weizhu::user::UserExperience::default_instance());
#endif
}

CreateUserExperienceResponse::CreateUserExperienceResponse(const CreateUserExperienceResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:weizhu.user.CreateUserExperienceResponse)
}

void CreateUserExperienceResponse::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  result_ = 99;
  fail_text_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  experience_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CreateUserExperienceResponse::~CreateUserExperienceResponse() {
  // @@protoc_insertion_point(destructor:weizhu.user.CreateUserExperienceResponse)
  SharedDtor();
}

void CreateUserExperienceResponse::SharedDtor() {
  if (fail_text_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete fail_text_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete experience_;
  }
}

void CreateUserExperienceResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CreateUserExperienceResponse& CreateUserExperienceResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_user_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_user_2eproto();
#endif
  return *default_instance_;
}

CreateUserExperienceResponse* CreateUserExperienceResponse::default_instance_ = NULL;

CreateUserExperienceResponse* CreateUserExperienceResponse::New() const {
  return new CreateUserExperienceResponse;
}

void CreateUserExperienceResponse::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    result_ = 99;
    if (has_fail_text()) {
      if (fail_text_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        fail_text_->clear();
      }
    }
    if (has_experience()) {
      if (experience_ != NULL) experience_->::weizhu::user::UserExperience::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool CreateUserExperienceResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:weizhu.user.CreateUserExperienceResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .weizhu.user.CreateUserExperienceResponse.Result result = 1 [default = FAIL_UNKNOWN];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::weizhu::user::CreateUserExperienceResponse_Result_IsValid(value)) {
            set_result(static_cast< ::weizhu::user::CreateUserExperienceResponse_Result >(value));
          } else {
            unknown_fields_stream.WriteVarint32(tag);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_fail_text;
        break;
      }

      // optional string fail_text = 2;
      case 2: {
        if (tag == 18) {
         parse_fail_text:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fail_text()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_experience;
        break;
      }

      // optional .weizhu.user.UserExperience experience = 3;
      case 3: {
        if (tag == 26) {
         parse_experience:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_experience()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:weizhu.user.CreateUserExperienceResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:weizhu.user.CreateUserExperienceResponse)
  return false;
#undef DO_
}

void CreateUserExperienceResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:weizhu.user.CreateUserExperienceResponse)
  // optional .weizhu.user.CreateUserExperienceResponse.Result result = 1 [default = FAIL_UNKNOWN];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  // optional string fail_text = 2;
  if (has_fail_text()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->fail_text(), output);
  }

  // optional .weizhu.user.UserExperience experience = 3;
  if (has_experience()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->experience(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:weizhu.user.CreateUserExperienceResponse)
}

int CreateUserExperienceResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .weizhu.user.CreateUserExperienceResponse.Result result = 1 [default = FAIL_UNKNOWN];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

    // optional string fail_text = 2;
    if (has_fail_text()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->fail_text());
    }

    // optional .weizhu.user.UserExperience experience = 3;
    if (has_experience()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->experience());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CreateUserExperienceResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CreateUserExperienceResponse*>(&from));
}

void CreateUserExperienceResponse::MergeFrom(const CreateUserExperienceResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_fail_text()) {
      set_fail_text(from.fail_text());
    }
    if (from.has_experience()) {
      mutable_experience()->::weizhu::user::UserExperience::MergeFrom(from.experience());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void CreateUserExperienceResponse::CopyFrom(const CreateUserExperienceResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateUserExperienceResponse::IsInitialized() const {

  if (has_experience()) {
    if (!this->experience().IsInitialized()) return false;
  }
  return true;
}

void CreateUserExperienceResponse::Swap(CreateUserExperienceResponse* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(fail_text_, other->fail_text_);
    std::swap(experience_, other->experience_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CreateUserExperienceResponse::GetTypeName() const {
  return "weizhu.user.CreateUserExperienceResponse";
}


// ===================================================================

#ifndef _MSC_VER
const int UpdateUserExperienceRequest::kExperienceFieldNumber;
#endif  // !_MSC_VER

UpdateUserExperienceRequest::UpdateUserExperienceRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:weizhu.user.UpdateUserExperienceRequest)
}

void UpdateUserExperienceRequest::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  experience_ = const_cast< ::weizhu::user::UserExperience*>(
      ::weizhu::user::UserExperience::internal_default_instance());
#else
  experience_ = const_cast< ::weizhu::user::UserExperience*>(&::weizhu::user::UserExperience::default_instance());
#endif
}

UpdateUserExperienceRequest::UpdateUserExperienceRequest(const UpdateUserExperienceRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:weizhu.user.UpdateUserExperienceRequest)
}

void UpdateUserExperienceRequest::SharedCtor() {
  _cached_size_ = 0;
  experience_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UpdateUserExperienceRequest::~UpdateUserExperienceRequest() {
  // @@protoc_insertion_point(destructor:weizhu.user.UpdateUserExperienceRequest)
  SharedDtor();
}

void UpdateUserExperienceRequest::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete experience_;
  }
}

void UpdateUserExperienceRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const UpdateUserExperienceRequest& UpdateUserExperienceRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_user_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_user_2eproto();
#endif
  return *default_instance_;
}

UpdateUserExperienceRequest* UpdateUserExperienceRequest::default_instance_ = NULL;

UpdateUserExperienceRequest* UpdateUserExperienceRequest::New() const {
  return new UpdateUserExperienceRequest;
}

void UpdateUserExperienceRequest::Clear() {
  if (has_experience()) {
    if (experience_ != NULL) experience_->::weizhu::user::UserExperience::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool UpdateUserExperienceRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:weizhu.user.UpdateUserExperienceRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .weizhu.user.UserExperience experience = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_experience()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:weizhu.user.UpdateUserExperienceRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:weizhu.user.UpdateUserExperienceRequest)
  return false;
#undef DO_
}

void UpdateUserExperienceRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:weizhu.user.UpdateUserExperienceRequest)
  // required .weizhu.user.UserExperience experience = 1;
  if (has_experience()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->experience(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:weizhu.user.UpdateUserExperienceRequest)
}

int UpdateUserExperienceRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .weizhu.user.UserExperience experience = 1;
    if (has_experience()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->experience());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpdateUserExperienceRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const UpdateUserExperienceRequest*>(&from));
}

void UpdateUserExperienceRequest::MergeFrom(const UpdateUserExperienceRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_experience()) {
      mutable_experience()->::weizhu::user::UserExperience::MergeFrom(from.experience());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void UpdateUserExperienceRequest::CopyFrom(const UpdateUserExperienceRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateUserExperienceRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_experience()) {
    if (!this->experience().IsInitialized()) return false;
  }
  return true;
}

void UpdateUserExperienceRequest::Swap(UpdateUserExperienceRequest* other) {
  if (other != this) {
    std::swap(experience_, other->experience_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string UpdateUserExperienceRequest::GetTypeName() const {
  return "weizhu.user.UpdateUserExperienceRequest";
}


// ===================================================================

bool UpdateUserExperienceResponse_Result_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 99:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const UpdateUserExperienceResponse_Result UpdateUserExperienceResponse::SUCC;
const UpdateUserExperienceResponse_Result UpdateUserExperienceResponse::FAIL_EXPERIENCE_ID_INVALID;
const UpdateUserExperienceResponse_Result UpdateUserExperienceResponse::FAIL_EXPERIENCE_CONTENT_INVALID;
const UpdateUserExperienceResponse_Result UpdateUserExperienceResponse::FAIL_UNKNOWN;
const UpdateUserExperienceResponse_Result UpdateUserExperienceResponse::Result_MIN;
const UpdateUserExperienceResponse_Result UpdateUserExperienceResponse::Result_MAX;
const int UpdateUserExperienceResponse::Result_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int UpdateUserExperienceResponse::kResultFieldNumber;
const int UpdateUserExperienceResponse::kFailTextFieldNumber;
const int UpdateUserExperienceResponse::kExperienceFieldNumber;
#endif  // !_MSC_VER

UpdateUserExperienceResponse::UpdateUserExperienceResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:weizhu.user.UpdateUserExperienceResponse)
}

void UpdateUserExperienceResponse::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  experience_ = const_cast< ::weizhu::user::UserExperience*>(
      ::weizhu::user::UserExperience::internal_default_instance());
#else
  experience_ = const_cast< ::weizhu::user::UserExperience*>(&::weizhu::user::UserExperience::default_instance());
#endif
}

UpdateUserExperienceResponse::UpdateUserExperienceResponse(const UpdateUserExperienceResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:weizhu.user.UpdateUserExperienceResponse)
}

void UpdateUserExperienceResponse::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  result_ = 99;
  fail_text_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  experience_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UpdateUserExperienceResponse::~UpdateUserExperienceResponse() {
  // @@protoc_insertion_point(destructor:weizhu.user.UpdateUserExperienceResponse)
  SharedDtor();
}

void UpdateUserExperienceResponse::SharedDtor() {
  if (fail_text_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete fail_text_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete experience_;
  }
}

void UpdateUserExperienceResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const UpdateUserExperienceResponse& UpdateUserExperienceResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_user_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_user_2eproto();
#endif
  return *default_instance_;
}

UpdateUserExperienceResponse* UpdateUserExperienceResponse::default_instance_ = NULL;

UpdateUserExperienceResponse* UpdateUserExperienceResponse::New() const {
  return new UpdateUserExperienceResponse;
}

void UpdateUserExperienceResponse::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    result_ = 99;
    if (has_fail_text()) {
      if (fail_text_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        fail_text_->clear();
      }
    }
    if (has_experience()) {
      if (experience_ != NULL) experience_->::weizhu::user::UserExperience::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool UpdateUserExperienceResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:weizhu.user.UpdateUserExperienceResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .weizhu.user.UpdateUserExperienceResponse.Result result = 1 [default = FAIL_UNKNOWN];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::weizhu::user::UpdateUserExperienceResponse_Result_IsValid(value)) {
            set_result(static_cast< ::weizhu::user::UpdateUserExperienceResponse_Result >(value));
          } else {
            unknown_fields_stream.WriteVarint32(tag);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_fail_text;
        break;
      }

      // optional string fail_text = 2;
      case 2: {
        if (tag == 18) {
         parse_fail_text:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fail_text()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_experience;
        break;
      }

      // optional .weizhu.user.UserExperience experience = 3;
      case 3: {
        if (tag == 26) {
         parse_experience:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_experience()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:weizhu.user.UpdateUserExperienceResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:weizhu.user.UpdateUserExperienceResponse)
  return false;
#undef DO_
}

void UpdateUserExperienceResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:weizhu.user.UpdateUserExperienceResponse)
  // optional .weizhu.user.UpdateUserExperienceResponse.Result result = 1 [default = FAIL_UNKNOWN];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  // optional string fail_text = 2;
  if (has_fail_text()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->fail_text(), output);
  }

  // optional .weizhu.user.UserExperience experience = 3;
  if (has_experience()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->experience(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:weizhu.user.UpdateUserExperienceResponse)
}

int UpdateUserExperienceResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .weizhu.user.UpdateUserExperienceResponse.Result result = 1 [default = FAIL_UNKNOWN];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

    // optional string fail_text = 2;
    if (has_fail_text()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->fail_text());
    }

    // optional .weizhu.user.UserExperience experience = 3;
    if (has_experience()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->experience());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpdateUserExperienceResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const UpdateUserExperienceResponse*>(&from));
}

void UpdateUserExperienceResponse::MergeFrom(const UpdateUserExperienceResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_fail_text()) {
      set_fail_text(from.fail_text());
    }
    if (from.has_experience()) {
      mutable_experience()->::weizhu::user::UserExperience::MergeFrom(from.experience());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void UpdateUserExperienceResponse::CopyFrom(const UpdateUserExperienceResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateUserExperienceResponse::IsInitialized() const {

  if (has_experience()) {
    if (!this->experience().IsInitialized()) return false;
  }
  return true;
}

void UpdateUserExperienceResponse::Swap(UpdateUserExperienceResponse* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(fail_text_, other->fail_text_);
    std::swap(experience_, other->experience_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string UpdateUserExperienceResponse::GetTypeName() const {
  return "weizhu.user.UpdateUserExperienceResponse";
}


// ===================================================================

#ifndef _MSC_VER
const int DeleteUserExperienceRequest::kExperienceIdFieldNumber;
#endif  // !_MSC_VER

DeleteUserExperienceRequest::DeleteUserExperienceRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:weizhu.user.DeleteUserExperienceRequest)
}

void DeleteUserExperienceRequest::InitAsDefaultInstance() {
}

DeleteUserExperienceRequest::DeleteUserExperienceRequest(const DeleteUserExperienceRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:weizhu.user.DeleteUserExperienceRequest)
}

void DeleteUserExperienceRequest::SharedCtor() {
  _cached_size_ = 0;
  experience_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DeleteUserExperienceRequest::~DeleteUserExperienceRequest() {
  // @@protoc_insertion_point(destructor:weizhu.user.DeleteUserExperienceRequest)
  SharedDtor();
}

void DeleteUserExperienceRequest::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void DeleteUserExperienceRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const DeleteUserExperienceRequest& DeleteUserExperienceRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_user_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_user_2eproto();
#endif
  return *default_instance_;
}

DeleteUserExperienceRequest* DeleteUserExperienceRequest::default_instance_ = NULL;

DeleteUserExperienceRequest* DeleteUserExperienceRequest::New() const {
  return new DeleteUserExperienceRequest;
}

void DeleteUserExperienceRequest::Clear() {
  experience_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool DeleteUserExperienceRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:weizhu.user.DeleteUserExperienceRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 experience_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &experience_id_)));
          set_has_experience_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:weizhu.user.DeleteUserExperienceRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:weizhu.user.DeleteUserExperienceRequest)
  return false;
#undef DO_
}

void DeleteUserExperienceRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:weizhu.user.DeleteUserExperienceRequest)
  // required int32 experience_id = 1;
  if (has_experience_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->experience_id(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:weizhu.user.DeleteUserExperienceRequest)
}

int DeleteUserExperienceRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 experience_id = 1;
    if (has_experience_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->experience_id());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeleteUserExperienceRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const DeleteUserExperienceRequest*>(&from));
}

void DeleteUserExperienceRequest::MergeFrom(const DeleteUserExperienceRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_experience_id()) {
      set_experience_id(from.experience_id());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void DeleteUserExperienceRequest::CopyFrom(const DeleteUserExperienceRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteUserExperienceRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void DeleteUserExperienceRequest::Swap(DeleteUserExperienceRequest* other) {
  if (other != this) {
    std::swap(experience_id_, other->experience_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string DeleteUserExperienceRequest::GetTypeName() const {
  return "weizhu.user.DeleteUserExperienceRequest";
}


// ===================================================================

bool DeleteUserExperienceResponse_Result_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 99:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const DeleteUserExperienceResponse_Result DeleteUserExperienceResponse::SUCC;
const DeleteUserExperienceResponse_Result DeleteUserExperienceResponse::FAIL_EXPERIENCE_ID_INVALID;
const DeleteUserExperienceResponse_Result DeleteUserExperienceResponse::FAIL_UNKNOWN;
const DeleteUserExperienceResponse_Result DeleteUserExperienceResponse::Result_MIN;
const DeleteUserExperienceResponse_Result DeleteUserExperienceResponse::Result_MAX;
const int DeleteUserExperienceResponse::Result_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int DeleteUserExperienceResponse::kResultFieldNumber;
const int DeleteUserExperienceResponse::kFailTextFieldNumber;
#endif  // !_MSC_VER

DeleteUserExperienceResponse::DeleteUserExperienceResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:weizhu.user.DeleteUserExperienceResponse)
}

void DeleteUserExperienceResponse::InitAsDefaultInstance() {
}

DeleteUserExperienceResponse::DeleteUserExperienceResponse(const DeleteUserExperienceResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:weizhu.user.DeleteUserExperienceResponse)
}

void DeleteUserExperienceResponse::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  result_ = 99;
  fail_text_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DeleteUserExperienceResponse::~DeleteUserExperienceResponse() {
  // @@protoc_insertion_point(destructor:weizhu.user.DeleteUserExperienceResponse)
  SharedDtor();
}

void DeleteUserExperienceResponse::SharedDtor() {
  if (fail_text_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete fail_text_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void DeleteUserExperienceResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const DeleteUserExperienceResponse& DeleteUserExperienceResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_user_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_user_2eproto();
#endif
  return *default_instance_;
}

DeleteUserExperienceResponse* DeleteUserExperienceResponse::default_instance_ = NULL;

DeleteUserExperienceResponse* DeleteUserExperienceResponse::New() const {
  return new DeleteUserExperienceResponse;
}

void DeleteUserExperienceResponse::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    result_ = 99;
    if (has_fail_text()) {
      if (fail_text_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        fail_text_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool DeleteUserExperienceResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:weizhu.user.DeleteUserExperienceResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .weizhu.user.DeleteUserExperienceResponse.Result result = 1 [default = FAIL_UNKNOWN];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::weizhu::user::DeleteUserExperienceResponse_Result_IsValid(value)) {
            set_result(static_cast< ::weizhu::user::DeleteUserExperienceResponse_Result >(value));
          } else {
            unknown_fields_stream.WriteVarint32(tag);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_fail_text;
        break;
      }

      // optional string fail_text = 2;
      case 2: {
        if (tag == 18) {
         parse_fail_text:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fail_text()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:weizhu.user.DeleteUserExperienceResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:weizhu.user.DeleteUserExperienceResponse)
  return false;
#undef DO_
}

void DeleteUserExperienceResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:weizhu.user.DeleteUserExperienceResponse)
  // optional .weizhu.user.DeleteUserExperienceResponse.Result result = 1 [default = FAIL_UNKNOWN];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  // optional string fail_text = 2;
  if (has_fail_text()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->fail_text(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:weizhu.user.DeleteUserExperienceResponse)
}

int DeleteUserExperienceResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .weizhu.user.DeleteUserExperienceResponse.Result result = 1 [default = FAIL_UNKNOWN];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

    // optional string fail_text = 2;
    if (has_fail_text()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->fail_text());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeleteUserExperienceResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const DeleteUserExperienceResponse*>(&from));
}

void DeleteUserExperienceResponse::MergeFrom(const DeleteUserExperienceResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_fail_text()) {
      set_fail_text(from.fail_text());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void DeleteUserExperienceResponse::CopyFrom(const DeleteUserExperienceResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteUserExperienceResponse::IsInitialized() const {

  return true;
}

void DeleteUserExperienceResponse::Swap(DeleteUserExperienceResponse* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(fail_text_, other->fail_text_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string DeleteUserExperienceResponse::GetTypeName() const {
  return "weizhu.user.DeleteUserExperienceResponse";
}


// ===================================================================

#ifndef _MSC_VER
const int MarkUserNameRequest::kUserIdFieldNumber;
const int MarkUserNameRequest::kMarkNameFieldNumber;
#endif  // !_MSC_VER

MarkUserNameRequest::MarkUserNameRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:weizhu.user.MarkUserNameRequest)
}

void MarkUserNameRequest::InitAsDefaultInstance() {
}

MarkUserNameRequest::MarkUserNameRequest(const MarkUserNameRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:weizhu.user.MarkUserNameRequest)
}

void MarkUserNameRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  user_id_ = GOOGLE_LONGLONG(0);
  mark_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MarkUserNameRequest::~MarkUserNameRequest() {
  // @@protoc_insertion_point(destructor:weizhu.user.MarkUserNameRequest)
  SharedDtor();
}

void MarkUserNameRequest::SharedDtor() {
  if (mark_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete mark_name_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void MarkUserNameRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const MarkUserNameRequest& MarkUserNameRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_user_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_user_2eproto();
#endif
  return *default_instance_;
}

MarkUserNameRequest* MarkUserNameRequest::default_instance_ = NULL;

MarkUserNameRequest* MarkUserNameRequest::New() const {
  return new MarkUserNameRequest;
}

void MarkUserNameRequest::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    user_id_ = GOOGLE_LONGLONG(0);
    if (has_mark_name()) {
      if (mark_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        mark_name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool MarkUserNameRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:weizhu.user.MarkUserNameRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 user_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_mark_name;
        break;
      }

      // optional string mark_name = 2;
      case 2: {
        if (tag == 18) {
         parse_mark_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mark_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:weizhu.user.MarkUserNameRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:weizhu.user.MarkUserNameRequest)
  return false;
#undef DO_
}

void MarkUserNameRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:weizhu.user.MarkUserNameRequest)
  // required int64 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->user_id(), output);
  }

  // optional string mark_name = 2;
  if (has_mark_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->mark_name(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:weizhu.user.MarkUserNameRequest)
}

int MarkUserNameRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->user_id());
    }

    // optional string mark_name = 2;
    if (has_mark_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->mark_name());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MarkUserNameRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const MarkUserNameRequest*>(&from));
}

void MarkUserNameRequest::MergeFrom(const MarkUserNameRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_mark_name()) {
      set_mark_name(from.mark_name());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void MarkUserNameRequest::CopyFrom(const MarkUserNameRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MarkUserNameRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void MarkUserNameRequest::Swap(MarkUserNameRequest* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(mark_name_, other->mark_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string MarkUserNameRequest::GetTypeName() const {
  return "weizhu.user.MarkUserNameRequest";
}


// ===================================================================

bool MarkUserNameResponse_Result_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 99:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const MarkUserNameResponse_Result MarkUserNameResponse::SUCC;
const MarkUserNameResponse_Result MarkUserNameResponse::FAIL_USER_NOT_EXSIT;
const MarkUserNameResponse_Result MarkUserNameResponse::FAIL_MARK_SELF;
const MarkUserNameResponse_Result MarkUserNameResponse::FAIL_MARK_NAME_INVALID;
const MarkUserNameResponse_Result MarkUserNameResponse::FAIL_UNKNOWN;
const MarkUserNameResponse_Result MarkUserNameResponse::Result_MIN;
const MarkUserNameResponse_Result MarkUserNameResponse::Result_MAX;
const int MarkUserNameResponse::Result_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int MarkUserNameResponse::kResultFieldNumber;
const int MarkUserNameResponse::kFailTextFieldNumber;
#endif  // !_MSC_VER

MarkUserNameResponse::MarkUserNameResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:weizhu.user.MarkUserNameResponse)
}

void MarkUserNameResponse::InitAsDefaultInstance() {
}

MarkUserNameResponse::MarkUserNameResponse(const MarkUserNameResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:weizhu.user.MarkUserNameResponse)
}

void MarkUserNameResponse::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  result_ = 99;
  fail_text_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MarkUserNameResponse::~MarkUserNameResponse() {
  // @@protoc_insertion_point(destructor:weizhu.user.MarkUserNameResponse)
  SharedDtor();
}

void MarkUserNameResponse::SharedDtor() {
  if (fail_text_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete fail_text_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void MarkUserNameResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const MarkUserNameResponse& MarkUserNameResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_user_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_user_2eproto();
#endif
  return *default_instance_;
}

MarkUserNameResponse* MarkUserNameResponse::default_instance_ = NULL;

MarkUserNameResponse* MarkUserNameResponse::New() const {
  return new MarkUserNameResponse;
}

void MarkUserNameResponse::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    result_ = 99;
    if (has_fail_text()) {
      if (fail_text_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        fail_text_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool MarkUserNameResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:weizhu.user.MarkUserNameResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .weizhu.user.MarkUserNameResponse.Result result = 1 [default = FAIL_UNKNOWN];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::weizhu::user::MarkUserNameResponse_Result_IsValid(value)) {
            set_result(static_cast< ::weizhu::user::MarkUserNameResponse_Result >(value));
          } else {
            unknown_fields_stream.WriteVarint32(tag);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_fail_text;
        break;
      }

      // optional string fail_text = 2;
      case 2: {
        if (tag == 18) {
         parse_fail_text:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fail_text()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:weizhu.user.MarkUserNameResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:weizhu.user.MarkUserNameResponse)
  return false;
#undef DO_
}

void MarkUserNameResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:weizhu.user.MarkUserNameResponse)
  // optional .weizhu.user.MarkUserNameResponse.Result result = 1 [default = FAIL_UNKNOWN];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  // optional string fail_text = 2;
  if (has_fail_text()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->fail_text(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:weizhu.user.MarkUserNameResponse)
}

int MarkUserNameResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .weizhu.user.MarkUserNameResponse.Result result = 1 [default = FAIL_UNKNOWN];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

    // optional string fail_text = 2;
    if (has_fail_text()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->fail_text());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MarkUserNameResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const MarkUserNameResponse*>(&from));
}

void MarkUserNameResponse::MergeFrom(const MarkUserNameResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_fail_text()) {
      set_fail_text(from.fail_text());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void MarkUserNameResponse::CopyFrom(const MarkUserNameResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MarkUserNameResponse::IsInitialized() const {

  return true;
}

void MarkUserNameResponse::Swap(MarkUserNameResponse* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(fail_text_, other->fail_text_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string MarkUserNameResponse::GetTypeName() const {
  return "weizhu.user.MarkUserNameResponse";
}


// ===================================================================

#ifndef _MSC_VER
const int MarkUserStarRequest::kUserIdFieldNumber;
const int MarkUserStarRequest::kIsStarFieldNumber;
#endif  // !_MSC_VER

MarkUserStarRequest::MarkUserStarRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:weizhu.user.MarkUserStarRequest)
}

void MarkUserStarRequest::InitAsDefaultInstance() {
}

MarkUserStarRequest::MarkUserStarRequest(const MarkUserStarRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:weizhu.user.MarkUserStarRequest)
}

void MarkUserStarRequest::SharedCtor() {
  _cached_size_ = 0;
  user_id_ = GOOGLE_LONGLONG(0);
  is_star_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MarkUserStarRequest::~MarkUserStarRequest() {
  // @@protoc_insertion_point(destructor:weizhu.user.MarkUserStarRequest)
  SharedDtor();
}

void MarkUserStarRequest::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void MarkUserStarRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const MarkUserStarRequest& MarkUserStarRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_user_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_user_2eproto();
#endif
  return *default_instance_;
}

MarkUserStarRequest* MarkUserStarRequest::default_instance_ = NULL;

MarkUserStarRequest* MarkUserStarRequest::New() const {
  return new MarkUserStarRequest;
}

void MarkUserStarRequest::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MarkUserStarRequest*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(user_id_, is_star_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool MarkUserStarRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:weizhu.user.MarkUserStarRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 user_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_is_star;
        break;
      }

      // required bool is_star = 2;
      case 2: {
        if (tag == 16) {
         parse_is_star:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_star_)));
          set_has_is_star();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:weizhu.user.MarkUserStarRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:weizhu.user.MarkUserStarRequest)
  return false;
#undef DO_
}

void MarkUserStarRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:weizhu.user.MarkUserStarRequest)
  // required int64 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->user_id(), output);
  }

  // required bool is_star = 2;
  if (has_is_star()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->is_star(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:weizhu.user.MarkUserStarRequest)
}

int MarkUserStarRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->user_id());
    }

    // required bool is_star = 2;
    if (has_is_star()) {
      total_size += 1 + 1;
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MarkUserStarRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const MarkUserStarRequest*>(&from));
}

void MarkUserStarRequest::MergeFrom(const MarkUserStarRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_is_star()) {
      set_is_star(from.is_star());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void MarkUserStarRequest::CopyFrom(const MarkUserStarRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MarkUserStarRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void MarkUserStarRequest::Swap(MarkUserStarRequest* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(is_star_, other->is_star_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string MarkUserStarRequest::GetTypeName() const {
  return "weizhu.user.MarkUserStarRequest";
}


// ===================================================================

bool MarkUserStarResponse_Result_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 99:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const MarkUserStarResponse_Result MarkUserStarResponse::SUCC;
const MarkUserStarResponse_Result MarkUserStarResponse::FAIL_USER_NOT_EXSIT;
const MarkUserStarResponse_Result MarkUserStarResponse::FAIL_MARK_SELF;
const MarkUserStarResponse_Result MarkUserStarResponse::FAIL_MARK_STAR_NUM_LIMIT;
const MarkUserStarResponse_Result MarkUserStarResponse::FAIL_UNKNOWN;
const MarkUserStarResponse_Result MarkUserStarResponse::Result_MIN;
const MarkUserStarResponse_Result MarkUserStarResponse::Result_MAX;
const int MarkUserStarResponse::Result_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int MarkUserStarResponse::kResultFieldNumber;
const int MarkUserStarResponse::kFailTextFieldNumber;
#endif  // !_MSC_VER

MarkUserStarResponse::MarkUserStarResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:weizhu.user.MarkUserStarResponse)
}

void MarkUserStarResponse::InitAsDefaultInstance() {
}

MarkUserStarResponse::MarkUserStarResponse(const MarkUserStarResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:weizhu.user.MarkUserStarResponse)
}

void MarkUserStarResponse::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  result_ = 99;
  fail_text_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MarkUserStarResponse::~MarkUserStarResponse() {
  // @@protoc_insertion_point(destructor:weizhu.user.MarkUserStarResponse)
  SharedDtor();
}

void MarkUserStarResponse::SharedDtor() {
  if (fail_text_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete fail_text_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void MarkUserStarResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const MarkUserStarResponse& MarkUserStarResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_user_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_user_2eproto();
#endif
  return *default_instance_;
}

MarkUserStarResponse* MarkUserStarResponse::default_instance_ = NULL;

MarkUserStarResponse* MarkUserStarResponse::New() const {
  return new MarkUserStarResponse;
}

void MarkUserStarResponse::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    result_ = 99;
    if (has_fail_text()) {
      if (fail_text_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        fail_text_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool MarkUserStarResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:weizhu.user.MarkUserStarResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .weizhu.user.MarkUserStarResponse.Result result = 1 [default = FAIL_UNKNOWN];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::weizhu::user::MarkUserStarResponse_Result_IsValid(value)) {
            set_result(static_cast< ::weizhu::user::MarkUserStarResponse_Result >(value));
          } else {
            unknown_fields_stream.WriteVarint32(tag);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_fail_text;
        break;
      }

      // optional string fail_text = 2;
      case 2: {
        if (tag == 18) {
         parse_fail_text:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fail_text()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:weizhu.user.MarkUserStarResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:weizhu.user.MarkUserStarResponse)
  return false;
#undef DO_
}

void MarkUserStarResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:weizhu.user.MarkUserStarResponse)
  // optional .weizhu.user.MarkUserStarResponse.Result result = 1 [default = FAIL_UNKNOWN];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  // optional string fail_text = 2;
  if (has_fail_text()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->fail_text(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:weizhu.user.MarkUserStarResponse)
}

int MarkUserStarResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .weizhu.user.MarkUserStarResponse.Result result = 1 [default = FAIL_UNKNOWN];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

    // optional string fail_text = 2;
    if (has_fail_text()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->fail_text());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MarkUserStarResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const MarkUserStarResponse*>(&from));
}

void MarkUserStarResponse::MergeFrom(const MarkUserStarResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_fail_text()) {
      set_fail_text(from.fail_text());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void MarkUserStarResponse::CopyFrom(const MarkUserStarResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MarkUserStarResponse::IsInitialized() const {

  return true;
}

void MarkUserStarResponse::Swap(MarkUserStarResponse* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(fail_text_, other->fail_text_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string MarkUserStarResponse::GetTypeName() const {
  return "weizhu.user.MarkUserStarResponse";
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

GetMarkStarUserRequest::GetMarkStarUserRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:weizhu.user.GetMarkStarUserRequest)
}

void GetMarkStarUserRequest::InitAsDefaultInstance() {
}

GetMarkStarUserRequest::GetMarkStarUserRequest(const GetMarkStarUserRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:weizhu.user.GetMarkStarUserRequest)
}

void GetMarkStarUserRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetMarkStarUserRequest::~GetMarkStarUserRequest() {
  // @@protoc_insertion_point(destructor:weizhu.user.GetMarkStarUserRequest)
  SharedDtor();
}

void GetMarkStarUserRequest::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void GetMarkStarUserRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GetMarkStarUserRequest& GetMarkStarUserRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_user_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_user_2eproto();
#endif
  return *default_instance_;
}

GetMarkStarUserRequest* GetMarkStarUserRequest::default_instance_ = NULL;

GetMarkStarUserRequest* GetMarkStarUserRequest::New() const {
  return new GetMarkStarUserRequest;
}

void GetMarkStarUserRequest::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool GetMarkStarUserRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:weizhu.user.GetMarkStarUserRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(
        input, tag, &unknown_fields_stream));
  }
success:
  // @@protoc_insertion_point(parse_success:weizhu.user.GetMarkStarUserRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:weizhu.user.GetMarkStarUserRequest)
  return false;
#undef DO_
}

void GetMarkStarUserRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:weizhu.user.GetMarkStarUserRequest)
  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:weizhu.user.GetMarkStarUserRequest)
}

int GetMarkStarUserRequest::ByteSize() const {
  int total_size = 0;

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetMarkStarUserRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GetMarkStarUserRequest*>(&from));
}

void GetMarkStarUserRequest::MergeFrom(const GetMarkStarUserRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->append(from.unknown_fields());
}

void GetMarkStarUserRequest::CopyFrom(const GetMarkStarUserRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetMarkStarUserRequest::IsInitialized() const {

  return true;
}

void GetMarkStarUserRequest::Swap(GetMarkStarUserRequest* other) {
  if (other != this) {
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string GetMarkStarUserRequest::GetTypeName() const {
  return "weizhu.user.GetMarkStarUserRequest";
}


// ===================================================================

#ifndef _MSC_VER
const int GetMarkStarUserResponse::kUserFieldNumber;
const int GetMarkStarUserResponse::kRefTeamFieldNumber;
const int GetMarkStarUserResponse::kRefPositionFieldNumber;
const int GetMarkStarUserResponse::kRefLevelFieldNumber;
#endif  // !_MSC_VER

GetMarkStarUserResponse::GetMarkStarUserResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:weizhu.user.GetMarkStarUserResponse)
}

void GetMarkStarUserResponse::InitAsDefaultInstance() {
}

GetMarkStarUserResponse::GetMarkStarUserResponse(const GetMarkStarUserResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:weizhu.user.GetMarkStarUserResponse)
}

void GetMarkStarUserResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetMarkStarUserResponse::~GetMarkStarUserResponse() {
  // @@protoc_insertion_point(destructor:weizhu.user.GetMarkStarUserResponse)
  SharedDtor();
}

void GetMarkStarUserResponse::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void GetMarkStarUserResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GetMarkStarUserResponse& GetMarkStarUserResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_user_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_user_2eproto();
#endif
  return *default_instance_;
}

GetMarkStarUserResponse* GetMarkStarUserResponse::default_instance_ = NULL;

GetMarkStarUserResponse* GetMarkStarUserResponse::New() const {
  return new GetMarkStarUserResponse;
}

void GetMarkStarUserResponse::Clear() {
  user_.Clear();
  ref_team_.Clear();
  ref_position_.Clear();
  ref_level_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool GetMarkStarUserResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:weizhu.user.GetMarkStarUserResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .weizhu.user.User user = 1;
      case 1: {
        if (tag == 10) {
         parse_user:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_user()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_user;
        if (input->ExpectTag(18)) goto parse_ref_team;
        break;
      }

      // repeated .weizhu.user.Team ref_team = 2;
      case 2: {
        if (tag == 18) {
         parse_ref_team:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_ref_team()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_ref_team;
        if (input->ExpectTag(26)) goto parse_ref_position;
        break;
      }

      // repeated .weizhu.user.Position ref_position = 3;
      case 3: {
        if (tag == 26) {
         parse_ref_position:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_ref_position()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_ref_position;
        if (input->ExpectTag(34)) goto parse_ref_level;
        break;
      }

      // repeated .weizhu.user.Level ref_level = 4;
      case 4: {
        if (tag == 34) {
         parse_ref_level:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_ref_level()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_ref_level;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:weizhu.user.GetMarkStarUserResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:weizhu.user.GetMarkStarUserResponse)
  return false;
#undef DO_
}

void GetMarkStarUserResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:weizhu.user.GetMarkStarUserResponse)
  // repeated .weizhu.user.User user = 1;
  for (int i = 0; i < this->user_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->user(i), output);
  }

  // repeated .weizhu.user.Team ref_team = 2;
  for (int i = 0; i < this->ref_team_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->ref_team(i), output);
  }

  // repeated .weizhu.user.Position ref_position = 3;
  for (int i = 0; i < this->ref_position_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->ref_position(i), output);
  }

  // repeated .weizhu.user.Level ref_level = 4;
  for (int i = 0; i < this->ref_level_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, this->ref_level(i), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:weizhu.user.GetMarkStarUserResponse)
}

int GetMarkStarUserResponse::ByteSize() const {
  int total_size = 0;

  // repeated .weizhu.user.User user = 1;
  total_size += 1 * this->user_size();
  for (int i = 0; i < this->user_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->user(i));
  }

  // repeated .weizhu.user.Team ref_team = 2;
  total_size += 1 * this->ref_team_size();
  for (int i = 0; i < this->ref_team_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->ref_team(i));
  }

  // repeated .weizhu.user.Position ref_position = 3;
  total_size += 1 * this->ref_position_size();
  for (int i = 0; i < this->ref_position_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->ref_position(i));
  }

  // repeated .weizhu.user.Level ref_level = 4;
  total_size += 1 * this->ref_level_size();
  for (int i = 0; i < this->ref_level_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->ref_level(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetMarkStarUserResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GetMarkStarUserResponse*>(&from));
}

void GetMarkStarUserResponse::MergeFrom(const GetMarkStarUserResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  user_.MergeFrom(from.user_);
  ref_team_.MergeFrom(from.ref_team_);
  ref_position_.MergeFrom(from.ref_position_);
  ref_level_.MergeFrom(from.ref_level_);
  mutable_unknown_fields()->append(from.unknown_fields());
}

void GetMarkStarUserResponse::CopyFrom(const GetMarkStarUserResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetMarkStarUserResponse::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->user())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->ref_team())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->ref_position())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->ref_level())) return false;
  return true;
}

void GetMarkStarUserResponse::Swap(GetMarkStarUserResponse* other) {
  if (other != this) {
    user_.Swap(&other->user_);
    ref_team_.Swap(&other->ref_team_);
    ref_position_.Swap(&other->ref_position_);
    ref_level_.Swap(&other->ref_level_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string GetMarkStarUserResponse::GetTypeName() const {
  return "weizhu.user.GetMarkStarUserResponse";
}


// ===================================================================

#ifndef _MSC_VER
const int GetUserAbilityTagRequest::kUserIdFieldNumber;
#endif  // !_MSC_VER

GetUserAbilityTagRequest::GetUserAbilityTagRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:weizhu.user.GetUserAbilityTagRequest)
}

void GetUserAbilityTagRequest::InitAsDefaultInstance() {
}

GetUserAbilityTagRequest::GetUserAbilityTagRequest(const GetUserAbilityTagRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:weizhu.user.GetUserAbilityTagRequest)
}

void GetUserAbilityTagRequest::SharedCtor() {
  _cached_size_ = 0;
  user_id_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetUserAbilityTagRequest::~GetUserAbilityTagRequest() {
  // @@protoc_insertion_point(destructor:weizhu.user.GetUserAbilityTagRequest)
  SharedDtor();
}

void GetUserAbilityTagRequest::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void GetUserAbilityTagRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GetUserAbilityTagRequest& GetUserAbilityTagRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_user_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_user_2eproto();
#endif
  return *default_instance_;
}

GetUserAbilityTagRequest* GetUserAbilityTagRequest::default_instance_ = NULL;

GetUserAbilityTagRequest* GetUserAbilityTagRequest::New() const {
  return new GetUserAbilityTagRequest;
}

void GetUserAbilityTagRequest::Clear() {
  user_id_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool GetUserAbilityTagRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:weizhu.user.GetUserAbilityTagRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 user_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:weizhu.user.GetUserAbilityTagRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:weizhu.user.GetUserAbilityTagRequest)
  return false;
#undef DO_
}

void GetUserAbilityTagRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:weizhu.user.GetUserAbilityTagRequest)
  // required int64 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->user_id(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:weizhu.user.GetUserAbilityTagRequest)
}

int GetUserAbilityTagRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->user_id());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetUserAbilityTagRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GetUserAbilityTagRequest*>(&from));
}

void GetUserAbilityTagRequest::MergeFrom(const GetUserAbilityTagRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void GetUserAbilityTagRequest::CopyFrom(const GetUserAbilityTagRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetUserAbilityTagRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GetUserAbilityTagRequest::Swap(GetUserAbilityTagRequest* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string GetUserAbilityTagRequest::GetTypeName() const {
  return "weizhu.user.GetUserAbilityTagRequest";
}


// ===================================================================

#ifndef _MSC_VER
const int GetUserAbilityTagResponse::kAbilityTagFieldNumber;
#endif  // !_MSC_VER

GetUserAbilityTagResponse::GetUserAbilityTagResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:weizhu.user.GetUserAbilityTagResponse)
}

void GetUserAbilityTagResponse::InitAsDefaultInstance() {
}

GetUserAbilityTagResponse::GetUserAbilityTagResponse(const GetUserAbilityTagResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:weizhu.user.GetUserAbilityTagResponse)
}

void GetUserAbilityTagResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetUserAbilityTagResponse::~GetUserAbilityTagResponse() {
  // @@protoc_insertion_point(destructor:weizhu.user.GetUserAbilityTagResponse)
  SharedDtor();
}

void GetUserAbilityTagResponse::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void GetUserAbilityTagResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GetUserAbilityTagResponse& GetUserAbilityTagResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_user_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_user_2eproto();
#endif
  return *default_instance_;
}

GetUserAbilityTagResponse* GetUserAbilityTagResponse::default_instance_ = NULL;

GetUserAbilityTagResponse* GetUserAbilityTagResponse::New() const {
  return new GetUserAbilityTagResponse;
}

void GetUserAbilityTagResponse::Clear() {
  ability_tag_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool GetUserAbilityTagResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:weizhu.user.GetUserAbilityTagResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .weizhu.user.UserAbilityTag ability_tag = 1;
      case 1: {
        if (tag == 10) {
         parse_ability_tag:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_ability_tag()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_ability_tag;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:weizhu.user.GetUserAbilityTagResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:weizhu.user.GetUserAbilityTagResponse)
  return false;
#undef DO_
}

void GetUserAbilityTagResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:weizhu.user.GetUserAbilityTagResponse)
  // repeated .weizhu.user.UserAbilityTag ability_tag = 1;
  for (int i = 0; i < this->ability_tag_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->ability_tag(i), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:weizhu.user.GetUserAbilityTagResponse)
}

int GetUserAbilityTagResponse::ByteSize() const {
  int total_size = 0;

  // repeated .weizhu.user.UserAbilityTag ability_tag = 1;
  total_size += 1 * this->ability_tag_size();
  for (int i = 0; i < this->ability_tag_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->ability_tag(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetUserAbilityTagResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GetUserAbilityTagResponse*>(&from));
}

void GetUserAbilityTagResponse::MergeFrom(const GetUserAbilityTagResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  ability_tag_.MergeFrom(from.ability_tag_);
  mutable_unknown_fields()->append(from.unknown_fields());
}

void GetUserAbilityTagResponse::CopyFrom(const GetUserAbilityTagResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetUserAbilityTagResponse::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->ability_tag())) return false;
  return true;
}

void GetUserAbilityTagResponse::Swap(GetUserAbilityTagResponse* other) {
  if (other != this) {
    ability_tag_.Swap(&other->ability_tag_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string GetUserAbilityTagResponse::GetTypeName() const {
  return "weizhu.user.GetUserAbilityTagResponse";
}


// ===================================================================

#ifndef _MSC_VER
const int TagUserAbilityRequest::kUserIdFieldNumber;
const int TagUserAbilityRequest::kTagNameFieldNumber;
const int TagUserAbilityRequest::kIsTagFieldNumber;
#endif  // !_MSC_VER

TagUserAbilityRequest::TagUserAbilityRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:weizhu.user.TagUserAbilityRequest)
}

void TagUserAbilityRequest::InitAsDefaultInstance() {
}

TagUserAbilityRequest::TagUserAbilityRequest(const TagUserAbilityRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:weizhu.user.TagUserAbilityRequest)
}

void TagUserAbilityRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  user_id_ = GOOGLE_LONGLONG(0);
  tag_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  is_tag_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TagUserAbilityRequest::~TagUserAbilityRequest() {
  // @@protoc_insertion_point(destructor:weizhu.user.TagUserAbilityRequest)
  SharedDtor();
}

void TagUserAbilityRequest::SharedDtor() {
  if (tag_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete tag_name_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void TagUserAbilityRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const TagUserAbilityRequest& TagUserAbilityRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_user_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_user_2eproto();
#endif
  return *default_instance_;
}

TagUserAbilityRequest* TagUserAbilityRequest::default_instance_ = NULL;

TagUserAbilityRequest* TagUserAbilityRequest::New() const {
  return new TagUserAbilityRequest;
}

void TagUserAbilityRequest::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    user_id_ = GOOGLE_LONGLONG(0);
    if (has_tag_name()) {
      if (tag_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        tag_name_->clear();
      }
    }
    is_tag_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool TagUserAbilityRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:weizhu.user.TagUserAbilityRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 user_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_tag_name;
        break;
      }

      // required string tag_name = 2;
      case 2: {
        if (tag == 18) {
         parse_tag_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tag_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_is_tag;
        break;
      }

      // required bool is_tag = 3;
      case 3: {
        if (tag == 24) {
         parse_is_tag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_tag_)));
          set_has_is_tag();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:weizhu.user.TagUserAbilityRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:weizhu.user.TagUserAbilityRequest)
  return false;
#undef DO_
}

void TagUserAbilityRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:weizhu.user.TagUserAbilityRequest)
  // required int64 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->user_id(), output);
  }

  // required string tag_name = 2;
  if (has_tag_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->tag_name(), output);
  }

  // required bool is_tag = 3;
  if (has_is_tag()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->is_tag(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:weizhu.user.TagUserAbilityRequest)
}

int TagUserAbilityRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->user_id());
    }

    // required string tag_name = 2;
    if (has_tag_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->tag_name());
    }

    // required bool is_tag = 3;
    if (has_is_tag()) {
      total_size += 1 + 1;
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TagUserAbilityRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const TagUserAbilityRequest*>(&from));
}

void TagUserAbilityRequest::MergeFrom(const TagUserAbilityRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_tag_name()) {
      set_tag_name(from.tag_name());
    }
    if (from.has_is_tag()) {
      set_is_tag(from.is_tag());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void TagUserAbilityRequest::CopyFrom(const TagUserAbilityRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TagUserAbilityRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void TagUserAbilityRequest::Swap(TagUserAbilityRequest* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(tag_name_, other->tag_name_);
    std::swap(is_tag_, other->is_tag_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string TagUserAbilityRequest::GetTypeName() const {
  return "weizhu.user.TagUserAbilityRequest";
}


// ===================================================================

bool TagUserAbilityResponse_Result_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 99:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const TagUserAbilityResponse_Result TagUserAbilityResponse::SUCC;
const TagUserAbilityResponse_Result TagUserAbilityResponse::FAIL_USER_NOT_EXSIT;
const TagUserAbilityResponse_Result TagUserAbilityResponse::FAIL_TAG_SELF;
const TagUserAbilityResponse_Result TagUserAbilityResponse::FAIL_TAG_NOT_EXIST;
const TagUserAbilityResponse_Result TagUserAbilityResponse::FAIL_UNKNOWN;
const TagUserAbilityResponse_Result TagUserAbilityResponse::Result_MIN;
const TagUserAbilityResponse_Result TagUserAbilityResponse::Result_MAX;
const int TagUserAbilityResponse::Result_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int TagUserAbilityResponse::kResultFieldNumber;
const int TagUserAbilityResponse::kFailTextFieldNumber;
#endif  // !_MSC_VER

TagUserAbilityResponse::TagUserAbilityResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:weizhu.user.TagUserAbilityResponse)
}

void TagUserAbilityResponse::InitAsDefaultInstance() {
}

TagUserAbilityResponse::TagUserAbilityResponse(const TagUserAbilityResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:weizhu.user.TagUserAbilityResponse)
}

void TagUserAbilityResponse::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  result_ = 99;
  fail_text_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TagUserAbilityResponse::~TagUserAbilityResponse() {
  // @@protoc_insertion_point(destructor:weizhu.user.TagUserAbilityResponse)
  SharedDtor();
}

void TagUserAbilityResponse::SharedDtor() {
  if (fail_text_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete fail_text_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void TagUserAbilityResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const TagUserAbilityResponse& TagUserAbilityResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_user_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_user_2eproto();
#endif
  return *default_instance_;
}

TagUserAbilityResponse* TagUserAbilityResponse::default_instance_ = NULL;

TagUserAbilityResponse* TagUserAbilityResponse::New() const {
  return new TagUserAbilityResponse;
}

void TagUserAbilityResponse::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    result_ = 99;
    if (has_fail_text()) {
      if (fail_text_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        fail_text_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool TagUserAbilityResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:weizhu.user.TagUserAbilityResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .weizhu.user.TagUserAbilityResponse.Result result = 1 [default = FAIL_UNKNOWN];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::weizhu::user::TagUserAbilityResponse_Result_IsValid(value)) {
            set_result(static_cast< ::weizhu::user::TagUserAbilityResponse_Result >(value));
          } else {
            unknown_fields_stream.WriteVarint32(tag);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_fail_text;
        break;
      }

      // optional string fail_text = 2;
      case 2: {
        if (tag == 18) {
         parse_fail_text:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fail_text()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:weizhu.user.TagUserAbilityResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:weizhu.user.TagUserAbilityResponse)
  return false;
#undef DO_
}

void TagUserAbilityResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:weizhu.user.TagUserAbilityResponse)
  // optional .weizhu.user.TagUserAbilityResponse.Result result = 1 [default = FAIL_UNKNOWN];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  // optional string fail_text = 2;
  if (has_fail_text()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->fail_text(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:weizhu.user.TagUserAbilityResponse)
}

int TagUserAbilityResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .weizhu.user.TagUserAbilityResponse.Result result = 1 [default = FAIL_UNKNOWN];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

    // optional string fail_text = 2;
    if (has_fail_text()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->fail_text());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TagUserAbilityResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const TagUserAbilityResponse*>(&from));
}

void TagUserAbilityResponse::MergeFrom(const TagUserAbilityResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_fail_text()) {
      set_fail_text(from.fail_text());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void TagUserAbilityResponse::CopyFrom(const TagUserAbilityResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TagUserAbilityResponse::IsInitialized() const {

  return true;
}

void TagUserAbilityResponse::Swap(TagUserAbilityResponse* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(fail_text_, other->fail_text_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string TagUserAbilityResponse::GetTypeName() const {
  return "weizhu.user.TagUserAbilityResponse";
}


// ===================================================================

#ifndef _MSC_VER
const int CreateAbilityTagRequest::kUserIdFieldNumber;
const int CreateAbilityTagRequest::kTagNameFieldNumber;
#endif  // !_MSC_VER

CreateAbilityTagRequest::CreateAbilityTagRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:weizhu.user.CreateAbilityTagRequest)
}

void CreateAbilityTagRequest::InitAsDefaultInstance() {
}

CreateAbilityTagRequest::CreateAbilityTagRequest(const CreateAbilityTagRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:weizhu.user.CreateAbilityTagRequest)
}

void CreateAbilityTagRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  user_id_ = GOOGLE_LONGLONG(0);
  tag_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CreateAbilityTagRequest::~CreateAbilityTagRequest() {
  // @@protoc_insertion_point(destructor:weizhu.user.CreateAbilityTagRequest)
  SharedDtor();
}

void CreateAbilityTagRequest::SharedDtor() {
  if (tag_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete tag_name_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CreateAbilityTagRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CreateAbilityTagRequest& CreateAbilityTagRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_user_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_user_2eproto();
#endif
  return *default_instance_;
}

CreateAbilityTagRequest* CreateAbilityTagRequest::default_instance_ = NULL;

CreateAbilityTagRequest* CreateAbilityTagRequest::New() const {
  return new CreateAbilityTagRequest;
}

void CreateAbilityTagRequest::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    user_id_ = GOOGLE_LONGLONG(0);
    if (has_tag_name()) {
      if (tag_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        tag_name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool CreateAbilityTagRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:weizhu.user.CreateAbilityTagRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 user_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_tag_name;
        break;
      }

      // required string tag_name = 2;
      case 2: {
        if (tag == 18) {
         parse_tag_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tag_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:weizhu.user.CreateAbilityTagRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:weizhu.user.CreateAbilityTagRequest)
  return false;
#undef DO_
}

void CreateAbilityTagRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:weizhu.user.CreateAbilityTagRequest)
  // required int64 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->user_id(), output);
  }

  // required string tag_name = 2;
  if (has_tag_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->tag_name(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:weizhu.user.CreateAbilityTagRequest)
}

int CreateAbilityTagRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->user_id());
    }

    // required string tag_name = 2;
    if (has_tag_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->tag_name());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CreateAbilityTagRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CreateAbilityTagRequest*>(&from));
}

void CreateAbilityTagRequest::MergeFrom(const CreateAbilityTagRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_tag_name()) {
      set_tag_name(from.tag_name());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void CreateAbilityTagRequest::CopyFrom(const CreateAbilityTagRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateAbilityTagRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void CreateAbilityTagRequest::Swap(CreateAbilityTagRequest* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(tag_name_, other->tag_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CreateAbilityTagRequest::GetTypeName() const {
  return "weizhu.user.CreateAbilityTagRequest";
}


// ===================================================================

bool CreateAbilityTagResponse_Result_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 99:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const CreateAbilityTagResponse_Result CreateAbilityTagResponse::SUCC;
const CreateAbilityTagResponse_Result CreateAbilityTagResponse::FAIL_USER_NOT_EXSIT;
const CreateAbilityTagResponse_Result CreateAbilityTagResponse::FAIL_TAG_NAME_INVALID;
const CreateAbilityTagResponse_Result CreateAbilityTagResponse::FAIL_TAG_NUM_LIMIT;
const CreateAbilityTagResponse_Result CreateAbilityTagResponse::FAIL_TAG_EXIST;
const CreateAbilityTagResponse_Result CreateAbilityTagResponse::FAIL_UNKNOWN;
const CreateAbilityTagResponse_Result CreateAbilityTagResponse::Result_MIN;
const CreateAbilityTagResponse_Result CreateAbilityTagResponse::Result_MAX;
const int CreateAbilityTagResponse::Result_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int CreateAbilityTagResponse::kResultFieldNumber;
const int CreateAbilityTagResponse::kFailTextFieldNumber;
#endif  // !_MSC_VER

CreateAbilityTagResponse::CreateAbilityTagResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:weizhu.user.CreateAbilityTagResponse)
}

void CreateAbilityTagResponse::InitAsDefaultInstance() {
}

CreateAbilityTagResponse::CreateAbilityTagResponse(const CreateAbilityTagResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:weizhu.user.CreateAbilityTagResponse)
}

void CreateAbilityTagResponse::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  result_ = 99;
  fail_text_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CreateAbilityTagResponse::~CreateAbilityTagResponse() {
  // @@protoc_insertion_point(destructor:weizhu.user.CreateAbilityTagResponse)
  SharedDtor();
}

void CreateAbilityTagResponse::SharedDtor() {
  if (fail_text_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete fail_text_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CreateAbilityTagResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CreateAbilityTagResponse& CreateAbilityTagResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_user_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_user_2eproto();
#endif
  return *default_instance_;
}

CreateAbilityTagResponse* CreateAbilityTagResponse::default_instance_ = NULL;

CreateAbilityTagResponse* CreateAbilityTagResponse::New() const {
  return new CreateAbilityTagResponse;
}

void CreateAbilityTagResponse::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    result_ = 99;
    if (has_fail_text()) {
      if (fail_text_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        fail_text_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool CreateAbilityTagResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:weizhu.user.CreateAbilityTagResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .weizhu.user.CreateAbilityTagResponse.Result result = 1 [default = FAIL_UNKNOWN];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::weizhu::user::CreateAbilityTagResponse_Result_IsValid(value)) {
            set_result(static_cast< ::weizhu::user::CreateAbilityTagResponse_Result >(value));
          } else {
            unknown_fields_stream.WriteVarint32(tag);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_fail_text;
        break;
      }

      // optional string fail_text = 2;
      case 2: {
        if (tag == 18) {
         parse_fail_text:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fail_text()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:weizhu.user.CreateAbilityTagResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:weizhu.user.CreateAbilityTagResponse)
  return false;
#undef DO_
}

void CreateAbilityTagResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:weizhu.user.CreateAbilityTagResponse)
  // optional .weizhu.user.CreateAbilityTagResponse.Result result = 1 [default = FAIL_UNKNOWN];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  // optional string fail_text = 2;
  if (has_fail_text()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->fail_text(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:weizhu.user.CreateAbilityTagResponse)
}

int CreateAbilityTagResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .weizhu.user.CreateAbilityTagResponse.Result result = 1 [default = FAIL_UNKNOWN];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

    // optional string fail_text = 2;
    if (has_fail_text()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->fail_text());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CreateAbilityTagResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CreateAbilityTagResponse*>(&from));
}

void CreateAbilityTagResponse::MergeFrom(const CreateAbilityTagResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_fail_text()) {
      set_fail_text(from.fail_text());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void CreateAbilityTagResponse::CopyFrom(const CreateAbilityTagResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateAbilityTagResponse::IsInitialized() const {

  return true;
}

void CreateAbilityTagResponse::Swap(CreateAbilityTagResponse* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(fail_text_, other->fail_text_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CreateAbilityTagResponse::GetTypeName() const {
  return "weizhu.user.CreateAbilityTagResponse";
}


// ===================================================================

#ifndef _MSC_VER
const int DeleteAbilityTagRequest::kTagNameFieldNumber;
#endif  // !_MSC_VER

DeleteAbilityTagRequest::DeleteAbilityTagRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:weizhu.user.DeleteAbilityTagRequest)
}

void DeleteAbilityTagRequest::InitAsDefaultInstance() {
}

DeleteAbilityTagRequest::DeleteAbilityTagRequest(const DeleteAbilityTagRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:weizhu.user.DeleteAbilityTagRequest)
}

void DeleteAbilityTagRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DeleteAbilityTagRequest::~DeleteAbilityTagRequest() {
  // @@protoc_insertion_point(destructor:weizhu.user.DeleteAbilityTagRequest)
  SharedDtor();
}

void DeleteAbilityTagRequest::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void DeleteAbilityTagRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const DeleteAbilityTagRequest& DeleteAbilityTagRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_user_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_user_2eproto();
#endif
  return *default_instance_;
}

DeleteAbilityTagRequest* DeleteAbilityTagRequest::default_instance_ = NULL;

DeleteAbilityTagRequest* DeleteAbilityTagRequest::New() const {
  return new DeleteAbilityTagRequest;
}

void DeleteAbilityTagRequest::Clear() {
  tag_name_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool DeleteAbilityTagRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:weizhu.user.DeleteAbilityTagRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string tag_name = 1;
      case 1: {
        if (tag == 10) {
         parse_tag_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_tag_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_tag_name;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:weizhu.user.DeleteAbilityTagRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:weizhu.user.DeleteAbilityTagRequest)
  return false;
#undef DO_
}

void DeleteAbilityTagRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:weizhu.user.DeleteAbilityTagRequest)
  // repeated string tag_name = 1;
  for (int i = 0; i < this->tag_name_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->tag_name(i), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:weizhu.user.DeleteAbilityTagRequest)
}

int DeleteAbilityTagRequest::ByteSize() const {
  int total_size = 0;

  // repeated string tag_name = 1;
  total_size += 1 * this->tag_name_size();
  for (int i = 0; i < this->tag_name_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->tag_name(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeleteAbilityTagRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const DeleteAbilityTagRequest*>(&from));
}

void DeleteAbilityTagRequest::MergeFrom(const DeleteAbilityTagRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  tag_name_.MergeFrom(from.tag_name_);
  mutable_unknown_fields()->append(from.unknown_fields());
}

void DeleteAbilityTagRequest::CopyFrom(const DeleteAbilityTagRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteAbilityTagRequest::IsInitialized() const {

  return true;
}

void DeleteAbilityTagRequest::Swap(DeleteAbilityTagRequest* other) {
  if (other != this) {
    tag_name_.Swap(&other->tag_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string DeleteAbilityTagRequest::GetTypeName() const {
  return "weizhu.user.DeleteAbilityTagRequest";
}


// ===================================================================

#ifndef _MSC_VER
const int GetRandomAbilityTagUserRequest::kTagNameFieldNumber;
const int GetRandomAbilityTagUserRequest::kIsExpertFieldNumber;
const int GetRandomAbilityTagUserRequest::kSizeFieldNumber;
#endif  // !_MSC_VER

GetRandomAbilityTagUserRequest::GetRandomAbilityTagUserRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:weizhu.user.GetRandomAbilityTagUserRequest)
}

void GetRandomAbilityTagUserRequest::InitAsDefaultInstance() {
}

GetRandomAbilityTagUserRequest::GetRandomAbilityTagUserRequest(const GetRandomAbilityTagUserRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:weizhu.user.GetRandomAbilityTagUserRequest)
}

void GetRandomAbilityTagUserRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  is_expert_ = false;
  size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetRandomAbilityTagUserRequest::~GetRandomAbilityTagUserRequest() {
  // @@protoc_insertion_point(destructor:weizhu.user.GetRandomAbilityTagUserRequest)
  SharedDtor();
}

void GetRandomAbilityTagUserRequest::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void GetRandomAbilityTagUserRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GetRandomAbilityTagUserRequest& GetRandomAbilityTagUserRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_user_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_user_2eproto();
#endif
  return *default_instance_;
}

GetRandomAbilityTagUserRequest* GetRandomAbilityTagUserRequest::default_instance_ = NULL;

GetRandomAbilityTagUserRequest* GetRandomAbilityTagUserRequest::New() const {
  return new GetRandomAbilityTagUserRequest;
}

void GetRandomAbilityTagUserRequest::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GetRandomAbilityTagUserRequest*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(is_expert_, size_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  tag_name_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool GetRandomAbilityTagUserRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:weizhu.user.GetRandomAbilityTagUserRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string tag_name = 1;
      case 1: {
        if (tag == 10) {
         parse_tag_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_tag_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_tag_name;
        if (input->ExpectTag(16)) goto parse_is_expert;
        break;
      }

      // optional bool is_expert = 2;
      case 2: {
        if (tag == 16) {
         parse_is_expert:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_expert_)));
          set_has_is_expert();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_size;
        break;
      }

      // required int32 size = 3;
      case 3: {
        if (tag == 24) {
         parse_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &size_)));
          set_has_size();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:weizhu.user.GetRandomAbilityTagUserRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:weizhu.user.GetRandomAbilityTagUserRequest)
  return false;
#undef DO_
}

void GetRandomAbilityTagUserRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:weizhu.user.GetRandomAbilityTagUserRequest)
  // repeated string tag_name = 1;
  for (int i = 0; i < this->tag_name_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->tag_name(i), output);
  }

  // optional bool is_expert = 2;
  if (has_is_expert()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->is_expert(), output);
  }

  // required int32 size = 3;
  if (has_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->size(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:weizhu.user.GetRandomAbilityTagUserRequest)
}

int GetRandomAbilityTagUserRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional bool is_expert = 2;
    if (has_is_expert()) {
      total_size += 1 + 1;
    }

    // required int32 size = 3;
    if (has_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->size());
    }

  }
  // repeated string tag_name = 1;
  total_size += 1 * this->tag_name_size();
  for (int i = 0; i < this->tag_name_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->tag_name(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetRandomAbilityTagUserRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GetRandomAbilityTagUserRequest*>(&from));
}

void GetRandomAbilityTagUserRequest::MergeFrom(const GetRandomAbilityTagUserRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  tag_name_.MergeFrom(from.tag_name_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_is_expert()) {
      set_is_expert(from.is_expert());
    }
    if (from.has_size()) {
      set_size(from.size());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void GetRandomAbilityTagUserRequest::CopyFrom(const GetRandomAbilityTagUserRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetRandomAbilityTagUserRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000004) != 0x00000004) return false;

  return true;
}

void GetRandomAbilityTagUserRequest::Swap(GetRandomAbilityTagUserRequest* other) {
  if (other != this) {
    tag_name_.Swap(&other->tag_name_);
    std::swap(is_expert_, other->is_expert_);
    std::swap(size_, other->size_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string GetRandomAbilityTagUserRequest::GetTypeName() const {
  return "weizhu.user.GetRandomAbilityTagUserRequest";
}


// ===================================================================

#ifndef _MSC_VER
const int GetRandomAbilityTagUserResponse::kUserFieldNumber;
const int GetRandomAbilityTagUserResponse::kRefTeamFieldNumber;
const int GetRandomAbilityTagUserResponse::kRefPositionFieldNumber;
const int GetRandomAbilityTagUserResponse::kRefLevelFieldNumber;
const int GetRandomAbilityTagUserResponse::kRefAbilityTagFieldNumber;
#endif  // !_MSC_VER

GetRandomAbilityTagUserResponse::GetRandomAbilityTagUserResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:weizhu.user.GetRandomAbilityTagUserResponse)
}

void GetRandomAbilityTagUserResponse::InitAsDefaultInstance() {
}

GetRandomAbilityTagUserResponse::GetRandomAbilityTagUserResponse(const GetRandomAbilityTagUserResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:weizhu.user.GetRandomAbilityTagUserResponse)
}

void GetRandomAbilityTagUserResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetRandomAbilityTagUserResponse::~GetRandomAbilityTagUserResponse() {
  // @@protoc_insertion_point(destructor:weizhu.user.GetRandomAbilityTagUserResponse)
  SharedDtor();
}

void GetRandomAbilityTagUserResponse::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void GetRandomAbilityTagUserResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GetRandomAbilityTagUserResponse& GetRandomAbilityTagUserResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_user_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_user_2eproto();
#endif
  return *default_instance_;
}

GetRandomAbilityTagUserResponse* GetRandomAbilityTagUserResponse::default_instance_ = NULL;

GetRandomAbilityTagUserResponse* GetRandomAbilityTagUserResponse::New() const {
  return new GetRandomAbilityTagUserResponse;
}

void GetRandomAbilityTagUserResponse::Clear() {
  user_.Clear();
  ref_team_.Clear();
  ref_position_.Clear();
  ref_level_.Clear();
  ref_ability_tag_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool GetRandomAbilityTagUserResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:weizhu.user.GetRandomAbilityTagUserResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .weizhu.user.User user = 1;
      case 1: {
        if (tag == 10) {
         parse_user:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_user()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_user;
        if (input->ExpectTag(18)) goto parse_ref_team;
        break;
      }

      // repeated .weizhu.user.Team ref_team = 2;
      case 2: {
        if (tag == 18) {
         parse_ref_team:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_ref_team()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_ref_team;
        if (input->ExpectTag(26)) goto parse_ref_position;
        break;
      }

      // repeated .weizhu.user.Position ref_position = 3;
      case 3: {
        if (tag == 26) {
         parse_ref_position:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_ref_position()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_ref_position;
        if (input->ExpectTag(34)) goto parse_ref_level;
        break;
      }

      // repeated .weizhu.user.Level ref_level = 4;
      case 4: {
        if (tag == 34) {
         parse_ref_level:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_ref_level()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_ref_level;
        if (input->ExpectTag(42)) goto parse_ref_ability_tag;
        break;
      }

      // repeated .weizhu.user.UserAbilityTag ref_ability_tag = 5;
      case 5: {
        if (tag == 42) {
         parse_ref_ability_tag:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_ref_ability_tag()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_ref_ability_tag;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:weizhu.user.GetRandomAbilityTagUserResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:weizhu.user.GetRandomAbilityTagUserResponse)
  return false;
#undef DO_
}

void GetRandomAbilityTagUserResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:weizhu.user.GetRandomAbilityTagUserResponse)
  // repeated .weizhu.user.User user = 1;
  for (int i = 0; i < this->user_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->user(i), output);
  }

  // repeated .weizhu.user.Team ref_team = 2;
  for (int i = 0; i < this->ref_team_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->ref_team(i), output);
  }

  // repeated .weizhu.user.Position ref_position = 3;
  for (int i = 0; i < this->ref_position_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->ref_position(i), output);
  }

  // repeated .weizhu.user.Level ref_level = 4;
  for (int i = 0; i < this->ref_level_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, this->ref_level(i), output);
  }

  // repeated .weizhu.user.UserAbilityTag ref_ability_tag = 5;
  for (int i = 0; i < this->ref_ability_tag_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      5, this->ref_ability_tag(i), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:weizhu.user.GetRandomAbilityTagUserResponse)
}

int GetRandomAbilityTagUserResponse::ByteSize() const {
  int total_size = 0;

  // repeated .weizhu.user.User user = 1;
  total_size += 1 * this->user_size();
  for (int i = 0; i < this->user_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->user(i));
  }

  // repeated .weizhu.user.Team ref_team = 2;
  total_size += 1 * this->ref_team_size();
  for (int i = 0; i < this->ref_team_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->ref_team(i));
  }

  // repeated .weizhu.user.Position ref_position = 3;
  total_size += 1 * this->ref_position_size();
  for (int i = 0; i < this->ref_position_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->ref_position(i));
  }

  // repeated .weizhu.user.Level ref_level = 4;
  total_size += 1 * this->ref_level_size();
  for (int i = 0; i < this->ref_level_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->ref_level(i));
  }

  // repeated .weizhu.user.UserAbilityTag ref_ability_tag = 5;
  total_size += 1 * this->ref_ability_tag_size();
  for (int i = 0; i < this->ref_ability_tag_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->ref_ability_tag(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetRandomAbilityTagUserResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GetRandomAbilityTagUserResponse*>(&from));
}

void GetRandomAbilityTagUserResponse::MergeFrom(const GetRandomAbilityTagUserResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  user_.MergeFrom(from.user_);
  ref_team_.MergeFrom(from.ref_team_);
  ref_position_.MergeFrom(from.ref_position_);
  ref_level_.MergeFrom(from.ref_level_);
  ref_ability_tag_.MergeFrom(from.ref_ability_tag_);
  mutable_unknown_fields()->append(from.unknown_fields());
}

void GetRandomAbilityTagUserResponse::CopyFrom(const GetRandomAbilityTagUserResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetRandomAbilityTagUserResponse::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->user())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->ref_team())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->ref_position())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->ref_level())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->ref_ability_tag())) return false;
  return true;
}

void GetRandomAbilityTagUserResponse::Swap(GetRandomAbilityTagUserResponse* other) {
  if (other != this) {
    user_.Swap(&other->user_);
    ref_team_.Swap(&other->ref_team_);
    ref_position_.Swap(&other->ref_position_);
    ref_level_.Swap(&other->ref_level_);
    ref_ability_tag_.Swap(&other->ref_ability_tag_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string GetRandomAbilityTagUserResponse::GetTypeName() const {
  return "weizhu.user.GetRandomAbilityTagUserResponse";
}


// ===================================================================

#ifndef _MSC_VER
const int GetAbilityTagUserIdRequest::kTagNameFieldNumber;
const int GetAbilityTagUserIdRequest::kIsExpertFieldNumber;
#endif  // !_MSC_VER

GetAbilityTagUserIdRequest::GetAbilityTagUserIdRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:weizhu.user.GetAbilityTagUserIdRequest)
}

void GetAbilityTagUserIdRequest::InitAsDefaultInstance() {
}

GetAbilityTagUserIdRequest::GetAbilityTagUserIdRequest(const GetAbilityTagUserIdRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:weizhu.user.GetAbilityTagUserIdRequest)
}

void GetAbilityTagUserIdRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  is_expert_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetAbilityTagUserIdRequest::~GetAbilityTagUserIdRequest() {
  // @@protoc_insertion_point(destructor:weizhu.user.GetAbilityTagUserIdRequest)
  SharedDtor();
}

void GetAbilityTagUserIdRequest::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void GetAbilityTagUserIdRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GetAbilityTagUserIdRequest& GetAbilityTagUserIdRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_user_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_user_2eproto();
#endif
  return *default_instance_;
}

GetAbilityTagUserIdRequest* GetAbilityTagUserIdRequest::default_instance_ = NULL;

GetAbilityTagUserIdRequest* GetAbilityTagUserIdRequest::New() const {
  return new GetAbilityTagUserIdRequest;
}

void GetAbilityTagUserIdRequest::Clear() {
  is_expert_ = false;
  tag_name_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool GetAbilityTagUserIdRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:weizhu.user.GetAbilityTagUserIdRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string tag_name = 1;
      case 1: {
        if (tag == 10) {
         parse_tag_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_tag_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_tag_name;
        if (input->ExpectTag(16)) goto parse_is_expert;
        break;
      }

      // optional bool is_expert = 2;
      case 2: {
        if (tag == 16) {
         parse_is_expert:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_expert_)));
          set_has_is_expert();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:weizhu.user.GetAbilityTagUserIdRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:weizhu.user.GetAbilityTagUserIdRequest)
  return false;
#undef DO_
}

void GetAbilityTagUserIdRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:weizhu.user.GetAbilityTagUserIdRequest)
  // repeated string tag_name = 1;
  for (int i = 0; i < this->tag_name_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->tag_name(i), output);
  }

  // optional bool is_expert = 2;
  if (has_is_expert()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->is_expert(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:weizhu.user.GetAbilityTagUserIdRequest)
}

int GetAbilityTagUserIdRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional bool is_expert = 2;
    if (has_is_expert()) {
      total_size += 1 + 1;
    }

  }
  // repeated string tag_name = 1;
  total_size += 1 * this->tag_name_size();
  for (int i = 0; i < this->tag_name_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->tag_name(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetAbilityTagUserIdRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GetAbilityTagUserIdRequest*>(&from));
}

void GetAbilityTagUserIdRequest::MergeFrom(const GetAbilityTagUserIdRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  tag_name_.MergeFrom(from.tag_name_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_is_expert()) {
      set_is_expert(from.is_expert());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void GetAbilityTagUserIdRequest::CopyFrom(const GetAbilityTagUserIdRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetAbilityTagUserIdRequest::IsInitialized() const {

  return true;
}

void GetAbilityTagUserIdRequest::Swap(GetAbilityTagUserIdRequest* other) {
  if (other != this) {
    tag_name_.Swap(&other->tag_name_);
    std::swap(is_expert_, other->is_expert_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string GetAbilityTagUserIdRequest::GetTypeName() const {
  return "weizhu.user.GetAbilityTagUserIdRequest";
}


// ===================================================================

#ifndef _MSC_VER
const int GetAbilityTagUserIdResponse::kUserIdFieldNumber;
#endif  // !_MSC_VER

GetAbilityTagUserIdResponse::GetAbilityTagUserIdResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:weizhu.user.GetAbilityTagUserIdResponse)
}

void GetAbilityTagUserIdResponse::InitAsDefaultInstance() {
}

GetAbilityTagUserIdResponse::GetAbilityTagUserIdResponse(const GetAbilityTagUserIdResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:weizhu.user.GetAbilityTagUserIdResponse)
}

void GetAbilityTagUserIdResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetAbilityTagUserIdResponse::~GetAbilityTagUserIdResponse() {
  // @@protoc_insertion_point(destructor:weizhu.user.GetAbilityTagUserIdResponse)
  SharedDtor();
}

void GetAbilityTagUserIdResponse::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void GetAbilityTagUserIdResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GetAbilityTagUserIdResponse& GetAbilityTagUserIdResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_user_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_user_2eproto();
#endif
  return *default_instance_;
}

GetAbilityTagUserIdResponse* GetAbilityTagUserIdResponse::default_instance_ = NULL;

GetAbilityTagUserIdResponse* GetAbilityTagUserIdResponse::New() const {
  return new GetAbilityTagUserIdResponse;
}

void GetAbilityTagUserIdResponse::Clear() {
  user_id_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool GetAbilityTagUserIdResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:weizhu.user.GetAbilityTagUserIdResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int64 user_id = 1;
      case 1: {
        if (tag == 8) {
         parse_user_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 8, input, this->mutable_user_id())));
        } else if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_user_id())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8)) goto parse_user_id;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:weizhu.user.GetAbilityTagUserIdResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:weizhu.user.GetAbilityTagUserIdResponse)
  return false;
#undef DO_
}

void GetAbilityTagUserIdResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:weizhu.user.GetAbilityTagUserIdResponse)
  // repeated int64 user_id = 1;
  for (int i = 0; i < this->user_id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      1, this->user_id(i), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:weizhu.user.GetAbilityTagUserIdResponse)
}

int GetAbilityTagUserIdResponse::ByteSize() const {
  int total_size = 0;

  // repeated int64 user_id = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->user_id_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->user_id(i));
    }
    total_size += 1 * this->user_id_size() + data_size;
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetAbilityTagUserIdResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GetAbilityTagUserIdResponse*>(&from));
}

void GetAbilityTagUserIdResponse::MergeFrom(const GetAbilityTagUserIdResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  user_id_.MergeFrom(from.user_id_);
  mutable_unknown_fields()->append(from.unknown_fields());
}

void GetAbilityTagUserIdResponse::CopyFrom(const GetAbilityTagUserIdResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetAbilityTagUserIdResponse::IsInitialized() const {

  return true;
}

void GetAbilityTagUserIdResponse::Swap(GetAbilityTagUserIdResponse* other) {
  if (other != this) {
    user_id_.Swap(&other->user_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string GetAbilityTagUserIdResponse::GetTypeName() const {
  return "weizhu.user.GetAbilityTagUserIdResponse";
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

GetAllPositionRequest::GetAllPositionRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:weizhu.user.GetAllPositionRequest)
}

void GetAllPositionRequest::InitAsDefaultInstance() {
}

GetAllPositionRequest::GetAllPositionRequest(const GetAllPositionRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:weizhu.user.GetAllPositionRequest)
}

void GetAllPositionRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetAllPositionRequest::~GetAllPositionRequest() {
  // @@protoc_insertion_point(destructor:weizhu.user.GetAllPositionRequest)
  SharedDtor();
}

void GetAllPositionRequest::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void GetAllPositionRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GetAllPositionRequest& GetAllPositionRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_user_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_user_2eproto();
#endif
  return *default_instance_;
}

GetAllPositionRequest* GetAllPositionRequest::default_instance_ = NULL;

GetAllPositionRequest* GetAllPositionRequest::New() const {
  return new GetAllPositionRequest;
}

void GetAllPositionRequest::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool GetAllPositionRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:weizhu.user.GetAllPositionRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(
        input, tag, &unknown_fields_stream));
  }
success:
  // @@protoc_insertion_point(parse_success:weizhu.user.GetAllPositionRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:weizhu.user.GetAllPositionRequest)
  return false;
#undef DO_
}

void GetAllPositionRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:weizhu.user.GetAllPositionRequest)
  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:weizhu.user.GetAllPositionRequest)
}

int GetAllPositionRequest::ByteSize() const {
  int total_size = 0;

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetAllPositionRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GetAllPositionRequest*>(&from));
}

void GetAllPositionRequest::MergeFrom(const GetAllPositionRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->append(from.unknown_fields());
}

void GetAllPositionRequest::CopyFrom(const GetAllPositionRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetAllPositionRequest::IsInitialized() const {

  return true;
}

void GetAllPositionRequest::Swap(GetAllPositionRequest* other) {
  if (other != this) {
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string GetAllPositionRequest::GetTypeName() const {
  return "weizhu.user.GetAllPositionRequest";
}


// ===================================================================

#ifndef _MSC_VER
const int GetAllPositionResponse::kPositionFieldNumber;
#endif  // !_MSC_VER

GetAllPositionResponse::GetAllPositionResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:weizhu.user.GetAllPositionResponse)
}

void GetAllPositionResponse::InitAsDefaultInstance() {
}

GetAllPositionResponse::GetAllPositionResponse(const GetAllPositionResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:weizhu.user.GetAllPositionResponse)
}

void GetAllPositionResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetAllPositionResponse::~GetAllPositionResponse() {
  // @@protoc_insertion_point(destructor:weizhu.user.GetAllPositionResponse)
  SharedDtor();
}

void GetAllPositionResponse::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void GetAllPositionResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GetAllPositionResponse& GetAllPositionResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_user_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_user_2eproto();
#endif
  return *default_instance_;
}

GetAllPositionResponse* GetAllPositionResponse::default_instance_ = NULL;

GetAllPositionResponse* GetAllPositionResponse::New() const {
  return new GetAllPositionResponse;
}

void GetAllPositionResponse::Clear() {
  position_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool GetAllPositionResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:weizhu.user.GetAllPositionResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .weizhu.user.Position position = 1;
      case 1: {
        if (tag == 10) {
         parse_position:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_position()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_position;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:weizhu.user.GetAllPositionResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:weizhu.user.GetAllPositionResponse)
  return false;
#undef DO_
}

void GetAllPositionResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:weizhu.user.GetAllPositionResponse)
  // repeated .weizhu.user.Position position = 1;
  for (int i = 0; i < this->position_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->position(i), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:weizhu.user.GetAllPositionResponse)
}

int GetAllPositionResponse::ByteSize() const {
  int total_size = 0;

  // repeated .weizhu.user.Position position = 1;
  total_size += 1 * this->position_size();
  for (int i = 0; i < this->position_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->position(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetAllPositionResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GetAllPositionResponse*>(&from));
}

void GetAllPositionResponse::MergeFrom(const GetAllPositionResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  position_.MergeFrom(from.position_);
  mutable_unknown_fields()->append(from.unknown_fields());
}

void GetAllPositionResponse::CopyFrom(const GetAllPositionResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetAllPositionResponse::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->position())) return false;
  return true;
}

void GetAllPositionResponse::Swap(GetAllPositionResponse* other) {
  if (other != this) {
    position_.Swap(&other->position_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string GetAllPositionResponse::GetTypeName() const {
  return "weizhu.user.GetAllPositionResponse";
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

GetAllLevelRequest::GetAllLevelRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:weizhu.user.GetAllLevelRequest)
}

void GetAllLevelRequest::InitAsDefaultInstance() {
}

GetAllLevelRequest::GetAllLevelRequest(const GetAllLevelRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:weizhu.user.GetAllLevelRequest)
}

void GetAllLevelRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetAllLevelRequest::~GetAllLevelRequest() {
  // @@protoc_insertion_point(destructor:weizhu.user.GetAllLevelRequest)
  SharedDtor();
}

void GetAllLevelRequest::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void GetAllLevelRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GetAllLevelRequest& GetAllLevelRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_user_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_user_2eproto();
#endif
  return *default_instance_;
}

GetAllLevelRequest* GetAllLevelRequest::default_instance_ = NULL;

GetAllLevelRequest* GetAllLevelRequest::New() const {
  return new GetAllLevelRequest;
}

void GetAllLevelRequest::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool GetAllLevelRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:weizhu.user.GetAllLevelRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(
        input, tag, &unknown_fields_stream));
  }
success:
  // @@protoc_insertion_point(parse_success:weizhu.user.GetAllLevelRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:weizhu.user.GetAllLevelRequest)
  return false;
#undef DO_
}

void GetAllLevelRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:weizhu.user.GetAllLevelRequest)
  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:weizhu.user.GetAllLevelRequest)
}

int GetAllLevelRequest::ByteSize() const {
  int total_size = 0;

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetAllLevelRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GetAllLevelRequest*>(&from));
}

void GetAllLevelRequest::MergeFrom(const GetAllLevelRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->append(from.unknown_fields());
}

void GetAllLevelRequest::CopyFrom(const GetAllLevelRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetAllLevelRequest::IsInitialized() const {

  return true;
}

void GetAllLevelRequest::Swap(GetAllLevelRequest* other) {
  if (other != this) {
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string GetAllLevelRequest::GetTypeName() const {
  return "weizhu.user.GetAllLevelRequest";
}


// ===================================================================

#ifndef _MSC_VER
const int GetAllLevelResponse::kLevelFieldNumber;
#endif  // !_MSC_VER

GetAllLevelResponse::GetAllLevelResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:weizhu.user.GetAllLevelResponse)
}

void GetAllLevelResponse::InitAsDefaultInstance() {
}

GetAllLevelResponse::GetAllLevelResponse(const GetAllLevelResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:weizhu.user.GetAllLevelResponse)
}

void GetAllLevelResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetAllLevelResponse::~GetAllLevelResponse() {
  // @@protoc_insertion_point(destructor:weizhu.user.GetAllLevelResponse)
  SharedDtor();
}

void GetAllLevelResponse::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void GetAllLevelResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GetAllLevelResponse& GetAllLevelResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_user_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_user_2eproto();
#endif
  return *default_instance_;
}

GetAllLevelResponse* GetAllLevelResponse::default_instance_ = NULL;

GetAllLevelResponse* GetAllLevelResponse::New() const {
  return new GetAllLevelResponse;
}

void GetAllLevelResponse::Clear() {
  level_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool GetAllLevelResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:weizhu.user.GetAllLevelResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .weizhu.user.Level level = 1;
      case 1: {
        if (tag == 10) {
         parse_level:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_level()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_level;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:weizhu.user.GetAllLevelResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:weizhu.user.GetAllLevelResponse)
  return false;
#undef DO_
}

void GetAllLevelResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:weizhu.user.GetAllLevelResponse)
  // repeated .weizhu.user.Level level = 1;
  for (int i = 0; i < this->level_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->level(i), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:weizhu.user.GetAllLevelResponse)
}

int GetAllLevelResponse::ByteSize() const {
  int total_size = 0;

  // repeated .weizhu.user.Level level = 1;
  total_size += 1 * this->level_size();
  for (int i = 0; i < this->level_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->level(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetAllLevelResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GetAllLevelResponse*>(&from));
}

void GetAllLevelResponse::MergeFrom(const GetAllLevelResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  level_.MergeFrom(from.level_);
  mutable_unknown_fields()->append(from.unknown_fields());
}

void GetAllLevelResponse::CopyFrom(const GetAllLevelResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetAllLevelResponse::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->level())) return false;
  return true;
}

void GetAllLevelResponse::Swap(GetAllLevelResponse* other) {
  if (other != this) {
    level_.Swap(&other->level_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string GetAllLevelResponse::GetTypeName() const {
  return "weizhu.user.GetAllLevelResponse";
}


// ===================================================================

#ifndef _MSC_VER
const int SearchUserRequest::kKeywordFieldNumber;
#endif  // !_MSC_VER

SearchUserRequest::SearchUserRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:weizhu.user.SearchUserRequest)
}

void SearchUserRequest::InitAsDefaultInstance() {
}

SearchUserRequest::SearchUserRequest(const SearchUserRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:weizhu.user.SearchUserRequest)
}

void SearchUserRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  keyword_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SearchUserRequest::~SearchUserRequest() {
  // @@protoc_insertion_point(destructor:weizhu.user.SearchUserRequest)
  SharedDtor();
}

void SearchUserRequest::SharedDtor() {
  if (keyword_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete keyword_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void SearchUserRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const SearchUserRequest& SearchUserRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_user_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_user_2eproto();
#endif
  return *default_instance_;
}

SearchUserRequest* SearchUserRequest::default_instance_ = NULL;

SearchUserRequest* SearchUserRequest::New() const {
  return new SearchUserRequest;
}

void SearchUserRequest::Clear() {
  if (has_keyword()) {
    if (keyword_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      keyword_->clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool SearchUserRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:weizhu.user.SearchUserRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string keyword = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_keyword()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:weizhu.user.SearchUserRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:weizhu.user.SearchUserRequest)
  return false;
#undef DO_
}

void SearchUserRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:weizhu.user.SearchUserRequest)
  // required string keyword = 1;
  if (has_keyword()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->keyword(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:weizhu.user.SearchUserRequest)
}

int SearchUserRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string keyword = 1;
    if (has_keyword()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->keyword());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SearchUserRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const SearchUserRequest*>(&from));
}

void SearchUserRequest::MergeFrom(const SearchUserRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_keyword()) {
      set_keyword(from.keyword());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void SearchUserRequest::CopyFrom(const SearchUserRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SearchUserRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void SearchUserRequest::Swap(SearchUserRequest* other) {
  if (other != this) {
    std::swap(keyword_, other->keyword_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string SearchUserRequest::GetTypeName() const {
  return "weizhu.user.SearchUserRequest";
}


// ===================================================================

#ifndef _MSC_VER
const int SearchUserResponse::kUserFieldNumber;
const int SearchUserResponse::kRefTeamFieldNumber;
const int SearchUserResponse::kRefPositionFieldNumber;
const int SearchUserResponse::kRefLevelFieldNumber;
#endif  // !_MSC_VER

SearchUserResponse::SearchUserResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:weizhu.user.SearchUserResponse)
}

void SearchUserResponse::InitAsDefaultInstance() {
}

SearchUserResponse::SearchUserResponse(const SearchUserResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:weizhu.user.SearchUserResponse)
}

void SearchUserResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SearchUserResponse::~SearchUserResponse() {
  // @@protoc_insertion_point(destructor:weizhu.user.SearchUserResponse)
  SharedDtor();
}

void SearchUserResponse::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void SearchUserResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const SearchUserResponse& SearchUserResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_user_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_user_2eproto();
#endif
  return *default_instance_;
}

SearchUserResponse* SearchUserResponse::default_instance_ = NULL;

SearchUserResponse* SearchUserResponse::New() const {
  return new SearchUserResponse;
}

void SearchUserResponse::Clear() {
  user_.Clear();
  ref_team_.Clear();
  ref_position_.Clear();
  ref_level_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool SearchUserResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:weizhu.user.SearchUserResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .weizhu.user.User user = 1;
      case 1: {
        if (tag == 10) {
         parse_user:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_user()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_user;
        if (input->ExpectTag(18)) goto parse_ref_team;
        break;
      }

      // repeated .weizhu.user.Team ref_team = 2;
      case 2: {
        if (tag == 18) {
         parse_ref_team:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_ref_team()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_ref_team;
        if (input->ExpectTag(26)) goto parse_ref_position;
        break;
      }

      // repeated .weizhu.user.Position ref_position = 3;
      case 3: {
        if (tag == 26) {
         parse_ref_position:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_ref_position()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_ref_position;
        if (input->ExpectTag(34)) goto parse_ref_level;
        break;
      }

      // repeated .weizhu.user.Level ref_level = 4;
      case 4: {
        if (tag == 34) {
         parse_ref_level:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_ref_level()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_ref_level;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:weizhu.user.SearchUserResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:weizhu.user.SearchUserResponse)
  return false;
#undef DO_
}

void SearchUserResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:weizhu.user.SearchUserResponse)
  // repeated .weizhu.user.User user = 1;
  for (int i = 0; i < this->user_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->user(i), output);
  }

  // repeated .weizhu.user.Team ref_team = 2;
  for (int i = 0; i < this->ref_team_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->ref_team(i), output);
  }

  // repeated .weizhu.user.Position ref_position = 3;
  for (int i = 0; i < this->ref_position_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->ref_position(i), output);
  }

  // repeated .weizhu.user.Level ref_level = 4;
  for (int i = 0; i < this->ref_level_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, this->ref_level(i), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:weizhu.user.SearchUserResponse)
}

int SearchUserResponse::ByteSize() const {
  int total_size = 0;

  // repeated .weizhu.user.User user = 1;
  total_size += 1 * this->user_size();
  for (int i = 0; i < this->user_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->user(i));
  }

  // repeated .weizhu.user.Team ref_team = 2;
  total_size += 1 * this->ref_team_size();
  for (int i = 0; i < this->ref_team_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->ref_team(i));
  }

  // repeated .weizhu.user.Position ref_position = 3;
  total_size += 1 * this->ref_position_size();
  for (int i = 0; i < this->ref_position_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->ref_position(i));
  }

  // repeated .weizhu.user.Level ref_level = 4;
  total_size += 1 * this->ref_level_size();
  for (int i = 0; i < this->ref_level_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->ref_level(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SearchUserResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const SearchUserResponse*>(&from));
}

void SearchUserResponse::MergeFrom(const SearchUserResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  user_.MergeFrom(from.user_);
  ref_team_.MergeFrom(from.ref_team_);
  ref_position_.MergeFrom(from.ref_position_);
  ref_level_.MergeFrom(from.ref_level_);
  mutable_unknown_fields()->append(from.unknown_fields());
}

void SearchUserResponse::CopyFrom(const SearchUserResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SearchUserResponse::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->user())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->ref_team())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->ref_position())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->ref_level())) return false;
  return true;
}

void SearchUserResponse::Swap(SearchUserResponse* other) {
  if (other != this) {
    user_.Swap(&other->user_);
    ref_team_.Swap(&other->ref_team_);
    ref_position_.Swap(&other->ref_position_);
    ref_level_.Swap(&other->ref_level_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string SearchUserResponse::GetTypeName() const {
  return "weizhu.user.SearchUserResponse";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace user
}  // namespace weizhu

// @@protoc_insertion_point(global_scope)
