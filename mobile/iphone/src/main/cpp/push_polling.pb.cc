// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: push_polling.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "push_polling.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)

namespace weizhu {
namespace push {

void protobuf_ShutdownFile_push_5fpolling_2eproto() {
  delete GetPushMsgRequest::default_instance_;
  delete GetPushMsgResponse::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_push_5fpolling_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_push_5fpolling_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  ::weizhu::protobuf_AddDesc_weizhu_2eproto();
  GetPushMsgRequest::default_instance_ = new GetPushMsgRequest();
  GetPushMsgResponse::default_instance_ = new GetPushMsgResponse();
  GetPushMsgRequest::default_instance_->InitAsDefaultInstance();
  GetPushMsgResponse::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_push_5fpolling_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_push_5fpolling_2eproto_once_);
void protobuf_AddDesc_push_5fpolling_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_push_5fpolling_2eproto_once_,
                 &protobuf_AddDesc_push_5fpolling_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_push_5fpolling_2eproto {
  StaticDescriptorInitializer_push_5fpolling_2eproto() {
    protobuf_AddDesc_push_5fpolling_2eproto();
  }
} static_descriptor_initializer_push_5fpolling_2eproto_;
#endif

// ===================================================================

#ifndef _MSC_VER
const int GetPushMsgRequest::kPushSeqFieldNumber;
const int GetPushMsgRequest::kMsgSizeFieldNumber;
#endif  // !_MSC_VER

GetPushMsgRequest::GetPushMsgRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:weizhu.push.GetPushMsgRequest)
}

void GetPushMsgRequest::InitAsDefaultInstance() {
}

GetPushMsgRequest::GetPushMsgRequest(const GetPushMsgRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:weizhu.push.GetPushMsgRequest)
}

void GetPushMsgRequest::SharedCtor() {
  _cached_size_ = 0;
  push_seq_ = GOOGLE_LONGLONG(0);
  msg_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetPushMsgRequest::~GetPushMsgRequest() {
  // @@protoc_insertion_point(destructor:weizhu.push.GetPushMsgRequest)
  SharedDtor();
}

void GetPushMsgRequest::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void GetPushMsgRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GetPushMsgRequest& GetPushMsgRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_push_5fpolling_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_push_5fpolling_2eproto();
#endif
  return *default_instance_;
}

GetPushMsgRequest* GetPushMsgRequest::default_instance_ = NULL;

GetPushMsgRequest* GetPushMsgRequest::New() const {
  return new GetPushMsgRequest;
}

void GetPushMsgRequest::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GetPushMsgRequest*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(push_seq_, msg_size_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool GetPushMsgRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:weizhu.push.GetPushMsgRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 push_seq = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &push_seq_)));
          set_has_push_seq();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_msg_size;
        break;
      }

      // required int32 msg_size = 2;
      case 2: {
        if (tag == 16) {
         parse_msg_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &msg_size_)));
          set_has_msg_size();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:weizhu.push.GetPushMsgRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:weizhu.push.GetPushMsgRequest)
  return false;
#undef DO_
}

void GetPushMsgRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:weizhu.push.GetPushMsgRequest)
  // required int64 push_seq = 1;
  if (has_push_seq()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->push_seq(), output);
  }

  // required int32 msg_size = 2;
  if (has_msg_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->msg_size(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:weizhu.push.GetPushMsgRequest)
}

int GetPushMsgRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 push_seq = 1;
    if (has_push_seq()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->push_seq());
    }

    // required int32 msg_size = 2;
    if (has_msg_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->msg_size());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetPushMsgRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GetPushMsgRequest*>(&from));
}

void GetPushMsgRequest::MergeFrom(const GetPushMsgRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_push_seq()) {
      set_push_seq(from.push_seq());
    }
    if (from.has_msg_size()) {
      set_msg_size(from.msg_size());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void GetPushMsgRequest::CopyFrom(const GetPushMsgRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetPushMsgRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void GetPushMsgRequest::Swap(GetPushMsgRequest* other) {
  if (other != this) {
    std::swap(push_seq_, other->push_seq_);
    std::swap(msg_size_, other->msg_size_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string GetPushMsgRequest::GetTypeName() const {
  return "weizhu.push.GetPushMsgRequest";
}


// ===================================================================

#ifndef _MSC_VER
const int GetPushMsgResponse::kPushMsgFieldNumber;
const int GetPushMsgResponse::kHasMoreFieldNumber;
#endif  // !_MSC_VER

GetPushMsgResponse::GetPushMsgResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:weizhu.push.GetPushMsgResponse)
}

void GetPushMsgResponse::InitAsDefaultInstance() {
}

GetPushMsgResponse::GetPushMsgResponse(const GetPushMsgResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:weizhu.push.GetPushMsgResponse)
}

void GetPushMsgResponse::SharedCtor() {
  _cached_size_ = 0;
  has_more_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetPushMsgResponse::~GetPushMsgResponse() {
  // @@protoc_insertion_point(destructor:weizhu.push.GetPushMsgResponse)
  SharedDtor();
}

void GetPushMsgResponse::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void GetPushMsgResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GetPushMsgResponse& GetPushMsgResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_push_5fpolling_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_push_5fpolling_2eproto();
#endif
  return *default_instance_;
}

GetPushMsgResponse* GetPushMsgResponse::default_instance_ = NULL;

GetPushMsgResponse* GetPushMsgResponse::New() const {
  return new GetPushMsgResponse;
}

void GetPushMsgResponse::Clear() {
  has_more_ = false;
  push_msg_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool GetPushMsgResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:weizhu.push.GetPushMsgResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .weizhu.PushMessage push_msg = 1;
      case 1: {
        if (tag == 10) {
         parse_push_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_push_msg()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_push_msg;
        if (input->ExpectTag(16)) goto parse_has_more;
        break;
      }

      // required bool has_more = 2;
      case 2: {
        if (tag == 16) {
         parse_has_more:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &has_more_)));
          set_has_has_more();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:weizhu.push.GetPushMsgResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:weizhu.push.GetPushMsgResponse)
  return false;
#undef DO_
}

void GetPushMsgResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:weizhu.push.GetPushMsgResponse)
  // repeated .weizhu.PushMessage push_msg = 1;
  for (int i = 0; i < this->push_msg_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->push_msg(i), output);
  }

  // required bool has_more = 2;
  if (has_has_more()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->has_more(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:weizhu.push.GetPushMsgResponse)
}

int GetPushMsgResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // required bool has_more = 2;
    if (has_has_more()) {
      total_size += 1 + 1;
    }

  }
  // repeated .weizhu.PushMessage push_msg = 1;
  total_size += 1 * this->push_msg_size();
  for (int i = 0; i < this->push_msg_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->push_msg(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetPushMsgResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GetPushMsgResponse*>(&from));
}

void GetPushMsgResponse::MergeFrom(const GetPushMsgResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  push_msg_.MergeFrom(from.push_msg_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_has_more()) {
      set_has_more(from.has_more());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void GetPushMsgResponse::CopyFrom(const GetPushMsgResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetPushMsgResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->push_msg())) return false;
  return true;
}

void GetPushMsgResponse::Swap(GetPushMsgResponse* other) {
  if (other != this) {
    push_msg_.Swap(&other->push_msg_);
    std::swap(has_more_, other->has_more_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string GetPushMsgResponse::GetTypeName() const {
  return "weizhu.push.GetPushMsgResponse";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace push
}  // namespace weizhu

// @@protoc_insertion_point(global_scope)
