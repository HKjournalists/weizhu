// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: contacts.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "contacts.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)

namespace weizhu {
namespace contacts {

void protobuf_ShutdownFile_contacts_2eproto() {
  delete Customer::default_instance_;
  delete CreateCustomerRequest::default_instance_;
  delete CreateCustomerResponse::default_instance_;
  delete UpdateCustomerRequest::default_instance_;
  delete UpdateCustomerResponse::default_instance_;
  delete DeleteCustomerRequest::default_instance_;
  delete DeleteCustomerResponse::default_instance_;
  delete GetCustomerListRequest::default_instance_;
  delete GetCustomerListResponse::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_contacts_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_contacts_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  Customer::default_instance_ = new Customer();
  CreateCustomerRequest::default_instance_ = new CreateCustomerRequest();
  CreateCustomerResponse::default_instance_ = new CreateCustomerResponse();
  UpdateCustomerRequest::default_instance_ = new UpdateCustomerRequest();
  UpdateCustomerResponse::default_instance_ = new UpdateCustomerResponse();
  DeleteCustomerRequest::default_instance_ = new DeleteCustomerRequest();
  DeleteCustomerResponse::default_instance_ = new DeleteCustomerResponse();
  GetCustomerListRequest::default_instance_ = new GetCustomerListRequest();
  GetCustomerListResponse::default_instance_ = new GetCustomerListResponse();
  Customer::default_instance_->InitAsDefaultInstance();
  CreateCustomerRequest::default_instance_->InitAsDefaultInstance();
  CreateCustomerResponse::default_instance_->InitAsDefaultInstance();
  UpdateCustomerRequest::default_instance_->InitAsDefaultInstance();
  UpdateCustomerResponse::default_instance_->InitAsDefaultInstance();
  DeleteCustomerRequest::default_instance_->InitAsDefaultInstance();
  DeleteCustomerResponse::default_instance_->InitAsDefaultInstance();
  GetCustomerListRequest::default_instance_->InitAsDefaultInstance();
  GetCustomerListResponse::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_contacts_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_contacts_2eproto_once_);
void protobuf_AddDesc_contacts_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_contacts_2eproto_once_,
                 &protobuf_AddDesc_contacts_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_contacts_2eproto {
  StaticDescriptorInitializer_contacts_2eproto() {
    protobuf_AddDesc_contacts_2eproto();
  }
} static_descriptor_initializer_contacts_2eproto_;
#endif

// ===================================================================

#ifndef _MSC_VER
const int Customer::kUserIdFieldNumber;
const int Customer::kCustomerIdFieldNumber;
const int Customer::kCustomerNameFieldNumber;
const int Customer::kMobileNoFieldNumber;
const int Customer::kIsStarFieldNumber;
const int Customer::kCompanyFieldNumber;
const int Customer::kPositionFieldNumber;
const int Customer::kDepartmentFieldNumber;
const int Customer::kAddressFieldNumber;
const int Customer::kEmailFieldNumber;
const int Customer::kWechatFieldNumber;
const int Customer::kQqFieldNumber;
const int Customer::kRemarkFieldNumber;
#endif  // !_MSC_VER

Customer::Customer()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:weizhu.contacts.Customer)
}

void Customer::InitAsDefaultInstance() {
}

Customer::Customer(const Customer& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:weizhu.contacts.Customer)
}

void Customer::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  user_id_ = GOOGLE_LONGLONG(0);
  customer_id_ = 0;
  customer_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mobile_no_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  is_star_ = false;
  company_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  position_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  department_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  address_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  email_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  wechat_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  qq_ = GOOGLE_LONGLONG(0);
  remark_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Customer::~Customer() {
  // @@protoc_insertion_point(destructor:weizhu.contacts.Customer)
  SharedDtor();
}

void Customer::SharedDtor() {
  if (customer_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete customer_name_;
  }
  if (mobile_no_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete mobile_no_;
  }
  if (company_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete company_;
  }
  if (position_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete position_;
  }
  if (department_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete department_;
  }
  if (address_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete address_;
  }
  if (email_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete email_;
  }
  if (wechat_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete wechat_;
  }
  if (remark_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete remark_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void Customer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Customer& Customer::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_contacts_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_contacts_2eproto();
#endif
  return *default_instance_;
}

Customer* Customer::default_instance_ = NULL;

Customer* Customer::New() const {
  return new Customer;
}

void Customer::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Customer*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(customer_id_, is_star_);
    user_id_ = GOOGLE_LONGLONG(0);
    if (has_customer_name()) {
      if (customer_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        customer_name_->clear();
      }
    }
    if (has_mobile_no()) {
      if (mobile_no_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        mobile_no_->clear();
      }
    }
    if (has_company()) {
      if (company_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        company_->clear();
      }
    }
    if (has_position()) {
      if (position_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        position_->clear();
      }
    }
    if (has_department()) {
      if (department_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        department_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 7936) {
    if (has_address()) {
      if (address_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        address_->clear();
      }
    }
    if (has_email()) {
      if (email_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        email_->clear();
      }
    }
    if (has_wechat()) {
      if (wechat_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        wechat_->clear();
      }
    }
    qq_ = GOOGLE_LONGLONG(0);
    if (has_remark()) {
      if (remark_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        remark_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool Customer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:weizhu.contacts.Customer)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 user_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_customer_id;
        break;
      }

      // required int32 customer_id = 2;
      case 2: {
        if (tag == 16) {
         parse_customer_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &customer_id_)));
          set_has_customer_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_customer_name;
        break;
      }

      // required string customer_name = 3;
      case 3: {
        if (tag == 26) {
         parse_customer_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_customer_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_mobile_no;
        break;
      }

      // required string mobile_no = 4;
      case 4: {
        if (tag == 34) {
         parse_mobile_no:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mobile_no()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_is_star;
        break;
      }

      // required bool is_star = 5;
      case 5: {
        if (tag == 40) {
         parse_is_star:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_star_)));
          set_has_is_star();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_company;
        break;
      }

      // optional string company = 6;
      case 6: {
        if (tag == 50) {
         parse_company:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_company()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_position;
        break;
      }

      // optional string position = 7;
      case 7: {
        if (tag == 58) {
         parse_position:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_position()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_department;
        break;
      }

      // optional string department = 8;
      case 8: {
        if (tag == 66) {
         parse_department:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_department()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_address;
        break;
      }

      // optional string address = 9;
      case 9: {
        if (tag == 74) {
         parse_address:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_address()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_email;
        break;
      }

      // optional string email = 10;
      case 10: {
        if (tag == 82) {
         parse_email:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_email()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_wechat;
        break;
      }

      // optional string wechat = 11;
      case 11: {
        if (tag == 90) {
         parse_wechat:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_wechat()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_qq;
        break;
      }

      // optional int64 qq = 12;
      case 12: {
        if (tag == 96) {
         parse_qq:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &qq_)));
          set_has_qq();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_remark;
        break;
      }

      // optional string remark = 13;
      case 13: {
        if (tag == 106) {
         parse_remark:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_remark()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:weizhu.contacts.Customer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:weizhu.contacts.Customer)
  return false;
#undef DO_
}

void Customer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:weizhu.contacts.Customer)
  // required int64 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->user_id(), output);
  }

  // required int32 customer_id = 2;
  if (has_customer_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->customer_id(), output);
  }

  // required string customer_name = 3;
  if (has_customer_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->customer_name(), output);
  }

  // required string mobile_no = 4;
  if (has_mobile_no()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->mobile_no(), output);
  }

  // required bool is_star = 5;
  if (has_is_star()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->is_star(), output);
  }

  // optional string company = 6;
  if (has_company()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->company(), output);
  }

  // optional string position = 7;
  if (has_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->position(), output);
  }

  // optional string department = 8;
  if (has_department()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->department(), output);
  }

  // optional string address = 9;
  if (has_address()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->address(), output);
  }

  // optional string email = 10;
  if (has_email()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->email(), output);
  }

  // optional string wechat = 11;
  if (has_wechat()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->wechat(), output);
  }

  // optional int64 qq = 12;
  if (has_qq()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(12, this->qq(), output);
  }

  // optional string remark = 13;
  if (has_remark()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      13, this->remark(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:weizhu.contacts.Customer)
}

int Customer::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->user_id());
    }

    // required int32 customer_id = 2;
    if (has_customer_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->customer_id());
    }

    // required string customer_name = 3;
    if (has_customer_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->customer_name());
    }

    // required string mobile_no = 4;
    if (has_mobile_no()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->mobile_no());
    }

    // required bool is_star = 5;
    if (has_is_star()) {
      total_size += 1 + 1;
    }

    // optional string company = 6;
    if (has_company()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->company());
    }

    // optional string position = 7;
    if (has_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->position());
    }

    // optional string department = 8;
    if (has_department()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->department());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string address = 9;
    if (has_address()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->address());
    }

    // optional string email = 10;
    if (has_email()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->email());
    }

    // optional string wechat = 11;
    if (has_wechat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->wechat());
    }

    // optional int64 qq = 12;
    if (has_qq()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->qq());
    }

    // optional string remark = 13;
    if (has_remark()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->remark());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Customer::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Customer*>(&from));
}

void Customer::MergeFrom(const Customer& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_customer_id()) {
      set_customer_id(from.customer_id());
    }
    if (from.has_customer_name()) {
      set_customer_name(from.customer_name());
    }
    if (from.has_mobile_no()) {
      set_mobile_no(from.mobile_no());
    }
    if (from.has_is_star()) {
      set_is_star(from.is_star());
    }
    if (from.has_company()) {
      set_company(from.company());
    }
    if (from.has_position()) {
      set_position(from.position());
    }
    if (from.has_department()) {
      set_department(from.department());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_address()) {
      set_address(from.address());
    }
    if (from.has_email()) {
      set_email(from.email());
    }
    if (from.has_wechat()) {
      set_wechat(from.wechat());
    }
    if (from.has_qq()) {
      set_qq(from.qq());
    }
    if (from.has_remark()) {
      set_remark(from.remark());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void Customer::CopyFrom(const Customer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Customer::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void Customer::Swap(Customer* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(customer_id_, other->customer_id_);
    std::swap(customer_name_, other->customer_name_);
    std::swap(mobile_no_, other->mobile_no_);
    std::swap(is_star_, other->is_star_);
    std::swap(company_, other->company_);
    std::swap(position_, other->position_);
    std::swap(department_, other->department_);
    std::swap(address_, other->address_);
    std::swap(email_, other->email_);
    std::swap(wechat_, other->wechat_);
    std::swap(qq_, other->qq_);
    std::swap(remark_, other->remark_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string Customer::GetTypeName() const {
  return "weizhu.contacts.Customer";
}


// ===================================================================

#ifndef _MSC_VER
const int CreateCustomerRequest::kCustomerFieldNumber;
#endif  // !_MSC_VER

CreateCustomerRequest::CreateCustomerRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:weizhu.contacts.CreateCustomerRequest)
}

void CreateCustomerRequest::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  customer_ = const_cast< ::weizhu::contacts::Customer*>(
      ::weizhu::contacts::Customer::internal_default_instance());
#else
  customer_ = const_cast< ::weizhu::contacts::Customer*>(&::weizhu::contacts::Customer::default_instance());
#endif
}

CreateCustomerRequest::CreateCustomerRequest(const CreateCustomerRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:weizhu.contacts.CreateCustomerRequest)
}

void CreateCustomerRequest::SharedCtor() {
  _cached_size_ = 0;
  customer_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CreateCustomerRequest::~CreateCustomerRequest() {
  // @@protoc_insertion_point(destructor:weizhu.contacts.CreateCustomerRequest)
  SharedDtor();
}

void CreateCustomerRequest::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete customer_;
  }
}

void CreateCustomerRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CreateCustomerRequest& CreateCustomerRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_contacts_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_contacts_2eproto();
#endif
  return *default_instance_;
}

CreateCustomerRequest* CreateCustomerRequest::default_instance_ = NULL;

CreateCustomerRequest* CreateCustomerRequest::New() const {
  return new CreateCustomerRequest;
}

void CreateCustomerRequest::Clear() {
  if (has_customer()) {
    if (customer_ != NULL) customer_->::weizhu::contacts::Customer::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool CreateCustomerRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:weizhu.contacts.CreateCustomerRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .weizhu.contacts.Customer customer = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_customer()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:weizhu.contacts.CreateCustomerRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:weizhu.contacts.CreateCustomerRequest)
  return false;
#undef DO_
}

void CreateCustomerRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:weizhu.contacts.CreateCustomerRequest)
  // required .weizhu.contacts.Customer customer = 1;
  if (has_customer()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->customer(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:weizhu.contacts.CreateCustomerRequest)
}

int CreateCustomerRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .weizhu.contacts.Customer customer = 1;
    if (has_customer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->customer());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CreateCustomerRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CreateCustomerRequest*>(&from));
}

void CreateCustomerRequest::MergeFrom(const CreateCustomerRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_customer()) {
      mutable_customer()->::weizhu::contacts::Customer::MergeFrom(from.customer());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void CreateCustomerRequest::CopyFrom(const CreateCustomerRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateCustomerRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_customer()) {
    if (!this->customer().IsInitialized()) return false;
  }
  return true;
}

void CreateCustomerRequest::Swap(CreateCustomerRequest* other) {
  if (other != this) {
    std::swap(customer_, other->customer_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CreateCustomerRequest::GetTypeName() const {
  return "weizhu.contacts.CreateCustomerRequest";
}


// ===================================================================

bool CreateCustomerResponse_Result_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const CreateCustomerResponse_Result CreateCustomerResponse::SUCC;
const CreateCustomerResponse_Result CreateCustomerResponse::FAIL_MOBILE_NO_INVALID;
const CreateCustomerResponse_Result CreateCustomerResponse::Result_MIN;
const CreateCustomerResponse_Result CreateCustomerResponse::Result_MAX;
const int CreateCustomerResponse::Result_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int CreateCustomerResponse::kResultFieldNumber;
const int CreateCustomerResponse::kFailTextFieldNumber;
const int CreateCustomerResponse::kCustomerIdFieldNumber;
#endif  // !_MSC_VER

CreateCustomerResponse::CreateCustomerResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:weizhu.contacts.CreateCustomerResponse)
}

void CreateCustomerResponse::InitAsDefaultInstance() {
}

CreateCustomerResponse::CreateCustomerResponse(const CreateCustomerResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:weizhu.contacts.CreateCustomerResponse)
}

void CreateCustomerResponse::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  result_ = 0;
  fail_text_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  customer_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CreateCustomerResponse::~CreateCustomerResponse() {
  // @@protoc_insertion_point(destructor:weizhu.contacts.CreateCustomerResponse)
  SharedDtor();
}

void CreateCustomerResponse::SharedDtor() {
  if (fail_text_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete fail_text_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CreateCustomerResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CreateCustomerResponse& CreateCustomerResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_contacts_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_contacts_2eproto();
#endif
  return *default_instance_;
}

CreateCustomerResponse* CreateCustomerResponse::default_instance_ = NULL;

CreateCustomerResponse* CreateCustomerResponse::New() const {
  return new CreateCustomerResponse;
}

void CreateCustomerResponse::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CreateCustomerResponse*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(result_, customer_id_);
    if (has_fail_text()) {
      if (fail_text_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        fail_text_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool CreateCustomerResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:weizhu.contacts.CreateCustomerResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .weizhu.contacts.CreateCustomerResponse.Result result = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::weizhu::contacts::CreateCustomerResponse_Result_IsValid(value)) {
            set_result(static_cast< ::weizhu::contacts::CreateCustomerResponse_Result >(value));
          } else {
            unknown_fields_stream.WriteVarint32(tag);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_fail_text;
        break;
      }

      // optional string fail_text = 2;
      case 2: {
        if (tag == 18) {
         parse_fail_text:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fail_text()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_customer_id;
        break;
      }

      // optional int32 customer_id = 3;
      case 3: {
        if (tag == 24) {
         parse_customer_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &customer_id_)));
          set_has_customer_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:weizhu.contacts.CreateCustomerResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:weizhu.contacts.CreateCustomerResponse)
  return false;
#undef DO_
}

void CreateCustomerResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:weizhu.contacts.CreateCustomerResponse)
  // required .weizhu.contacts.CreateCustomerResponse.Result result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  // optional string fail_text = 2;
  if (has_fail_text()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->fail_text(), output);
  }

  // optional int32 customer_id = 3;
  if (has_customer_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->customer_id(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:weizhu.contacts.CreateCustomerResponse)
}

int CreateCustomerResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .weizhu.contacts.CreateCustomerResponse.Result result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

    // optional string fail_text = 2;
    if (has_fail_text()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->fail_text());
    }

    // optional int32 customer_id = 3;
    if (has_customer_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->customer_id());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CreateCustomerResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CreateCustomerResponse*>(&from));
}

void CreateCustomerResponse::MergeFrom(const CreateCustomerResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_fail_text()) {
      set_fail_text(from.fail_text());
    }
    if (from.has_customer_id()) {
      set_customer_id(from.customer_id());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void CreateCustomerResponse::CopyFrom(const CreateCustomerResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateCustomerResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void CreateCustomerResponse::Swap(CreateCustomerResponse* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(fail_text_, other->fail_text_);
    std::swap(customer_id_, other->customer_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CreateCustomerResponse::GetTypeName() const {
  return "weizhu.contacts.CreateCustomerResponse";
}


// ===================================================================

#ifndef _MSC_VER
const int UpdateCustomerRequest::kCustomerFieldNumber;
#endif  // !_MSC_VER

UpdateCustomerRequest::UpdateCustomerRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:weizhu.contacts.UpdateCustomerRequest)
}

void UpdateCustomerRequest::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  customer_ = const_cast< ::weizhu::contacts::Customer*>(
      ::weizhu::contacts::Customer::internal_default_instance());
#else
  customer_ = const_cast< ::weizhu::contacts::Customer*>(&::weizhu::contacts::Customer::default_instance());
#endif
}

UpdateCustomerRequest::UpdateCustomerRequest(const UpdateCustomerRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:weizhu.contacts.UpdateCustomerRequest)
}

void UpdateCustomerRequest::SharedCtor() {
  _cached_size_ = 0;
  customer_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UpdateCustomerRequest::~UpdateCustomerRequest() {
  // @@protoc_insertion_point(destructor:weizhu.contacts.UpdateCustomerRequest)
  SharedDtor();
}

void UpdateCustomerRequest::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete customer_;
  }
}

void UpdateCustomerRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const UpdateCustomerRequest& UpdateCustomerRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_contacts_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_contacts_2eproto();
#endif
  return *default_instance_;
}

UpdateCustomerRequest* UpdateCustomerRequest::default_instance_ = NULL;

UpdateCustomerRequest* UpdateCustomerRequest::New() const {
  return new UpdateCustomerRequest;
}

void UpdateCustomerRequest::Clear() {
  if (has_customer()) {
    if (customer_ != NULL) customer_->::weizhu::contacts::Customer::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool UpdateCustomerRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:weizhu.contacts.UpdateCustomerRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .weizhu.contacts.Customer customer = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_customer()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:weizhu.contacts.UpdateCustomerRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:weizhu.contacts.UpdateCustomerRequest)
  return false;
#undef DO_
}

void UpdateCustomerRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:weizhu.contacts.UpdateCustomerRequest)
  // required .weizhu.contacts.Customer customer = 1;
  if (has_customer()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->customer(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:weizhu.contacts.UpdateCustomerRequest)
}

int UpdateCustomerRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .weizhu.contacts.Customer customer = 1;
    if (has_customer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->customer());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpdateCustomerRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const UpdateCustomerRequest*>(&from));
}

void UpdateCustomerRequest::MergeFrom(const UpdateCustomerRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_customer()) {
      mutable_customer()->::weizhu::contacts::Customer::MergeFrom(from.customer());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void UpdateCustomerRequest::CopyFrom(const UpdateCustomerRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateCustomerRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_customer()) {
    if (!this->customer().IsInitialized()) return false;
  }
  return true;
}

void UpdateCustomerRequest::Swap(UpdateCustomerRequest* other) {
  if (other != this) {
    std::swap(customer_, other->customer_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string UpdateCustomerRequest::GetTypeName() const {
  return "weizhu.contacts.UpdateCustomerRequest";
}


// ===================================================================

bool UpdateCustomerResponse_Result_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 99:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const UpdateCustomerResponse_Result UpdateCustomerResponse::SUCC;
const UpdateCustomerResponse_Result UpdateCustomerResponse::FAIL_MOBILE_NO_INVALID;
const UpdateCustomerResponse_Result UpdateCustomerResponse::FAIL_CUSTOMER_NOT_EXIST;
const UpdateCustomerResponse_Result UpdateCustomerResponse::FAIL_UNKNOWN;
const UpdateCustomerResponse_Result UpdateCustomerResponse::Result_MIN;
const UpdateCustomerResponse_Result UpdateCustomerResponse::Result_MAX;
const int UpdateCustomerResponse::Result_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int UpdateCustomerResponse::kResultFieldNumber;
const int UpdateCustomerResponse::kFailTextFieldNumber;
#endif  // !_MSC_VER

UpdateCustomerResponse::UpdateCustomerResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:weizhu.contacts.UpdateCustomerResponse)
}

void UpdateCustomerResponse::InitAsDefaultInstance() {
}

UpdateCustomerResponse::UpdateCustomerResponse(const UpdateCustomerResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:weizhu.contacts.UpdateCustomerResponse)
}

void UpdateCustomerResponse::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  result_ = 99;
  fail_text_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UpdateCustomerResponse::~UpdateCustomerResponse() {
  // @@protoc_insertion_point(destructor:weizhu.contacts.UpdateCustomerResponse)
  SharedDtor();
}

void UpdateCustomerResponse::SharedDtor() {
  if (fail_text_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete fail_text_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void UpdateCustomerResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const UpdateCustomerResponse& UpdateCustomerResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_contacts_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_contacts_2eproto();
#endif
  return *default_instance_;
}

UpdateCustomerResponse* UpdateCustomerResponse::default_instance_ = NULL;

UpdateCustomerResponse* UpdateCustomerResponse::New() const {
  return new UpdateCustomerResponse;
}

void UpdateCustomerResponse::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    result_ = 99;
    if (has_fail_text()) {
      if (fail_text_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        fail_text_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool UpdateCustomerResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:weizhu.contacts.UpdateCustomerResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .weizhu.contacts.UpdateCustomerResponse.Result result = 1 [default = FAIL_UNKNOWN];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::weizhu::contacts::UpdateCustomerResponse_Result_IsValid(value)) {
            set_result(static_cast< ::weizhu::contacts::UpdateCustomerResponse_Result >(value));
          } else {
            unknown_fields_stream.WriteVarint32(tag);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_fail_text;
        break;
      }

      // optional string fail_text = 2;
      case 2: {
        if (tag == 18) {
         parse_fail_text:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fail_text()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:weizhu.contacts.UpdateCustomerResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:weizhu.contacts.UpdateCustomerResponse)
  return false;
#undef DO_
}

void UpdateCustomerResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:weizhu.contacts.UpdateCustomerResponse)
  // optional .weizhu.contacts.UpdateCustomerResponse.Result result = 1 [default = FAIL_UNKNOWN];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  // optional string fail_text = 2;
  if (has_fail_text()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->fail_text(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:weizhu.contacts.UpdateCustomerResponse)
}

int UpdateCustomerResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .weizhu.contacts.UpdateCustomerResponse.Result result = 1 [default = FAIL_UNKNOWN];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

    // optional string fail_text = 2;
    if (has_fail_text()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->fail_text());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpdateCustomerResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const UpdateCustomerResponse*>(&from));
}

void UpdateCustomerResponse::MergeFrom(const UpdateCustomerResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_fail_text()) {
      set_fail_text(from.fail_text());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void UpdateCustomerResponse::CopyFrom(const UpdateCustomerResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateCustomerResponse::IsInitialized() const {

  return true;
}

void UpdateCustomerResponse::Swap(UpdateCustomerResponse* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(fail_text_, other->fail_text_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string UpdateCustomerResponse::GetTypeName() const {
  return "weizhu.contacts.UpdateCustomerResponse";
}


// ===================================================================

#ifndef _MSC_VER
const int DeleteCustomerRequest::kCustomerIdFieldNumber;
#endif  // !_MSC_VER

DeleteCustomerRequest::DeleteCustomerRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:weizhu.contacts.DeleteCustomerRequest)
}

void DeleteCustomerRequest::InitAsDefaultInstance() {
}

DeleteCustomerRequest::DeleteCustomerRequest(const DeleteCustomerRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:weizhu.contacts.DeleteCustomerRequest)
}

void DeleteCustomerRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DeleteCustomerRequest::~DeleteCustomerRequest() {
  // @@protoc_insertion_point(destructor:weizhu.contacts.DeleteCustomerRequest)
  SharedDtor();
}

void DeleteCustomerRequest::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void DeleteCustomerRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const DeleteCustomerRequest& DeleteCustomerRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_contacts_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_contacts_2eproto();
#endif
  return *default_instance_;
}

DeleteCustomerRequest* DeleteCustomerRequest::default_instance_ = NULL;

DeleteCustomerRequest* DeleteCustomerRequest::New() const {
  return new DeleteCustomerRequest;
}

void DeleteCustomerRequest::Clear() {
  customer_id_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool DeleteCustomerRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:weizhu.contacts.DeleteCustomerRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 customer_id = 1;
      case 1: {
        if (tag == 8) {
         parse_customer_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8, input, this->mutable_customer_id())));
        } else if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_customer_id())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8)) goto parse_customer_id;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:weizhu.contacts.DeleteCustomerRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:weizhu.contacts.DeleteCustomerRequest)
  return false;
#undef DO_
}

void DeleteCustomerRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:weizhu.contacts.DeleteCustomerRequest)
  // repeated int32 customer_id = 1;
  for (int i = 0; i < this->customer_id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->customer_id(i), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:weizhu.contacts.DeleteCustomerRequest)
}

int DeleteCustomerRequest::ByteSize() const {
  int total_size = 0;

  // repeated int32 customer_id = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->customer_id_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->customer_id(i));
    }
    total_size += 1 * this->customer_id_size() + data_size;
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeleteCustomerRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const DeleteCustomerRequest*>(&from));
}

void DeleteCustomerRequest::MergeFrom(const DeleteCustomerRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  customer_id_.MergeFrom(from.customer_id_);
  mutable_unknown_fields()->append(from.unknown_fields());
}

void DeleteCustomerRequest::CopyFrom(const DeleteCustomerRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteCustomerRequest::IsInitialized() const {

  return true;
}

void DeleteCustomerRequest::Swap(DeleteCustomerRequest* other) {
  if (other != this) {
    customer_id_.Swap(&other->customer_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string DeleteCustomerRequest::GetTypeName() const {
  return "weizhu.contacts.DeleteCustomerRequest";
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

DeleteCustomerResponse::DeleteCustomerResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:weizhu.contacts.DeleteCustomerResponse)
}

void DeleteCustomerResponse::InitAsDefaultInstance() {
}

DeleteCustomerResponse::DeleteCustomerResponse(const DeleteCustomerResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:weizhu.contacts.DeleteCustomerResponse)
}

void DeleteCustomerResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DeleteCustomerResponse::~DeleteCustomerResponse() {
  // @@protoc_insertion_point(destructor:weizhu.contacts.DeleteCustomerResponse)
  SharedDtor();
}

void DeleteCustomerResponse::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void DeleteCustomerResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const DeleteCustomerResponse& DeleteCustomerResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_contacts_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_contacts_2eproto();
#endif
  return *default_instance_;
}

DeleteCustomerResponse* DeleteCustomerResponse::default_instance_ = NULL;

DeleteCustomerResponse* DeleteCustomerResponse::New() const {
  return new DeleteCustomerResponse;
}

void DeleteCustomerResponse::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool DeleteCustomerResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:weizhu.contacts.DeleteCustomerResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(
        input, tag, &unknown_fields_stream));
  }
success:
  // @@protoc_insertion_point(parse_success:weizhu.contacts.DeleteCustomerResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:weizhu.contacts.DeleteCustomerResponse)
  return false;
#undef DO_
}

void DeleteCustomerResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:weizhu.contacts.DeleteCustomerResponse)
  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:weizhu.contacts.DeleteCustomerResponse)
}

int DeleteCustomerResponse::ByteSize() const {
  int total_size = 0;

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeleteCustomerResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const DeleteCustomerResponse*>(&from));
}

void DeleteCustomerResponse::MergeFrom(const DeleteCustomerResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->append(from.unknown_fields());
}

void DeleteCustomerResponse::CopyFrom(const DeleteCustomerResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteCustomerResponse::IsInitialized() const {

  return true;
}

void DeleteCustomerResponse::Swap(DeleteCustomerResponse* other) {
  if (other != this) {
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string DeleteCustomerResponse::GetTypeName() const {
  return "weizhu.contacts.DeleteCustomerResponse";
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

GetCustomerListRequest::GetCustomerListRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:weizhu.contacts.GetCustomerListRequest)
}

void GetCustomerListRequest::InitAsDefaultInstance() {
}

GetCustomerListRequest::GetCustomerListRequest(const GetCustomerListRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:weizhu.contacts.GetCustomerListRequest)
}

void GetCustomerListRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetCustomerListRequest::~GetCustomerListRequest() {
  // @@protoc_insertion_point(destructor:weizhu.contacts.GetCustomerListRequest)
  SharedDtor();
}

void GetCustomerListRequest::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void GetCustomerListRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GetCustomerListRequest& GetCustomerListRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_contacts_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_contacts_2eproto();
#endif
  return *default_instance_;
}

GetCustomerListRequest* GetCustomerListRequest::default_instance_ = NULL;

GetCustomerListRequest* GetCustomerListRequest::New() const {
  return new GetCustomerListRequest;
}

void GetCustomerListRequest::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool GetCustomerListRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:weizhu.contacts.GetCustomerListRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(
        input, tag, &unknown_fields_stream));
  }
success:
  // @@protoc_insertion_point(parse_success:weizhu.contacts.GetCustomerListRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:weizhu.contacts.GetCustomerListRequest)
  return false;
#undef DO_
}

void GetCustomerListRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:weizhu.contacts.GetCustomerListRequest)
  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:weizhu.contacts.GetCustomerListRequest)
}

int GetCustomerListRequest::ByteSize() const {
  int total_size = 0;

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetCustomerListRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GetCustomerListRequest*>(&from));
}

void GetCustomerListRequest::MergeFrom(const GetCustomerListRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->append(from.unknown_fields());
}

void GetCustomerListRequest::CopyFrom(const GetCustomerListRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetCustomerListRequest::IsInitialized() const {

  return true;
}

void GetCustomerListRequest::Swap(GetCustomerListRequest* other) {
  if (other != this) {
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string GetCustomerListRequest::GetTypeName() const {
  return "weizhu.contacts.GetCustomerListRequest";
}


// ===================================================================

#ifndef _MSC_VER
const int GetCustomerListResponse::kCustomerListFieldNumber;
#endif  // !_MSC_VER

GetCustomerListResponse::GetCustomerListResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:weizhu.contacts.GetCustomerListResponse)
}

void GetCustomerListResponse::InitAsDefaultInstance() {
}

GetCustomerListResponse::GetCustomerListResponse(const GetCustomerListResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:weizhu.contacts.GetCustomerListResponse)
}

void GetCustomerListResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetCustomerListResponse::~GetCustomerListResponse() {
  // @@protoc_insertion_point(destructor:weizhu.contacts.GetCustomerListResponse)
  SharedDtor();
}

void GetCustomerListResponse::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void GetCustomerListResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GetCustomerListResponse& GetCustomerListResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_contacts_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_contacts_2eproto();
#endif
  return *default_instance_;
}

GetCustomerListResponse* GetCustomerListResponse::default_instance_ = NULL;

GetCustomerListResponse* GetCustomerListResponse::New() const {
  return new GetCustomerListResponse;
}

void GetCustomerListResponse::Clear() {
  customer_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool GetCustomerListResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:weizhu.contacts.GetCustomerListResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .weizhu.contacts.Customer customer_list = 1;
      case 1: {
        if (tag == 10) {
         parse_customer_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_customer_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_customer_list;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:weizhu.contacts.GetCustomerListResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:weizhu.contacts.GetCustomerListResponse)
  return false;
#undef DO_
}

void GetCustomerListResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:weizhu.contacts.GetCustomerListResponse)
  // repeated .weizhu.contacts.Customer customer_list = 1;
  for (int i = 0; i < this->customer_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->customer_list(i), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:weizhu.contacts.GetCustomerListResponse)
}

int GetCustomerListResponse::ByteSize() const {
  int total_size = 0;

  // repeated .weizhu.contacts.Customer customer_list = 1;
  total_size += 1 * this->customer_list_size();
  for (int i = 0; i < this->customer_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->customer_list(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetCustomerListResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GetCustomerListResponse*>(&from));
}

void GetCustomerListResponse::MergeFrom(const GetCustomerListResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  customer_list_.MergeFrom(from.customer_list_);
  mutable_unknown_fields()->append(from.unknown_fields());
}

void GetCustomerListResponse::CopyFrom(const GetCustomerListResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetCustomerListResponse::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->customer_list())) return false;
  return true;
}

void GetCustomerListResponse::Swap(GetCustomerListResponse* other) {
  if (other != this) {
    customer_list_.Swap(&other->customer_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string GetCustomerListResponse::GetTypeName() const {
  return "weizhu.contacts.GetCustomerListResponse";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace contacts
}  // namespace weizhu

// @@protoc_insertion_point(global_scope)
