// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: credits.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "credits.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)

namespace weizhu {
namespace credits {

void protobuf_ShutdownFile_credits_2eproto() {
  delete Credits::default_instance_;
  delete CreditsOrder::default_instance_;
  delete DuibaShopUrlRequest::default_instance_;
  delete DuibaShopUrlResponse::default_instance_;
  delete DuibaConsumeCreditsRequest::default_instance_;
  delete DuibaConsumeCreditsResponse::default_instance_;
  delete DuibaNotifyRequest::default_instance_;
  delete DuibaNotifyResponse::default_instance_;
  delete GetCreditsResponse::default_instance_;
  delete GetCreditsOrderRequest::default_instance_;
  delete GetCreditsOrderResponse::default_instance_;
  delete GetCreditsRuleResponse::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_credits_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_credits_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  ::weizhu::protobuf_AddDesc_weizhu_2eproto();
  Credits::default_instance_ = new Credits();
  CreditsOrder::default_instance_ = new CreditsOrder();
  DuibaShopUrlRequest::default_instance_ = new DuibaShopUrlRequest();
  DuibaShopUrlResponse::default_instance_ = new DuibaShopUrlResponse();
  DuibaConsumeCreditsRequest::default_instance_ = new DuibaConsumeCreditsRequest();
  DuibaConsumeCreditsResponse::default_instance_ = new DuibaConsumeCreditsResponse();
  DuibaNotifyRequest::default_instance_ = new DuibaNotifyRequest();
  DuibaNotifyResponse::default_instance_ = new DuibaNotifyResponse();
  GetCreditsResponse::default_instance_ = new GetCreditsResponse();
  GetCreditsOrderRequest::default_instance_ = new GetCreditsOrderRequest();
  GetCreditsOrderResponse::default_instance_ = new GetCreditsOrderResponse();
  GetCreditsRuleResponse::default_instance_ = new GetCreditsRuleResponse();
  Credits::default_instance_->InitAsDefaultInstance();
  CreditsOrder::default_instance_->InitAsDefaultInstance();
  DuibaShopUrlRequest::default_instance_->InitAsDefaultInstance();
  DuibaShopUrlResponse::default_instance_->InitAsDefaultInstance();
  DuibaConsumeCreditsRequest::default_instance_->InitAsDefaultInstance();
  DuibaConsumeCreditsResponse::default_instance_->InitAsDefaultInstance();
  DuibaNotifyRequest::default_instance_->InitAsDefaultInstance();
  DuibaNotifyResponse::default_instance_->InitAsDefaultInstance();
  GetCreditsResponse::default_instance_->InitAsDefaultInstance();
  GetCreditsOrderRequest::default_instance_->InitAsDefaultInstance();
  GetCreditsOrderResponse::default_instance_->InitAsDefaultInstance();
  GetCreditsRuleResponse::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_credits_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_credits_2eproto_once_);
void protobuf_AddDesc_credits_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_credits_2eproto_once_,
                 &protobuf_AddDesc_credits_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_credits_2eproto {
  StaticDescriptorInitializer_credits_2eproto() {
    protobuf_AddDesc_credits_2eproto();
  }
} static_descriptor_initializer_credits_2eproto_;
#endif

// ===================================================================

#ifndef _MSC_VER
const int Credits::kUserIdFieldNumber;
const int Credits::kCreditsFieldNumber;
#endif  // !_MSC_VER

Credits::Credits()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:weizhu.credits.Credits)
}

void Credits::InitAsDefaultInstance() {
}

Credits::Credits(const Credits& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:weizhu.credits.Credits)
}

void Credits::SharedCtor() {
  _cached_size_ = 0;
  user_id_ = GOOGLE_LONGLONG(0);
  credits_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Credits::~Credits() {
  // @@protoc_insertion_point(destructor:weizhu.credits.Credits)
  SharedDtor();
}

void Credits::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void Credits::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Credits& Credits::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_credits_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_credits_2eproto();
#endif
  return *default_instance_;
}

Credits* Credits::default_instance_ = NULL;

Credits* Credits::New() const {
  return new Credits;
}

void Credits::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Credits*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(user_id_, credits_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool Credits::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:weizhu.credits.Credits)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 user_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_credits;
        break;
      }

      // required int64 credits = 2;
      case 2: {
        if (tag == 16) {
         parse_credits:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &credits_)));
          set_has_credits();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:weizhu.credits.Credits)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:weizhu.credits.Credits)
  return false;
#undef DO_
}

void Credits::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:weizhu.credits.Credits)
  // required int64 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->user_id(), output);
  }

  // required int64 credits = 2;
  if (has_credits()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->credits(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:weizhu.credits.Credits)
}

int Credits::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->user_id());
    }

    // required int64 credits = 2;
    if (has_credits()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->credits());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Credits::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Credits*>(&from));
}

void Credits::MergeFrom(const Credits& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_credits()) {
      set_credits(from.credits());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void Credits::CopyFrom(const Credits& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Credits::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Credits::Swap(Credits* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(credits_, other->credits_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string Credits::GetTypeName() const {
  return "weizhu.credits.Credits";
}


// ===================================================================

bool CreditsOrder_Type_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const CreditsOrder_Type CreditsOrder::EXPENSE;
const CreditsOrder_Type CreditsOrder::ADMIN_INCOME;
const CreditsOrder_Type CreditsOrder::WEIZHU_INCOME;
const CreditsOrder_Type CreditsOrder::Type_MIN;
const CreditsOrder_Type CreditsOrder::Type_MAX;
const int CreditsOrder::Type_ARRAYSIZE;
#endif  // _MSC_VER
bool CreditsOrder_State_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const CreditsOrder_State CreditsOrder::REVIEW;
const CreditsOrder_State CreditsOrder::CONFIRM;
const CreditsOrder_State CreditsOrder::SUCCESS;
const CreditsOrder_State CreditsOrder::FAIL;
const CreditsOrder_State CreditsOrder::UNKNOWN;
const CreditsOrder_State CreditsOrder::State_MIN;
const CreditsOrder_State CreditsOrder::State_MAX;
const int CreditsOrder::State_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int CreditsOrder::kOrderIdFieldNumber;
const int CreditsOrder::kUserIdFieldNumber;
const int CreditsOrder::kTypeFieldNumber;
const int CreditsOrder::kCreditsDeltaFieldNumber;
const int CreditsOrder::kDescFieldNumber;
const int CreditsOrder::kStateFieldNumber;
const int CreditsOrder::kCreateTimeFieldNumber;
const int CreditsOrder::kCreateAdminFieldNumber;
#endif  // !_MSC_VER

CreditsOrder::CreditsOrder()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:weizhu.credits.CreditsOrder)
}

void CreditsOrder::InitAsDefaultInstance() {
}

CreditsOrder::CreditsOrder(const CreditsOrder& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:weizhu.credits.CreditsOrder)
}

void CreditsOrder::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  order_id_ = 0;
  user_id_ = GOOGLE_LONGLONG(0);
  type_ = 1;
  credits_delta_ = GOOGLE_LONGLONG(0);
  desc_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  state_ = 1;
  create_time_ = 0;
  create_admin_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CreditsOrder::~CreditsOrder() {
  // @@protoc_insertion_point(destructor:weizhu.credits.CreditsOrder)
  SharedDtor();
}

void CreditsOrder::SharedDtor() {
  if (desc_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete desc_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CreditsOrder::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CreditsOrder& CreditsOrder::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_credits_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_credits_2eproto();
#endif
  return *default_instance_;
}

CreditsOrder* CreditsOrder::default_instance_ = NULL;

CreditsOrder* CreditsOrder::New() const {
  return new CreditsOrder;
}

void CreditsOrder::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CreditsOrder*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(user_id_, order_id_);
    ZR_(create_time_, create_admin_);
    type_ = 1;
    credits_delta_ = GOOGLE_LONGLONG(0);
    if (has_desc()) {
      if (desc_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        desc_->clear();
      }
    }
    state_ = 1;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool CreditsOrder::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:weizhu.credits.CreditsOrder)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 order_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &order_id_)));
          set_has_order_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_user_id;
        break;
      }

      // required int64 user_id = 2;
      case 2: {
        if (tag == 16) {
         parse_user_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_type;
        break;
      }

      // required .weizhu.credits.CreditsOrder.Type type = 3;
      case 3: {
        if (tag == 24) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::weizhu::credits::CreditsOrder_Type_IsValid(value)) {
            set_type(static_cast< ::weizhu::credits::CreditsOrder_Type >(value));
          } else {
            unknown_fields_stream.WriteVarint32(tag);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_credits_delta;
        break;
      }

      // required int64 credits_delta = 4;
      case 4: {
        if (tag == 32) {
         parse_credits_delta:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &credits_delta_)));
          set_has_credits_delta();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_desc;
        break;
      }

      // optional string desc = 5;
      case 5: {
        if (tag == 42) {
         parse_desc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_desc()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_state;
        break;
      }

      // optional .weizhu.credits.CreditsOrder.State state = 6;
      case 6: {
        if (tag == 48) {
         parse_state:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::weizhu::credits::CreditsOrder_State_IsValid(value)) {
            set_state(static_cast< ::weizhu::credits::CreditsOrder_State >(value));
          } else {
            unknown_fields_stream.WriteVarint32(tag);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_create_time;
        break;
      }

      // optional int32 create_time = 7;
      case 7: {
        if (tag == 56) {
         parse_create_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &create_time_)));
          set_has_create_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_create_admin;
        break;
      }

      // optional int64 create_admin = 8;
      case 8: {
        if (tag == 64) {
         parse_create_admin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &create_admin_)));
          set_has_create_admin();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:weizhu.credits.CreditsOrder)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:weizhu.credits.CreditsOrder)
  return false;
#undef DO_
}

void CreditsOrder::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:weizhu.credits.CreditsOrder)
  // required int32 order_id = 1;
  if (has_order_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->order_id(), output);
  }

  // required int64 user_id = 2;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->user_id(), output);
  }

  // required .weizhu.credits.CreditsOrder.Type type = 3;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->type(), output);
  }

  // required int64 credits_delta = 4;
  if (has_credits_delta()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->credits_delta(), output);
  }

  // optional string desc = 5;
  if (has_desc()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->desc(), output);
  }

  // optional .weizhu.credits.CreditsOrder.State state = 6;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->state(), output);
  }

  // optional int32 create_time = 7;
  if (has_create_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->create_time(), output);
  }

  // optional int64 create_admin = 8;
  if (has_create_admin()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(8, this->create_admin(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:weizhu.credits.CreditsOrder)
}

int CreditsOrder::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 order_id = 1;
    if (has_order_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->order_id());
    }

    // required int64 user_id = 2;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->user_id());
    }

    // required .weizhu.credits.CreditsOrder.Type type = 3;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // required int64 credits_delta = 4;
    if (has_credits_delta()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->credits_delta());
    }

    // optional string desc = 5;
    if (has_desc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->desc());
    }

    // optional .weizhu.credits.CreditsOrder.State state = 6;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->state());
    }

    // optional int32 create_time = 7;
    if (has_create_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->create_time());
    }

    // optional int64 create_admin = 8;
    if (has_create_admin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->create_admin());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CreditsOrder::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CreditsOrder*>(&from));
}

void CreditsOrder::MergeFrom(const CreditsOrder& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_order_id()) {
      set_order_id(from.order_id());
    }
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_credits_delta()) {
      set_credits_delta(from.credits_delta());
    }
    if (from.has_desc()) {
      set_desc(from.desc());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_create_time()) {
      set_create_time(from.create_time());
    }
    if (from.has_create_admin()) {
      set_create_admin(from.create_admin());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void CreditsOrder::CopyFrom(const CreditsOrder& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreditsOrder::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void CreditsOrder::Swap(CreditsOrder* other) {
  if (other != this) {
    std::swap(order_id_, other->order_id_);
    std::swap(user_id_, other->user_id_);
    std::swap(type_, other->type_);
    std::swap(credits_delta_, other->credits_delta_);
    std::swap(desc_, other->desc_);
    std::swap(state_, other->state_);
    std::swap(create_time_, other->create_time_);
    std::swap(create_admin_, other->create_admin_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CreditsOrder::GetTypeName() const {
  return "weizhu.credits.CreditsOrder";
}


// ===================================================================

#ifndef _MSC_VER
const int DuibaShopUrlRequest::kRedirectFieldNumber;
#endif  // !_MSC_VER

DuibaShopUrlRequest::DuibaShopUrlRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:weizhu.credits.DuibaShopUrlRequest)
}

void DuibaShopUrlRequest::InitAsDefaultInstance() {
}

DuibaShopUrlRequest::DuibaShopUrlRequest(const DuibaShopUrlRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:weizhu.credits.DuibaShopUrlRequest)
}

void DuibaShopUrlRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  redirect_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DuibaShopUrlRequest::~DuibaShopUrlRequest() {
  // @@protoc_insertion_point(destructor:weizhu.credits.DuibaShopUrlRequest)
  SharedDtor();
}

void DuibaShopUrlRequest::SharedDtor() {
  if (redirect_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete redirect_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void DuibaShopUrlRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const DuibaShopUrlRequest& DuibaShopUrlRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_credits_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_credits_2eproto();
#endif
  return *default_instance_;
}

DuibaShopUrlRequest* DuibaShopUrlRequest::default_instance_ = NULL;

DuibaShopUrlRequest* DuibaShopUrlRequest::New() const {
  return new DuibaShopUrlRequest;
}

void DuibaShopUrlRequest::Clear() {
  if (has_redirect()) {
    if (redirect_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      redirect_->clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool DuibaShopUrlRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:weizhu.credits.DuibaShopUrlRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string redirect = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_redirect()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:weizhu.credits.DuibaShopUrlRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:weizhu.credits.DuibaShopUrlRequest)
  return false;
#undef DO_
}

void DuibaShopUrlRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:weizhu.credits.DuibaShopUrlRequest)
  // optional string redirect = 1;
  if (has_redirect()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->redirect(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:weizhu.credits.DuibaShopUrlRequest)
}

int DuibaShopUrlRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string redirect = 1;
    if (has_redirect()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->redirect());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DuibaShopUrlRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const DuibaShopUrlRequest*>(&from));
}

void DuibaShopUrlRequest::MergeFrom(const DuibaShopUrlRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_redirect()) {
      set_redirect(from.redirect());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void DuibaShopUrlRequest::CopyFrom(const DuibaShopUrlRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DuibaShopUrlRequest::IsInitialized() const {

  return true;
}

void DuibaShopUrlRequest::Swap(DuibaShopUrlRequest* other) {
  if (other != this) {
    std::swap(redirect_, other->redirect_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string DuibaShopUrlRequest::GetTypeName() const {
  return "weizhu.credits.DuibaShopUrlRequest";
}


// ===================================================================

#ifndef _MSC_VER
const int DuibaShopUrlResponse::kUrlFieldNumber;
#endif  // !_MSC_VER

DuibaShopUrlResponse::DuibaShopUrlResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:weizhu.credits.DuibaShopUrlResponse)
}

void DuibaShopUrlResponse::InitAsDefaultInstance() {
}

DuibaShopUrlResponse::DuibaShopUrlResponse(const DuibaShopUrlResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:weizhu.credits.DuibaShopUrlResponse)
}

void DuibaShopUrlResponse::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  url_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DuibaShopUrlResponse::~DuibaShopUrlResponse() {
  // @@protoc_insertion_point(destructor:weizhu.credits.DuibaShopUrlResponse)
  SharedDtor();
}

void DuibaShopUrlResponse::SharedDtor() {
  if (url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete url_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void DuibaShopUrlResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const DuibaShopUrlResponse& DuibaShopUrlResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_credits_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_credits_2eproto();
#endif
  return *default_instance_;
}

DuibaShopUrlResponse* DuibaShopUrlResponse::default_instance_ = NULL;

DuibaShopUrlResponse* DuibaShopUrlResponse::New() const {
  return new DuibaShopUrlResponse;
}

void DuibaShopUrlResponse::Clear() {
  if (has_url()) {
    if (url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      url_->clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool DuibaShopUrlResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:weizhu.credits.DuibaShopUrlResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string url = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_url()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:weizhu.credits.DuibaShopUrlResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:weizhu.credits.DuibaShopUrlResponse)
  return false;
#undef DO_
}

void DuibaShopUrlResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:weizhu.credits.DuibaShopUrlResponse)
  // required string url = 1;
  if (has_url()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->url(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:weizhu.credits.DuibaShopUrlResponse)
}

int DuibaShopUrlResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string url = 1;
    if (has_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->url());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DuibaShopUrlResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const DuibaShopUrlResponse*>(&from));
}

void DuibaShopUrlResponse::MergeFrom(const DuibaShopUrlResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_url()) {
      set_url(from.url());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void DuibaShopUrlResponse::CopyFrom(const DuibaShopUrlResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DuibaShopUrlResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void DuibaShopUrlResponse::Swap(DuibaShopUrlResponse* other) {
  if (other != this) {
    std::swap(url_, other->url_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string DuibaShopUrlResponse::GetTypeName() const {
  return "weizhu.credits.DuibaShopUrlResponse";
}


// ===================================================================

#ifndef _MSC_VER
const int DuibaConsumeCreditsRequest::kUidFieldNumber;
const int DuibaConsumeCreditsRequest::kCreditsFieldNumber;
const int DuibaConsumeCreditsRequest::kAppKeyFieldNumber;
const int DuibaConsumeCreditsRequest::kTimeStampFieldNumber;
const int DuibaConsumeCreditsRequest::kDescriptionFieldNumber;
const int DuibaConsumeCreditsRequest::kOrderNumFieldNumber;
const int DuibaConsumeCreditsRequest::kTypeFieldNumber;
const int DuibaConsumeCreditsRequest::kFacePriceFieldNumber;
const int DuibaConsumeCreditsRequest::kActualPriceFieldNumber;
const int DuibaConsumeCreditsRequest::kIpFieldNumber;
const int DuibaConsumeCreditsRequest::kWaitAuditFieldNumber;
const int DuibaConsumeCreditsRequest::kParamsFieldNumber;
const int DuibaConsumeCreditsRequest::kSignFieldNumber;
#endif  // !_MSC_VER

DuibaConsumeCreditsRequest::DuibaConsumeCreditsRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:weizhu.credits.DuibaConsumeCreditsRequest)
}

void DuibaConsumeCreditsRequest::InitAsDefaultInstance() {
}

DuibaConsumeCreditsRequest::DuibaConsumeCreditsRequest(const DuibaConsumeCreditsRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:weizhu.credits.DuibaConsumeCreditsRequest)
}

void DuibaConsumeCreditsRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  uid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  credits_ = GOOGLE_LONGLONG(0);
  app_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  time_stamp_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  order_num_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  face_price_ = 0;
  actual_price_ = 0;
  ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  wait_audit_ = false;
  params_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sign_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DuibaConsumeCreditsRequest::~DuibaConsumeCreditsRequest() {
  // @@protoc_insertion_point(destructor:weizhu.credits.DuibaConsumeCreditsRequest)
  SharedDtor();
}

void DuibaConsumeCreditsRequest::SharedDtor() {
  if (uid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete uid_;
  }
  if (app_key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete app_key_;
  }
  if (time_stamp_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete time_stamp_;
  }
  if (description_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete description_;
  }
  if (order_num_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete order_num_;
  }
  if (type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete type_;
  }
  if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ip_;
  }
  if (params_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete params_;
  }
  if (sign_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete sign_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void DuibaConsumeCreditsRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const DuibaConsumeCreditsRequest& DuibaConsumeCreditsRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_credits_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_credits_2eproto();
#endif
  return *default_instance_;
}

DuibaConsumeCreditsRequest* DuibaConsumeCreditsRequest::default_instance_ = NULL;

DuibaConsumeCreditsRequest* DuibaConsumeCreditsRequest::New() const {
  return new DuibaConsumeCreditsRequest;
}

void DuibaConsumeCreditsRequest::Clear() {
  if (_has_bits_[0 / 32] & 255) {
    if (has_uid()) {
      if (uid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        uid_->clear();
      }
    }
    credits_ = GOOGLE_LONGLONG(0);
    if (has_app_key()) {
      if (app_key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        app_key_->clear();
      }
    }
    if (has_time_stamp()) {
      if (time_stamp_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        time_stamp_->clear();
      }
    }
    if (has_description()) {
      if (description_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        description_->clear();
      }
    }
    if (has_order_num()) {
      if (order_num_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        order_num_->clear();
      }
    }
    if (has_type()) {
      if (type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        type_->clear();
      }
    }
    face_price_ = 0;
  }
  if (_has_bits_[8 / 32] & 7936) {
    actual_price_ = 0;
    if (has_ip()) {
      if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        ip_->clear();
      }
    }
    wait_audit_ = false;
    if (has_params()) {
      if (params_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        params_->clear();
      }
    }
    if (has_sign()) {
      if (sign_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        sign_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool DuibaConsumeCreditsRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:weizhu.credits.DuibaConsumeCreditsRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string uid = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uid()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_credits;
        break;
      }

      // required int64 credits = 2;
      case 2: {
        if (tag == 16) {
         parse_credits:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &credits_)));
          set_has_credits();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_app_key;
        break;
      }

      // required string app_key = 3;
      case 3: {
        if (tag == 26) {
         parse_app_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_app_key()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_time_stamp;
        break;
      }

      // required string time_stamp = 4;
      case 4: {
        if (tag == 34) {
         parse_time_stamp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_time_stamp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_description;
        break;
      }

      // optional string description = 5;
      case 5: {
        if (tag == 42) {
         parse_description:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_description()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_order_num;
        break;
      }

      // required string order_num = 6;
      case 6: {
        if (tag == 50) {
         parse_order_num:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_order_num()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_type;
        break;
      }

      // required string type = 7;
      case 7: {
        if (tag == 58) {
         parse_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_face_price;
        break;
      }

      // optional int32 face_price = 8;
      case 8: {
        if (tag == 64) {
         parse_face_price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &face_price_)));
          set_has_face_price();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_actual_price;
        break;
      }

      // required int32 actual_price = 9;
      case 9: {
        if (tag == 72) {
         parse_actual_price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &actual_price_)));
          set_has_actual_price();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_ip;
        break;
      }

      // optional string ip = 10;
      case 10: {
        if (tag == 82) {
         parse_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_wait_audit;
        break;
      }

      // optional bool wait_audit = 11;
      case 11: {
        if (tag == 88) {
         parse_wait_audit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &wait_audit_)));
          set_has_wait_audit();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_params;
        break;
      }

      // optional string params = 12;
      case 12: {
        if (tag == 98) {
         parse_params:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_params()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_sign;
        break;
      }

      // required string sign = 13;
      case 13: {
        if (tag == 106) {
         parse_sign:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sign()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:weizhu.credits.DuibaConsumeCreditsRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:weizhu.credits.DuibaConsumeCreditsRequest)
  return false;
#undef DO_
}

void DuibaConsumeCreditsRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:weizhu.credits.DuibaConsumeCreditsRequest)
  // required string uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->uid(), output);
  }

  // required int64 credits = 2;
  if (has_credits()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->credits(), output);
  }

  // required string app_key = 3;
  if (has_app_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->app_key(), output);
  }

  // required string time_stamp = 4;
  if (has_time_stamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->time_stamp(), output);
  }

  // optional string description = 5;
  if (has_description()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->description(), output);
  }

  // required string order_num = 6;
  if (has_order_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->order_num(), output);
  }

  // required string type = 7;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->type(), output);
  }

  // optional int32 face_price = 8;
  if (has_face_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->face_price(), output);
  }

  // required int32 actual_price = 9;
  if (has_actual_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->actual_price(), output);
  }

  // optional string ip = 10;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->ip(), output);
  }

  // optional bool wait_audit = 11;
  if (has_wait_audit()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->wait_audit(), output);
  }

  // optional string params = 12;
  if (has_params()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      12, this->params(), output);
  }

  // required string sign = 13;
  if (has_sign()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      13, this->sign(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:weizhu.credits.DuibaConsumeCreditsRequest)
}

int DuibaConsumeCreditsRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->uid());
    }

    // required int64 credits = 2;
    if (has_credits()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->credits());
    }

    // required string app_key = 3;
    if (has_app_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->app_key());
    }

    // required string time_stamp = 4;
    if (has_time_stamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->time_stamp());
    }

    // optional string description = 5;
    if (has_description()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->description());
    }

    // required string order_num = 6;
    if (has_order_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->order_num());
    }

    // required string type = 7;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->type());
    }

    // optional int32 face_price = 8;
    if (has_face_price()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->face_price());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required int32 actual_price = 9;
    if (has_actual_price()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->actual_price());
    }

    // optional string ip = 10;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ip());
    }

    // optional bool wait_audit = 11;
    if (has_wait_audit()) {
      total_size += 1 + 1;
    }

    // optional string params = 12;
    if (has_params()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->params());
    }

    // required string sign = 13;
    if (has_sign()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sign());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DuibaConsumeCreditsRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const DuibaConsumeCreditsRequest*>(&from));
}

void DuibaConsumeCreditsRequest::MergeFrom(const DuibaConsumeCreditsRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_credits()) {
      set_credits(from.credits());
    }
    if (from.has_app_key()) {
      set_app_key(from.app_key());
    }
    if (from.has_time_stamp()) {
      set_time_stamp(from.time_stamp());
    }
    if (from.has_description()) {
      set_description(from.description());
    }
    if (from.has_order_num()) {
      set_order_num(from.order_num());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_face_price()) {
      set_face_price(from.face_price());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_actual_price()) {
      set_actual_price(from.actual_price());
    }
    if (from.has_ip()) {
      set_ip(from.ip());
    }
    if (from.has_wait_audit()) {
      set_wait_audit(from.wait_audit());
    }
    if (from.has_params()) {
      set_params(from.params());
    }
    if (from.has_sign()) {
      set_sign(from.sign());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void DuibaConsumeCreditsRequest::CopyFrom(const DuibaConsumeCreditsRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DuibaConsumeCreditsRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000116f) != 0x0000116f) return false;

  return true;
}

void DuibaConsumeCreditsRequest::Swap(DuibaConsumeCreditsRequest* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(credits_, other->credits_);
    std::swap(app_key_, other->app_key_);
    std::swap(time_stamp_, other->time_stamp_);
    std::swap(description_, other->description_);
    std::swap(order_num_, other->order_num_);
    std::swap(type_, other->type_);
    std::swap(face_price_, other->face_price_);
    std::swap(actual_price_, other->actual_price_);
    std::swap(ip_, other->ip_);
    std::swap(wait_audit_, other->wait_audit_);
    std::swap(params_, other->params_);
    std::swap(sign_, other->sign_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string DuibaConsumeCreditsRequest::GetTypeName() const {
  return "weizhu.credits.DuibaConsumeCreditsRequest";
}


// ===================================================================

#ifndef _MSC_VER
const int DuibaConsumeCreditsResponse::kStatusFieldNumber;
const int DuibaConsumeCreditsResponse::kErrorMessageFieldNumber;
const int DuibaConsumeCreditsResponse::kBizIdFieldNumber;
const int DuibaConsumeCreditsResponse::kCreditsFieldNumber;
#endif  // !_MSC_VER

DuibaConsumeCreditsResponse::DuibaConsumeCreditsResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:weizhu.credits.DuibaConsumeCreditsResponse)
}

void DuibaConsumeCreditsResponse::InitAsDefaultInstance() {
}

DuibaConsumeCreditsResponse::DuibaConsumeCreditsResponse(const DuibaConsumeCreditsResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:weizhu.credits.DuibaConsumeCreditsResponse)
}

void DuibaConsumeCreditsResponse::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  status_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  error_message_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  biz_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  credits_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DuibaConsumeCreditsResponse::~DuibaConsumeCreditsResponse() {
  // @@protoc_insertion_point(destructor:weizhu.credits.DuibaConsumeCreditsResponse)
  SharedDtor();
}

void DuibaConsumeCreditsResponse::SharedDtor() {
  if (status_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete status_;
  }
  if (error_message_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete error_message_;
  }
  if (biz_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete biz_id_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void DuibaConsumeCreditsResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const DuibaConsumeCreditsResponse& DuibaConsumeCreditsResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_credits_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_credits_2eproto();
#endif
  return *default_instance_;
}

DuibaConsumeCreditsResponse* DuibaConsumeCreditsResponse::default_instance_ = NULL;

DuibaConsumeCreditsResponse* DuibaConsumeCreditsResponse::New() const {
  return new DuibaConsumeCreditsResponse;
}

void DuibaConsumeCreditsResponse::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    if (has_status()) {
      if (status_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        status_->clear();
      }
    }
    if (has_error_message()) {
      if (error_message_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        error_message_->clear();
      }
    }
    if (has_biz_id()) {
      if (biz_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        biz_id_->clear();
      }
    }
    credits_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool DuibaConsumeCreditsResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:weizhu.credits.DuibaConsumeCreditsResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string status = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_status()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_error_message;
        break;
      }

      // optional string error_message = 2;
      case 2: {
        if (tag == 18) {
         parse_error_message:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_error_message()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_biz_id;
        break;
      }

      // required string biz_id = 3;
      case 3: {
        if (tag == 26) {
         parse_biz_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_biz_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_credits;
        break;
      }

      // required int64 credits = 4;
      case 4: {
        if (tag == 32) {
         parse_credits:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &credits_)));
          set_has_credits();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:weizhu.credits.DuibaConsumeCreditsResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:weizhu.credits.DuibaConsumeCreditsResponse)
  return false;
#undef DO_
}

void DuibaConsumeCreditsResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:weizhu.credits.DuibaConsumeCreditsResponse)
  // required string status = 1;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->status(), output);
  }

  // optional string error_message = 2;
  if (has_error_message()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->error_message(), output);
  }

  // required string biz_id = 3;
  if (has_biz_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->biz_id(), output);
  }

  // required int64 credits = 4;
  if (has_credits()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->credits(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:weizhu.credits.DuibaConsumeCreditsResponse)
}

int DuibaConsumeCreditsResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string status = 1;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->status());
    }

    // optional string error_message = 2;
    if (has_error_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->error_message());
    }

    // required string biz_id = 3;
    if (has_biz_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->biz_id());
    }

    // required int64 credits = 4;
    if (has_credits()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->credits());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DuibaConsumeCreditsResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const DuibaConsumeCreditsResponse*>(&from));
}

void DuibaConsumeCreditsResponse::MergeFrom(const DuibaConsumeCreditsResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_error_message()) {
      set_error_message(from.error_message());
    }
    if (from.has_biz_id()) {
      set_biz_id(from.biz_id());
    }
    if (from.has_credits()) {
      set_credits(from.credits());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void DuibaConsumeCreditsResponse::CopyFrom(const DuibaConsumeCreditsResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DuibaConsumeCreditsResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000d) != 0x0000000d) return false;

  return true;
}

void DuibaConsumeCreditsResponse::Swap(DuibaConsumeCreditsResponse* other) {
  if (other != this) {
    std::swap(status_, other->status_);
    std::swap(error_message_, other->error_message_);
    std::swap(biz_id_, other->biz_id_);
    std::swap(credits_, other->credits_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string DuibaConsumeCreditsResponse::GetTypeName() const {
  return "weizhu.credits.DuibaConsumeCreditsResponse";
}


// ===================================================================

#ifndef _MSC_VER
const int DuibaNotifyRequest::kAppKeyFieldNumber;
const int DuibaNotifyRequest::kTimeStampFieldNumber;
const int DuibaNotifyRequest::kSuccessFieldNumber;
const int DuibaNotifyRequest::kErrorMessageFieldNumber;
const int DuibaNotifyRequest::kOrderNumFieldNumber;
const int DuibaNotifyRequest::kBizIdFieldNumber;
const int DuibaNotifyRequest::kSignFieldNumber;
const int DuibaNotifyRequest::kUidFieldNumber;
#endif  // !_MSC_VER

DuibaNotifyRequest::DuibaNotifyRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:weizhu.credits.DuibaNotifyRequest)
}

void DuibaNotifyRequest::InitAsDefaultInstance() {
}

DuibaNotifyRequest::DuibaNotifyRequest(const DuibaNotifyRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:weizhu.credits.DuibaNotifyRequest)
}

void DuibaNotifyRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  app_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  time_stamp_ = GOOGLE_LONGLONG(0);
  success_ = false;
  error_message_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  order_num_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  biz_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sign_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  uid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DuibaNotifyRequest::~DuibaNotifyRequest() {
  // @@protoc_insertion_point(destructor:weizhu.credits.DuibaNotifyRequest)
  SharedDtor();
}

void DuibaNotifyRequest::SharedDtor() {
  if (app_key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete app_key_;
  }
  if (error_message_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete error_message_;
  }
  if (order_num_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete order_num_;
  }
  if (biz_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete biz_id_;
  }
  if (sign_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete sign_;
  }
  if (uid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete uid_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void DuibaNotifyRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const DuibaNotifyRequest& DuibaNotifyRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_credits_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_credits_2eproto();
#endif
  return *default_instance_;
}

DuibaNotifyRequest* DuibaNotifyRequest::default_instance_ = NULL;

DuibaNotifyRequest* DuibaNotifyRequest::New() const {
  return new DuibaNotifyRequest;
}

void DuibaNotifyRequest::Clear() {
  if (_has_bits_[0 / 32] & 255) {
    if (has_app_key()) {
      if (app_key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        app_key_->clear();
      }
    }
    time_stamp_ = GOOGLE_LONGLONG(0);
    success_ = false;
    if (has_error_message()) {
      if (error_message_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        error_message_->clear();
      }
    }
    if (has_order_num()) {
      if (order_num_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        order_num_->clear();
      }
    }
    if (has_biz_id()) {
      if (biz_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        biz_id_->clear();
      }
    }
    if (has_sign()) {
      if (sign_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        sign_->clear();
      }
    }
    if (has_uid()) {
      if (uid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        uid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool DuibaNotifyRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:weizhu.credits.DuibaNotifyRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string app_key = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_app_key()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_time_stamp;
        break;
      }

      // required int64 time_stamp = 2;
      case 2: {
        if (tag == 16) {
         parse_time_stamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &time_stamp_)));
          set_has_time_stamp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_success;
        break;
      }

      // required bool success = 3;
      case 3: {
        if (tag == 24) {
         parse_success:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &success_)));
          set_has_success();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_error_message;
        break;
      }

      // optional string error_message = 4;
      case 4: {
        if (tag == 34) {
         parse_error_message:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_error_message()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_order_num;
        break;
      }

      // required string order_num = 5;
      case 5: {
        if (tag == 42) {
         parse_order_num:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_order_num()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_biz_id;
        break;
      }

      // optional string biz_id = 6;
      case 6: {
        if (tag == 50) {
         parse_biz_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_biz_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_sign;
        break;
      }

      // required string sign = 7;
      case 7: {
        if (tag == 58) {
         parse_sign:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sign()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_uid;
        break;
      }

      // optional string uid = 8;
      case 8: {
        if (tag == 66) {
         parse_uid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uid()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:weizhu.credits.DuibaNotifyRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:weizhu.credits.DuibaNotifyRequest)
  return false;
#undef DO_
}

void DuibaNotifyRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:weizhu.credits.DuibaNotifyRequest)
  // required string app_key = 1;
  if (has_app_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->app_key(), output);
  }

  // required int64 time_stamp = 2;
  if (has_time_stamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->time_stamp(), output);
  }

  // required bool success = 3;
  if (has_success()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->success(), output);
  }

  // optional string error_message = 4;
  if (has_error_message()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->error_message(), output);
  }

  // required string order_num = 5;
  if (has_order_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->order_num(), output);
  }

  // optional string biz_id = 6;
  if (has_biz_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->biz_id(), output);
  }

  // required string sign = 7;
  if (has_sign()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->sign(), output);
  }

  // optional string uid = 8;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->uid(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:weizhu.credits.DuibaNotifyRequest)
}

int DuibaNotifyRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string app_key = 1;
    if (has_app_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->app_key());
    }

    // required int64 time_stamp = 2;
    if (has_time_stamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->time_stamp());
    }

    // required bool success = 3;
    if (has_success()) {
      total_size += 1 + 1;
    }

    // optional string error_message = 4;
    if (has_error_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->error_message());
    }

    // required string order_num = 5;
    if (has_order_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->order_num());
    }

    // optional string biz_id = 6;
    if (has_biz_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->biz_id());
    }

    // required string sign = 7;
    if (has_sign()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sign());
    }

    // optional string uid = 8;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->uid());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DuibaNotifyRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const DuibaNotifyRequest*>(&from));
}

void DuibaNotifyRequest::MergeFrom(const DuibaNotifyRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_app_key()) {
      set_app_key(from.app_key());
    }
    if (from.has_time_stamp()) {
      set_time_stamp(from.time_stamp());
    }
    if (from.has_success()) {
      set_success(from.success());
    }
    if (from.has_error_message()) {
      set_error_message(from.error_message());
    }
    if (from.has_order_num()) {
      set_order_num(from.order_num());
    }
    if (from.has_biz_id()) {
      set_biz_id(from.biz_id());
    }
    if (from.has_sign()) {
      set_sign(from.sign());
    }
    if (from.has_uid()) {
      set_uid(from.uid());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void DuibaNotifyRequest::CopyFrom(const DuibaNotifyRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DuibaNotifyRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000057) != 0x00000057) return false;

  return true;
}

void DuibaNotifyRequest::Swap(DuibaNotifyRequest* other) {
  if (other != this) {
    std::swap(app_key_, other->app_key_);
    std::swap(time_stamp_, other->time_stamp_);
    std::swap(success_, other->success_);
    std::swap(error_message_, other->error_message_);
    std::swap(order_num_, other->order_num_);
    std::swap(biz_id_, other->biz_id_);
    std::swap(sign_, other->sign_);
    std::swap(uid_, other->uid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string DuibaNotifyRequest::GetTypeName() const {
  return "weizhu.credits.DuibaNotifyRequest";
}


// ===================================================================

bool DuibaNotifyResponse_Result_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const DuibaNotifyResponse_Result DuibaNotifyResponse::SUCC;
const DuibaNotifyResponse_Result DuibaNotifyResponse::FAIL;
const DuibaNotifyResponse_Result DuibaNotifyResponse::Result_MIN;
const DuibaNotifyResponse_Result DuibaNotifyResponse::Result_MAX;
const int DuibaNotifyResponse::Result_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int DuibaNotifyResponse::kResultFieldNumber;
const int DuibaNotifyResponse::kFailTextFieldNumber;
#endif  // !_MSC_VER

DuibaNotifyResponse::DuibaNotifyResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:weizhu.credits.DuibaNotifyResponse)
}

void DuibaNotifyResponse::InitAsDefaultInstance() {
}

DuibaNotifyResponse::DuibaNotifyResponse(const DuibaNotifyResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:weizhu.credits.DuibaNotifyResponse)
}

void DuibaNotifyResponse::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  result_ = 0;
  fail_text_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DuibaNotifyResponse::~DuibaNotifyResponse() {
  // @@protoc_insertion_point(destructor:weizhu.credits.DuibaNotifyResponse)
  SharedDtor();
}

void DuibaNotifyResponse::SharedDtor() {
  if (fail_text_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete fail_text_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void DuibaNotifyResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const DuibaNotifyResponse& DuibaNotifyResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_credits_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_credits_2eproto();
#endif
  return *default_instance_;
}

DuibaNotifyResponse* DuibaNotifyResponse::default_instance_ = NULL;

DuibaNotifyResponse* DuibaNotifyResponse::New() const {
  return new DuibaNotifyResponse;
}

void DuibaNotifyResponse::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    result_ = 0;
    if (has_fail_text()) {
      if (fail_text_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        fail_text_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool DuibaNotifyResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:weizhu.credits.DuibaNotifyResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .weizhu.credits.DuibaNotifyResponse.Result result = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::weizhu::credits::DuibaNotifyResponse_Result_IsValid(value)) {
            set_result(static_cast< ::weizhu::credits::DuibaNotifyResponse_Result >(value));
          } else {
            unknown_fields_stream.WriteVarint32(tag);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_fail_text;
        break;
      }

      // optional string fail_text = 2;
      case 2: {
        if (tag == 18) {
         parse_fail_text:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fail_text()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:weizhu.credits.DuibaNotifyResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:weizhu.credits.DuibaNotifyResponse)
  return false;
#undef DO_
}

void DuibaNotifyResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:weizhu.credits.DuibaNotifyResponse)
  // required .weizhu.credits.DuibaNotifyResponse.Result result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  // optional string fail_text = 2;
  if (has_fail_text()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->fail_text(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:weizhu.credits.DuibaNotifyResponse)
}

int DuibaNotifyResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .weizhu.credits.DuibaNotifyResponse.Result result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

    // optional string fail_text = 2;
    if (has_fail_text()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->fail_text());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DuibaNotifyResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const DuibaNotifyResponse*>(&from));
}

void DuibaNotifyResponse::MergeFrom(const DuibaNotifyResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_fail_text()) {
      set_fail_text(from.fail_text());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void DuibaNotifyResponse::CopyFrom(const DuibaNotifyResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DuibaNotifyResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void DuibaNotifyResponse::Swap(DuibaNotifyResponse* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(fail_text_, other->fail_text_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string DuibaNotifyResponse::GetTypeName() const {
  return "weizhu.credits.DuibaNotifyResponse";
}


// ===================================================================

#ifndef _MSC_VER
const int GetCreditsResponse::kCreditsFieldNumber;
#endif  // !_MSC_VER

GetCreditsResponse::GetCreditsResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:weizhu.credits.GetCreditsResponse)
}

void GetCreditsResponse::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  credits_ = const_cast< ::weizhu::credits::Credits*>(
      ::weizhu::credits::Credits::internal_default_instance());
#else
  credits_ = const_cast< ::weizhu::credits::Credits*>(&::weizhu::credits::Credits::default_instance());
#endif
}

GetCreditsResponse::GetCreditsResponse(const GetCreditsResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:weizhu.credits.GetCreditsResponse)
}

void GetCreditsResponse::SharedCtor() {
  _cached_size_ = 0;
  credits_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetCreditsResponse::~GetCreditsResponse() {
  // @@protoc_insertion_point(destructor:weizhu.credits.GetCreditsResponse)
  SharedDtor();
}

void GetCreditsResponse::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete credits_;
  }
}

void GetCreditsResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GetCreditsResponse& GetCreditsResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_credits_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_credits_2eproto();
#endif
  return *default_instance_;
}

GetCreditsResponse* GetCreditsResponse::default_instance_ = NULL;

GetCreditsResponse* GetCreditsResponse::New() const {
  return new GetCreditsResponse;
}

void GetCreditsResponse::Clear() {
  if (has_credits()) {
    if (credits_ != NULL) credits_->::weizhu::credits::Credits::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool GetCreditsResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:weizhu.credits.GetCreditsResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .weizhu.credits.Credits credits = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_credits()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:weizhu.credits.GetCreditsResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:weizhu.credits.GetCreditsResponse)
  return false;
#undef DO_
}

void GetCreditsResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:weizhu.credits.GetCreditsResponse)
  // required .weizhu.credits.Credits credits = 1;
  if (has_credits()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->credits(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:weizhu.credits.GetCreditsResponse)
}

int GetCreditsResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .weizhu.credits.Credits credits = 1;
    if (has_credits()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->credits());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetCreditsResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GetCreditsResponse*>(&from));
}

void GetCreditsResponse::MergeFrom(const GetCreditsResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_credits()) {
      mutable_credits()->::weizhu::credits::Credits::MergeFrom(from.credits());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void GetCreditsResponse::CopyFrom(const GetCreditsResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetCreditsResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_credits()) {
    if (!this->credits().IsInitialized()) return false;
  }
  return true;
}

void GetCreditsResponse::Swap(GetCreditsResponse* other) {
  if (other != this) {
    std::swap(credits_, other->credits_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string GetCreditsResponse::GetTypeName() const {
  return "weizhu.credits.GetCreditsResponse";
}


// ===================================================================

#ifndef _MSC_VER
const int GetCreditsOrderRequest::kIsExpenseFieldNumber;
const int GetCreditsOrderRequest::kSizeFieldNumber;
const int GetCreditsOrderRequest::kOffsetIndexFieldNumber;
#endif  // !_MSC_VER

GetCreditsOrderRequest::GetCreditsOrderRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:weizhu.credits.GetCreditsOrderRequest)
}

void GetCreditsOrderRequest::InitAsDefaultInstance() {
}

GetCreditsOrderRequest::GetCreditsOrderRequest(const GetCreditsOrderRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:weizhu.credits.GetCreditsOrderRequest)
}

void GetCreditsOrderRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  is_expense_ = false;
  size_ = 0;
  offset_index_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetCreditsOrderRequest::~GetCreditsOrderRequest() {
  // @@protoc_insertion_point(destructor:weizhu.credits.GetCreditsOrderRequest)
  SharedDtor();
}

void GetCreditsOrderRequest::SharedDtor() {
  if (offset_index_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete offset_index_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void GetCreditsOrderRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GetCreditsOrderRequest& GetCreditsOrderRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_credits_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_credits_2eproto();
#endif
  return *default_instance_;
}

GetCreditsOrderRequest* GetCreditsOrderRequest::default_instance_ = NULL;

GetCreditsOrderRequest* GetCreditsOrderRequest::New() const {
  return new GetCreditsOrderRequest;
}

void GetCreditsOrderRequest::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GetCreditsOrderRequest*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(is_expense_, size_);
    if (has_offset_index()) {
      if (offset_index_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        offset_index_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool GetCreditsOrderRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:weizhu.credits.GetCreditsOrderRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool is_expense = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_expense_)));
          set_has_is_expense();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_size;
        break;
      }

      // required int32 size = 2;
      case 2: {
        if (tag == 16) {
         parse_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &size_)));
          set_has_size();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_offset_index;
        break;
      }

      // optional bytes offset_index = 3;
      case 3: {
        if (tag == 26) {
         parse_offset_index:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_offset_index()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:weizhu.credits.GetCreditsOrderRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:weizhu.credits.GetCreditsOrderRequest)
  return false;
#undef DO_
}

void GetCreditsOrderRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:weizhu.credits.GetCreditsOrderRequest)
  // required bool is_expense = 1;
  if (has_is_expense()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->is_expense(), output);
  }

  // required int32 size = 2;
  if (has_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->size(), output);
  }

  // optional bytes offset_index = 3;
  if (has_offset_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->offset_index(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:weizhu.credits.GetCreditsOrderRequest)
}

int GetCreditsOrderRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool is_expense = 1;
    if (has_is_expense()) {
      total_size += 1 + 1;
    }

    // required int32 size = 2;
    if (has_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->size());
    }

    // optional bytes offset_index = 3;
    if (has_offset_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->offset_index());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetCreditsOrderRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GetCreditsOrderRequest*>(&from));
}

void GetCreditsOrderRequest::MergeFrom(const GetCreditsOrderRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_is_expense()) {
      set_is_expense(from.is_expense());
    }
    if (from.has_size()) {
      set_size(from.size());
    }
    if (from.has_offset_index()) {
      set_offset_index(from.offset_index());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void GetCreditsOrderRequest::CopyFrom(const GetCreditsOrderRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetCreditsOrderRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void GetCreditsOrderRequest::Swap(GetCreditsOrderRequest* other) {
  if (other != this) {
    std::swap(is_expense_, other->is_expense_);
    std::swap(size_, other->size_);
    std::swap(offset_index_, other->offset_index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string GetCreditsOrderRequest::GetTypeName() const {
  return "weizhu.credits.GetCreditsOrderRequest";
}


// ===================================================================

#ifndef _MSC_VER
const int GetCreditsOrderResponse::kCreditsOrderFieldNumber;
const int GetCreditsOrderResponse::kHasMoreFieldNumber;
const int GetCreditsOrderResponse::kOffsetIndexFieldNumber;
#endif  // !_MSC_VER

GetCreditsOrderResponse::GetCreditsOrderResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:weizhu.credits.GetCreditsOrderResponse)
}

void GetCreditsOrderResponse::InitAsDefaultInstance() {
}

GetCreditsOrderResponse::GetCreditsOrderResponse(const GetCreditsOrderResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:weizhu.credits.GetCreditsOrderResponse)
}

void GetCreditsOrderResponse::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  has_more_ = false;
  offset_index_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetCreditsOrderResponse::~GetCreditsOrderResponse() {
  // @@protoc_insertion_point(destructor:weizhu.credits.GetCreditsOrderResponse)
  SharedDtor();
}

void GetCreditsOrderResponse::SharedDtor() {
  if (offset_index_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete offset_index_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void GetCreditsOrderResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GetCreditsOrderResponse& GetCreditsOrderResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_credits_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_credits_2eproto();
#endif
  return *default_instance_;
}

GetCreditsOrderResponse* GetCreditsOrderResponse::default_instance_ = NULL;

GetCreditsOrderResponse* GetCreditsOrderResponse::New() const {
  return new GetCreditsOrderResponse;
}

void GetCreditsOrderResponse::Clear() {
  if (_has_bits_[0 / 32] & 6) {
    has_more_ = false;
    if (has_offset_index()) {
      if (offset_index_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        offset_index_->clear();
      }
    }
  }
  credits_order_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool GetCreditsOrderResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:weizhu.credits.GetCreditsOrderResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .weizhu.credits.CreditsOrder credits_order = 1;
      case 1: {
        if (tag == 10) {
         parse_credits_order:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_credits_order()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_credits_order;
        if (input->ExpectTag(16)) goto parse_has_more;
        break;
      }

      // required bool has_more = 2;
      case 2: {
        if (tag == 16) {
         parse_has_more:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &has_more_)));
          set_has_has_more();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_offset_index;
        break;
      }

      // optional bytes offset_index = 3;
      case 3: {
        if (tag == 26) {
         parse_offset_index:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_offset_index()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:weizhu.credits.GetCreditsOrderResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:weizhu.credits.GetCreditsOrderResponse)
  return false;
#undef DO_
}

void GetCreditsOrderResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:weizhu.credits.GetCreditsOrderResponse)
  // repeated .weizhu.credits.CreditsOrder credits_order = 1;
  for (int i = 0; i < this->credits_order_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->credits_order(i), output);
  }

  // required bool has_more = 2;
  if (has_has_more()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->has_more(), output);
  }

  // optional bytes offset_index = 3;
  if (has_offset_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->offset_index(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:weizhu.credits.GetCreditsOrderResponse)
}

int GetCreditsOrderResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // required bool has_more = 2;
    if (has_has_more()) {
      total_size += 1 + 1;
    }

    // optional bytes offset_index = 3;
    if (has_offset_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->offset_index());
    }

  }
  // repeated .weizhu.credits.CreditsOrder credits_order = 1;
  total_size += 1 * this->credits_order_size();
  for (int i = 0; i < this->credits_order_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->credits_order(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetCreditsOrderResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GetCreditsOrderResponse*>(&from));
}

void GetCreditsOrderResponse::MergeFrom(const GetCreditsOrderResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  credits_order_.MergeFrom(from.credits_order_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_has_more()) {
      set_has_more(from.has_more());
    }
    if (from.has_offset_index()) {
      set_offset_index(from.offset_index());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void GetCreditsOrderResponse::CopyFrom(const GetCreditsOrderResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetCreditsOrderResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->credits_order())) return false;
  return true;
}

void GetCreditsOrderResponse::Swap(GetCreditsOrderResponse* other) {
  if (other != this) {
    credits_order_.Swap(&other->credits_order_);
    std::swap(has_more_, other->has_more_);
    std::swap(offset_index_, other->offset_index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string GetCreditsOrderResponse::GetTypeName() const {
  return "weizhu.credits.GetCreditsOrderResponse";
}


// ===================================================================

#ifndef _MSC_VER
const int GetCreditsRuleResponse::kCreditsRuleFieldNumber;
#endif  // !_MSC_VER

GetCreditsRuleResponse::GetCreditsRuleResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:weizhu.credits.GetCreditsRuleResponse)
}

void GetCreditsRuleResponse::InitAsDefaultInstance() {
}

GetCreditsRuleResponse::GetCreditsRuleResponse(const GetCreditsRuleResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:weizhu.credits.GetCreditsRuleResponse)
}

void GetCreditsRuleResponse::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  credits_rule_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetCreditsRuleResponse::~GetCreditsRuleResponse() {
  // @@protoc_insertion_point(destructor:weizhu.credits.GetCreditsRuleResponse)
  SharedDtor();
}

void GetCreditsRuleResponse::SharedDtor() {
  if (credits_rule_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete credits_rule_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void GetCreditsRuleResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GetCreditsRuleResponse& GetCreditsRuleResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_credits_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_credits_2eproto();
#endif
  return *default_instance_;
}

GetCreditsRuleResponse* GetCreditsRuleResponse::default_instance_ = NULL;

GetCreditsRuleResponse* GetCreditsRuleResponse::New() const {
  return new GetCreditsRuleResponse;
}

void GetCreditsRuleResponse::Clear() {
  if (has_credits_rule()) {
    if (credits_rule_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      credits_rule_->clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool GetCreditsRuleResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:weizhu.credits.GetCreditsRuleResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string credits_rule = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_credits_rule()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:weizhu.credits.GetCreditsRuleResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:weizhu.credits.GetCreditsRuleResponse)
  return false;
#undef DO_
}

void GetCreditsRuleResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:weizhu.credits.GetCreditsRuleResponse)
  // optional string credits_rule = 1;
  if (has_credits_rule()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->credits_rule(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:weizhu.credits.GetCreditsRuleResponse)
}

int GetCreditsRuleResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string credits_rule = 1;
    if (has_credits_rule()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->credits_rule());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetCreditsRuleResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GetCreditsRuleResponse*>(&from));
}

void GetCreditsRuleResponse::MergeFrom(const GetCreditsRuleResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_credits_rule()) {
      set_credits_rule(from.credits_rule());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void GetCreditsRuleResponse::CopyFrom(const GetCreditsRuleResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetCreditsRuleResponse::IsInitialized() const {

  return true;
}

void GetCreditsRuleResponse::Swap(GetCreditsRuleResponse* other) {
  if (other != this) {
    std::swap(credits_rule_, other->credits_rule_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string GetCreditsRuleResponse::GetTypeName() const {
  return "weizhu.credits.GetCreditsRuleResponse";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace credits
}  // namespace weizhu

// @@protoc_insertion_point(global_scope)
