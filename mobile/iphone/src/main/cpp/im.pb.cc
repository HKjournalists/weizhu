// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: im.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "im.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)

namespace weizhu {
namespace im {

void protobuf_ShutdownFile_im_2eproto() {
  delete InstantMessage::default_instance_;
  delete InstantMessage_Text::default_instance_;
  delete InstantMessage_Voice::default_instance_;
  delete InstantMessage_Image::default_instance_;
  delete InstantMessage_User::default_instance_;
  delete InstantMessage_Video::default_instance_;
  delete InstantMessage_File::default_instance_;
  delete InstantMessage_Group::default_instance_;
  delete InstantMessage_DiscoverItem::default_instance_;
  delete P2PChat::default_instance_;
  delete GroupChat::default_instance_;
  delete GroupChat_Member::default_instance_;
  delete IMP2PMessagePush::default_instance_;
  delete IMP2PStatePush::default_instance_;
  delete IMGroupStatePush::default_instance_;
  delete GetP2PMessageRequest::default_instance_;
  delete GetGroupMessageRequest::default_instance_;
  delete GetMessageResponse::default_instance_;
  delete SendP2PMessageRequest::default_instance_;
  delete SendP2PMessageResponse::default_instance_;
  delete GetP2PChatListRequest::default_instance_;
  delete GetP2PChatListResponse::default_instance_;
  delete GetGroupChatByIdRequest::default_instance_;
  delete GetGroupChatByIdResponse::default_instance_;
  delete CreateGroupChatRequest::default_instance_;
  delete CreateGroupChatResponse::default_instance_;
  delete SetGroupNameRequest::default_instance_;
  delete SetGroupNameResponse::default_instance_;
  delete JoinGroupChatRequest::default_instance_;
  delete JoinGroupChatResponse::default_instance_;
  delete LeaveGroupChatRequest::default_instance_;
  delete LeaveGroupChatResponse::default_instance_;
  delete SendGroupMessageRequest::default_instance_;
  delete SendGroupMessageResponse::default_instance_;
  delete GetGroupChatListRequest::default_instance_;
  delete GetGroupChatListResponse::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_im_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_im_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  InstantMessage::default_instance_ = new InstantMessage();
  InstantMessage_Text::default_instance_ = new InstantMessage_Text();
  InstantMessage_Voice::default_instance_ = new InstantMessage_Voice();
  InstantMessage_Image::default_instance_ = new InstantMessage_Image();
  InstantMessage_User::default_instance_ = new InstantMessage_User();
  InstantMessage_Video::default_instance_ = new InstantMessage_Video();
  InstantMessage_File::default_instance_ = new InstantMessage_File();
  InstantMessage_Group::default_instance_ = new InstantMessage_Group();
  InstantMessage_DiscoverItem::default_instance_ = new InstantMessage_DiscoverItem();
  P2PChat::default_instance_ = new P2PChat();
  GroupChat::default_instance_ = new GroupChat();
  GroupChat_Member::default_instance_ = new GroupChat_Member();
  IMP2PMessagePush::default_instance_ = new IMP2PMessagePush();
  IMP2PStatePush::default_instance_ = new IMP2PStatePush();
  IMGroupStatePush::default_instance_ = new IMGroupStatePush();
  GetP2PMessageRequest::default_instance_ = new GetP2PMessageRequest();
  GetGroupMessageRequest::default_instance_ = new GetGroupMessageRequest();
  GetMessageResponse::default_instance_ = new GetMessageResponse();
  SendP2PMessageRequest::default_instance_ = new SendP2PMessageRequest();
  SendP2PMessageResponse::default_instance_ = new SendP2PMessageResponse();
  GetP2PChatListRequest::default_instance_ = new GetP2PChatListRequest();
  GetP2PChatListResponse::default_instance_ = new GetP2PChatListResponse();
  GetGroupChatByIdRequest::default_instance_ = new GetGroupChatByIdRequest();
  GetGroupChatByIdResponse::default_instance_ = new GetGroupChatByIdResponse();
  CreateGroupChatRequest::default_instance_ = new CreateGroupChatRequest();
  CreateGroupChatResponse::default_instance_ = new CreateGroupChatResponse();
  SetGroupNameRequest::default_instance_ = new SetGroupNameRequest();
  SetGroupNameResponse::default_instance_ = new SetGroupNameResponse();
  JoinGroupChatRequest::default_instance_ = new JoinGroupChatRequest();
  JoinGroupChatResponse::default_instance_ = new JoinGroupChatResponse();
  LeaveGroupChatRequest::default_instance_ = new LeaveGroupChatRequest();
  LeaveGroupChatResponse::default_instance_ = new LeaveGroupChatResponse();
  SendGroupMessageRequest::default_instance_ = new SendGroupMessageRequest();
  SendGroupMessageResponse::default_instance_ = new SendGroupMessageResponse();
  GetGroupChatListRequest::default_instance_ = new GetGroupChatListRequest();
  GetGroupChatListResponse::default_instance_ = new GetGroupChatListResponse();
  InstantMessage::default_instance_->InitAsDefaultInstance();
  InstantMessage_Text::default_instance_->InitAsDefaultInstance();
  InstantMessage_Voice::default_instance_->InitAsDefaultInstance();
  InstantMessage_Image::default_instance_->InitAsDefaultInstance();
  InstantMessage_User::default_instance_->InitAsDefaultInstance();
  InstantMessage_Video::default_instance_->InitAsDefaultInstance();
  InstantMessage_File::default_instance_->InitAsDefaultInstance();
  InstantMessage_Group::default_instance_->InitAsDefaultInstance();
  InstantMessage_DiscoverItem::default_instance_->InitAsDefaultInstance();
  P2PChat::default_instance_->InitAsDefaultInstance();
  GroupChat::default_instance_->InitAsDefaultInstance();
  GroupChat_Member::default_instance_->InitAsDefaultInstance();
  IMP2PMessagePush::default_instance_->InitAsDefaultInstance();
  IMP2PStatePush::default_instance_->InitAsDefaultInstance();
  IMGroupStatePush::default_instance_->InitAsDefaultInstance();
  GetP2PMessageRequest::default_instance_->InitAsDefaultInstance();
  GetGroupMessageRequest::default_instance_->InitAsDefaultInstance();
  GetMessageResponse::default_instance_->InitAsDefaultInstance();
  SendP2PMessageRequest::default_instance_->InitAsDefaultInstance();
  SendP2PMessageResponse::default_instance_->InitAsDefaultInstance();
  GetP2PChatListRequest::default_instance_->InitAsDefaultInstance();
  GetP2PChatListResponse::default_instance_->InitAsDefaultInstance();
  GetGroupChatByIdRequest::default_instance_->InitAsDefaultInstance();
  GetGroupChatByIdResponse::default_instance_->InitAsDefaultInstance();
  CreateGroupChatRequest::default_instance_->InitAsDefaultInstance();
  CreateGroupChatResponse::default_instance_->InitAsDefaultInstance();
  SetGroupNameRequest::default_instance_->InitAsDefaultInstance();
  SetGroupNameResponse::default_instance_->InitAsDefaultInstance();
  JoinGroupChatRequest::default_instance_->InitAsDefaultInstance();
  JoinGroupChatResponse::default_instance_->InitAsDefaultInstance();
  LeaveGroupChatRequest::default_instance_->InitAsDefaultInstance();
  LeaveGroupChatResponse::default_instance_->InitAsDefaultInstance();
  SendGroupMessageRequest::default_instance_->InitAsDefaultInstance();
  SendGroupMessageResponse::default_instance_->InitAsDefaultInstance();
  GetGroupChatListRequest::default_instance_->InitAsDefaultInstance();
  GetGroupChatListResponse::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_im_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_im_2eproto_once_);
void protobuf_AddDesc_im_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_im_2eproto_once_,
                 &protobuf_AddDesc_im_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_im_2eproto {
  StaticDescriptorInitializer_im_2eproto() {
    protobuf_AddDesc_im_2eproto();
  }
} static_descriptor_initializer_im_2eproto_;
#endif

// ===================================================================

#ifndef _MSC_VER
const int InstantMessage_Text::kContentFieldNumber;
#endif  // !_MSC_VER

InstantMessage_Text::InstantMessage_Text()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:weizhu.im.InstantMessage.Text)
}

void InstantMessage_Text::InitAsDefaultInstance() {
}

InstantMessage_Text::InstantMessage_Text(const InstantMessage_Text& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:weizhu.im.InstantMessage.Text)
}

void InstantMessage_Text::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  content_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InstantMessage_Text::~InstantMessage_Text() {
  // @@protoc_insertion_point(destructor:weizhu.im.InstantMessage.Text)
  SharedDtor();
}

void InstantMessage_Text::SharedDtor() {
  if (content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete content_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void InstantMessage_Text::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const InstantMessage_Text& InstantMessage_Text::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_im_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_im_2eproto();
#endif
  return *default_instance_;
}

InstantMessage_Text* InstantMessage_Text::default_instance_ = NULL;

InstantMessage_Text* InstantMessage_Text::New() const {
  return new InstantMessage_Text;
}

void InstantMessage_Text::Clear() {
  if (has_content()) {
    if (content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      content_->clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool InstantMessage_Text::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:weizhu.im.InstantMessage.Text)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string content = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_content()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:weizhu.im.InstantMessage.Text)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:weizhu.im.InstantMessage.Text)
  return false;
#undef DO_
}

void InstantMessage_Text::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:weizhu.im.InstantMessage.Text)
  // required string content = 1;
  if (has_content()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->content(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:weizhu.im.InstantMessage.Text)
}

int InstantMessage_Text::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string content = 1;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->content());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InstantMessage_Text::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const InstantMessage_Text*>(&from));
}

void InstantMessage_Text::MergeFrom(const InstantMessage_Text& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_content()) {
      set_content(from.content());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void InstantMessage_Text::CopyFrom(const InstantMessage_Text& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InstantMessage_Text::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void InstantMessage_Text::Swap(InstantMessage_Text* other) {
  if (other != this) {
    std::swap(content_, other->content_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string InstantMessage_Text::GetTypeName() const {
  return "weizhu.im.InstantMessage.Text";
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int InstantMessage_Voice::kDataFieldNumber;
const int InstantMessage_Voice::kDurationFieldNumber;
#endif  // !_MSC_VER

InstantMessage_Voice::InstantMessage_Voice()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:weizhu.im.InstantMessage.Voice)
}

void InstantMessage_Voice::InitAsDefaultInstance() {
}

InstantMessage_Voice::InstantMessage_Voice(const InstantMessage_Voice& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:weizhu.im.InstantMessage.Voice)
}

void InstantMessage_Voice::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  duration_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InstantMessage_Voice::~InstantMessage_Voice() {
  // @@protoc_insertion_point(destructor:weizhu.im.InstantMessage.Voice)
  SharedDtor();
}

void InstantMessage_Voice::SharedDtor() {
  if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete data_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void InstantMessage_Voice::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const InstantMessage_Voice& InstantMessage_Voice::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_im_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_im_2eproto();
#endif
  return *default_instance_;
}

InstantMessage_Voice* InstantMessage_Voice::default_instance_ = NULL;

InstantMessage_Voice* InstantMessage_Voice::New() const {
  return new InstantMessage_Voice;
}

void InstantMessage_Voice::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_data()) {
      if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        data_->clear();
      }
    }
    duration_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool InstantMessage_Voice::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:weizhu.im.InstantMessage.Voice)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes data = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_duration;
        break;
      }

      // optional int32 duration = 2;
      case 2: {
        if (tag == 16) {
         parse_duration:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &duration_)));
          set_has_duration();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:weizhu.im.InstantMessage.Voice)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:weizhu.im.InstantMessage.Voice)
  return false;
#undef DO_
}

void InstantMessage_Voice::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:weizhu.im.InstantMessage.Voice)
  // required bytes data = 1;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->data(), output);
  }

  // optional int32 duration = 2;
  if (has_duration()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->duration(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:weizhu.im.InstantMessage.Voice)
}

int InstantMessage_Voice::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes data = 1;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }

    // optional int32 duration = 2;
    if (has_duration()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->duration());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InstantMessage_Voice::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const InstantMessage_Voice*>(&from));
}

void InstantMessage_Voice::MergeFrom(const InstantMessage_Voice& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_data()) {
      set_data(from.data());
    }
    if (from.has_duration()) {
      set_duration(from.duration());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void InstantMessage_Voice::CopyFrom(const InstantMessage_Voice& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InstantMessage_Voice::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void InstantMessage_Voice::Swap(InstantMessage_Voice* other) {
  if (other != this) {
    std::swap(data_, other->data_);
    std::swap(duration_, other->duration_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string InstantMessage_Voice::GetTypeName() const {
  return "weizhu.im.InstantMessage.Voice";
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int InstantMessage_Image::kNameFieldNumber;
#endif  // !_MSC_VER

InstantMessage_Image::InstantMessage_Image()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:weizhu.im.InstantMessage.Image)
}

void InstantMessage_Image::InitAsDefaultInstance() {
}

InstantMessage_Image::InstantMessage_Image(const InstantMessage_Image& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:weizhu.im.InstantMessage.Image)
}

void InstantMessage_Image::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InstantMessage_Image::~InstantMessage_Image() {
  // @@protoc_insertion_point(destructor:weizhu.im.InstantMessage.Image)
  SharedDtor();
}

void InstantMessage_Image::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void InstantMessage_Image::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const InstantMessage_Image& InstantMessage_Image::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_im_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_im_2eproto();
#endif
  return *default_instance_;
}

InstantMessage_Image* InstantMessage_Image::default_instance_ = NULL;

InstantMessage_Image* InstantMessage_Image::New() const {
  return new InstantMessage_Image;
}

void InstantMessage_Image::Clear() {
  if (has_name()) {
    if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      name_->clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool InstantMessage_Image::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:weizhu.im.InstantMessage.Image)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:weizhu.im.InstantMessage.Image)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:weizhu.im.InstantMessage.Image)
  return false;
#undef DO_
}

void InstantMessage_Image::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:weizhu.im.InstantMessage.Image)
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:weizhu.im.InstantMessage.Image)
}

int InstantMessage_Image::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InstantMessage_Image::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const InstantMessage_Image*>(&from));
}

void InstantMessage_Image::MergeFrom(const InstantMessage_Image& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void InstantMessage_Image::CopyFrom(const InstantMessage_Image& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InstantMessage_Image::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void InstantMessage_Image::Swap(InstantMessage_Image* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string InstantMessage_Image::GetTypeName() const {
  return "weizhu.im.InstantMessage.Image";
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int InstantMessage_User::kUserIdFieldNumber;
#endif  // !_MSC_VER

InstantMessage_User::InstantMessage_User()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:weizhu.im.InstantMessage.User)
}

void InstantMessage_User::InitAsDefaultInstance() {
}

InstantMessage_User::InstantMessage_User(const InstantMessage_User& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:weizhu.im.InstantMessage.User)
}

void InstantMessage_User::SharedCtor() {
  _cached_size_ = 0;
  user_id_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InstantMessage_User::~InstantMessage_User() {
  // @@protoc_insertion_point(destructor:weizhu.im.InstantMessage.User)
  SharedDtor();
}

void InstantMessage_User::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void InstantMessage_User::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const InstantMessage_User& InstantMessage_User::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_im_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_im_2eproto();
#endif
  return *default_instance_;
}

InstantMessage_User* InstantMessage_User::default_instance_ = NULL;

InstantMessage_User* InstantMessage_User::New() const {
  return new InstantMessage_User;
}

void InstantMessage_User::Clear() {
  user_id_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool InstantMessage_User::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:weizhu.im.InstantMessage.User)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 user_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:weizhu.im.InstantMessage.User)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:weizhu.im.InstantMessage.User)
  return false;
#undef DO_
}

void InstantMessage_User::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:weizhu.im.InstantMessage.User)
  // required int64 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->user_id(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:weizhu.im.InstantMessage.User)
}

int InstantMessage_User::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->user_id());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InstantMessage_User::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const InstantMessage_User*>(&from));
}

void InstantMessage_User::MergeFrom(const InstantMessage_User& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void InstantMessage_User::CopyFrom(const InstantMessage_User& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InstantMessage_User::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void InstantMessage_User::Swap(InstantMessage_User* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string InstantMessage_User::GetTypeName() const {
  return "weizhu.im.InstantMessage.User";
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int InstantMessage_Video::kNameFieldNumber;
const int InstantMessage_Video::kTypeFieldNumber;
const int InstantMessage_Video::kSizeFieldNumber;
const int InstantMessage_Video::kTimeFieldNumber;
const int InstantMessage_Video::kImageNameFieldNumber;
#endif  // !_MSC_VER

InstantMessage_Video::InstantMessage_Video()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:weizhu.im.InstantMessage.Video)
}

void InstantMessage_Video::InitAsDefaultInstance() {
}

InstantMessage_Video::InstantMessage_Video(const InstantMessage_Video& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:weizhu.im.InstantMessage.Video)
}

void InstantMessage_Video::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  size_ = 0;
  time_ = 0;
  image_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InstantMessage_Video::~InstantMessage_Video() {
  // @@protoc_insertion_point(destructor:weizhu.im.InstantMessage.Video)
  SharedDtor();
}

void InstantMessage_Video::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete type_;
  }
  if (image_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete image_name_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void InstantMessage_Video::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const InstantMessage_Video& InstantMessage_Video::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_im_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_im_2eproto();
#endif
  return *default_instance_;
}

InstantMessage_Video* InstantMessage_Video::default_instance_ = NULL;

InstantMessage_Video* InstantMessage_Video::New() const {
  return new InstantMessage_Video;
}

void InstantMessage_Video::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<InstantMessage_Video*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(size_, time_);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    if (has_type()) {
      if (type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        type_->clear();
      }
    }
    if (has_image_name()) {
      if (image_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        image_name_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool InstantMessage_Video::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:weizhu.im.InstantMessage.Video)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_type;
        break;
      }

      // required string type = 2;
      case 2: {
        if (tag == 18) {
         parse_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_size;
        break;
      }

      // required int32 size = 3;
      case 3: {
        if (tag == 24) {
         parse_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &size_)));
          set_has_size();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_time;
        break;
      }

      // required int32 time = 4;
      case 4: {
        if (tag == 32) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_image_name;
        break;
      }

      // required string image_name = 5;
      case 5: {
        if (tag == 42) {
         parse_image_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_image_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:weizhu.im.InstantMessage.Video)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:weizhu.im.InstantMessage.Video)
  return false;
#undef DO_
}

void InstantMessage_Video::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:weizhu.im.InstantMessage.Video)
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // required string type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->type(), output);
  }

  // required int32 size = 3;
  if (has_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->size(), output);
  }

  // required int32 time = 4;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->time(), output);
  }

  // required string image_name = 5;
  if (has_image_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->image_name(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:weizhu.im.InstantMessage.Video)
}

int InstantMessage_Video::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required string type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->type());
    }

    // required int32 size = 3;
    if (has_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->size());
    }

    // required int32 time = 4;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->time());
    }

    // required string image_name = 5;
    if (has_image_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->image_name());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InstantMessage_Video::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const InstantMessage_Video*>(&from));
}

void InstantMessage_Video::MergeFrom(const InstantMessage_Video& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_size()) {
      set_size(from.size());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_image_name()) {
      set_image_name(from.image_name());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void InstantMessage_Video::CopyFrom(const InstantMessage_Video& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InstantMessage_Video::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void InstantMessage_Video::Swap(InstantMessage_Video* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(type_, other->type_);
    std::swap(size_, other->size_);
    std::swap(time_, other->time_);
    std::swap(image_name_, other->image_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string InstantMessage_Video::GetTypeName() const {
  return "weizhu.im.InstantMessage.Video";
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int InstantMessage_File::kNameFieldNumber;
const int InstantMessage_File::kOrginalNameFieldNumber;
#endif  // !_MSC_VER

InstantMessage_File::InstantMessage_File()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:weizhu.im.InstantMessage.File)
}

void InstantMessage_File::InitAsDefaultInstance() {
}

InstantMessage_File::InstantMessage_File(const InstantMessage_File& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:weizhu.im.InstantMessage.File)
}

void InstantMessage_File::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  orginal_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InstantMessage_File::~InstantMessage_File() {
  // @@protoc_insertion_point(destructor:weizhu.im.InstantMessage.File)
  SharedDtor();
}

void InstantMessage_File::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (orginal_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete orginal_name_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void InstantMessage_File::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const InstantMessage_File& InstantMessage_File::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_im_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_im_2eproto();
#endif
  return *default_instance_;
}

InstantMessage_File* InstantMessage_File::default_instance_ = NULL;

InstantMessage_File* InstantMessage_File::New() const {
  return new InstantMessage_File;
}

void InstantMessage_File::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    if (has_orginal_name()) {
      if (orginal_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        orginal_name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool InstantMessage_File::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:weizhu.im.InstantMessage.File)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_orginal_name;
        break;
      }

      // required string orginal_name = 2;
      case 2: {
        if (tag == 18) {
         parse_orginal_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_orginal_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:weizhu.im.InstantMessage.File)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:weizhu.im.InstantMessage.File)
  return false;
#undef DO_
}

void InstantMessage_File::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:weizhu.im.InstantMessage.File)
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // required string orginal_name = 2;
  if (has_orginal_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->orginal_name(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:weizhu.im.InstantMessage.File)
}

int InstantMessage_File::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required string orginal_name = 2;
    if (has_orginal_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->orginal_name());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InstantMessage_File::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const InstantMessage_File*>(&from));
}

void InstantMessage_File::MergeFrom(const InstantMessage_File& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_orginal_name()) {
      set_orginal_name(from.orginal_name());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void InstantMessage_File::CopyFrom(const InstantMessage_File& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InstantMessage_File::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void InstantMessage_File::Swap(InstantMessage_File* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(orginal_name_, other->orginal_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string InstantMessage_File::GetTypeName() const {
  return "weizhu.im.InstantMessage.File";
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int InstantMessage_Group::kGroupNameFieldNumber;
const int InstantMessage_Group::kJoinUserIdFieldNumber;
const int InstantMessage_Group::kLeaveUserIdFieldNumber;
#endif  // !_MSC_VER

InstantMessage_Group::InstantMessage_Group()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:weizhu.im.InstantMessage.Group)
}

void InstantMessage_Group::InitAsDefaultInstance() {
}

InstantMessage_Group::InstantMessage_Group(const InstantMessage_Group& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:weizhu.im.InstantMessage.Group)
}

void InstantMessage_Group::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  group_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InstantMessage_Group::~InstantMessage_Group() {
  // @@protoc_insertion_point(destructor:weizhu.im.InstantMessage.Group)
  SharedDtor();
}

void InstantMessage_Group::SharedDtor() {
  if (group_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete group_name_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void InstantMessage_Group::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const InstantMessage_Group& InstantMessage_Group::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_im_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_im_2eproto();
#endif
  return *default_instance_;
}

InstantMessage_Group* InstantMessage_Group::default_instance_ = NULL;

InstantMessage_Group* InstantMessage_Group::New() const {
  return new InstantMessage_Group;
}

void InstantMessage_Group::Clear() {
  if (has_group_name()) {
    if (group_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      group_name_->clear();
    }
  }
  join_user_id_.Clear();
  leave_user_id_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool InstantMessage_Group::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:weizhu.im.InstantMessage.Group)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string group_name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_group_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_join_user_id;
        break;
      }

      // repeated int64 join_user_id = 2;
      case 2: {
        if (tag == 16) {
         parse_join_user_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 16, input, this->mutable_join_user_id())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_join_user_id())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_join_user_id;
        if (input->ExpectTag(24)) goto parse_leave_user_id;
        break;
      }

      // repeated int64 leave_user_id = 3;
      case 3: {
        if (tag == 24) {
         parse_leave_user_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 24, input, this->mutable_leave_user_id())));
        } else if (tag == 26) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_leave_user_id())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_leave_user_id;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:weizhu.im.InstantMessage.Group)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:weizhu.im.InstantMessage.Group)
  return false;
#undef DO_
}

void InstantMessage_Group::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:weizhu.im.InstantMessage.Group)
  // optional string group_name = 1;
  if (has_group_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->group_name(), output);
  }

  // repeated int64 join_user_id = 2;
  for (int i = 0; i < this->join_user_id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      2, this->join_user_id(i), output);
  }

  // repeated int64 leave_user_id = 3;
  for (int i = 0; i < this->leave_user_id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      3, this->leave_user_id(i), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:weizhu.im.InstantMessage.Group)
}

int InstantMessage_Group::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string group_name = 1;
    if (has_group_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->group_name());
    }

  }
  // repeated int64 join_user_id = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->join_user_id_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->join_user_id(i));
    }
    total_size += 1 * this->join_user_id_size() + data_size;
  }

  // repeated int64 leave_user_id = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->leave_user_id_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->leave_user_id(i));
    }
    total_size += 1 * this->leave_user_id_size() + data_size;
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InstantMessage_Group::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const InstantMessage_Group*>(&from));
}

void InstantMessage_Group::MergeFrom(const InstantMessage_Group& from) {
  GOOGLE_CHECK_NE(&from, this);
  join_user_id_.MergeFrom(from.join_user_id_);
  leave_user_id_.MergeFrom(from.leave_user_id_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_group_name()) {
      set_group_name(from.group_name());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void InstantMessage_Group::CopyFrom(const InstantMessage_Group& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InstantMessage_Group::IsInitialized() const {

  return true;
}

void InstantMessage_Group::Swap(InstantMessage_Group* other) {
  if (other != this) {
    std::swap(group_name_, other->group_name_);
    join_user_id_.Swap(&other->join_user_id_);
    leave_user_id_.Swap(&other->leave_user_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string InstantMessage_Group::GetTypeName() const {
  return "weizhu.im.InstantMessage.Group";
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int InstantMessage_DiscoverItem::kItemIdFieldNumber;
#endif  // !_MSC_VER

InstantMessage_DiscoverItem::InstantMessage_DiscoverItem()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:weizhu.im.InstantMessage.DiscoverItem)
}

void InstantMessage_DiscoverItem::InitAsDefaultInstance() {
}

InstantMessage_DiscoverItem::InstantMessage_DiscoverItem(const InstantMessage_DiscoverItem& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:weizhu.im.InstantMessage.DiscoverItem)
}

void InstantMessage_DiscoverItem::SharedCtor() {
  _cached_size_ = 0;
  item_id_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InstantMessage_DiscoverItem::~InstantMessage_DiscoverItem() {
  // @@protoc_insertion_point(destructor:weizhu.im.InstantMessage.DiscoverItem)
  SharedDtor();
}

void InstantMessage_DiscoverItem::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void InstantMessage_DiscoverItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const InstantMessage_DiscoverItem& InstantMessage_DiscoverItem::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_im_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_im_2eproto();
#endif
  return *default_instance_;
}

InstantMessage_DiscoverItem* InstantMessage_DiscoverItem::default_instance_ = NULL;

InstantMessage_DiscoverItem* InstantMessage_DiscoverItem::New() const {
  return new InstantMessage_DiscoverItem;
}

void InstantMessage_DiscoverItem::Clear() {
  item_id_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool InstantMessage_DiscoverItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:weizhu.im.InstantMessage.DiscoverItem)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 item_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &item_id_)));
          set_has_item_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:weizhu.im.InstantMessage.DiscoverItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:weizhu.im.InstantMessage.DiscoverItem)
  return false;
#undef DO_
}

void InstantMessage_DiscoverItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:weizhu.im.InstantMessage.DiscoverItem)
  // required int64 item_id = 1;
  if (has_item_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->item_id(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:weizhu.im.InstantMessage.DiscoverItem)
}

int InstantMessage_DiscoverItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 item_id = 1;
    if (has_item_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->item_id());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InstantMessage_DiscoverItem::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const InstantMessage_DiscoverItem*>(&from));
}

void InstantMessage_DiscoverItem::MergeFrom(const InstantMessage_DiscoverItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_item_id()) {
      set_item_id(from.item_id());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void InstantMessage_DiscoverItem::CopyFrom(const InstantMessage_DiscoverItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InstantMessage_DiscoverItem::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void InstantMessage_DiscoverItem::Swap(InstantMessage_DiscoverItem* other) {
  if (other != this) {
    std::swap(item_id_, other->item_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string InstantMessage_DiscoverItem::GetTypeName() const {
  return "weizhu.im.InstantMessage.DiscoverItem";
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int InstantMessage::kMsgSeqFieldNumber;
const int InstantMessage::kMsgTimeFieldNumber;
const int InstantMessage::kFromUserIdFieldNumber;
const int InstantMessage::kTextFieldNumber;
const int InstantMessage::kVoiceFieldNumber;
const int InstantMessage::kImageFieldNumber;
const int InstantMessage::kUserFieldNumber;
const int InstantMessage::kVideoFieldNumber;
const int InstantMessage::kFileFieldNumber;
const int InstantMessage::kGroupFieldNumber;
const int InstantMessage::kDiscoverItemFieldNumber;
#endif  // !_MSC_VER

InstantMessage::InstantMessage()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:weizhu.im.InstantMessage)
}

void InstantMessage::InitAsDefaultInstance() {
}

InstantMessage::InstantMessage(const InstantMessage& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:weizhu.im.InstantMessage)
}

void InstantMessage::SharedCtor() {
  _cached_size_ = 0;
  msg_seq_ = GOOGLE_LONGLONG(0);
  msg_time_ = 0;
  from_user_id_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  clear_has_msg_type();
}

InstantMessage::~InstantMessage() {
  // @@protoc_insertion_point(destructor:weizhu.im.InstantMessage)
  SharedDtor();
}

void InstantMessage::SharedDtor() {
  if (has_msg_type()) {
    clear_msg_type();
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void InstantMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const InstantMessage& InstantMessage::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_im_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_im_2eproto();
#endif
  return *default_instance_;
}

InstantMessage* InstantMessage::default_instance_ = NULL;

InstantMessage* InstantMessage::New() const {
  return new InstantMessage;
}

void InstantMessage::clear_msg_type() {
  switch(msg_type_case()) {
    case kText: {
      delete msg_type_.text_;
      break;
    }
    case kVoice: {
      delete msg_type_.voice_;
      break;
    }
    case kImage: {
      delete msg_type_.image_;
      break;
    }
    case kUser: {
      delete msg_type_.user_;
      break;
    }
    case kVideo: {
      delete msg_type_.video_;
      break;
    }
    case kFile: {
      delete msg_type_.file_;
      break;
    }
    case kGroup: {
      delete msg_type_.group_;
      break;
    }
    case kDiscoverItem: {
      delete msg_type_.discover_item_;
      break;
    }
    case MSG_TYPE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = MSG_TYPE_NOT_SET;
}


void InstantMessage::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<InstantMessage*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(msg_seq_, msg_time_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  clear_msg_type();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool InstantMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:weizhu.im.InstantMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 msg_seq = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &msg_seq_)));
          set_has_msg_seq();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_msg_time;
        break;
      }

      // required int32 msg_time = 2;
      case 2: {
        if (tag == 16) {
         parse_msg_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &msg_time_)));
          set_has_msg_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_from_user_id;
        break;
      }

      // required int64 from_user_id = 3;
      case 3: {
        if (tag == 24) {
         parse_from_user_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &from_user_id_)));
          set_has_from_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_text;
        break;
      }

      // optional .weizhu.im.InstantMessage.Text text = 5;
      case 5: {
        if (tag == 42) {
         parse_text:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_text()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_voice;
        break;
      }

      // optional .weizhu.im.InstantMessage.Voice voice = 6;
      case 6: {
        if (tag == 50) {
         parse_voice:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_voice()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_image;
        break;
      }

      // optional .weizhu.im.InstantMessage.Image image = 7;
      case 7: {
        if (tag == 58) {
         parse_image:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_image()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_user;
        break;
      }

      // optional .weizhu.im.InstantMessage.User user = 8;
      case 8: {
        if (tag == 66) {
         parse_user:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_user()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_video;
        break;
      }

      // optional .weizhu.im.InstantMessage.Video video = 9;
      case 9: {
        if (tag == 74) {
         parse_video:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_video()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_file;
        break;
      }

      // optional .weizhu.im.InstantMessage.File file = 10;
      case 10: {
        if (tag == 82) {
         parse_file:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_file()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_group;
        break;
      }

      // optional .weizhu.im.InstantMessage.Group group = 11;
      case 11: {
        if (tag == 90) {
         parse_group:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_group()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_discover_item;
        break;
      }

      // optional .weizhu.im.InstantMessage.DiscoverItem discover_item = 12;
      case 12: {
        if (tag == 98) {
         parse_discover_item:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_discover_item()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:weizhu.im.InstantMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:weizhu.im.InstantMessage)
  return false;
#undef DO_
}

void InstantMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:weizhu.im.InstantMessage)
  // required int64 msg_seq = 1;
  if (has_msg_seq()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->msg_seq(), output);
  }

  // required int32 msg_time = 2;
  if (has_msg_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->msg_time(), output);
  }

  // required int64 from_user_id = 3;
  if (has_from_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->from_user_id(), output);
  }

  // optional .weizhu.im.InstantMessage.Text text = 5;
  if (has_text()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      5, this->text(), output);
  }

  // optional .weizhu.im.InstantMessage.Voice voice = 6;
  if (has_voice()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      6, this->voice(), output);
  }

  // optional .weizhu.im.InstantMessage.Image image = 7;
  if (has_image()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      7, this->image(), output);
  }

  // optional .weizhu.im.InstantMessage.User user = 8;
  if (has_user()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      8, this->user(), output);
  }

  // optional .weizhu.im.InstantMessage.Video video = 9;
  if (has_video()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      9, this->video(), output);
  }

  // optional .weizhu.im.InstantMessage.File file = 10;
  if (has_file()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      10, this->file(), output);
  }

  // optional .weizhu.im.InstantMessage.Group group = 11;
  if (has_group()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      11, this->group(), output);
  }

  // optional .weizhu.im.InstantMessage.DiscoverItem discover_item = 12;
  if (has_discover_item()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      12, this->discover_item(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:weizhu.im.InstantMessage)
}

int InstantMessage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 msg_seq = 1;
    if (has_msg_seq()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->msg_seq());
    }

    // required int32 msg_time = 2;
    if (has_msg_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->msg_time());
    }

    // required int64 from_user_id = 3;
    if (has_from_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->from_user_id());
    }

  }
  switch (msg_type_case()) {
    // optional .weizhu.im.InstantMessage.Text text = 5;
    case kText: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->text());
      break;
    }
    // optional .weizhu.im.InstantMessage.Voice voice = 6;
    case kVoice: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->voice());
      break;
    }
    // optional .weizhu.im.InstantMessage.Image image = 7;
    case kImage: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->image());
      break;
    }
    // optional .weizhu.im.InstantMessage.User user = 8;
    case kUser: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->user());
      break;
    }
    // optional .weizhu.im.InstantMessage.Video video = 9;
    case kVideo: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->video());
      break;
    }
    // optional .weizhu.im.InstantMessage.File file = 10;
    case kFile: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->file());
      break;
    }
    // optional .weizhu.im.InstantMessage.Group group = 11;
    case kGroup: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->group());
      break;
    }
    // optional .weizhu.im.InstantMessage.DiscoverItem discover_item = 12;
    case kDiscoverItem: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->discover_item());
      break;
    }
    case MSG_TYPE_NOT_SET: {
      break;
    }
  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InstantMessage::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const InstantMessage*>(&from));
}

void InstantMessage::MergeFrom(const InstantMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  switch (from.msg_type_case()) {
    case kText: {
      mutable_text()->::weizhu::im::InstantMessage_Text::MergeFrom(from.text());
      break;
    }
    case kVoice: {
      mutable_voice()->::weizhu::im::InstantMessage_Voice::MergeFrom(from.voice());
      break;
    }
    case kImage: {
      mutable_image()->::weizhu::im::InstantMessage_Image::MergeFrom(from.image());
      break;
    }
    case kUser: {
      mutable_user()->::weizhu::im::InstantMessage_User::MergeFrom(from.user());
      break;
    }
    case kVideo: {
      mutable_video()->::weizhu::im::InstantMessage_Video::MergeFrom(from.video());
      break;
    }
    case kFile: {
      mutable_file()->::weizhu::im::InstantMessage_File::MergeFrom(from.file());
      break;
    }
    case kGroup: {
      mutable_group()->::weizhu::im::InstantMessage_Group::MergeFrom(from.group());
      break;
    }
    case kDiscoverItem: {
      mutable_discover_item()->::weizhu::im::InstantMessage_DiscoverItem::MergeFrom(from.discover_item());
      break;
    }
    case MSG_TYPE_NOT_SET: {
      break;
    }
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msg_seq()) {
      set_msg_seq(from.msg_seq());
    }
    if (from.has_msg_time()) {
      set_msg_time(from.msg_time());
    }
    if (from.has_from_user_id()) {
      set_from_user_id(from.from_user_id());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void InstantMessage::CopyFrom(const InstantMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InstantMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_text()) {
    if (!this->text().IsInitialized()) return false;
  }
  if (has_voice()) {
    if (!this->voice().IsInitialized()) return false;
  }
  if (has_image()) {
    if (!this->image().IsInitialized()) return false;
  }
  if (has_user()) {
    if (!this->user().IsInitialized()) return false;
  }
  if (has_video()) {
    if (!this->video().IsInitialized()) return false;
  }
  if (has_file()) {
    if (!this->file().IsInitialized()) return false;
  }
  if (has_discover_item()) {
    if (!this->discover_item().IsInitialized()) return false;
  }
  return true;
}

void InstantMessage::Swap(InstantMessage* other) {
  if (other != this) {
    std::swap(msg_seq_, other->msg_seq_);
    std::swap(msg_time_, other->msg_time_);
    std::swap(from_user_id_, other->from_user_id_);
    std::swap(msg_type_, other->msg_type_);
    std::swap(_oneof_case_[0], other->_oneof_case_[0]);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string InstantMessage::GetTypeName() const {
  return "weizhu.im.InstantMessage";
}


// ===================================================================

#ifndef _MSC_VER
const int P2PChat::kUserIdFieldNumber;
const int P2PChat::kLatestMsgFieldNumber;
#endif  // !_MSC_VER

P2PChat::P2PChat()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:weizhu.im.P2PChat)
}

void P2PChat::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  latest_msg_ = const_cast< ::weizhu::im::InstantMessage*>(
      ::weizhu::im::InstantMessage::internal_default_instance());
#else
  latest_msg_ = const_cast< ::weizhu::im::InstantMessage*>(&::weizhu::im::InstantMessage::default_instance());
#endif
}

P2PChat::P2PChat(const P2PChat& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:weizhu.im.P2PChat)
}

void P2PChat::SharedCtor() {
  _cached_size_ = 0;
  user_id_ = GOOGLE_LONGLONG(0);
  latest_msg_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

P2PChat::~P2PChat() {
  // @@protoc_insertion_point(destructor:weizhu.im.P2PChat)
  SharedDtor();
}

void P2PChat::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete latest_msg_;
  }
}

void P2PChat::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const P2PChat& P2PChat::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_im_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_im_2eproto();
#endif
  return *default_instance_;
}

P2PChat* P2PChat::default_instance_ = NULL;

P2PChat* P2PChat::New() const {
  return new P2PChat;
}

void P2PChat::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    user_id_ = GOOGLE_LONGLONG(0);
    if (has_latest_msg()) {
      if (latest_msg_ != NULL) latest_msg_->::weizhu::im::InstantMessage::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool P2PChat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:weizhu.im.P2PChat)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 user_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_latest_msg;
        break;
      }

      // required .weizhu.im.InstantMessage latest_msg = 2;
      case 2: {
        if (tag == 18) {
         parse_latest_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_latest_msg()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:weizhu.im.P2PChat)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:weizhu.im.P2PChat)
  return false;
#undef DO_
}

void P2PChat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:weizhu.im.P2PChat)
  // required int64 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->user_id(), output);
  }

  // required .weizhu.im.InstantMessage latest_msg = 2;
  if (has_latest_msg()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->latest_msg(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:weizhu.im.P2PChat)
}

int P2PChat::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->user_id());
    }

    // required .weizhu.im.InstantMessage latest_msg = 2;
    if (has_latest_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->latest_msg());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void P2PChat::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const P2PChat*>(&from));
}

void P2PChat::MergeFrom(const P2PChat& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_latest_msg()) {
      mutable_latest_msg()->::weizhu::im::InstantMessage::MergeFrom(from.latest_msg());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void P2PChat::CopyFrom(const P2PChat& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool P2PChat::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_latest_msg()) {
    if (!this->latest_msg().IsInitialized()) return false;
  }
  return true;
}

void P2PChat::Swap(P2PChat* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(latest_msg_, other->latest_msg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string P2PChat::GetTypeName() const {
  return "weizhu.im.P2PChat";
}


// ===================================================================

#ifndef _MSC_VER
const int GroupChat_Member::kUserIdFieldNumber;
const int GroupChat_Member::kJoinMsgSeqFieldNumber;
#endif  // !_MSC_VER

GroupChat_Member::GroupChat_Member()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:weizhu.im.GroupChat.Member)
}

void GroupChat_Member::InitAsDefaultInstance() {
}

GroupChat_Member::GroupChat_Member(const GroupChat_Member& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:weizhu.im.GroupChat.Member)
}

void GroupChat_Member::SharedCtor() {
  _cached_size_ = 0;
  user_id_ = GOOGLE_LONGLONG(0);
  join_msg_seq_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GroupChat_Member::~GroupChat_Member() {
  // @@protoc_insertion_point(destructor:weizhu.im.GroupChat.Member)
  SharedDtor();
}

void GroupChat_Member::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void GroupChat_Member::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GroupChat_Member& GroupChat_Member::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_im_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_im_2eproto();
#endif
  return *default_instance_;
}

GroupChat_Member* GroupChat_Member::default_instance_ = NULL;

GroupChat_Member* GroupChat_Member::New() const {
  return new GroupChat_Member;
}

void GroupChat_Member::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GroupChat_Member*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(user_id_, join_msg_seq_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool GroupChat_Member::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:weizhu.im.GroupChat.Member)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 user_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_join_msg_seq;
        break;
      }

      // required int64 join_msg_seq = 2;
      case 2: {
        if (tag == 16) {
         parse_join_msg_seq:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &join_msg_seq_)));
          set_has_join_msg_seq();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:weizhu.im.GroupChat.Member)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:weizhu.im.GroupChat.Member)
  return false;
#undef DO_
}

void GroupChat_Member::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:weizhu.im.GroupChat.Member)
  // required int64 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->user_id(), output);
  }

  // required int64 join_msg_seq = 2;
  if (has_join_msg_seq()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->join_msg_seq(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:weizhu.im.GroupChat.Member)
}

int GroupChat_Member::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->user_id());
    }

    // required int64 join_msg_seq = 2;
    if (has_join_msg_seq()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->join_msg_seq());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GroupChat_Member::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GroupChat_Member*>(&from));
}

void GroupChat_Member::MergeFrom(const GroupChat_Member& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_join_msg_seq()) {
      set_join_msg_seq(from.join_msg_seq());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void GroupChat_Member::CopyFrom(const GroupChat_Member& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GroupChat_Member::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void GroupChat_Member::Swap(GroupChat_Member* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(join_msg_seq_, other->join_msg_seq_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string GroupChat_Member::GetTypeName() const {
  return "weizhu.im.GroupChat.Member";
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int GroupChat::kGroupIdFieldNumber;
const int GroupChat::kGroupNameFieldNumber;
const int GroupChat::kMemberFieldNumber;
const int GroupChat::kLatestMsgFieldNumber;
#endif  // !_MSC_VER

GroupChat::GroupChat()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:weizhu.im.GroupChat)
}

void GroupChat::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  latest_msg_ = const_cast< ::weizhu::im::InstantMessage*>(
      ::weizhu::im::InstantMessage::internal_default_instance());
#else
  latest_msg_ = const_cast< ::weizhu::im::InstantMessage*>(&::weizhu::im::InstantMessage::default_instance());
#endif
}

GroupChat::GroupChat(const GroupChat& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:weizhu.im.GroupChat)
}

void GroupChat::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  group_id_ = GOOGLE_LONGLONG(0);
  group_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  latest_msg_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GroupChat::~GroupChat() {
  // @@protoc_insertion_point(destructor:weizhu.im.GroupChat)
  SharedDtor();
}

void GroupChat::SharedDtor() {
  if (group_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete group_name_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete latest_msg_;
  }
}

void GroupChat::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GroupChat& GroupChat::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_im_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_im_2eproto();
#endif
  return *default_instance_;
}

GroupChat* GroupChat::default_instance_ = NULL;

GroupChat* GroupChat::New() const {
  return new GroupChat;
}

void GroupChat::Clear() {
  if (_has_bits_[0 / 32] & 11) {
    group_id_ = GOOGLE_LONGLONG(0);
    if (has_group_name()) {
      if (group_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        group_name_->clear();
      }
    }
    if (has_latest_msg()) {
      if (latest_msg_ != NULL) latest_msg_->::weizhu::im::InstantMessage::Clear();
    }
  }
  member_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool GroupChat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:weizhu.im.GroupChat)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 group_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &group_id_)));
          set_has_group_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_group_name;
        break;
      }

      // optional string group_name = 2;
      case 2: {
        if (tag == 18) {
         parse_group_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_group_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_member;
        break;
      }

      // repeated .weizhu.im.GroupChat.Member member = 3;
      case 3: {
        if (tag == 26) {
         parse_member:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_member()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_member;
        if (input->ExpectTag(34)) goto parse_latest_msg;
        break;
      }

      // optional .weizhu.im.InstantMessage latest_msg = 4;
      case 4: {
        if (tag == 34) {
         parse_latest_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_latest_msg()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:weizhu.im.GroupChat)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:weizhu.im.GroupChat)
  return false;
#undef DO_
}

void GroupChat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:weizhu.im.GroupChat)
  // required int64 group_id = 1;
  if (has_group_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->group_id(), output);
  }

  // optional string group_name = 2;
  if (has_group_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->group_name(), output);
  }

  // repeated .weizhu.im.GroupChat.Member member = 3;
  for (int i = 0; i < this->member_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->member(i), output);
  }

  // optional .weizhu.im.InstantMessage latest_msg = 4;
  if (has_latest_msg()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, this->latest_msg(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:weizhu.im.GroupChat)
}

int GroupChat::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 group_id = 1;
    if (has_group_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->group_id());
    }

    // optional string group_name = 2;
    if (has_group_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->group_name());
    }

    // optional .weizhu.im.InstantMessage latest_msg = 4;
    if (has_latest_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->latest_msg());
    }

  }
  // repeated .weizhu.im.GroupChat.Member member = 3;
  total_size += 1 * this->member_size();
  for (int i = 0; i < this->member_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->member(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GroupChat::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GroupChat*>(&from));
}

void GroupChat::MergeFrom(const GroupChat& from) {
  GOOGLE_CHECK_NE(&from, this);
  member_.MergeFrom(from.member_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_group_id()) {
      set_group_id(from.group_id());
    }
    if (from.has_group_name()) {
      set_group_name(from.group_name());
    }
    if (from.has_latest_msg()) {
      mutable_latest_msg()->::weizhu::im::InstantMessage::MergeFrom(from.latest_msg());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void GroupChat::CopyFrom(const GroupChat& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GroupChat::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->member())) return false;
  if (has_latest_msg()) {
    if (!this->latest_msg().IsInitialized()) return false;
  }
  return true;
}

void GroupChat::Swap(GroupChat* other) {
  if (other != this) {
    std::swap(group_id_, other->group_id_);
    std::swap(group_name_, other->group_name_);
    member_.Swap(&other->member_);
    std::swap(latest_msg_, other->latest_msg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string GroupChat::GetTypeName() const {
  return "weizhu.im.GroupChat";
}


// ===================================================================

#ifndef _MSC_VER
const int IMP2PMessagePush::kUserIdFieldNumber;
const int IMP2PMessagePush::kMsgFieldNumber;
#endif  // !_MSC_VER

IMP2PMessagePush::IMP2PMessagePush()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:weizhu.im.IMP2PMessagePush)
}

void IMP2PMessagePush::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  msg_ = const_cast< ::weizhu::im::InstantMessage*>(
      ::weizhu::im::InstantMessage::internal_default_instance());
#else
  msg_ = const_cast< ::weizhu::im::InstantMessage*>(&::weizhu::im::InstantMessage::default_instance());
#endif
}

IMP2PMessagePush::IMP2PMessagePush(const IMP2PMessagePush& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:weizhu.im.IMP2PMessagePush)
}

void IMP2PMessagePush::SharedCtor() {
  _cached_size_ = 0;
  user_id_ = GOOGLE_LONGLONG(0);
  msg_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IMP2PMessagePush::~IMP2PMessagePush() {
  // @@protoc_insertion_point(destructor:weizhu.im.IMP2PMessagePush)
  SharedDtor();
}

void IMP2PMessagePush::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete msg_;
  }
}

void IMP2PMessagePush::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const IMP2PMessagePush& IMP2PMessagePush::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_im_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_im_2eproto();
#endif
  return *default_instance_;
}

IMP2PMessagePush* IMP2PMessagePush::default_instance_ = NULL;

IMP2PMessagePush* IMP2PMessagePush::New() const {
  return new IMP2PMessagePush;
}

void IMP2PMessagePush::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    user_id_ = GOOGLE_LONGLONG(0);
    if (has_msg()) {
      if (msg_ != NULL) msg_->::weizhu::im::InstantMessage::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool IMP2PMessagePush::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:weizhu.im.IMP2PMessagePush)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 user_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_msg;
        break;
      }

      // required .weizhu.im.InstantMessage msg = 2;
      case 2: {
        if (tag == 18) {
         parse_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_msg()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:weizhu.im.IMP2PMessagePush)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:weizhu.im.IMP2PMessagePush)
  return false;
#undef DO_
}

void IMP2PMessagePush::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:weizhu.im.IMP2PMessagePush)
  // required int64 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->user_id(), output);
  }

  // required .weizhu.im.InstantMessage msg = 2;
  if (has_msg()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->msg(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:weizhu.im.IMP2PMessagePush)
}

int IMP2PMessagePush::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->user_id());
    }

    // required .weizhu.im.InstantMessage msg = 2;
    if (has_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->msg());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMP2PMessagePush::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const IMP2PMessagePush*>(&from));
}

void IMP2PMessagePush::MergeFrom(const IMP2PMessagePush& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_msg()) {
      mutable_msg()->::weizhu::im::InstantMessage::MergeFrom(from.msg());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void IMP2PMessagePush::CopyFrom(const IMP2PMessagePush& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMP2PMessagePush::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_msg()) {
    if (!this->msg().IsInitialized()) return false;
  }
  return true;
}

void IMP2PMessagePush::Swap(IMP2PMessagePush* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(msg_, other->msg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string IMP2PMessagePush::GetTypeName() const {
  return "weizhu.im.IMP2PMessagePush";
}


// ===================================================================

#ifndef _MSC_VER
const int IMP2PStatePush::kUserIdFieldNumber;
#endif  // !_MSC_VER

IMP2PStatePush::IMP2PStatePush()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:weizhu.im.IMP2PStatePush)
}

void IMP2PStatePush::InitAsDefaultInstance() {
}

IMP2PStatePush::IMP2PStatePush(const IMP2PStatePush& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:weizhu.im.IMP2PStatePush)
}

void IMP2PStatePush::SharedCtor() {
  _cached_size_ = 0;
  user_id_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IMP2PStatePush::~IMP2PStatePush() {
  // @@protoc_insertion_point(destructor:weizhu.im.IMP2PStatePush)
  SharedDtor();
}

void IMP2PStatePush::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void IMP2PStatePush::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const IMP2PStatePush& IMP2PStatePush::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_im_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_im_2eproto();
#endif
  return *default_instance_;
}

IMP2PStatePush* IMP2PStatePush::default_instance_ = NULL;

IMP2PStatePush* IMP2PStatePush::New() const {
  return new IMP2PStatePush;
}

void IMP2PStatePush::Clear() {
  user_id_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool IMP2PStatePush::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:weizhu.im.IMP2PStatePush)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 user_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:weizhu.im.IMP2PStatePush)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:weizhu.im.IMP2PStatePush)
  return false;
#undef DO_
}

void IMP2PStatePush::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:weizhu.im.IMP2PStatePush)
  // required int64 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->user_id(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:weizhu.im.IMP2PStatePush)
}

int IMP2PStatePush::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->user_id());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMP2PStatePush::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const IMP2PStatePush*>(&from));
}

void IMP2PStatePush::MergeFrom(const IMP2PStatePush& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void IMP2PStatePush::CopyFrom(const IMP2PStatePush& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMP2PStatePush::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void IMP2PStatePush::Swap(IMP2PStatePush* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string IMP2PStatePush::GetTypeName() const {
  return "weizhu.im.IMP2PStatePush";
}


// ===================================================================

#ifndef _MSC_VER
const int IMGroupStatePush::kGroupIdFieldNumber;
#endif  // !_MSC_VER

IMGroupStatePush::IMGroupStatePush()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:weizhu.im.IMGroupStatePush)
}

void IMGroupStatePush::InitAsDefaultInstance() {
}

IMGroupStatePush::IMGroupStatePush(const IMGroupStatePush& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:weizhu.im.IMGroupStatePush)
}

void IMGroupStatePush::SharedCtor() {
  _cached_size_ = 0;
  group_id_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IMGroupStatePush::~IMGroupStatePush() {
  // @@protoc_insertion_point(destructor:weizhu.im.IMGroupStatePush)
  SharedDtor();
}

void IMGroupStatePush::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void IMGroupStatePush::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const IMGroupStatePush& IMGroupStatePush::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_im_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_im_2eproto();
#endif
  return *default_instance_;
}

IMGroupStatePush* IMGroupStatePush::default_instance_ = NULL;

IMGroupStatePush* IMGroupStatePush::New() const {
  return new IMGroupStatePush;
}

void IMGroupStatePush::Clear() {
  group_id_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool IMGroupStatePush::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:weizhu.im.IMGroupStatePush)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 group_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &group_id_)));
          set_has_group_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:weizhu.im.IMGroupStatePush)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:weizhu.im.IMGroupStatePush)
  return false;
#undef DO_
}

void IMGroupStatePush::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:weizhu.im.IMGroupStatePush)
  // required int64 group_id = 1;
  if (has_group_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->group_id(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:weizhu.im.IMGroupStatePush)
}

int IMGroupStatePush::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 group_id = 1;
    if (has_group_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->group_id());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMGroupStatePush::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const IMGroupStatePush*>(&from));
}

void IMGroupStatePush::MergeFrom(const IMGroupStatePush& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_group_id()) {
      set_group_id(from.group_id());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void IMGroupStatePush::CopyFrom(const IMGroupStatePush& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMGroupStatePush::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void IMGroupStatePush::Swap(IMGroupStatePush* other) {
  if (other != this) {
    std::swap(group_id_, other->group_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string IMGroupStatePush::GetTypeName() const {
  return "weizhu.im.IMGroupStatePush";
}


// ===================================================================

#ifndef _MSC_VER
const int GetP2PMessageRequest::kUserIdFieldNumber;
const int GetP2PMessageRequest::kMsgSeqBeginFieldNumber;
const int GetP2PMessageRequest::kMsgSeqEndFieldNumber;
const int GetP2PMessageRequest::kMsgSizeFieldNumber;
#endif  // !_MSC_VER

GetP2PMessageRequest::GetP2PMessageRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:weizhu.im.GetP2PMessageRequest)
}

void GetP2PMessageRequest::InitAsDefaultInstance() {
}

GetP2PMessageRequest::GetP2PMessageRequest(const GetP2PMessageRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:weizhu.im.GetP2PMessageRequest)
}

void GetP2PMessageRequest::SharedCtor() {
  _cached_size_ = 0;
  user_id_ = GOOGLE_LONGLONG(0);
  msg_seq_begin_ = GOOGLE_LONGLONG(0);
  msg_seq_end_ = GOOGLE_LONGLONG(0);
  msg_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetP2PMessageRequest::~GetP2PMessageRequest() {
  // @@protoc_insertion_point(destructor:weizhu.im.GetP2PMessageRequest)
  SharedDtor();
}

void GetP2PMessageRequest::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void GetP2PMessageRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GetP2PMessageRequest& GetP2PMessageRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_im_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_im_2eproto();
#endif
  return *default_instance_;
}

GetP2PMessageRequest* GetP2PMessageRequest::default_instance_ = NULL;

GetP2PMessageRequest* GetP2PMessageRequest::New() const {
  return new GetP2PMessageRequest;
}

void GetP2PMessageRequest::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GetP2PMessageRequest*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(user_id_, msg_size_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool GetP2PMessageRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:weizhu.im.GetP2PMessageRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 user_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_msg_seq_begin;
        break;
      }

      // optional int64 msg_seq_begin = 2;
      case 2: {
        if (tag == 16) {
         parse_msg_seq_begin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &msg_seq_begin_)));
          set_has_msg_seq_begin();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_msg_seq_end;
        break;
      }

      // optional int64 msg_seq_end = 3;
      case 3: {
        if (tag == 24) {
         parse_msg_seq_end:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &msg_seq_end_)));
          set_has_msg_seq_end();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_msg_size;
        break;
      }

      // required int32 msg_size = 4;
      case 4: {
        if (tag == 32) {
         parse_msg_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &msg_size_)));
          set_has_msg_size();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:weizhu.im.GetP2PMessageRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:weizhu.im.GetP2PMessageRequest)
  return false;
#undef DO_
}

void GetP2PMessageRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:weizhu.im.GetP2PMessageRequest)
  // required int64 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->user_id(), output);
  }

  // optional int64 msg_seq_begin = 2;
  if (has_msg_seq_begin()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->msg_seq_begin(), output);
  }

  // optional int64 msg_seq_end = 3;
  if (has_msg_seq_end()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->msg_seq_end(), output);
  }

  // required int32 msg_size = 4;
  if (has_msg_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->msg_size(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:weizhu.im.GetP2PMessageRequest)
}

int GetP2PMessageRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->user_id());
    }

    // optional int64 msg_seq_begin = 2;
    if (has_msg_seq_begin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->msg_seq_begin());
    }

    // optional int64 msg_seq_end = 3;
    if (has_msg_seq_end()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->msg_seq_end());
    }

    // required int32 msg_size = 4;
    if (has_msg_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->msg_size());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetP2PMessageRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GetP2PMessageRequest*>(&from));
}

void GetP2PMessageRequest::MergeFrom(const GetP2PMessageRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_msg_seq_begin()) {
      set_msg_seq_begin(from.msg_seq_begin());
    }
    if (from.has_msg_seq_end()) {
      set_msg_seq_end(from.msg_seq_end());
    }
    if (from.has_msg_size()) {
      set_msg_size(from.msg_size());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void GetP2PMessageRequest::CopyFrom(const GetP2PMessageRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetP2PMessageRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000009) != 0x00000009) return false;

  return true;
}

void GetP2PMessageRequest::Swap(GetP2PMessageRequest* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(msg_seq_begin_, other->msg_seq_begin_);
    std::swap(msg_seq_end_, other->msg_seq_end_);
    std::swap(msg_size_, other->msg_size_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string GetP2PMessageRequest::GetTypeName() const {
  return "weizhu.im.GetP2PMessageRequest";
}


// ===================================================================

#ifndef _MSC_VER
const int GetGroupMessageRequest::kGroupIdFieldNumber;
const int GetGroupMessageRequest::kMsgSeqBeginFieldNumber;
const int GetGroupMessageRequest::kMsgSeqEndFieldNumber;
const int GetGroupMessageRequest::kMsgSizeFieldNumber;
#endif  // !_MSC_VER

GetGroupMessageRequest::GetGroupMessageRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:weizhu.im.GetGroupMessageRequest)
}

void GetGroupMessageRequest::InitAsDefaultInstance() {
}

GetGroupMessageRequest::GetGroupMessageRequest(const GetGroupMessageRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:weizhu.im.GetGroupMessageRequest)
}

void GetGroupMessageRequest::SharedCtor() {
  _cached_size_ = 0;
  group_id_ = GOOGLE_LONGLONG(0);
  msg_seq_begin_ = GOOGLE_LONGLONG(0);
  msg_seq_end_ = GOOGLE_LONGLONG(0);
  msg_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetGroupMessageRequest::~GetGroupMessageRequest() {
  // @@protoc_insertion_point(destructor:weizhu.im.GetGroupMessageRequest)
  SharedDtor();
}

void GetGroupMessageRequest::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void GetGroupMessageRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GetGroupMessageRequest& GetGroupMessageRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_im_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_im_2eproto();
#endif
  return *default_instance_;
}

GetGroupMessageRequest* GetGroupMessageRequest::default_instance_ = NULL;

GetGroupMessageRequest* GetGroupMessageRequest::New() const {
  return new GetGroupMessageRequest;
}

void GetGroupMessageRequest::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GetGroupMessageRequest*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(group_id_, msg_size_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool GetGroupMessageRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:weizhu.im.GetGroupMessageRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 group_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &group_id_)));
          set_has_group_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_msg_seq_begin;
        break;
      }

      // optional int64 msg_seq_begin = 2;
      case 2: {
        if (tag == 16) {
         parse_msg_seq_begin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &msg_seq_begin_)));
          set_has_msg_seq_begin();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_msg_seq_end;
        break;
      }

      // optional int64 msg_seq_end = 3;
      case 3: {
        if (tag == 24) {
         parse_msg_seq_end:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &msg_seq_end_)));
          set_has_msg_seq_end();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_msg_size;
        break;
      }

      // required int32 msg_size = 4;
      case 4: {
        if (tag == 32) {
         parse_msg_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &msg_size_)));
          set_has_msg_size();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:weizhu.im.GetGroupMessageRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:weizhu.im.GetGroupMessageRequest)
  return false;
#undef DO_
}

void GetGroupMessageRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:weizhu.im.GetGroupMessageRequest)
  // required int64 group_id = 1;
  if (has_group_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->group_id(), output);
  }

  // optional int64 msg_seq_begin = 2;
  if (has_msg_seq_begin()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->msg_seq_begin(), output);
  }

  // optional int64 msg_seq_end = 3;
  if (has_msg_seq_end()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->msg_seq_end(), output);
  }

  // required int32 msg_size = 4;
  if (has_msg_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->msg_size(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:weizhu.im.GetGroupMessageRequest)
}

int GetGroupMessageRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 group_id = 1;
    if (has_group_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->group_id());
    }

    // optional int64 msg_seq_begin = 2;
    if (has_msg_seq_begin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->msg_seq_begin());
    }

    // optional int64 msg_seq_end = 3;
    if (has_msg_seq_end()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->msg_seq_end());
    }

    // required int32 msg_size = 4;
    if (has_msg_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->msg_size());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetGroupMessageRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GetGroupMessageRequest*>(&from));
}

void GetGroupMessageRequest::MergeFrom(const GetGroupMessageRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_group_id()) {
      set_group_id(from.group_id());
    }
    if (from.has_msg_seq_begin()) {
      set_msg_seq_begin(from.msg_seq_begin());
    }
    if (from.has_msg_seq_end()) {
      set_msg_seq_end(from.msg_seq_end());
    }
    if (from.has_msg_size()) {
      set_msg_size(from.msg_size());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void GetGroupMessageRequest::CopyFrom(const GetGroupMessageRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetGroupMessageRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000009) != 0x00000009) return false;

  return true;
}

void GetGroupMessageRequest::Swap(GetGroupMessageRequest* other) {
  if (other != this) {
    std::swap(group_id_, other->group_id_);
    std::swap(msg_seq_begin_, other->msg_seq_begin_);
    std::swap(msg_seq_end_, other->msg_seq_end_);
    std::swap(msg_size_, other->msg_size_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string GetGroupMessageRequest::GetTypeName() const {
  return "weizhu.im.GetGroupMessageRequest";
}


// ===================================================================

#ifndef _MSC_VER
const int GetMessageResponse::kMsgFieldNumber;
const int GetMessageResponse::kHasMoreFieldNumber;
#endif  // !_MSC_VER

GetMessageResponse::GetMessageResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:weizhu.im.GetMessageResponse)
}

void GetMessageResponse::InitAsDefaultInstance() {
}

GetMessageResponse::GetMessageResponse(const GetMessageResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:weizhu.im.GetMessageResponse)
}

void GetMessageResponse::SharedCtor() {
  _cached_size_ = 0;
  has_more_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetMessageResponse::~GetMessageResponse() {
  // @@protoc_insertion_point(destructor:weizhu.im.GetMessageResponse)
  SharedDtor();
}

void GetMessageResponse::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void GetMessageResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GetMessageResponse& GetMessageResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_im_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_im_2eproto();
#endif
  return *default_instance_;
}

GetMessageResponse* GetMessageResponse::default_instance_ = NULL;

GetMessageResponse* GetMessageResponse::New() const {
  return new GetMessageResponse;
}

void GetMessageResponse::Clear() {
  has_more_ = false;
  msg_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool GetMessageResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:weizhu.im.GetMessageResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .weizhu.im.InstantMessage msg = 1;
      case 1: {
        if (tag == 10) {
         parse_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_msg()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_msg;
        if (input->ExpectTag(16)) goto parse_has_more;
        break;
      }

      // required bool has_more = 2;
      case 2: {
        if (tag == 16) {
         parse_has_more:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &has_more_)));
          set_has_has_more();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:weizhu.im.GetMessageResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:weizhu.im.GetMessageResponse)
  return false;
#undef DO_
}

void GetMessageResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:weizhu.im.GetMessageResponse)
  // repeated .weizhu.im.InstantMessage msg = 1;
  for (int i = 0; i < this->msg_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->msg(i), output);
  }

  // required bool has_more = 2;
  if (has_has_more()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->has_more(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:weizhu.im.GetMessageResponse)
}

int GetMessageResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // required bool has_more = 2;
    if (has_has_more()) {
      total_size += 1 + 1;
    }

  }
  // repeated .weizhu.im.InstantMessage msg = 1;
  total_size += 1 * this->msg_size();
  for (int i = 0; i < this->msg_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->msg(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetMessageResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GetMessageResponse*>(&from));
}

void GetMessageResponse::MergeFrom(const GetMessageResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  msg_.MergeFrom(from.msg_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_has_more()) {
      set_has_more(from.has_more());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void GetMessageResponse::CopyFrom(const GetMessageResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetMessageResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->msg())) return false;
  return true;
}

void GetMessageResponse::Swap(GetMessageResponse* other) {
  if (other != this) {
    msg_.Swap(&other->msg_);
    std::swap(has_more_, other->has_more_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string GetMessageResponse::GetTypeName() const {
  return "weizhu.im.GetMessageResponse";
}


// ===================================================================

#ifndef _MSC_VER
const int SendP2PMessageRequest::kToUserIdFieldNumber;
const int SendP2PMessageRequest::kMsgFieldNumber;
#endif  // !_MSC_VER

SendP2PMessageRequest::SendP2PMessageRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:weizhu.im.SendP2PMessageRequest)
}

void SendP2PMessageRequest::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  msg_ = const_cast< ::weizhu::im::InstantMessage*>(
      ::weizhu::im::InstantMessage::internal_default_instance());
#else
  msg_ = const_cast< ::weizhu::im::InstantMessage*>(&::weizhu::im::InstantMessage::default_instance());
#endif
}

SendP2PMessageRequest::SendP2PMessageRequest(const SendP2PMessageRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:weizhu.im.SendP2PMessageRequest)
}

void SendP2PMessageRequest::SharedCtor() {
  _cached_size_ = 0;
  to_user_id_ = GOOGLE_LONGLONG(0);
  msg_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SendP2PMessageRequest::~SendP2PMessageRequest() {
  // @@protoc_insertion_point(destructor:weizhu.im.SendP2PMessageRequest)
  SharedDtor();
}

void SendP2PMessageRequest::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete msg_;
  }
}

void SendP2PMessageRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const SendP2PMessageRequest& SendP2PMessageRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_im_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_im_2eproto();
#endif
  return *default_instance_;
}

SendP2PMessageRequest* SendP2PMessageRequest::default_instance_ = NULL;

SendP2PMessageRequest* SendP2PMessageRequest::New() const {
  return new SendP2PMessageRequest;
}

void SendP2PMessageRequest::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    to_user_id_ = GOOGLE_LONGLONG(0);
    if (has_msg()) {
      if (msg_ != NULL) msg_->::weizhu::im::InstantMessage::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool SendP2PMessageRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:weizhu.im.SendP2PMessageRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 to_user_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &to_user_id_)));
          set_has_to_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_msg;
        break;
      }

      // required .weizhu.im.InstantMessage msg = 2;
      case 2: {
        if (tag == 18) {
         parse_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_msg()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:weizhu.im.SendP2PMessageRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:weizhu.im.SendP2PMessageRequest)
  return false;
#undef DO_
}

void SendP2PMessageRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:weizhu.im.SendP2PMessageRequest)
  // required int64 to_user_id = 1;
  if (has_to_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->to_user_id(), output);
  }

  // required .weizhu.im.InstantMessage msg = 2;
  if (has_msg()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->msg(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:weizhu.im.SendP2PMessageRequest)
}

int SendP2PMessageRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 to_user_id = 1;
    if (has_to_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->to_user_id());
    }

    // required .weizhu.im.InstantMessage msg = 2;
    if (has_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->msg());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SendP2PMessageRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const SendP2PMessageRequest*>(&from));
}

void SendP2PMessageRequest::MergeFrom(const SendP2PMessageRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_to_user_id()) {
      set_to_user_id(from.to_user_id());
    }
    if (from.has_msg()) {
      mutable_msg()->::weizhu::im::InstantMessage::MergeFrom(from.msg());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void SendP2PMessageRequest::CopyFrom(const SendP2PMessageRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SendP2PMessageRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_msg()) {
    if (!this->msg().IsInitialized()) return false;
  }
  return true;
}

void SendP2PMessageRequest::Swap(SendP2PMessageRequest* other) {
  if (other != this) {
    std::swap(to_user_id_, other->to_user_id_);
    std::swap(msg_, other->msg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string SendP2PMessageRequest::GetTypeName() const {
  return "weizhu.im.SendP2PMessageRequest";
}


// ===================================================================

bool SendP2PMessageResponse_Result_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 99:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const SendP2PMessageResponse_Result SendP2PMessageResponse::SUCC;
const SendP2PMessageResponse_Result SendP2PMessageResponse::FAIL_USER_NOT_EXIST;
const SendP2PMessageResponse_Result SendP2PMessageResponse::FAIL_MSG_INVALID;
const SendP2PMessageResponse_Result SendP2PMessageResponse::FAIL_UNKNOWN;
const SendP2PMessageResponse_Result SendP2PMessageResponse::Result_MIN;
const SendP2PMessageResponse_Result SendP2PMessageResponse::Result_MAX;
const int SendP2PMessageResponse::Result_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int SendP2PMessageResponse::kResultFieldNumber;
const int SendP2PMessageResponse::kFailTextFieldNumber;
const int SendP2PMessageResponse::kMsgSeqFieldNumber;
const int SendP2PMessageResponse::kMsgTimeFieldNumber;
#endif  // !_MSC_VER

SendP2PMessageResponse::SendP2PMessageResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:weizhu.im.SendP2PMessageResponse)
}

void SendP2PMessageResponse::InitAsDefaultInstance() {
}

SendP2PMessageResponse::SendP2PMessageResponse(const SendP2PMessageResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:weizhu.im.SendP2PMessageResponse)
}

void SendP2PMessageResponse::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  result_ = 99;
  fail_text_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  msg_seq_ = GOOGLE_LONGLONG(0);
  msg_time_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SendP2PMessageResponse::~SendP2PMessageResponse() {
  // @@protoc_insertion_point(destructor:weizhu.im.SendP2PMessageResponse)
  SharedDtor();
}

void SendP2PMessageResponse::SharedDtor() {
  if (fail_text_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete fail_text_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void SendP2PMessageResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const SendP2PMessageResponse& SendP2PMessageResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_im_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_im_2eproto();
#endif
  return *default_instance_;
}

SendP2PMessageResponse* SendP2PMessageResponse::default_instance_ = NULL;

SendP2PMessageResponse* SendP2PMessageResponse::New() const {
  return new SendP2PMessageResponse;
}

void SendP2PMessageResponse::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<SendP2PMessageResponse*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(msg_time_, msg_seq_);
    result_ = 99;
    if (has_fail_text()) {
      if (fail_text_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        fail_text_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool SendP2PMessageResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:weizhu.im.SendP2PMessageResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .weizhu.im.SendP2PMessageResponse.Result result = 1 [default = FAIL_UNKNOWN];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::weizhu::im::SendP2PMessageResponse_Result_IsValid(value)) {
            set_result(static_cast< ::weizhu::im::SendP2PMessageResponse_Result >(value));
          } else {
            unknown_fields_stream.WriteVarint32(tag);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_fail_text;
        break;
      }

      // optional string fail_text = 2;
      case 2: {
        if (tag == 18) {
         parse_fail_text:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fail_text()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_msg_seq;
        break;
      }

      // optional int64 msg_seq = 3;
      case 3: {
        if (tag == 24) {
         parse_msg_seq:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &msg_seq_)));
          set_has_msg_seq();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_msg_time;
        break;
      }

      // optional int32 msg_time = 4;
      case 4: {
        if (tag == 32) {
         parse_msg_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &msg_time_)));
          set_has_msg_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:weizhu.im.SendP2PMessageResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:weizhu.im.SendP2PMessageResponse)
  return false;
#undef DO_
}

void SendP2PMessageResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:weizhu.im.SendP2PMessageResponse)
  // optional .weizhu.im.SendP2PMessageResponse.Result result = 1 [default = FAIL_UNKNOWN];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  // optional string fail_text = 2;
  if (has_fail_text()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->fail_text(), output);
  }

  // optional int64 msg_seq = 3;
  if (has_msg_seq()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->msg_seq(), output);
  }

  // optional int32 msg_time = 4;
  if (has_msg_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->msg_time(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:weizhu.im.SendP2PMessageResponse)
}

int SendP2PMessageResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .weizhu.im.SendP2PMessageResponse.Result result = 1 [default = FAIL_UNKNOWN];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

    // optional string fail_text = 2;
    if (has_fail_text()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->fail_text());
    }

    // optional int64 msg_seq = 3;
    if (has_msg_seq()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->msg_seq());
    }

    // optional int32 msg_time = 4;
    if (has_msg_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->msg_time());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SendP2PMessageResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const SendP2PMessageResponse*>(&from));
}

void SendP2PMessageResponse::MergeFrom(const SendP2PMessageResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_fail_text()) {
      set_fail_text(from.fail_text());
    }
    if (from.has_msg_seq()) {
      set_msg_seq(from.msg_seq());
    }
    if (from.has_msg_time()) {
      set_msg_time(from.msg_time());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void SendP2PMessageResponse::CopyFrom(const SendP2PMessageResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SendP2PMessageResponse::IsInitialized() const {

  return true;
}

void SendP2PMessageResponse::Swap(SendP2PMessageResponse* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(fail_text_, other->fail_text_);
    std::swap(msg_seq_, other->msg_seq_);
    std::swap(msg_time_, other->msg_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string SendP2PMessageResponse::GetTypeName() const {
  return "weizhu.im.SendP2PMessageResponse";
}


// ===================================================================

#ifndef _MSC_VER
const int GetP2PChatListRequest::kLastUserIdFieldNumber;
const int GetP2PChatListRequest::kLastMsgTimeFieldNumber;
const int GetP2PChatListRequest::kChatSizeFieldNumber;
#endif  // !_MSC_VER

GetP2PChatListRequest::GetP2PChatListRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:weizhu.im.GetP2PChatListRequest)
}

void GetP2PChatListRequest::InitAsDefaultInstance() {
}

GetP2PChatListRequest::GetP2PChatListRequest(const GetP2PChatListRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:weizhu.im.GetP2PChatListRequest)
}

void GetP2PChatListRequest::SharedCtor() {
  _cached_size_ = 0;
  last_user_id_ = GOOGLE_LONGLONG(0);
  last_msg_time_ = 0;
  chat_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetP2PChatListRequest::~GetP2PChatListRequest() {
  // @@protoc_insertion_point(destructor:weizhu.im.GetP2PChatListRequest)
  SharedDtor();
}

void GetP2PChatListRequest::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void GetP2PChatListRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GetP2PChatListRequest& GetP2PChatListRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_im_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_im_2eproto();
#endif
  return *default_instance_;
}

GetP2PChatListRequest* GetP2PChatListRequest::default_instance_ = NULL;

GetP2PChatListRequest* GetP2PChatListRequest::New() const {
  return new GetP2PChatListRequest;
}

void GetP2PChatListRequest::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GetP2PChatListRequest*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(last_user_id_, chat_size_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool GetP2PChatListRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:weizhu.im.GetP2PChatListRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 last_user_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &last_user_id_)));
          set_has_last_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_last_msg_time;
        break;
      }

      // optional int32 last_msg_time = 2;
      case 2: {
        if (tag == 16) {
         parse_last_msg_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &last_msg_time_)));
          set_has_last_msg_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_chat_size;
        break;
      }

      // required int32 chat_size = 3;
      case 3: {
        if (tag == 24) {
         parse_chat_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chat_size_)));
          set_has_chat_size();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:weizhu.im.GetP2PChatListRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:weizhu.im.GetP2PChatListRequest)
  return false;
#undef DO_
}

void GetP2PChatListRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:weizhu.im.GetP2PChatListRequest)
  // optional int64 last_user_id = 1;
  if (has_last_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->last_user_id(), output);
  }

  // optional int32 last_msg_time = 2;
  if (has_last_msg_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->last_msg_time(), output);
  }

  // required int32 chat_size = 3;
  if (has_chat_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->chat_size(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:weizhu.im.GetP2PChatListRequest)
}

int GetP2PChatListRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 last_user_id = 1;
    if (has_last_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->last_user_id());
    }

    // optional int32 last_msg_time = 2;
    if (has_last_msg_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->last_msg_time());
    }

    // required int32 chat_size = 3;
    if (has_chat_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->chat_size());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetP2PChatListRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GetP2PChatListRequest*>(&from));
}

void GetP2PChatListRequest::MergeFrom(const GetP2PChatListRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_last_user_id()) {
      set_last_user_id(from.last_user_id());
    }
    if (from.has_last_msg_time()) {
      set_last_msg_time(from.last_msg_time());
    }
    if (from.has_chat_size()) {
      set_chat_size(from.chat_size());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void GetP2PChatListRequest::CopyFrom(const GetP2PChatListRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetP2PChatListRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000004) != 0x00000004) return false;

  return true;
}

void GetP2PChatListRequest::Swap(GetP2PChatListRequest* other) {
  if (other != this) {
    std::swap(last_user_id_, other->last_user_id_);
    std::swap(last_msg_time_, other->last_msg_time_);
    std::swap(chat_size_, other->chat_size_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string GetP2PChatListRequest::GetTypeName() const {
  return "weizhu.im.GetP2PChatListRequest";
}


// ===================================================================

#ifndef _MSC_VER
const int GetP2PChatListResponse::kChatFieldNumber;
const int GetP2PChatListResponse::kHasMoreFieldNumber;
#endif  // !_MSC_VER

GetP2PChatListResponse::GetP2PChatListResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:weizhu.im.GetP2PChatListResponse)
}

void GetP2PChatListResponse::InitAsDefaultInstance() {
}

GetP2PChatListResponse::GetP2PChatListResponse(const GetP2PChatListResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:weizhu.im.GetP2PChatListResponse)
}

void GetP2PChatListResponse::SharedCtor() {
  _cached_size_ = 0;
  has_more_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetP2PChatListResponse::~GetP2PChatListResponse() {
  // @@protoc_insertion_point(destructor:weizhu.im.GetP2PChatListResponse)
  SharedDtor();
}

void GetP2PChatListResponse::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void GetP2PChatListResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GetP2PChatListResponse& GetP2PChatListResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_im_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_im_2eproto();
#endif
  return *default_instance_;
}

GetP2PChatListResponse* GetP2PChatListResponse::default_instance_ = NULL;

GetP2PChatListResponse* GetP2PChatListResponse::New() const {
  return new GetP2PChatListResponse;
}

void GetP2PChatListResponse::Clear() {
  has_more_ = false;
  chat_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool GetP2PChatListResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:weizhu.im.GetP2PChatListResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .weizhu.im.P2PChat chat = 1;
      case 1: {
        if (tag == 10) {
         parse_chat:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_chat()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_chat;
        if (input->ExpectTag(16)) goto parse_has_more;
        break;
      }

      // required bool has_more = 2;
      case 2: {
        if (tag == 16) {
         parse_has_more:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &has_more_)));
          set_has_has_more();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:weizhu.im.GetP2PChatListResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:weizhu.im.GetP2PChatListResponse)
  return false;
#undef DO_
}

void GetP2PChatListResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:weizhu.im.GetP2PChatListResponse)
  // repeated .weizhu.im.P2PChat chat = 1;
  for (int i = 0; i < this->chat_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->chat(i), output);
  }

  // required bool has_more = 2;
  if (has_has_more()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->has_more(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:weizhu.im.GetP2PChatListResponse)
}

int GetP2PChatListResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // required bool has_more = 2;
    if (has_has_more()) {
      total_size += 1 + 1;
    }

  }
  // repeated .weizhu.im.P2PChat chat = 1;
  total_size += 1 * this->chat_size();
  for (int i = 0; i < this->chat_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->chat(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetP2PChatListResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GetP2PChatListResponse*>(&from));
}

void GetP2PChatListResponse::MergeFrom(const GetP2PChatListResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  chat_.MergeFrom(from.chat_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_has_more()) {
      set_has_more(from.has_more());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void GetP2PChatListResponse::CopyFrom(const GetP2PChatListResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetP2PChatListResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->chat())) return false;
  return true;
}

void GetP2PChatListResponse::Swap(GetP2PChatListResponse* other) {
  if (other != this) {
    chat_.Swap(&other->chat_);
    std::swap(has_more_, other->has_more_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string GetP2PChatListResponse::GetTypeName() const {
  return "weizhu.im.GetP2PChatListResponse";
}


// ===================================================================

#ifndef _MSC_VER
const int GetGroupChatByIdRequest::kGroupIdFieldNumber;
#endif  // !_MSC_VER

GetGroupChatByIdRequest::GetGroupChatByIdRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:weizhu.im.GetGroupChatByIdRequest)
}

void GetGroupChatByIdRequest::InitAsDefaultInstance() {
}

GetGroupChatByIdRequest::GetGroupChatByIdRequest(const GetGroupChatByIdRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:weizhu.im.GetGroupChatByIdRequest)
}

void GetGroupChatByIdRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetGroupChatByIdRequest::~GetGroupChatByIdRequest() {
  // @@protoc_insertion_point(destructor:weizhu.im.GetGroupChatByIdRequest)
  SharedDtor();
}

void GetGroupChatByIdRequest::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void GetGroupChatByIdRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GetGroupChatByIdRequest& GetGroupChatByIdRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_im_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_im_2eproto();
#endif
  return *default_instance_;
}

GetGroupChatByIdRequest* GetGroupChatByIdRequest::default_instance_ = NULL;

GetGroupChatByIdRequest* GetGroupChatByIdRequest::New() const {
  return new GetGroupChatByIdRequest;
}

void GetGroupChatByIdRequest::Clear() {
  group_id_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool GetGroupChatByIdRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:weizhu.im.GetGroupChatByIdRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int64 group_id = 1;
      case 1: {
        if (tag == 8) {
         parse_group_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 8, input, this->mutable_group_id())));
        } else if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_group_id())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8)) goto parse_group_id;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:weizhu.im.GetGroupChatByIdRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:weizhu.im.GetGroupChatByIdRequest)
  return false;
#undef DO_
}

void GetGroupChatByIdRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:weizhu.im.GetGroupChatByIdRequest)
  // repeated int64 group_id = 1;
  for (int i = 0; i < this->group_id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      1, this->group_id(i), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:weizhu.im.GetGroupChatByIdRequest)
}

int GetGroupChatByIdRequest::ByteSize() const {
  int total_size = 0;

  // repeated int64 group_id = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->group_id_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->group_id(i));
    }
    total_size += 1 * this->group_id_size() + data_size;
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetGroupChatByIdRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GetGroupChatByIdRequest*>(&from));
}

void GetGroupChatByIdRequest::MergeFrom(const GetGroupChatByIdRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  group_id_.MergeFrom(from.group_id_);
  mutable_unknown_fields()->append(from.unknown_fields());
}

void GetGroupChatByIdRequest::CopyFrom(const GetGroupChatByIdRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetGroupChatByIdRequest::IsInitialized() const {

  return true;
}

void GetGroupChatByIdRequest::Swap(GetGroupChatByIdRequest* other) {
  if (other != this) {
    group_id_.Swap(&other->group_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string GetGroupChatByIdRequest::GetTypeName() const {
  return "weizhu.im.GetGroupChatByIdRequest";
}


// ===================================================================

#ifndef _MSC_VER
const int GetGroupChatByIdResponse::kGroupChatFieldNumber;
#endif  // !_MSC_VER

GetGroupChatByIdResponse::GetGroupChatByIdResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:weizhu.im.GetGroupChatByIdResponse)
}

void GetGroupChatByIdResponse::InitAsDefaultInstance() {
}

GetGroupChatByIdResponse::GetGroupChatByIdResponse(const GetGroupChatByIdResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:weizhu.im.GetGroupChatByIdResponse)
}

void GetGroupChatByIdResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetGroupChatByIdResponse::~GetGroupChatByIdResponse() {
  // @@protoc_insertion_point(destructor:weizhu.im.GetGroupChatByIdResponse)
  SharedDtor();
}

void GetGroupChatByIdResponse::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void GetGroupChatByIdResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GetGroupChatByIdResponse& GetGroupChatByIdResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_im_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_im_2eproto();
#endif
  return *default_instance_;
}

GetGroupChatByIdResponse* GetGroupChatByIdResponse::default_instance_ = NULL;

GetGroupChatByIdResponse* GetGroupChatByIdResponse::New() const {
  return new GetGroupChatByIdResponse;
}

void GetGroupChatByIdResponse::Clear() {
  group_chat_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool GetGroupChatByIdResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:weizhu.im.GetGroupChatByIdResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .weizhu.im.GroupChat group_chat = 1;
      case 1: {
        if (tag == 10) {
         parse_group_chat:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_group_chat()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_group_chat;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:weizhu.im.GetGroupChatByIdResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:weizhu.im.GetGroupChatByIdResponse)
  return false;
#undef DO_
}

void GetGroupChatByIdResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:weizhu.im.GetGroupChatByIdResponse)
  // repeated .weizhu.im.GroupChat group_chat = 1;
  for (int i = 0; i < this->group_chat_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->group_chat(i), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:weizhu.im.GetGroupChatByIdResponse)
}

int GetGroupChatByIdResponse::ByteSize() const {
  int total_size = 0;

  // repeated .weizhu.im.GroupChat group_chat = 1;
  total_size += 1 * this->group_chat_size();
  for (int i = 0; i < this->group_chat_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->group_chat(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetGroupChatByIdResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GetGroupChatByIdResponse*>(&from));
}

void GetGroupChatByIdResponse::MergeFrom(const GetGroupChatByIdResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  group_chat_.MergeFrom(from.group_chat_);
  mutable_unknown_fields()->append(from.unknown_fields());
}

void GetGroupChatByIdResponse::CopyFrom(const GetGroupChatByIdResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetGroupChatByIdResponse::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->group_chat())) return false;
  return true;
}

void GetGroupChatByIdResponse::Swap(GetGroupChatByIdResponse* other) {
  if (other != this) {
    group_chat_.Swap(&other->group_chat_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string GetGroupChatByIdResponse::GetTypeName() const {
  return "weizhu.im.GetGroupChatByIdResponse";
}


// ===================================================================

#ifndef _MSC_VER
const int CreateGroupChatRequest::kGroupNameFieldNumber;
const int CreateGroupChatRequest::kMemberUserIdFieldNumber;
#endif  // !_MSC_VER

CreateGroupChatRequest::CreateGroupChatRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:weizhu.im.CreateGroupChatRequest)
}

void CreateGroupChatRequest::InitAsDefaultInstance() {
}

CreateGroupChatRequest::CreateGroupChatRequest(const CreateGroupChatRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:weizhu.im.CreateGroupChatRequest)
}

void CreateGroupChatRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  group_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CreateGroupChatRequest::~CreateGroupChatRequest() {
  // @@protoc_insertion_point(destructor:weizhu.im.CreateGroupChatRequest)
  SharedDtor();
}

void CreateGroupChatRequest::SharedDtor() {
  if (group_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete group_name_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CreateGroupChatRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CreateGroupChatRequest& CreateGroupChatRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_im_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_im_2eproto();
#endif
  return *default_instance_;
}

CreateGroupChatRequest* CreateGroupChatRequest::default_instance_ = NULL;

CreateGroupChatRequest* CreateGroupChatRequest::New() const {
  return new CreateGroupChatRequest;
}

void CreateGroupChatRequest::Clear() {
  if (has_group_name()) {
    if (group_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      group_name_->clear();
    }
  }
  member_user_id_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool CreateGroupChatRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:weizhu.im.CreateGroupChatRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string group_name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_group_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_member_user_id;
        break;
      }

      // repeated int64 member_user_id = 2;
      case 2: {
        if (tag == 16) {
         parse_member_user_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 16, input, this->mutable_member_user_id())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_member_user_id())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_member_user_id;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:weizhu.im.CreateGroupChatRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:weizhu.im.CreateGroupChatRequest)
  return false;
#undef DO_
}

void CreateGroupChatRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:weizhu.im.CreateGroupChatRequest)
  // required string group_name = 1;
  if (has_group_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->group_name(), output);
  }

  // repeated int64 member_user_id = 2;
  for (int i = 0; i < this->member_user_id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      2, this->member_user_id(i), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:weizhu.im.CreateGroupChatRequest)
}

int CreateGroupChatRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string group_name = 1;
    if (has_group_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->group_name());
    }

  }
  // repeated int64 member_user_id = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->member_user_id_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->member_user_id(i));
    }
    total_size += 1 * this->member_user_id_size() + data_size;
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CreateGroupChatRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CreateGroupChatRequest*>(&from));
}

void CreateGroupChatRequest::MergeFrom(const CreateGroupChatRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  member_user_id_.MergeFrom(from.member_user_id_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_group_name()) {
      set_group_name(from.group_name());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void CreateGroupChatRequest::CopyFrom(const CreateGroupChatRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateGroupChatRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void CreateGroupChatRequest::Swap(CreateGroupChatRequest* other) {
  if (other != this) {
    std::swap(group_name_, other->group_name_);
    member_user_id_.Swap(&other->member_user_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CreateGroupChatRequest::GetTypeName() const {
  return "weizhu.im.CreateGroupChatRequest";
}


// ===================================================================

bool CreateGroupChatResponse_Result_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 99:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const CreateGroupChatResponse_Result CreateGroupChatResponse::SUCC;
const CreateGroupChatResponse_Result CreateGroupChatResponse::FAIL_NAME_INVALID;
const CreateGroupChatResponse_Result CreateGroupChatResponse::FAIL_MEMBER_EMPTY;
const CreateGroupChatResponse_Result CreateGroupChatResponse::FAIL_MEMBER_INVALID;
const CreateGroupChatResponse_Result CreateGroupChatResponse::FAIL_MEMBER_NUM_LIMITED;
const CreateGroupChatResponse_Result CreateGroupChatResponse::FAIL_UNKNOWN;
const CreateGroupChatResponse_Result CreateGroupChatResponse::Result_MIN;
const CreateGroupChatResponse_Result CreateGroupChatResponse::Result_MAX;
const int CreateGroupChatResponse::Result_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int CreateGroupChatResponse::kResultFieldNumber;
const int CreateGroupChatResponse::kFailTextFieldNumber;
const int CreateGroupChatResponse::kGroupChatFieldNumber;
#endif  // !_MSC_VER

CreateGroupChatResponse::CreateGroupChatResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:weizhu.im.CreateGroupChatResponse)
}

void CreateGroupChatResponse::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  group_chat_ = const_cast< ::weizhu::im::GroupChat*>(
      ::weizhu::im::GroupChat::internal_default_instance());
#else
  group_chat_ = const_cast< ::weizhu::im::GroupChat*>(&::weizhu::im::GroupChat::default_instance());
#endif
}

CreateGroupChatResponse::CreateGroupChatResponse(const CreateGroupChatResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:weizhu.im.CreateGroupChatResponse)
}

void CreateGroupChatResponse::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  result_ = 99;
  fail_text_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  group_chat_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CreateGroupChatResponse::~CreateGroupChatResponse() {
  // @@protoc_insertion_point(destructor:weizhu.im.CreateGroupChatResponse)
  SharedDtor();
}

void CreateGroupChatResponse::SharedDtor() {
  if (fail_text_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete fail_text_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete group_chat_;
  }
}

void CreateGroupChatResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CreateGroupChatResponse& CreateGroupChatResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_im_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_im_2eproto();
#endif
  return *default_instance_;
}

CreateGroupChatResponse* CreateGroupChatResponse::default_instance_ = NULL;

CreateGroupChatResponse* CreateGroupChatResponse::New() const {
  return new CreateGroupChatResponse;
}

void CreateGroupChatResponse::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    result_ = 99;
    if (has_fail_text()) {
      if (fail_text_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        fail_text_->clear();
      }
    }
    if (has_group_chat()) {
      if (group_chat_ != NULL) group_chat_->::weizhu::im::GroupChat::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool CreateGroupChatResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:weizhu.im.CreateGroupChatResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .weizhu.im.CreateGroupChatResponse.Result result = 1 [default = FAIL_UNKNOWN];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::weizhu::im::CreateGroupChatResponse_Result_IsValid(value)) {
            set_result(static_cast< ::weizhu::im::CreateGroupChatResponse_Result >(value));
          } else {
            unknown_fields_stream.WriteVarint32(tag);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_fail_text;
        break;
      }

      // optional string fail_text = 2;
      case 2: {
        if (tag == 18) {
         parse_fail_text:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fail_text()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_group_chat;
        break;
      }

      // optional .weizhu.im.GroupChat group_chat = 3;
      case 3: {
        if (tag == 26) {
         parse_group_chat:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_group_chat()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:weizhu.im.CreateGroupChatResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:weizhu.im.CreateGroupChatResponse)
  return false;
#undef DO_
}

void CreateGroupChatResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:weizhu.im.CreateGroupChatResponse)
  // optional .weizhu.im.CreateGroupChatResponse.Result result = 1 [default = FAIL_UNKNOWN];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  // optional string fail_text = 2;
  if (has_fail_text()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->fail_text(), output);
  }

  // optional .weizhu.im.GroupChat group_chat = 3;
  if (has_group_chat()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->group_chat(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:weizhu.im.CreateGroupChatResponse)
}

int CreateGroupChatResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .weizhu.im.CreateGroupChatResponse.Result result = 1 [default = FAIL_UNKNOWN];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

    // optional string fail_text = 2;
    if (has_fail_text()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->fail_text());
    }

    // optional .weizhu.im.GroupChat group_chat = 3;
    if (has_group_chat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->group_chat());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CreateGroupChatResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CreateGroupChatResponse*>(&from));
}

void CreateGroupChatResponse::MergeFrom(const CreateGroupChatResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_fail_text()) {
      set_fail_text(from.fail_text());
    }
    if (from.has_group_chat()) {
      mutable_group_chat()->::weizhu::im::GroupChat::MergeFrom(from.group_chat());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void CreateGroupChatResponse::CopyFrom(const CreateGroupChatResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateGroupChatResponse::IsInitialized() const {

  if (has_group_chat()) {
    if (!this->group_chat().IsInitialized()) return false;
  }
  return true;
}

void CreateGroupChatResponse::Swap(CreateGroupChatResponse* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(fail_text_, other->fail_text_);
    std::swap(group_chat_, other->group_chat_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CreateGroupChatResponse::GetTypeName() const {
  return "weizhu.im.CreateGroupChatResponse";
}


// ===================================================================

#ifndef _MSC_VER
const int SetGroupNameRequest::kGroupIdFieldNumber;
const int SetGroupNameRequest::kGroupNameFieldNumber;
#endif  // !_MSC_VER

SetGroupNameRequest::SetGroupNameRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:weizhu.im.SetGroupNameRequest)
}

void SetGroupNameRequest::InitAsDefaultInstance() {
}

SetGroupNameRequest::SetGroupNameRequest(const SetGroupNameRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:weizhu.im.SetGroupNameRequest)
}

void SetGroupNameRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  group_id_ = GOOGLE_LONGLONG(0);
  group_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SetGroupNameRequest::~SetGroupNameRequest() {
  // @@protoc_insertion_point(destructor:weizhu.im.SetGroupNameRequest)
  SharedDtor();
}

void SetGroupNameRequest::SharedDtor() {
  if (group_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete group_name_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void SetGroupNameRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const SetGroupNameRequest& SetGroupNameRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_im_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_im_2eproto();
#endif
  return *default_instance_;
}

SetGroupNameRequest* SetGroupNameRequest::default_instance_ = NULL;

SetGroupNameRequest* SetGroupNameRequest::New() const {
  return new SetGroupNameRequest;
}

void SetGroupNameRequest::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    group_id_ = GOOGLE_LONGLONG(0);
    if (has_group_name()) {
      if (group_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        group_name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool SetGroupNameRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:weizhu.im.SetGroupNameRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 group_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &group_id_)));
          set_has_group_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_group_name;
        break;
      }

      // required string group_name = 2;
      case 2: {
        if (tag == 18) {
         parse_group_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_group_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:weizhu.im.SetGroupNameRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:weizhu.im.SetGroupNameRequest)
  return false;
#undef DO_
}

void SetGroupNameRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:weizhu.im.SetGroupNameRequest)
  // required int64 group_id = 1;
  if (has_group_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->group_id(), output);
  }

  // required string group_name = 2;
  if (has_group_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->group_name(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:weizhu.im.SetGroupNameRequest)
}

int SetGroupNameRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 group_id = 1;
    if (has_group_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->group_id());
    }

    // required string group_name = 2;
    if (has_group_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->group_name());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SetGroupNameRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const SetGroupNameRequest*>(&from));
}

void SetGroupNameRequest::MergeFrom(const SetGroupNameRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_group_id()) {
      set_group_id(from.group_id());
    }
    if (from.has_group_name()) {
      set_group_name(from.group_name());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void SetGroupNameRequest::CopyFrom(const SetGroupNameRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetGroupNameRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void SetGroupNameRequest::Swap(SetGroupNameRequest* other) {
  if (other != this) {
    std::swap(group_id_, other->group_id_);
    std::swap(group_name_, other->group_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string SetGroupNameRequest::GetTypeName() const {
  return "weizhu.im.SetGroupNameRequest";
}


// ===================================================================

bool SetGroupNameResponse_Result_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 99:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const SetGroupNameResponse_Result SetGroupNameResponse::SUCC;
const SetGroupNameResponse_Result SetGroupNameResponse::FAIL_GROUP_NOT_EXIST;
const SetGroupNameResponse_Result SetGroupNameResponse::FAIL_GROUP_NOT_JOIN;
const SetGroupNameResponse_Result SetGroupNameResponse::FAIL_NAME_INVALID;
const SetGroupNameResponse_Result SetGroupNameResponse::FAIL_UNKNOWN;
const SetGroupNameResponse_Result SetGroupNameResponse::Result_MIN;
const SetGroupNameResponse_Result SetGroupNameResponse::Result_MAX;
const int SetGroupNameResponse::Result_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int SetGroupNameResponse::kResultFieldNumber;
const int SetGroupNameResponse::kFailTextFieldNumber;
const int SetGroupNameResponse::kGroupMsgFieldNumber;
const int SetGroupNameResponse::kGroupChatFieldNumber;
#endif  // !_MSC_VER

SetGroupNameResponse::SetGroupNameResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:weizhu.im.SetGroupNameResponse)
}

void SetGroupNameResponse::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  group_msg_ = const_cast< ::weizhu::im::InstantMessage*>(
      ::weizhu::im::InstantMessage::internal_default_instance());
#else
  group_msg_ = const_cast< ::weizhu::im::InstantMessage*>(&::weizhu::im::InstantMessage::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  group_chat_ = const_cast< ::weizhu::im::GroupChat*>(
      ::weizhu::im::GroupChat::internal_default_instance());
#else
  group_chat_ = const_cast< ::weizhu::im::GroupChat*>(&::weizhu::im::GroupChat::default_instance());
#endif
}

SetGroupNameResponse::SetGroupNameResponse(const SetGroupNameResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:weizhu.im.SetGroupNameResponse)
}

void SetGroupNameResponse::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  result_ = 99;
  fail_text_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  group_msg_ = NULL;
  group_chat_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SetGroupNameResponse::~SetGroupNameResponse() {
  // @@protoc_insertion_point(destructor:weizhu.im.SetGroupNameResponse)
  SharedDtor();
}

void SetGroupNameResponse::SharedDtor() {
  if (fail_text_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete fail_text_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete group_msg_;
    delete group_chat_;
  }
}

void SetGroupNameResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const SetGroupNameResponse& SetGroupNameResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_im_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_im_2eproto();
#endif
  return *default_instance_;
}

SetGroupNameResponse* SetGroupNameResponse::default_instance_ = NULL;

SetGroupNameResponse* SetGroupNameResponse::New() const {
  return new SetGroupNameResponse;
}

void SetGroupNameResponse::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    result_ = 99;
    if (has_fail_text()) {
      if (fail_text_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        fail_text_->clear();
      }
    }
    if (has_group_msg()) {
      if (group_msg_ != NULL) group_msg_->::weizhu::im::InstantMessage::Clear();
    }
    if (has_group_chat()) {
      if (group_chat_ != NULL) group_chat_->::weizhu::im::GroupChat::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool SetGroupNameResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:weizhu.im.SetGroupNameResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .weizhu.im.SetGroupNameResponse.Result result = 1 [default = FAIL_UNKNOWN];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::weizhu::im::SetGroupNameResponse_Result_IsValid(value)) {
            set_result(static_cast< ::weizhu::im::SetGroupNameResponse_Result >(value));
          } else {
            unknown_fields_stream.WriteVarint32(tag);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_fail_text;
        break;
      }

      // optional string fail_text = 2;
      case 2: {
        if (tag == 18) {
         parse_fail_text:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fail_text()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_group_msg;
        break;
      }

      // optional .weizhu.im.InstantMessage group_msg = 3;
      case 3: {
        if (tag == 26) {
         parse_group_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_group_msg()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_group_chat;
        break;
      }

      // optional .weizhu.im.GroupChat group_chat = 4;
      case 4: {
        if (tag == 34) {
         parse_group_chat:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_group_chat()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:weizhu.im.SetGroupNameResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:weizhu.im.SetGroupNameResponse)
  return false;
#undef DO_
}

void SetGroupNameResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:weizhu.im.SetGroupNameResponse)
  // optional .weizhu.im.SetGroupNameResponse.Result result = 1 [default = FAIL_UNKNOWN];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  // optional string fail_text = 2;
  if (has_fail_text()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->fail_text(), output);
  }

  // optional .weizhu.im.InstantMessage group_msg = 3;
  if (has_group_msg()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->group_msg(), output);
  }

  // optional .weizhu.im.GroupChat group_chat = 4;
  if (has_group_chat()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, this->group_chat(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:weizhu.im.SetGroupNameResponse)
}

int SetGroupNameResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .weizhu.im.SetGroupNameResponse.Result result = 1 [default = FAIL_UNKNOWN];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

    // optional string fail_text = 2;
    if (has_fail_text()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->fail_text());
    }

    // optional .weizhu.im.InstantMessage group_msg = 3;
    if (has_group_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->group_msg());
    }

    // optional .weizhu.im.GroupChat group_chat = 4;
    if (has_group_chat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->group_chat());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SetGroupNameResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const SetGroupNameResponse*>(&from));
}

void SetGroupNameResponse::MergeFrom(const SetGroupNameResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_fail_text()) {
      set_fail_text(from.fail_text());
    }
    if (from.has_group_msg()) {
      mutable_group_msg()->::weizhu::im::InstantMessage::MergeFrom(from.group_msg());
    }
    if (from.has_group_chat()) {
      mutable_group_chat()->::weizhu::im::GroupChat::MergeFrom(from.group_chat());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void SetGroupNameResponse::CopyFrom(const SetGroupNameResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetGroupNameResponse::IsInitialized() const {

  if (has_group_msg()) {
    if (!this->group_msg().IsInitialized()) return false;
  }
  if (has_group_chat()) {
    if (!this->group_chat().IsInitialized()) return false;
  }
  return true;
}

void SetGroupNameResponse::Swap(SetGroupNameResponse* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(fail_text_, other->fail_text_);
    std::swap(group_msg_, other->group_msg_);
    std::swap(group_chat_, other->group_chat_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string SetGroupNameResponse::GetTypeName() const {
  return "weizhu.im.SetGroupNameResponse";
}


// ===================================================================

#ifndef _MSC_VER
const int JoinGroupChatRequest::kGroupIdFieldNumber;
const int JoinGroupChatRequest::kJoinUserIdFieldNumber;
#endif  // !_MSC_VER

JoinGroupChatRequest::JoinGroupChatRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:weizhu.im.JoinGroupChatRequest)
}

void JoinGroupChatRequest::InitAsDefaultInstance() {
}

JoinGroupChatRequest::JoinGroupChatRequest(const JoinGroupChatRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:weizhu.im.JoinGroupChatRequest)
}

void JoinGroupChatRequest::SharedCtor() {
  _cached_size_ = 0;
  group_id_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

JoinGroupChatRequest::~JoinGroupChatRequest() {
  // @@protoc_insertion_point(destructor:weizhu.im.JoinGroupChatRequest)
  SharedDtor();
}

void JoinGroupChatRequest::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void JoinGroupChatRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const JoinGroupChatRequest& JoinGroupChatRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_im_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_im_2eproto();
#endif
  return *default_instance_;
}

JoinGroupChatRequest* JoinGroupChatRequest::default_instance_ = NULL;

JoinGroupChatRequest* JoinGroupChatRequest::New() const {
  return new JoinGroupChatRequest;
}

void JoinGroupChatRequest::Clear() {
  group_id_ = GOOGLE_LONGLONG(0);
  join_user_id_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool JoinGroupChatRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:weizhu.im.JoinGroupChatRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 group_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &group_id_)));
          set_has_group_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_join_user_id;
        break;
      }

      // repeated int64 join_user_id = 2;
      case 2: {
        if (tag == 16) {
         parse_join_user_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 16, input, this->mutable_join_user_id())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_join_user_id())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_join_user_id;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:weizhu.im.JoinGroupChatRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:weizhu.im.JoinGroupChatRequest)
  return false;
#undef DO_
}

void JoinGroupChatRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:weizhu.im.JoinGroupChatRequest)
  // required int64 group_id = 1;
  if (has_group_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->group_id(), output);
  }

  // repeated int64 join_user_id = 2;
  for (int i = 0; i < this->join_user_id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      2, this->join_user_id(i), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:weizhu.im.JoinGroupChatRequest)
}

int JoinGroupChatRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 group_id = 1;
    if (has_group_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->group_id());
    }

  }
  // repeated int64 join_user_id = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->join_user_id_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->join_user_id(i));
    }
    total_size += 1 * this->join_user_id_size() + data_size;
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void JoinGroupChatRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const JoinGroupChatRequest*>(&from));
}

void JoinGroupChatRequest::MergeFrom(const JoinGroupChatRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  join_user_id_.MergeFrom(from.join_user_id_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_group_id()) {
      set_group_id(from.group_id());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void JoinGroupChatRequest::CopyFrom(const JoinGroupChatRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JoinGroupChatRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void JoinGroupChatRequest::Swap(JoinGroupChatRequest* other) {
  if (other != this) {
    std::swap(group_id_, other->group_id_);
    join_user_id_.Swap(&other->join_user_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string JoinGroupChatRequest::GetTypeName() const {
  return "weizhu.im.JoinGroupChatRequest";
}


// ===================================================================

bool JoinGroupChatResponse_Result_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 99:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const JoinGroupChatResponse_Result JoinGroupChatResponse::SUCC;
const JoinGroupChatResponse_Result JoinGroupChatResponse::FAIL_GROUP_NOT_EXIST;
const JoinGroupChatResponse_Result JoinGroupChatResponse::FAIL_GROUP_NOT_JOIN;
const JoinGroupChatResponse_Result JoinGroupChatResponse::FAIL_USER_EMPTY;
const JoinGroupChatResponse_Result JoinGroupChatResponse::FAIL_USER_INVALID;
const JoinGroupChatResponse_Result JoinGroupChatResponse::FAIL_MEMBER_NUM_LIMITED;
const JoinGroupChatResponse_Result JoinGroupChatResponse::FAIL_UNKNOWN;
const JoinGroupChatResponse_Result JoinGroupChatResponse::Result_MIN;
const JoinGroupChatResponse_Result JoinGroupChatResponse::Result_MAX;
const int JoinGroupChatResponse::Result_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int JoinGroupChatResponse::kResultFieldNumber;
const int JoinGroupChatResponse::kFailTextFieldNumber;
const int JoinGroupChatResponse::kGroupMsgFieldNumber;
const int JoinGroupChatResponse::kGroupChatFieldNumber;
#endif  // !_MSC_VER

JoinGroupChatResponse::JoinGroupChatResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:weizhu.im.JoinGroupChatResponse)
}

void JoinGroupChatResponse::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  group_msg_ = const_cast< ::weizhu::im::InstantMessage*>(
      ::weizhu::im::InstantMessage::internal_default_instance());
#else
  group_msg_ = const_cast< ::weizhu::im::InstantMessage*>(&::weizhu::im::InstantMessage::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  group_chat_ = const_cast< ::weizhu::im::GroupChat*>(
      ::weizhu::im::GroupChat::internal_default_instance());
#else
  group_chat_ = const_cast< ::weizhu::im::GroupChat*>(&::weizhu::im::GroupChat::default_instance());
#endif
}

JoinGroupChatResponse::JoinGroupChatResponse(const JoinGroupChatResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:weizhu.im.JoinGroupChatResponse)
}

void JoinGroupChatResponse::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  result_ = 99;
  fail_text_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  group_msg_ = NULL;
  group_chat_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

JoinGroupChatResponse::~JoinGroupChatResponse() {
  // @@protoc_insertion_point(destructor:weizhu.im.JoinGroupChatResponse)
  SharedDtor();
}

void JoinGroupChatResponse::SharedDtor() {
  if (fail_text_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete fail_text_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete group_msg_;
    delete group_chat_;
  }
}

void JoinGroupChatResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const JoinGroupChatResponse& JoinGroupChatResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_im_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_im_2eproto();
#endif
  return *default_instance_;
}

JoinGroupChatResponse* JoinGroupChatResponse::default_instance_ = NULL;

JoinGroupChatResponse* JoinGroupChatResponse::New() const {
  return new JoinGroupChatResponse;
}

void JoinGroupChatResponse::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    result_ = 99;
    if (has_fail_text()) {
      if (fail_text_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        fail_text_->clear();
      }
    }
    if (has_group_msg()) {
      if (group_msg_ != NULL) group_msg_->::weizhu::im::InstantMessage::Clear();
    }
    if (has_group_chat()) {
      if (group_chat_ != NULL) group_chat_->::weizhu::im::GroupChat::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool JoinGroupChatResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:weizhu.im.JoinGroupChatResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .weizhu.im.JoinGroupChatResponse.Result result = 1 [default = FAIL_UNKNOWN];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::weizhu::im::JoinGroupChatResponse_Result_IsValid(value)) {
            set_result(static_cast< ::weizhu::im::JoinGroupChatResponse_Result >(value));
          } else {
            unknown_fields_stream.WriteVarint32(tag);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_fail_text;
        break;
      }

      // optional string fail_text = 2;
      case 2: {
        if (tag == 18) {
         parse_fail_text:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fail_text()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_group_msg;
        break;
      }

      // optional .weizhu.im.InstantMessage group_msg = 3;
      case 3: {
        if (tag == 26) {
         parse_group_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_group_msg()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_group_chat;
        break;
      }

      // optional .weizhu.im.GroupChat group_chat = 4;
      case 4: {
        if (tag == 34) {
         parse_group_chat:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_group_chat()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:weizhu.im.JoinGroupChatResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:weizhu.im.JoinGroupChatResponse)
  return false;
#undef DO_
}

void JoinGroupChatResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:weizhu.im.JoinGroupChatResponse)
  // optional .weizhu.im.JoinGroupChatResponse.Result result = 1 [default = FAIL_UNKNOWN];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  // optional string fail_text = 2;
  if (has_fail_text()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->fail_text(), output);
  }

  // optional .weizhu.im.InstantMessage group_msg = 3;
  if (has_group_msg()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->group_msg(), output);
  }

  // optional .weizhu.im.GroupChat group_chat = 4;
  if (has_group_chat()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, this->group_chat(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:weizhu.im.JoinGroupChatResponse)
}

int JoinGroupChatResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .weizhu.im.JoinGroupChatResponse.Result result = 1 [default = FAIL_UNKNOWN];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

    // optional string fail_text = 2;
    if (has_fail_text()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->fail_text());
    }

    // optional .weizhu.im.InstantMessage group_msg = 3;
    if (has_group_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->group_msg());
    }

    // optional .weizhu.im.GroupChat group_chat = 4;
    if (has_group_chat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->group_chat());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void JoinGroupChatResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const JoinGroupChatResponse*>(&from));
}

void JoinGroupChatResponse::MergeFrom(const JoinGroupChatResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_fail_text()) {
      set_fail_text(from.fail_text());
    }
    if (from.has_group_msg()) {
      mutable_group_msg()->::weizhu::im::InstantMessage::MergeFrom(from.group_msg());
    }
    if (from.has_group_chat()) {
      mutable_group_chat()->::weizhu::im::GroupChat::MergeFrom(from.group_chat());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void JoinGroupChatResponse::CopyFrom(const JoinGroupChatResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JoinGroupChatResponse::IsInitialized() const {

  if (has_group_msg()) {
    if (!this->group_msg().IsInitialized()) return false;
  }
  if (has_group_chat()) {
    if (!this->group_chat().IsInitialized()) return false;
  }
  return true;
}

void JoinGroupChatResponse::Swap(JoinGroupChatResponse* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(fail_text_, other->fail_text_);
    std::swap(group_msg_, other->group_msg_);
    std::swap(group_chat_, other->group_chat_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string JoinGroupChatResponse::GetTypeName() const {
  return "weizhu.im.JoinGroupChatResponse";
}


// ===================================================================

#ifndef _MSC_VER
const int LeaveGroupChatRequest::kGroupIdFieldNumber;
#endif  // !_MSC_VER

LeaveGroupChatRequest::LeaveGroupChatRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:weizhu.im.LeaveGroupChatRequest)
}

void LeaveGroupChatRequest::InitAsDefaultInstance() {
}

LeaveGroupChatRequest::LeaveGroupChatRequest(const LeaveGroupChatRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:weizhu.im.LeaveGroupChatRequest)
}

void LeaveGroupChatRequest::SharedCtor() {
  _cached_size_ = 0;
  group_id_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LeaveGroupChatRequest::~LeaveGroupChatRequest() {
  // @@protoc_insertion_point(destructor:weizhu.im.LeaveGroupChatRequest)
  SharedDtor();
}

void LeaveGroupChatRequest::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void LeaveGroupChatRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const LeaveGroupChatRequest& LeaveGroupChatRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_im_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_im_2eproto();
#endif
  return *default_instance_;
}

LeaveGroupChatRequest* LeaveGroupChatRequest::default_instance_ = NULL;

LeaveGroupChatRequest* LeaveGroupChatRequest::New() const {
  return new LeaveGroupChatRequest;
}

void LeaveGroupChatRequest::Clear() {
  group_id_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool LeaveGroupChatRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:weizhu.im.LeaveGroupChatRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 group_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &group_id_)));
          set_has_group_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:weizhu.im.LeaveGroupChatRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:weizhu.im.LeaveGroupChatRequest)
  return false;
#undef DO_
}

void LeaveGroupChatRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:weizhu.im.LeaveGroupChatRequest)
  // required int64 group_id = 1;
  if (has_group_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->group_id(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:weizhu.im.LeaveGroupChatRequest)
}

int LeaveGroupChatRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 group_id = 1;
    if (has_group_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->group_id());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LeaveGroupChatRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const LeaveGroupChatRequest*>(&from));
}

void LeaveGroupChatRequest::MergeFrom(const LeaveGroupChatRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_group_id()) {
      set_group_id(from.group_id());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void LeaveGroupChatRequest::CopyFrom(const LeaveGroupChatRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LeaveGroupChatRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void LeaveGroupChatRequest::Swap(LeaveGroupChatRequest* other) {
  if (other != this) {
    std::swap(group_id_, other->group_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string LeaveGroupChatRequest::GetTypeName() const {
  return "weizhu.im.LeaveGroupChatRequest";
}


// ===================================================================

bool LeaveGroupChatResponse_Result_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 99:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const LeaveGroupChatResponse_Result LeaveGroupChatResponse::SUCC;
const LeaveGroupChatResponse_Result LeaveGroupChatResponse::FAIL_GROUP_NOT_EXIST;
const LeaveGroupChatResponse_Result LeaveGroupChatResponse::FAIL_GROUP_NOT_JOIN;
const LeaveGroupChatResponse_Result LeaveGroupChatResponse::FAIL_UNKNOWN;
const LeaveGroupChatResponse_Result LeaveGroupChatResponse::Result_MIN;
const LeaveGroupChatResponse_Result LeaveGroupChatResponse::Result_MAX;
const int LeaveGroupChatResponse::Result_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int LeaveGroupChatResponse::kResultFieldNumber;
const int LeaveGroupChatResponse::kFailTextFieldNumber;
const int LeaveGroupChatResponse::kGroupMsgFieldNumber;
const int LeaveGroupChatResponse::kGroupChatFieldNumber;
#endif  // !_MSC_VER

LeaveGroupChatResponse::LeaveGroupChatResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:weizhu.im.LeaveGroupChatResponse)
}

void LeaveGroupChatResponse::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  group_msg_ = const_cast< ::weizhu::im::InstantMessage*>(
      ::weizhu::im::InstantMessage::internal_default_instance());
#else
  group_msg_ = const_cast< ::weizhu::im::InstantMessage*>(&::weizhu::im::InstantMessage::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  group_chat_ = const_cast< ::weizhu::im::GroupChat*>(
      ::weizhu::im::GroupChat::internal_default_instance());
#else
  group_chat_ = const_cast< ::weizhu::im::GroupChat*>(&::weizhu::im::GroupChat::default_instance());
#endif
}

LeaveGroupChatResponse::LeaveGroupChatResponse(const LeaveGroupChatResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:weizhu.im.LeaveGroupChatResponse)
}

void LeaveGroupChatResponse::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  result_ = 99;
  fail_text_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  group_msg_ = NULL;
  group_chat_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LeaveGroupChatResponse::~LeaveGroupChatResponse() {
  // @@protoc_insertion_point(destructor:weizhu.im.LeaveGroupChatResponse)
  SharedDtor();
}

void LeaveGroupChatResponse::SharedDtor() {
  if (fail_text_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete fail_text_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete group_msg_;
    delete group_chat_;
  }
}

void LeaveGroupChatResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const LeaveGroupChatResponse& LeaveGroupChatResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_im_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_im_2eproto();
#endif
  return *default_instance_;
}

LeaveGroupChatResponse* LeaveGroupChatResponse::default_instance_ = NULL;

LeaveGroupChatResponse* LeaveGroupChatResponse::New() const {
  return new LeaveGroupChatResponse;
}

void LeaveGroupChatResponse::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    result_ = 99;
    if (has_fail_text()) {
      if (fail_text_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        fail_text_->clear();
      }
    }
    if (has_group_msg()) {
      if (group_msg_ != NULL) group_msg_->::weizhu::im::InstantMessage::Clear();
    }
    if (has_group_chat()) {
      if (group_chat_ != NULL) group_chat_->::weizhu::im::GroupChat::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool LeaveGroupChatResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:weizhu.im.LeaveGroupChatResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .weizhu.im.LeaveGroupChatResponse.Result result = 1 [default = FAIL_UNKNOWN];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::weizhu::im::LeaveGroupChatResponse_Result_IsValid(value)) {
            set_result(static_cast< ::weizhu::im::LeaveGroupChatResponse_Result >(value));
          } else {
            unknown_fields_stream.WriteVarint32(tag);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_fail_text;
        break;
      }

      // optional string fail_text = 2;
      case 2: {
        if (tag == 18) {
         parse_fail_text:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fail_text()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_group_msg;
        break;
      }

      // optional .weizhu.im.InstantMessage group_msg = 3;
      case 3: {
        if (tag == 26) {
         parse_group_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_group_msg()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_group_chat;
        break;
      }

      // optional .weizhu.im.GroupChat group_chat = 4;
      case 4: {
        if (tag == 34) {
         parse_group_chat:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_group_chat()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:weizhu.im.LeaveGroupChatResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:weizhu.im.LeaveGroupChatResponse)
  return false;
#undef DO_
}

void LeaveGroupChatResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:weizhu.im.LeaveGroupChatResponse)
  // optional .weizhu.im.LeaveGroupChatResponse.Result result = 1 [default = FAIL_UNKNOWN];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  // optional string fail_text = 2;
  if (has_fail_text()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->fail_text(), output);
  }

  // optional .weizhu.im.InstantMessage group_msg = 3;
  if (has_group_msg()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->group_msg(), output);
  }

  // optional .weizhu.im.GroupChat group_chat = 4;
  if (has_group_chat()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, this->group_chat(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:weizhu.im.LeaveGroupChatResponse)
}

int LeaveGroupChatResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .weizhu.im.LeaveGroupChatResponse.Result result = 1 [default = FAIL_UNKNOWN];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

    // optional string fail_text = 2;
    if (has_fail_text()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->fail_text());
    }

    // optional .weizhu.im.InstantMessage group_msg = 3;
    if (has_group_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->group_msg());
    }

    // optional .weizhu.im.GroupChat group_chat = 4;
    if (has_group_chat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->group_chat());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LeaveGroupChatResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const LeaveGroupChatResponse*>(&from));
}

void LeaveGroupChatResponse::MergeFrom(const LeaveGroupChatResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_fail_text()) {
      set_fail_text(from.fail_text());
    }
    if (from.has_group_msg()) {
      mutable_group_msg()->::weizhu::im::InstantMessage::MergeFrom(from.group_msg());
    }
    if (from.has_group_chat()) {
      mutable_group_chat()->::weizhu::im::GroupChat::MergeFrom(from.group_chat());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void LeaveGroupChatResponse::CopyFrom(const LeaveGroupChatResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LeaveGroupChatResponse::IsInitialized() const {

  if (has_group_msg()) {
    if (!this->group_msg().IsInitialized()) return false;
  }
  if (has_group_chat()) {
    if (!this->group_chat().IsInitialized()) return false;
  }
  return true;
}

void LeaveGroupChatResponse::Swap(LeaveGroupChatResponse* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(fail_text_, other->fail_text_);
    std::swap(group_msg_, other->group_msg_);
    std::swap(group_chat_, other->group_chat_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string LeaveGroupChatResponse::GetTypeName() const {
  return "weizhu.im.LeaveGroupChatResponse";
}


// ===================================================================

#ifndef _MSC_VER
const int SendGroupMessageRequest::kGroupIdFieldNumber;
const int SendGroupMessageRequest::kMsgFieldNumber;
#endif  // !_MSC_VER

SendGroupMessageRequest::SendGroupMessageRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:weizhu.im.SendGroupMessageRequest)
}

void SendGroupMessageRequest::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  msg_ = const_cast< ::weizhu::im::InstantMessage*>(
      ::weizhu::im::InstantMessage::internal_default_instance());
#else
  msg_ = const_cast< ::weizhu::im::InstantMessage*>(&::weizhu::im::InstantMessage::default_instance());
#endif
}

SendGroupMessageRequest::SendGroupMessageRequest(const SendGroupMessageRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:weizhu.im.SendGroupMessageRequest)
}

void SendGroupMessageRequest::SharedCtor() {
  _cached_size_ = 0;
  group_id_ = GOOGLE_LONGLONG(0);
  msg_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SendGroupMessageRequest::~SendGroupMessageRequest() {
  // @@protoc_insertion_point(destructor:weizhu.im.SendGroupMessageRequest)
  SharedDtor();
}

void SendGroupMessageRequest::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete msg_;
  }
}

void SendGroupMessageRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const SendGroupMessageRequest& SendGroupMessageRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_im_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_im_2eproto();
#endif
  return *default_instance_;
}

SendGroupMessageRequest* SendGroupMessageRequest::default_instance_ = NULL;

SendGroupMessageRequest* SendGroupMessageRequest::New() const {
  return new SendGroupMessageRequest;
}

void SendGroupMessageRequest::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    group_id_ = GOOGLE_LONGLONG(0);
    if (has_msg()) {
      if (msg_ != NULL) msg_->::weizhu::im::InstantMessage::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool SendGroupMessageRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:weizhu.im.SendGroupMessageRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 group_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &group_id_)));
          set_has_group_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_msg;
        break;
      }

      // required .weizhu.im.InstantMessage msg = 2;
      case 2: {
        if (tag == 18) {
         parse_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_msg()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:weizhu.im.SendGroupMessageRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:weizhu.im.SendGroupMessageRequest)
  return false;
#undef DO_
}

void SendGroupMessageRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:weizhu.im.SendGroupMessageRequest)
  // required int64 group_id = 1;
  if (has_group_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->group_id(), output);
  }

  // required .weizhu.im.InstantMessage msg = 2;
  if (has_msg()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->msg(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:weizhu.im.SendGroupMessageRequest)
}

int SendGroupMessageRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 group_id = 1;
    if (has_group_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->group_id());
    }

    // required .weizhu.im.InstantMessage msg = 2;
    if (has_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->msg());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SendGroupMessageRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const SendGroupMessageRequest*>(&from));
}

void SendGroupMessageRequest::MergeFrom(const SendGroupMessageRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_group_id()) {
      set_group_id(from.group_id());
    }
    if (from.has_msg()) {
      mutable_msg()->::weizhu::im::InstantMessage::MergeFrom(from.msg());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void SendGroupMessageRequest::CopyFrom(const SendGroupMessageRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SendGroupMessageRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_msg()) {
    if (!this->msg().IsInitialized()) return false;
  }
  return true;
}

void SendGroupMessageRequest::Swap(SendGroupMessageRequest* other) {
  if (other != this) {
    std::swap(group_id_, other->group_id_);
    std::swap(msg_, other->msg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string SendGroupMessageRequest::GetTypeName() const {
  return "weizhu.im.SendGroupMessageRequest";
}


// ===================================================================

bool SendGroupMessageResponse_Result_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 99:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const SendGroupMessageResponse_Result SendGroupMessageResponse::SUCC;
const SendGroupMessageResponse_Result SendGroupMessageResponse::FAIL_GROUP_NOT_EXIST;
const SendGroupMessageResponse_Result SendGroupMessageResponse::FAIL_GROUP_NOT_JOIN;
const SendGroupMessageResponse_Result SendGroupMessageResponse::FAIL_MSG_INVALID;
const SendGroupMessageResponse_Result SendGroupMessageResponse::FAIL_UNKNOWN;
const SendGroupMessageResponse_Result SendGroupMessageResponse::Result_MIN;
const SendGroupMessageResponse_Result SendGroupMessageResponse::Result_MAX;
const int SendGroupMessageResponse::Result_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int SendGroupMessageResponse::kResultFieldNumber;
const int SendGroupMessageResponse::kFailTextFieldNumber;
const int SendGroupMessageResponse::kMsgSeqFieldNumber;
const int SendGroupMessageResponse::kMsgTimeFieldNumber;
#endif  // !_MSC_VER

SendGroupMessageResponse::SendGroupMessageResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:weizhu.im.SendGroupMessageResponse)
}

void SendGroupMessageResponse::InitAsDefaultInstance() {
}

SendGroupMessageResponse::SendGroupMessageResponse(const SendGroupMessageResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:weizhu.im.SendGroupMessageResponse)
}

void SendGroupMessageResponse::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  result_ = 99;
  fail_text_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  msg_seq_ = GOOGLE_LONGLONG(0);
  msg_time_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SendGroupMessageResponse::~SendGroupMessageResponse() {
  // @@protoc_insertion_point(destructor:weizhu.im.SendGroupMessageResponse)
  SharedDtor();
}

void SendGroupMessageResponse::SharedDtor() {
  if (fail_text_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete fail_text_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void SendGroupMessageResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const SendGroupMessageResponse& SendGroupMessageResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_im_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_im_2eproto();
#endif
  return *default_instance_;
}

SendGroupMessageResponse* SendGroupMessageResponse::default_instance_ = NULL;

SendGroupMessageResponse* SendGroupMessageResponse::New() const {
  return new SendGroupMessageResponse;
}

void SendGroupMessageResponse::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<SendGroupMessageResponse*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(msg_time_, msg_seq_);
    result_ = 99;
    if (has_fail_text()) {
      if (fail_text_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        fail_text_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool SendGroupMessageResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:weizhu.im.SendGroupMessageResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .weizhu.im.SendGroupMessageResponse.Result result = 1 [default = FAIL_UNKNOWN];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::weizhu::im::SendGroupMessageResponse_Result_IsValid(value)) {
            set_result(static_cast< ::weizhu::im::SendGroupMessageResponse_Result >(value));
          } else {
            unknown_fields_stream.WriteVarint32(tag);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_fail_text;
        break;
      }

      // optional string fail_text = 2;
      case 2: {
        if (tag == 18) {
         parse_fail_text:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fail_text()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_msg_seq;
        break;
      }

      // optional int64 msg_seq = 3;
      case 3: {
        if (tag == 24) {
         parse_msg_seq:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &msg_seq_)));
          set_has_msg_seq();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_msg_time;
        break;
      }

      // optional int32 msg_time = 4;
      case 4: {
        if (tag == 32) {
         parse_msg_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &msg_time_)));
          set_has_msg_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:weizhu.im.SendGroupMessageResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:weizhu.im.SendGroupMessageResponse)
  return false;
#undef DO_
}

void SendGroupMessageResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:weizhu.im.SendGroupMessageResponse)
  // optional .weizhu.im.SendGroupMessageResponse.Result result = 1 [default = FAIL_UNKNOWN];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  // optional string fail_text = 2;
  if (has_fail_text()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->fail_text(), output);
  }

  // optional int64 msg_seq = 3;
  if (has_msg_seq()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->msg_seq(), output);
  }

  // optional int32 msg_time = 4;
  if (has_msg_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->msg_time(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:weizhu.im.SendGroupMessageResponse)
}

int SendGroupMessageResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .weizhu.im.SendGroupMessageResponse.Result result = 1 [default = FAIL_UNKNOWN];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

    // optional string fail_text = 2;
    if (has_fail_text()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->fail_text());
    }

    // optional int64 msg_seq = 3;
    if (has_msg_seq()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->msg_seq());
    }

    // optional int32 msg_time = 4;
    if (has_msg_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->msg_time());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SendGroupMessageResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const SendGroupMessageResponse*>(&from));
}

void SendGroupMessageResponse::MergeFrom(const SendGroupMessageResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_fail_text()) {
      set_fail_text(from.fail_text());
    }
    if (from.has_msg_seq()) {
      set_msg_seq(from.msg_seq());
    }
    if (from.has_msg_time()) {
      set_msg_time(from.msg_time());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void SendGroupMessageResponse::CopyFrom(const SendGroupMessageResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SendGroupMessageResponse::IsInitialized() const {

  return true;
}

void SendGroupMessageResponse::Swap(SendGroupMessageResponse* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(fail_text_, other->fail_text_);
    std::swap(msg_seq_, other->msg_seq_);
    std::swap(msg_time_, other->msg_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string SendGroupMessageResponse::GetTypeName() const {
  return "weizhu.im.SendGroupMessageResponse";
}


// ===================================================================

#ifndef _MSC_VER
const int GetGroupChatListRequest::kLastGroupIdFieldNumber;
const int GetGroupChatListRequest::kLastMsgTimeFieldNumber;
const int GetGroupChatListRequest::kChatSizeFieldNumber;
#endif  // !_MSC_VER

GetGroupChatListRequest::GetGroupChatListRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:weizhu.im.GetGroupChatListRequest)
}

void GetGroupChatListRequest::InitAsDefaultInstance() {
}

GetGroupChatListRequest::GetGroupChatListRequest(const GetGroupChatListRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:weizhu.im.GetGroupChatListRequest)
}

void GetGroupChatListRequest::SharedCtor() {
  _cached_size_ = 0;
  last_group_id_ = GOOGLE_LONGLONG(0);
  last_msg_time_ = 0;
  chat_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetGroupChatListRequest::~GetGroupChatListRequest() {
  // @@protoc_insertion_point(destructor:weizhu.im.GetGroupChatListRequest)
  SharedDtor();
}

void GetGroupChatListRequest::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void GetGroupChatListRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GetGroupChatListRequest& GetGroupChatListRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_im_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_im_2eproto();
#endif
  return *default_instance_;
}

GetGroupChatListRequest* GetGroupChatListRequest::default_instance_ = NULL;

GetGroupChatListRequest* GetGroupChatListRequest::New() const {
  return new GetGroupChatListRequest;
}

void GetGroupChatListRequest::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GetGroupChatListRequest*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(last_group_id_, chat_size_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool GetGroupChatListRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:weizhu.im.GetGroupChatListRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 last_group_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &last_group_id_)));
          set_has_last_group_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_last_msg_time;
        break;
      }

      // optional int32 last_msg_time = 2;
      case 2: {
        if (tag == 16) {
         parse_last_msg_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &last_msg_time_)));
          set_has_last_msg_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_chat_size;
        break;
      }

      // required int32 chat_size = 3;
      case 3: {
        if (tag == 24) {
         parse_chat_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chat_size_)));
          set_has_chat_size();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:weizhu.im.GetGroupChatListRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:weizhu.im.GetGroupChatListRequest)
  return false;
#undef DO_
}

void GetGroupChatListRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:weizhu.im.GetGroupChatListRequest)
  // optional int64 last_group_id = 1;
  if (has_last_group_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->last_group_id(), output);
  }

  // optional int32 last_msg_time = 2;
  if (has_last_msg_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->last_msg_time(), output);
  }

  // required int32 chat_size = 3;
  if (has_chat_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->chat_size(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:weizhu.im.GetGroupChatListRequest)
}

int GetGroupChatListRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 last_group_id = 1;
    if (has_last_group_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->last_group_id());
    }

    // optional int32 last_msg_time = 2;
    if (has_last_msg_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->last_msg_time());
    }

    // required int32 chat_size = 3;
    if (has_chat_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->chat_size());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetGroupChatListRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GetGroupChatListRequest*>(&from));
}

void GetGroupChatListRequest::MergeFrom(const GetGroupChatListRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_last_group_id()) {
      set_last_group_id(from.last_group_id());
    }
    if (from.has_last_msg_time()) {
      set_last_msg_time(from.last_msg_time());
    }
    if (from.has_chat_size()) {
      set_chat_size(from.chat_size());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void GetGroupChatListRequest::CopyFrom(const GetGroupChatListRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetGroupChatListRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000004) != 0x00000004) return false;

  return true;
}

void GetGroupChatListRequest::Swap(GetGroupChatListRequest* other) {
  if (other != this) {
    std::swap(last_group_id_, other->last_group_id_);
    std::swap(last_msg_time_, other->last_msg_time_);
    std::swap(chat_size_, other->chat_size_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string GetGroupChatListRequest::GetTypeName() const {
  return "weizhu.im.GetGroupChatListRequest";
}


// ===================================================================

#ifndef _MSC_VER
const int GetGroupChatListResponse::kChatFieldNumber;
const int GetGroupChatListResponse::kHasMoreFieldNumber;
#endif  // !_MSC_VER

GetGroupChatListResponse::GetGroupChatListResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:weizhu.im.GetGroupChatListResponse)
}

void GetGroupChatListResponse::InitAsDefaultInstance() {
}

GetGroupChatListResponse::GetGroupChatListResponse(const GetGroupChatListResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:weizhu.im.GetGroupChatListResponse)
}

void GetGroupChatListResponse::SharedCtor() {
  _cached_size_ = 0;
  has_more_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetGroupChatListResponse::~GetGroupChatListResponse() {
  // @@protoc_insertion_point(destructor:weizhu.im.GetGroupChatListResponse)
  SharedDtor();
}

void GetGroupChatListResponse::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void GetGroupChatListResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GetGroupChatListResponse& GetGroupChatListResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_im_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_im_2eproto();
#endif
  return *default_instance_;
}

GetGroupChatListResponse* GetGroupChatListResponse::default_instance_ = NULL;

GetGroupChatListResponse* GetGroupChatListResponse::New() const {
  return new GetGroupChatListResponse;
}

void GetGroupChatListResponse::Clear() {
  has_more_ = false;
  chat_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool GetGroupChatListResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:weizhu.im.GetGroupChatListResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .weizhu.im.GroupChat chat = 1;
      case 1: {
        if (tag == 10) {
         parse_chat:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_chat()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_chat;
        if (input->ExpectTag(16)) goto parse_has_more;
        break;
      }

      // required bool has_more = 2;
      case 2: {
        if (tag == 16) {
         parse_has_more:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &has_more_)));
          set_has_has_more();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:weizhu.im.GetGroupChatListResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:weizhu.im.GetGroupChatListResponse)
  return false;
#undef DO_
}

void GetGroupChatListResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:weizhu.im.GetGroupChatListResponse)
  // repeated .weizhu.im.GroupChat chat = 1;
  for (int i = 0; i < this->chat_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->chat(i), output);
  }

  // required bool has_more = 2;
  if (has_has_more()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->has_more(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:weizhu.im.GetGroupChatListResponse)
}

int GetGroupChatListResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // required bool has_more = 2;
    if (has_has_more()) {
      total_size += 1 + 1;
    }

  }
  // repeated .weizhu.im.GroupChat chat = 1;
  total_size += 1 * this->chat_size();
  for (int i = 0; i < this->chat_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->chat(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetGroupChatListResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GetGroupChatListResponse*>(&from));
}

void GetGroupChatListResponse::MergeFrom(const GetGroupChatListResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  chat_.MergeFrom(from.chat_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_has_more()) {
      set_has_more(from.has_more());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void GetGroupChatListResponse::CopyFrom(const GetGroupChatListResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetGroupChatListResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->chat())) return false;
  return true;
}

void GetGroupChatListResponse::Swap(GetGroupChatListResponse* other) {
  if (other != this) {
    chat_.Swap(&other->chat_);
    std::swap(has_more_, other->has_more_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string GetGroupChatListResponse::GetTypeName() const {
  return "weizhu.im.GetGroupChatListResponse";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace im
}  // namespace weizhu

// @@protoc_insertion_point(global_scope)
