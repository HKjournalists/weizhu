// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: login.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "login.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)

namespace weizhu {
namespace login {

void protobuf_ShutdownFile_login_2eproto() {
  delete SmsCode::default_instance_;
  delete SendSmsCodeRequest::default_instance_;
  delete SendSmsCodeResponse::default_instance_;
  delete LoginBySmsCodeRequest::default_instance_;
  delete LoginBySmsCodeResponse::default_instance_;
  delete LoginAutoRequest::default_instance_;
  delete LoginAutoResponse::default_instance_;
  delete GetLoginSmsCodeRequest::default_instance_;
  delete GetLoginSmsCodeResponse::default_instance_;
  delete SendRegisterSmsCodeRequest::default_instance_;
  delete SendRegisterSmsCodeResponse::default_instance_;
  delete RegisterBySmsCodeRequest::default_instance_;
  delete RegisterBySmsCodeResponse::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_login_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_login_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  ::weizhu::protobuf_AddDesc_weizhu_2eproto();
  ::weizhu::user::protobuf_AddDesc_user_2eproto();
  SmsCode::default_instance_ = new SmsCode();
  SendSmsCodeRequest::default_instance_ = new SendSmsCodeRequest();
  SendSmsCodeResponse::default_instance_ = new SendSmsCodeResponse();
  LoginBySmsCodeRequest::default_instance_ = new LoginBySmsCodeRequest();
  LoginBySmsCodeResponse::default_instance_ = new LoginBySmsCodeResponse();
  LoginAutoRequest::default_instance_ = new LoginAutoRequest();
  LoginAutoResponse::default_instance_ = new LoginAutoResponse();
  GetLoginSmsCodeRequest::default_instance_ = new GetLoginSmsCodeRequest();
  GetLoginSmsCodeResponse::default_instance_ = new GetLoginSmsCodeResponse();
  SendRegisterSmsCodeRequest::default_instance_ = new SendRegisterSmsCodeRequest();
  SendRegisterSmsCodeResponse::default_instance_ = new SendRegisterSmsCodeResponse();
  RegisterBySmsCodeRequest::default_instance_ = new RegisterBySmsCodeRequest();
  RegisterBySmsCodeResponse::default_instance_ = new RegisterBySmsCodeResponse();
  SmsCode::default_instance_->InitAsDefaultInstance();
  SendSmsCodeRequest::default_instance_->InitAsDefaultInstance();
  SendSmsCodeResponse::default_instance_->InitAsDefaultInstance();
  LoginBySmsCodeRequest::default_instance_->InitAsDefaultInstance();
  LoginBySmsCodeResponse::default_instance_->InitAsDefaultInstance();
  LoginAutoRequest::default_instance_->InitAsDefaultInstance();
  LoginAutoResponse::default_instance_->InitAsDefaultInstance();
  GetLoginSmsCodeRequest::default_instance_->InitAsDefaultInstance();
  GetLoginSmsCodeResponse::default_instance_->InitAsDefaultInstance();
  SendRegisterSmsCodeRequest::default_instance_->InitAsDefaultInstance();
  SendRegisterSmsCodeResponse::default_instance_->InitAsDefaultInstance();
  RegisterBySmsCodeRequest::default_instance_->InitAsDefaultInstance();
  RegisterBySmsCodeResponse::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_login_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_login_2eproto_once_);
void protobuf_AddDesc_login_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_login_2eproto_once_,
                 &protobuf_AddDesc_login_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_login_2eproto {
  StaticDescriptorInitializer_login_2eproto() {
    protobuf_AddDesc_login_2eproto();
  }
} static_descriptor_initializer_login_2eproto_;
#endif

// ===================================================================

#ifndef _MSC_VER
const int SmsCode::kMobileNoFieldNumber;
const int SmsCode::kSmsCodeFieldNumber;
const int SmsCode::kCreateTimeFieldNumber;
#endif  // !_MSC_VER

SmsCode::SmsCode()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:weizhu.login.SmsCode)
}

void SmsCode::InitAsDefaultInstance() {
}

SmsCode::SmsCode(const SmsCode& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:weizhu.login.SmsCode)
}

void SmsCode::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  mobile_no_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sms_code_ = 0;
  create_time_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SmsCode::~SmsCode() {
  // @@protoc_insertion_point(destructor:weizhu.login.SmsCode)
  SharedDtor();
}

void SmsCode::SharedDtor() {
  if (mobile_no_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete mobile_no_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void SmsCode::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const SmsCode& SmsCode::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_login_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_login_2eproto();
#endif
  return *default_instance_;
}

SmsCode* SmsCode::default_instance_ = NULL;

SmsCode* SmsCode::New() const {
  return new SmsCode;
}

void SmsCode::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<SmsCode*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(sms_code_, create_time_);
    if (has_mobile_no()) {
      if (mobile_no_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        mobile_no_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool SmsCode::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:weizhu.login.SmsCode)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string mobile_no = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mobile_no()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_sms_code;
        break;
      }

      // required int32 sms_code = 2;
      case 2: {
        if (tag == 16) {
         parse_sms_code:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sms_code_)));
          set_has_sms_code();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_create_time;
        break;
      }

      // required int32 create_time = 3;
      case 3: {
        if (tag == 24) {
         parse_create_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &create_time_)));
          set_has_create_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:weizhu.login.SmsCode)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:weizhu.login.SmsCode)
  return false;
#undef DO_
}

void SmsCode::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:weizhu.login.SmsCode)
  // required string mobile_no = 1;
  if (has_mobile_no()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->mobile_no(), output);
  }

  // required int32 sms_code = 2;
  if (has_sms_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->sms_code(), output);
  }

  // required int32 create_time = 3;
  if (has_create_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->create_time(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:weizhu.login.SmsCode)
}

int SmsCode::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string mobile_no = 1;
    if (has_mobile_no()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->mobile_no());
    }

    // required int32 sms_code = 2;
    if (has_sms_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sms_code());
    }

    // required int32 create_time = 3;
    if (has_create_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->create_time());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SmsCode::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const SmsCode*>(&from));
}

void SmsCode::MergeFrom(const SmsCode& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mobile_no()) {
      set_mobile_no(from.mobile_no());
    }
    if (from.has_sms_code()) {
      set_sms_code(from.sms_code());
    }
    if (from.has_create_time()) {
      set_create_time(from.create_time());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void SmsCode::CopyFrom(const SmsCode& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SmsCode::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void SmsCode::Swap(SmsCode* other) {
  if (other != this) {
    std::swap(mobile_no_, other->mobile_no_);
    std::swap(sms_code_, other->sms_code_);
    std::swap(create_time_, other->create_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string SmsCode::GetTypeName() const {
  return "weizhu.login.SmsCode";
}


// ===================================================================

#ifndef _MSC_VER
const int SendSmsCodeRequest::kCompanyKeyFieldNumber;
const int SendSmsCodeRequest::kMobileNoFieldNumber;
#endif  // !_MSC_VER

SendSmsCodeRequest::SendSmsCodeRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:weizhu.login.SendSmsCodeRequest)
}

void SendSmsCodeRequest::InitAsDefaultInstance() {
}

SendSmsCodeRequest::SendSmsCodeRequest(const SendSmsCodeRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:weizhu.login.SendSmsCodeRequest)
}

void SendSmsCodeRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  company_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mobile_no_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SendSmsCodeRequest::~SendSmsCodeRequest() {
  // @@protoc_insertion_point(destructor:weizhu.login.SendSmsCodeRequest)
  SharedDtor();
}

void SendSmsCodeRequest::SharedDtor() {
  if (company_key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete company_key_;
  }
  if (mobile_no_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete mobile_no_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void SendSmsCodeRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const SendSmsCodeRequest& SendSmsCodeRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_login_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_login_2eproto();
#endif
  return *default_instance_;
}

SendSmsCodeRequest* SendSmsCodeRequest::default_instance_ = NULL;

SendSmsCodeRequest* SendSmsCodeRequest::New() const {
  return new SendSmsCodeRequest;
}

void SendSmsCodeRequest::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_company_key()) {
      if (company_key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        company_key_->clear();
      }
    }
    if (has_mobile_no()) {
      if (mobile_no_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        mobile_no_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool SendSmsCodeRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:weizhu.login.SendSmsCodeRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string company_key = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_company_key()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_mobile_no;
        break;
      }

      // required string mobile_no = 2;
      case 2: {
        if (tag == 18) {
         parse_mobile_no:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mobile_no()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:weizhu.login.SendSmsCodeRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:weizhu.login.SendSmsCodeRequest)
  return false;
#undef DO_
}

void SendSmsCodeRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:weizhu.login.SendSmsCodeRequest)
  // required string company_key = 1;
  if (has_company_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->company_key(), output);
  }

  // required string mobile_no = 2;
  if (has_mobile_no()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->mobile_no(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:weizhu.login.SendSmsCodeRequest)
}

int SendSmsCodeRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string company_key = 1;
    if (has_company_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->company_key());
    }

    // required string mobile_no = 2;
    if (has_mobile_no()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->mobile_no());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SendSmsCodeRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const SendSmsCodeRequest*>(&from));
}

void SendSmsCodeRequest::MergeFrom(const SendSmsCodeRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_company_key()) {
      set_company_key(from.company_key());
    }
    if (from.has_mobile_no()) {
      set_mobile_no(from.mobile_no());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void SendSmsCodeRequest::CopyFrom(const SendSmsCodeRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SendSmsCodeRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void SendSmsCodeRequest::Swap(SendSmsCodeRequest* other) {
  if (other != this) {
    std::swap(company_key_, other->company_key_);
    std::swap(mobile_no_, other->mobile_no_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string SendSmsCodeRequest::GetTypeName() const {
  return "weizhu.login.SendSmsCodeRequest";
}


// ===================================================================

bool SendSmsCodeResponse_Result_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 99:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const SendSmsCodeResponse_Result SendSmsCodeResponse::SUCC;
const SendSmsCodeResponse_Result SendSmsCodeResponse::FAIL_MOBILE_NO_INVALID;
const SendSmsCodeResponse_Result SendSmsCodeResponse::FAIL_USER_NOT_EXSIT;
const SendSmsCodeResponse_Result SendSmsCodeResponse::FAIL_SEND_FAIL;
const SendSmsCodeResponse_Result SendSmsCodeResponse::FAIL_SEND_LIMIT_EXCEEDED;
const SendSmsCodeResponse_Result SendSmsCodeResponse::FAIL_UNKNOWN;
const SendSmsCodeResponse_Result SendSmsCodeResponse::Result_MIN;
const SendSmsCodeResponse_Result SendSmsCodeResponse::Result_MAX;
const int SendSmsCodeResponse::Result_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int SendSmsCodeResponse::kResultFieldNumber;
const int SendSmsCodeResponse::kFailTextFieldNumber;
const int SendSmsCodeResponse::kCompanyIdFieldNumber;
#endif  // !_MSC_VER

SendSmsCodeResponse::SendSmsCodeResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:weizhu.login.SendSmsCodeResponse)
}

void SendSmsCodeResponse::InitAsDefaultInstance() {
}

SendSmsCodeResponse::SendSmsCodeResponse(const SendSmsCodeResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:weizhu.login.SendSmsCodeResponse)
}

void SendSmsCodeResponse::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  result_ = 99;
  fail_text_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  company_id_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SendSmsCodeResponse::~SendSmsCodeResponse() {
  // @@protoc_insertion_point(destructor:weizhu.login.SendSmsCodeResponse)
  SharedDtor();
}

void SendSmsCodeResponse::SharedDtor() {
  if (fail_text_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete fail_text_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void SendSmsCodeResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const SendSmsCodeResponse& SendSmsCodeResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_login_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_login_2eproto();
#endif
  return *default_instance_;
}

SendSmsCodeResponse* SendSmsCodeResponse::default_instance_ = NULL;

SendSmsCodeResponse* SendSmsCodeResponse::New() const {
  return new SendSmsCodeResponse;
}

void SendSmsCodeResponse::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    result_ = 99;
    if (has_fail_text()) {
      if (fail_text_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        fail_text_->clear();
      }
    }
    company_id_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool SendSmsCodeResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:weizhu.login.SendSmsCodeResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .weizhu.login.SendSmsCodeResponse.Result result = 1 [default = FAIL_UNKNOWN];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::weizhu::login::SendSmsCodeResponse_Result_IsValid(value)) {
            set_result(static_cast< ::weizhu::login::SendSmsCodeResponse_Result >(value));
          } else {
            unknown_fields_stream.WriteVarint32(tag);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_fail_text;
        break;
      }

      // optional string fail_text = 2;
      case 2: {
        if (tag == 18) {
         parse_fail_text:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fail_text()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_company_id;
        break;
      }

      // optional int64 company_id = 3;
      case 3: {
        if (tag == 24) {
         parse_company_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &company_id_)));
          set_has_company_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:weizhu.login.SendSmsCodeResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:weizhu.login.SendSmsCodeResponse)
  return false;
#undef DO_
}

void SendSmsCodeResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:weizhu.login.SendSmsCodeResponse)
  // optional .weizhu.login.SendSmsCodeResponse.Result result = 1 [default = FAIL_UNKNOWN];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  // optional string fail_text = 2;
  if (has_fail_text()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->fail_text(), output);
  }

  // optional int64 company_id = 3;
  if (has_company_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->company_id(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:weizhu.login.SendSmsCodeResponse)
}

int SendSmsCodeResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .weizhu.login.SendSmsCodeResponse.Result result = 1 [default = FAIL_UNKNOWN];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

    // optional string fail_text = 2;
    if (has_fail_text()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->fail_text());
    }

    // optional int64 company_id = 3;
    if (has_company_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->company_id());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SendSmsCodeResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const SendSmsCodeResponse*>(&from));
}

void SendSmsCodeResponse::MergeFrom(const SendSmsCodeResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_fail_text()) {
      set_fail_text(from.fail_text());
    }
    if (from.has_company_id()) {
      set_company_id(from.company_id());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void SendSmsCodeResponse::CopyFrom(const SendSmsCodeResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SendSmsCodeResponse::IsInitialized() const {

  return true;
}

void SendSmsCodeResponse::Swap(SendSmsCodeResponse* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(fail_text_, other->fail_text_);
    std::swap(company_id_, other->company_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string SendSmsCodeResponse::GetTypeName() const {
  return "weizhu.login.SendSmsCodeResponse";
}


// ===================================================================

#ifndef _MSC_VER
const int LoginBySmsCodeRequest::kCompanyKeyFieldNumber;
const int LoginBySmsCodeRequest::kMobileNoFieldNumber;
const int LoginBySmsCodeRequest::kSmsCodeFieldNumber;
#endif  // !_MSC_VER

LoginBySmsCodeRequest::LoginBySmsCodeRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:weizhu.login.LoginBySmsCodeRequest)
}

void LoginBySmsCodeRequest::InitAsDefaultInstance() {
}

LoginBySmsCodeRequest::LoginBySmsCodeRequest(const LoginBySmsCodeRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:weizhu.login.LoginBySmsCodeRequest)
}

void LoginBySmsCodeRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  company_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mobile_no_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sms_code_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LoginBySmsCodeRequest::~LoginBySmsCodeRequest() {
  // @@protoc_insertion_point(destructor:weizhu.login.LoginBySmsCodeRequest)
  SharedDtor();
}

void LoginBySmsCodeRequest::SharedDtor() {
  if (company_key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete company_key_;
  }
  if (mobile_no_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete mobile_no_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void LoginBySmsCodeRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const LoginBySmsCodeRequest& LoginBySmsCodeRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_login_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_login_2eproto();
#endif
  return *default_instance_;
}

LoginBySmsCodeRequest* LoginBySmsCodeRequest::default_instance_ = NULL;

LoginBySmsCodeRequest* LoginBySmsCodeRequest::New() const {
  return new LoginBySmsCodeRequest;
}

void LoginBySmsCodeRequest::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    if (has_company_key()) {
      if (company_key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        company_key_->clear();
      }
    }
    if (has_mobile_no()) {
      if (mobile_no_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        mobile_no_->clear();
      }
    }
    sms_code_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool LoginBySmsCodeRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:weizhu.login.LoginBySmsCodeRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string company_key = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_company_key()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_mobile_no;
        break;
      }

      // required string mobile_no = 2;
      case 2: {
        if (tag == 18) {
         parse_mobile_no:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mobile_no()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_sms_code;
        break;
      }

      // required int32 sms_code = 3;
      case 3: {
        if (tag == 24) {
         parse_sms_code:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sms_code_)));
          set_has_sms_code();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:weizhu.login.LoginBySmsCodeRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:weizhu.login.LoginBySmsCodeRequest)
  return false;
#undef DO_
}

void LoginBySmsCodeRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:weizhu.login.LoginBySmsCodeRequest)
  // required string company_key = 1;
  if (has_company_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->company_key(), output);
  }

  // required string mobile_no = 2;
  if (has_mobile_no()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->mobile_no(), output);
  }

  // required int32 sms_code = 3;
  if (has_sms_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->sms_code(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:weizhu.login.LoginBySmsCodeRequest)
}

int LoginBySmsCodeRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string company_key = 1;
    if (has_company_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->company_key());
    }

    // required string mobile_no = 2;
    if (has_mobile_no()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->mobile_no());
    }

    // required int32 sms_code = 3;
    if (has_sms_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sms_code());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LoginBySmsCodeRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const LoginBySmsCodeRequest*>(&from));
}

void LoginBySmsCodeRequest::MergeFrom(const LoginBySmsCodeRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_company_key()) {
      set_company_key(from.company_key());
    }
    if (from.has_mobile_no()) {
      set_mobile_no(from.mobile_no());
    }
    if (from.has_sms_code()) {
      set_sms_code(from.sms_code());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void LoginBySmsCodeRequest::CopyFrom(const LoginBySmsCodeRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginBySmsCodeRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void LoginBySmsCodeRequest::Swap(LoginBySmsCodeRequest* other) {
  if (other != this) {
    std::swap(company_key_, other->company_key_);
    std::swap(mobile_no_, other->mobile_no_);
    std::swap(sms_code_, other->sms_code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string LoginBySmsCodeRequest::GetTypeName() const {
  return "weizhu.login.LoginBySmsCodeRequest";
}


// ===================================================================

bool LoginBySmsCodeResponse_Result_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 99:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const LoginBySmsCodeResponse_Result LoginBySmsCodeResponse::SUCC;
const LoginBySmsCodeResponse_Result LoginBySmsCodeResponse::FAIL_MOBILE_NO_INVALID;
const LoginBySmsCodeResponse_Result LoginBySmsCodeResponse::FAIL_SMS_CODE_INVALID;
const LoginBySmsCodeResponse_Result LoginBySmsCodeResponse::FAIL_SMS_CODE_EXPIRED;
const LoginBySmsCodeResponse_Result LoginBySmsCodeResponse::FAIL_UNKNOWN;
const LoginBySmsCodeResponse_Result LoginBySmsCodeResponse::Result_MIN;
const LoginBySmsCodeResponse_Result LoginBySmsCodeResponse::Result_MAX;
const int LoginBySmsCodeResponse::Result_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int LoginBySmsCodeResponse::kResultFieldNumber;
const int LoginBySmsCodeResponse::kFailTextFieldNumber;
const int LoginBySmsCodeResponse::kSessionKeyFieldNumber;
const int LoginBySmsCodeResponse::kUserFieldNumber;
const int LoginBySmsCodeResponse::kRefTeamFieldNumber;
const int LoginBySmsCodeResponse::kRefPositionFieldNumber;
const int LoginBySmsCodeResponse::kRefLevelFieldNumber;
const int LoginBySmsCodeResponse::kCompanyIdFieldNumber;
#endif  // !_MSC_VER

LoginBySmsCodeResponse::LoginBySmsCodeResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:weizhu.login.LoginBySmsCodeResponse)
}

void LoginBySmsCodeResponse::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  user_ = const_cast< ::weizhu::user::User*>(
      ::weizhu::user::User::internal_default_instance());
#else
  user_ = const_cast< ::weizhu::user::User*>(&::weizhu::user::User::default_instance());
#endif
}

LoginBySmsCodeResponse::LoginBySmsCodeResponse(const LoginBySmsCodeResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:weizhu.login.LoginBySmsCodeResponse)
}

void LoginBySmsCodeResponse::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  result_ = 99;
  fail_text_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  session_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_ = NULL;
  company_id_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LoginBySmsCodeResponse::~LoginBySmsCodeResponse() {
  // @@protoc_insertion_point(destructor:weizhu.login.LoginBySmsCodeResponse)
  SharedDtor();
}

void LoginBySmsCodeResponse::SharedDtor() {
  if (fail_text_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete fail_text_;
  }
  if (session_key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete session_key_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete user_;
  }
}

void LoginBySmsCodeResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const LoginBySmsCodeResponse& LoginBySmsCodeResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_login_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_login_2eproto();
#endif
  return *default_instance_;
}

LoginBySmsCodeResponse* LoginBySmsCodeResponse::default_instance_ = NULL;

LoginBySmsCodeResponse* LoginBySmsCodeResponse::New() const {
  return new LoginBySmsCodeResponse;
}

void LoginBySmsCodeResponse::Clear() {
  if (_has_bits_[0 / 32] & 143) {
    result_ = 99;
    if (has_fail_text()) {
      if (fail_text_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        fail_text_->clear();
      }
    }
    if (has_session_key()) {
      if (session_key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        session_key_->clear();
      }
    }
    if (has_user()) {
      if (user_ != NULL) user_->::weizhu::user::User::Clear();
    }
    company_id_ = GOOGLE_LONGLONG(0);
  }
  ref_team_.Clear();
  ref_position_.Clear();
  ref_level_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool LoginBySmsCodeResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:weizhu.login.LoginBySmsCodeResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .weizhu.login.LoginBySmsCodeResponse.Result result = 1 [default = FAIL_UNKNOWN];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::weizhu::login::LoginBySmsCodeResponse_Result_IsValid(value)) {
            set_result(static_cast< ::weizhu::login::LoginBySmsCodeResponse_Result >(value));
          } else {
            unknown_fields_stream.WriteVarint32(tag);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_fail_text;
        break;
      }

      // optional string fail_text = 2;
      case 2: {
        if (tag == 18) {
         parse_fail_text:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fail_text()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_session_key;
        break;
      }

      // optional bytes session_key = 3;
      case 3: {
        if (tag == 26) {
         parse_session_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_session_key()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_user;
        break;
      }

      // optional .weizhu.user.User user = 4;
      case 4: {
        if (tag == 34) {
         parse_user:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_user()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_ref_team;
        break;
      }

      // repeated .weizhu.user.Team ref_team = 5;
      case 5: {
        if (tag == 42) {
         parse_ref_team:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_ref_team()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_ref_team;
        if (input->ExpectTag(50)) goto parse_ref_position;
        break;
      }

      // repeated .weizhu.user.Position ref_position = 6;
      case 6: {
        if (tag == 50) {
         parse_ref_position:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_ref_position()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_ref_position;
        if (input->ExpectTag(58)) goto parse_ref_level;
        break;
      }

      // repeated .weizhu.user.Level ref_level = 7;
      case 7: {
        if (tag == 58) {
         parse_ref_level:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_ref_level()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_ref_level;
        if (input->ExpectTag(64)) goto parse_company_id;
        break;
      }

      // optional int64 company_id = 8;
      case 8: {
        if (tag == 64) {
         parse_company_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &company_id_)));
          set_has_company_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:weizhu.login.LoginBySmsCodeResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:weizhu.login.LoginBySmsCodeResponse)
  return false;
#undef DO_
}

void LoginBySmsCodeResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:weizhu.login.LoginBySmsCodeResponse)
  // optional .weizhu.login.LoginBySmsCodeResponse.Result result = 1 [default = FAIL_UNKNOWN];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  // optional string fail_text = 2;
  if (has_fail_text()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->fail_text(), output);
  }

  // optional bytes session_key = 3;
  if (has_session_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->session_key(), output);
  }

  // optional .weizhu.user.User user = 4;
  if (has_user()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, this->user(), output);
  }

  // repeated .weizhu.user.Team ref_team = 5;
  for (int i = 0; i < this->ref_team_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      5, this->ref_team(i), output);
  }

  // repeated .weizhu.user.Position ref_position = 6;
  for (int i = 0; i < this->ref_position_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      6, this->ref_position(i), output);
  }

  // repeated .weizhu.user.Level ref_level = 7;
  for (int i = 0; i < this->ref_level_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      7, this->ref_level(i), output);
  }

  // optional int64 company_id = 8;
  if (has_company_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(8, this->company_id(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:weizhu.login.LoginBySmsCodeResponse)
}

int LoginBySmsCodeResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .weizhu.login.LoginBySmsCodeResponse.Result result = 1 [default = FAIL_UNKNOWN];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

    // optional string fail_text = 2;
    if (has_fail_text()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->fail_text());
    }

    // optional bytes session_key = 3;
    if (has_session_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->session_key());
    }

    // optional .weizhu.user.User user = 4;
    if (has_user()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->user());
    }

    // optional int64 company_id = 8;
    if (has_company_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->company_id());
    }

  }
  // repeated .weizhu.user.Team ref_team = 5;
  total_size += 1 * this->ref_team_size();
  for (int i = 0; i < this->ref_team_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->ref_team(i));
  }

  // repeated .weizhu.user.Position ref_position = 6;
  total_size += 1 * this->ref_position_size();
  for (int i = 0; i < this->ref_position_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->ref_position(i));
  }

  // repeated .weizhu.user.Level ref_level = 7;
  total_size += 1 * this->ref_level_size();
  for (int i = 0; i < this->ref_level_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->ref_level(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LoginBySmsCodeResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const LoginBySmsCodeResponse*>(&from));
}

void LoginBySmsCodeResponse::MergeFrom(const LoginBySmsCodeResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  ref_team_.MergeFrom(from.ref_team_);
  ref_position_.MergeFrom(from.ref_position_);
  ref_level_.MergeFrom(from.ref_level_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_fail_text()) {
      set_fail_text(from.fail_text());
    }
    if (from.has_session_key()) {
      set_session_key(from.session_key());
    }
    if (from.has_user()) {
      mutable_user()->::weizhu::user::User::MergeFrom(from.user());
    }
    if (from.has_company_id()) {
      set_company_id(from.company_id());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void LoginBySmsCodeResponse::CopyFrom(const LoginBySmsCodeResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginBySmsCodeResponse::IsInitialized() const {

  if (has_user()) {
    if (!this->user().IsInitialized()) return false;
  }
  if (!::google::protobuf::internal::AllAreInitialized(this->ref_team())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->ref_position())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->ref_level())) return false;
  return true;
}

void LoginBySmsCodeResponse::Swap(LoginBySmsCodeResponse* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(fail_text_, other->fail_text_);
    std::swap(session_key_, other->session_key_);
    std::swap(user_, other->user_);
    ref_team_.Swap(&other->ref_team_);
    ref_position_.Swap(&other->ref_position_);
    ref_level_.Swap(&other->ref_level_);
    std::swap(company_id_, other->company_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string LoginBySmsCodeResponse::GetTypeName() const {
  return "weizhu.login.LoginBySmsCodeResponse";
}


// ===================================================================

#ifndef _MSC_VER
const int LoginAutoRequest::kCompanyKeyFieldNumber;
const int LoginAutoRequest::kMobileNoFieldNumber;
const int LoginAutoRequest::kCompanyIdFieldNumber;
const int LoginAutoRequest::kUserIdFieldNumber;
#endif  // !_MSC_VER

LoginAutoRequest::LoginAutoRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:weizhu.login.LoginAutoRequest)
}

void LoginAutoRequest::InitAsDefaultInstance() {
}

LoginAutoRequest::LoginAutoRequest(const LoginAutoRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:weizhu.login.LoginAutoRequest)
}

void LoginAutoRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  company_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mobile_no_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  company_id_ = GOOGLE_LONGLONG(0);
  user_id_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LoginAutoRequest::~LoginAutoRequest() {
  // @@protoc_insertion_point(destructor:weizhu.login.LoginAutoRequest)
  SharedDtor();
}

void LoginAutoRequest::SharedDtor() {
  if (company_key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete company_key_;
  }
  if (mobile_no_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete mobile_no_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void LoginAutoRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const LoginAutoRequest& LoginAutoRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_login_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_login_2eproto();
#endif
  return *default_instance_;
}

LoginAutoRequest* LoginAutoRequest::default_instance_ = NULL;

LoginAutoRequest* LoginAutoRequest::New() const {
  return new LoginAutoRequest;
}

void LoginAutoRequest::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<LoginAutoRequest*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(company_id_, user_id_);
    if (has_company_key()) {
      if (company_key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        company_key_->clear();
      }
    }
    if (has_mobile_no()) {
      if (mobile_no_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        mobile_no_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool LoginAutoRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:weizhu.login.LoginAutoRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string company_key = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_company_key()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_mobile_no;
        break;
      }

      // required string mobile_no = 2;
      case 2: {
        if (tag == 18) {
         parse_mobile_no:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mobile_no()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_company_id;
        break;
      }

      // optional int64 company_id = 3;
      case 3: {
        if (tag == 24) {
         parse_company_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &company_id_)));
          set_has_company_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_user_id;
        break;
      }

      // optional int64 user_id = 4;
      case 4: {
        if (tag == 32) {
         parse_user_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:weizhu.login.LoginAutoRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:weizhu.login.LoginAutoRequest)
  return false;
#undef DO_
}

void LoginAutoRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:weizhu.login.LoginAutoRequest)
  // required string company_key = 1;
  if (has_company_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->company_key(), output);
  }

  // required string mobile_no = 2;
  if (has_mobile_no()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->mobile_no(), output);
  }

  // optional int64 company_id = 3;
  if (has_company_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->company_id(), output);
  }

  // optional int64 user_id = 4;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->user_id(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:weizhu.login.LoginAutoRequest)
}

int LoginAutoRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string company_key = 1;
    if (has_company_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->company_key());
    }

    // required string mobile_no = 2;
    if (has_mobile_no()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->mobile_no());
    }

    // optional int64 company_id = 3;
    if (has_company_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->company_id());
    }

    // optional int64 user_id = 4;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->user_id());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LoginAutoRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const LoginAutoRequest*>(&from));
}

void LoginAutoRequest::MergeFrom(const LoginAutoRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_company_key()) {
      set_company_key(from.company_key());
    }
    if (from.has_mobile_no()) {
      set_mobile_no(from.mobile_no());
    }
    if (from.has_company_id()) {
      set_company_id(from.company_id());
    }
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void LoginAutoRequest::CopyFrom(const LoginAutoRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginAutoRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void LoginAutoRequest::Swap(LoginAutoRequest* other) {
  if (other != this) {
    std::swap(company_key_, other->company_key_);
    std::swap(mobile_no_, other->mobile_no_);
    std::swap(company_id_, other->company_id_);
    std::swap(user_id_, other->user_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string LoginAutoRequest::GetTypeName() const {
  return "weizhu.login.LoginAutoRequest";
}


// ===================================================================

bool LoginAutoResponse_Result_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 99:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const LoginAutoResponse_Result LoginAutoResponse::SUCC;
const LoginAutoResponse_Result LoginAutoResponse::FAIL_AUTO_LOGIN_DISABLE;
const LoginAutoResponse_Result LoginAutoResponse::FAIL_MOBILE_NO_INVALID;
const LoginAutoResponse_Result LoginAutoResponse::FAIL_USER_NOT_FOUND;
const LoginAutoResponse_Result LoginAutoResponse::FAIL_USER_DISABLE;
const LoginAutoResponse_Result LoginAutoResponse::FAIL_UNKNOWN;
const LoginAutoResponse_Result LoginAutoResponse::Result_MIN;
const LoginAutoResponse_Result LoginAutoResponse::Result_MAX;
const int LoginAutoResponse::Result_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int LoginAutoResponse::kResultFieldNumber;
const int LoginAutoResponse::kFailTextFieldNumber;
const int LoginAutoResponse::kSessionKeyFieldNumber;
const int LoginAutoResponse::kUserFieldNumber;
const int LoginAutoResponse::kRefTeamFieldNumber;
const int LoginAutoResponse::kRefPositionFieldNumber;
const int LoginAutoResponse::kRefLevelFieldNumber;
const int LoginAutoResponse::kCompanyIdFieldNumber;
#endif  // !_MSC_VER

LoginAutoResponse::LoginAutoResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:weizhu.login.LoginAutoResponse)
}

void LoginAutoResponse::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  user_ = const_cast< ::weizhu::user::User*>(
      ::weizhu::user::User::internal_default_instance());
#else
  user_ = const_cast< ::weizhu::user::User*>(&::weizhu::user::User::default_instance());
#endif
}

LoginAutoResponse::LoginAutoResponse(const LoginAutoResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:weizhu.login.LoginAutoResponse)
}

void LoginAutoResponse::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  result_ = 99;
  fail_text_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  session_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_ = NULL;
  company_id_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LoginAutoResponse::~LoginAutoResponse() {
  // @@protoc_insertion_point(destructor:weizhu.login.LoginAutoResponse)
  SharedDtor();
}

void LoginAutoResponse::SharedDtor() {
  if (fail_text_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete fail_text_;
  }
  if (session_key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete session_key_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete user_;
  }
}

void LoginAutoResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const LoginAutoResponse& LoginAutoResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_login_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_login_2eproto();
#endif
  return *default_instance_;
}

LoginAutoResponse* LoginAutoResponse::default_instance_ = NULL;

LoginAutoResponse* LoginAutoResponse::New() const {
  return new LoginAutoResponse;
}

void LoginAutoResponse::Clear() {
  if (_has_bits_[0 / 32] & 143) {
    result_ = 99;
    if (has_fail_text()) {
      if (fail_text_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        fail_text_->clear();
      }
    }
    if (has_session_key()) {
      if (session_key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        session_key_->clear();
      }
    }
    if (has_user()) {
      if (user_ != NULL) user_->::weizhu::user::User::Clear();
    }
    company_id_ = GOOGLE_LONGLONG(0);
  }
  ref_team_.Clear();
  ref_position_.Clear();
  ref_level_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool LoginAutoResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:weizhu.login.LoginAutoResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .weizhu.login.LoginAutoResponse.Result result = 1 [default = FAIL_UNKNOWN];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::weizhu::login::LoginAutoResponse_Result_IsValid(value)) {
            set_result(static_cast< ::weizhu::login::LoginAutoResponse_Result >(value));
          } else {
            unknown_fields_stream.WriteVarint32(tag);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_fail_text;
        break;
      }

      // optional string fail_text = 2;
      case 2: {
        if (tag == 18) {
         parse_fail_text:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fail_text()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_session_key;
        break;
      }

      // optional bytes session_key = 3;
      case 3: {
        if (tag == 26) {
         parse_session_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_session_key()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_user;
        break;
      }

      // optional .weizhu.user.User user = 4;
      case 4: {
        if (tag == 34) {
         parse_user:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_user()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_ref_team;
        break;
      }

      // repeated .weizhu.user.Team ref_team = 5;
      case 5: {
        if (tag == 42) {
         parse_ref_team:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_ref_team()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_ref_team;
        if (input->ExpectTag(50)) goto parse_ref_position;
        break;
      }

      // repeated .weizhu.user.Position ref_position = 6;
      case 6: {
        if (tag == 50) {
         parse_ref_position:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_ref_position()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_ref_position;
        if (input->ExpectTag(58)) goto parse_ref_level;
        break;
      }

      // repeated .weizhu.user.Level ref_level = 7;
      case 7: {
        if (tag == 58) {
         parse_ref_level:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_ref_level()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_ref_level;
        if (input->ExpectTag(64)) goto parse_company_id;
        break;
      }

      // optional int64 company_id = 8;
      case 8: {
        if (tag == 64) {
         parse_company_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &company_id_)));
          set_has_company_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:weizhu.login.LoginAutoResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:weizhu.login.LoginAutoResponse)
  return false;
#undef DO_
}

void LoginAutoResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:weizhu.login.LoginAutoResponse)
  // optional .weizhu.login.LoginAutoResponse.Result result = 1 [default = FAIL_UNKNOWN];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  // optional string fail_text = 2;
  if (has_fail_text()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->fail_text(), output);
  }

  // optional bytes session_key = 3;
  if (has_session_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->session_key(), output);
  }

  // optional .weizhu.user.User user = 4;
  if (has_user()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, this->user(), output);
  }

  // repeated .weizhu.user.Team ref_team = 5;
  for (int i = 0; i < this->ref_team_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      5, this->ref_team(i), output);
  }

  // repeated .weizhu.user.Position ref_position = 6;
  for (int i = 0; i < this->ref_position_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      6, this->ref_position(i), output);
  }

  // repeated .weizhu.user.Level ref_level = 7;
  for (int i = 0; i < this->ref_level_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      7, this->ref_level(i), output);
  }

  // optional int64 company_id = 8;
  if (has_company_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(8, this->company_id(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:weizhu.login.LoginAutoResponse)
}

int LoginAutoResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .weizhu.login.LoginAutoResponse.Result result = 1 [default = FAIL_UNKNOWN];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

    // optional string fail_text = 2;
    if (has_fail_text()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->fail_text());
    }

    // optional bytes session_key = 3;
    if (has_session_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->session_key());
    }

    // optional .weizhu.user.User user = 4;
    if (has_user()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->user());
    }

    // optional int64 company_id = 8;
    if (has_company_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->company_id());
    }

  }
  // repeated .weizhu.user.Team ref_team = 5;
  total_size += 1 * this->ref_team_size();
  for (int i = 0; i < this->ref_team_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->ref_team(i));
  }

  // repeated .weizhu.user.Position ref_position = 6;
  total_size += 1 * this->ref_position_size();
  for (int i = 0; i < this->ref_position_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->ref_position(i));
  }

  // repeated .weizhu.user.Level ref_level = 7;
  total_size += 1 * this->ref_level_size();
  for (int i = 0; i < this->ref_level_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->ref_level(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LoginAutoResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const LoginAutoResponse*>(&from));
}

void LoginAutoResponse::MergeFrom(const LoginAutoResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  ref_team_.MergeFrom(from.ref_team_);
  ref_position_.MergeFrom(from.ref_position_);
  ref_level_.MergeFrom(from.ref_level_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_fail_text()) {
      set_fail_text(from.fail_text());
    }
    if (from.has_session_key()) {
      set_session_key(from.session_key());
    }
    if (from.has_user()) {
      mutable_user()->::weizhu::user::User::MergeFrom(from.user());
    }
    if (from.has_company_id()) {
      set_company_id(from.company_id());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void LoginAutoResponse::CopyFrom(const LoginAutoResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginAutoResponse::IsInitialized() const {

  if (has_user()) {
    if (!this->user().IsInitialized()) return false;
  }
  if (!::google::protobuf::internal::AllAreInitialized(this->ref_team())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->ref_position())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->ref_level())) return false;
  return true;
}

void LoginAutoResponse::Swap(LoginAutoResponse* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(fail_text_, other->fail_text_);
    std::swap(session_key_, other->session_key_);
    std::swap(user_, other->user_);
    ref_team_.Swap(&other->ref_team_);
    ref_position_.Swap(&other->ref_position_);
    ref_level_.Swap(&other->ref_level_);
    std::swap(company_id_, other->company_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string LoginAutoResponse::GetTypeName() const {
  return "weizhu.login.LoginAutoResponse";
}


// ===================================================================

#ifndef _MSC_VER
const int GetLoginSmsCodeRequest::kUserIdFieldNumber;
#endif  // !_MSC_VER

GetLoginSmsCodeRequest::GetLoginSmsCodeRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:weizhu.login.GetLoginSmsCodeRequest)
}

void GetLoginSmsCodeRequest::InitAsDefaultInstance() {
}

GetLoginSmsCodeRequest::GetLoginSmsCodeRequest(const GetLoginSmsCodeRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:weizhu.login.GetLoginSmsCodeRequest)
}

void GetLoginSmsCodeRequest::SharedCtor() {
  _cached_size_ = 0;
  user_id_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetLoginSmsCodeRequest::~GetLoginSmsCodeRequest() {
  // @@protoc_insertion_point(destructor:weizhu.login.GetLoginSmsCodeRequest)
  SharedDtor();
}

void GetLoginSmsCodeRequest::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void GetLoginSmsCodeRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GetLoginSmsCodeRequest& GetLoginSmsCodeRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_login_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_login_2eproto();
#endif
  return *default_instance_;
}

GetLoginSmsCodeRequest* GetLoginSmsCodeRequest::default_instance_ = NULL;

GetLoginSmsCodeRequest* GetLoginSmsCodeRequest::New() const {
  return new GetLoginSmsCodeRequest;
}

void GetLoginSmsCodeRequest::Clear() {
  user_id_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool GetLoginSmsCodeRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:weizhu.login.GetLoginSmsCodeRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 user_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:weizhu.login.GetLoginSmsCodeRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:weizhu.login.GetLoginSmsCodeRequest)
  return false;
#undef DO_
}

void GetLoginSmsCodeRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:weizhu.login.GetLoginSmsCodeRequest)
  // required int64 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->user_id(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:weizhu.login.GetLoginSmsCodeRequest)
}

int GetLoginSmsCodeRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->user_id());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetLoginSmsCodeRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GetLoginSmsCodeRequest*>(&from));
}

void GetLoginSmsCodeRequest::MergeFrom(const GetLoginSmsCodeRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void GetLoginSmsCodeRequest::CopyFrom(const GetLoginSmsCodeRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetLoginSmsCodeRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GetLoginSmsCodeRequest::Swap(GetLoginSmsCodeRequest* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string GetLoginSmsCodeRequest::GetTypeName() const {
  return "weizhu.login.GetLoginSmsCodeRequest";
}


// ===================================================================

#ifndef _MSC_VER
const int GetLoginSmsCodeResponse::kSmsCodeFieldNumber;
#endif  // !_MSC_VER

GetLoginSmsCodeResponse::GetLoginSmsCodeResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:weizhu.login.GetLoginSmsCodeResponse)
}

void GetLoginSmsCodeResponse::InitAsDefaultInstance() {
}

GetLoginSmsCodeResponse::GetLoginSmsCodeResponse(const GetLoginSmsCodeResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:weizhu.login.GetLoginSmsCodeResponse)
}

void GetLoginSmsCodeResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetLoginSmsCodeResponse::~GetLoginSmsCodeResponse() {
  // @@protoc_insertion_point(destructor:weizhu.login.GetLoginSmsCodeResponse)
  SharedDtor();
}

void GetLoginSmsCodeResponse::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void GetLoginSmsCodeResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GetLoginSmsCodeResponse& GetLoginSmsCodeResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_login_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_login_2eproto();
#endif
  return *default_instance_;
}

GetLoginSmsCodeResponse* GetLoginSmsCodeResponse::default_instance_ = NULL;

GetLoginSmsCodeResponse* GetLoginSmsCodeResponse::New() const {
  return new GetLoginSmsCodeResponse;
}

void GetLoginSmsCodeResponse::Clear() {
  sms_code_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool GetLoginSmsCodeResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:weizhu.login.GetLoginSmsCodeResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .weizhu.login.SmsCode sms_code = 1;
      case 1: {
        if (tag == 10) {
         parse_sms_code:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_sms_code()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_sms_code;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:weizhu.login.GetLoginSmsCodeResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:weizhu.login.GetLoginSmsCodeResponse)
  return false;
#undef DO_
}

void GetLoginSmsCodeResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:weizhu.login.GetLoginSmsCodeResponse)
  // repeated .weizhu.login.SmsCode sms_code = 1;
  for (int i = 0; i < this->sms_code_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->sms_code(i), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:weizhu.login.GetLoginSmsCodeResponse)
}

int GetLoginSmsCodeResponse::ByteSize() const {
  int total_size = 0;

  // repeated .weizhu.login.SmsCode sms_code = 1;
  total_size += 1 * this->sms_code_size();
  for (int i = 0; i < this->sms_code_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->sms_code(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetLoginSmsCodeResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GetLoginSmsCodeResponse*>(&from));
}

void GetLoginSmsCodeResponse::MergeFrom(const GetLoginSmsCodeResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  sms_code_.MergeFrom(from.sms_code_);
  mutable_unknown_fields()->append(from.unknown_fields());
}

void GetLoginSmsCodeResponse::CopyFrom(const GetLoginSmsCodeResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetLoginSmsCodeResponse::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->sms_code())) return false;
  return true;
}

void GetLoginSmsCodeResponse::Swap(GetLoginSmsCodeResponse* other) {
  if (other != this) {
    sms_code_.Swap(&other->sms_code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string GetLoginSmsCodeResponse::GetTypeName() const {
  return "weizhu.login.GetLoginSmsCodeResponse";
}


// ===================================================================

#ifndef _MSC_VER
const int SendRegisterSmsCodeRequest::kCompanyKeyFieldNumber;
const int SendRegisterSmsCodeRequest::kMobileNoFieldNumber;
#endif  // !_MSC_VER

SendRegisterSmsCodeRequest::SendRegisterSmsCodeRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:weizhu.login.SendRegisterSmsCodeRequest)
}

void SendRegisterSmsCodeRequest::InitAsDefaultInstance() {
}

SendRegisterSmsCodeRequest::SendRegisterSmsCodeRequest(const SendRegisterSmsCodeRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:weizhu.login.SendRegisterSmsCodeRequest)
}

void SendRegisterSmsCodeRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  company_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mobile_no_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SendRegisterSmsCodeRequest::~SendRegisterSmsCodeRequest() {
  // @@protoc_insertion_point(destructor:weizhu.login.SendRegisterSmsCodeRequest)
  SharedDtor();
}

void SendRegisterSmsCodeRequest::SharedDtor() {
  if (company_key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete company_key_;
  }
  if (mobile_no_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete mobile_no_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void SendRegisterSmsCodeRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const SendRegisterSmsCodeRequest& SendRegisterSmsCodeRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_login_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_login_2eproto();
#endif
  return *default_instance_;
}

SendRegisterSmsCodeRequest* SendRegisterSmsCodeRequest::default_instance_ = NULL;

SendRegisterSmsCodeRequest* SendRegisterSmsCodeRequest::New() const {
  return new SendRegisterSmsCodeRequest;
}

void SendRegisterSmsCodeRequest::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_company_key()) {
      if (company_key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        company_key_->clear();
      }
    }
    if (has_mobile_no()) {
      if (mobile_no_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        mobile_no_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool SendRegisterSmsCodeRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:weizhu.login.SendRegisterSmsCodeRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string company_key = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_company_key()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_mobile_no;
        break;
      }

      // required string mobile_no = 2;
      case 2: {
        if (tag == 18) {
         parse_mobile_no:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mobile_no()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:weizhu.login.SendRegisterSmsCodeRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:weizhu.login.SendRegisterSmsCodeRequest)
  return false;
#undef DO_
}

void SendRegisterSmsCodeRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:weizhu.login.SendRegisterSmsCodeRequest)
  // required string company_key = 1;
  if (has_company_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->company_key(), output);
  }

  // required string mobile_no = 2;
  if (has_mobile_no()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->mobile_no(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:weizhu.login.SendRegisterSmsCodeRequest)
}

int SendRegisterSmsCodeRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string company_key = 1;
    if (has_company_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->company_key());
    }

    // required string mobile_no = 2;
    if (has_mobile_no()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->mobile_no());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SendRegisterSmsCodeRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const SendRegisterSmsCodeRequest*>(&from));
}

void SendRegisterSmsCodeRequest::MergeFrom(const SendRegisterSmsCodeRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_company_key()) {
      set_company_key(from.company_key());
    }
    if (from.has_mobile_no()) {
      set_mobile_no(from.mobile_no());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void SendRegisterSmsCodeRequest::CopyFrom(const SendRegisterSmsCodeRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SendRegisterSmsCodeRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void SendRegisterSmsCodeRequest::Swap(SendRegisterSmsCodeRequest* other) {
  if (other != this) {
    std::swap(company_key_, other->company_key_);
    std::swap(mobile_no_, other->mobile_no_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string SendRegisterSmsCodeRequest::GetTypeName() const {
  return "weizhu.login.SendRegisterSmsCodeRequest";
}


// ===================================================================

bool SendRegisterSmsCodeResponse_Result_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 99:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const SendRegisterSmsCodeResponse_Result SendRegisterSmsCodeResponse::SUCC;
const SendRegisterSmsCodeResponse_Result SendRegisterSmsCodeResponse::FAIL_MOBILE_NO_INVALID;
const SendRegisterSmsCodeResponse_Result SendRegisterSmsCodeResponse::FAIL_SEND_FAIL;
const SendRegisterSmsCodeResponse_Result SendRegisterSmsCodeResponse::FAIL_SEND_LIMIT_EXCEEDED;
const SendRegisterSmsCodeResponse_Result SendRegisterSmsCodeResponse::FAIL_UNKNOWN;
const SendRegisterSmsCodeResponse_Result SendRegisterSmsCodeResponse::Result_MIN;
const SendRegisterSmsCodeResponse_Result SendRegisterSmsCodeResponse::Result_MAX;
const int SendRegisterSmsCodeResponse::Result_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int SendRegisterSmsCodeResponse::kResultFieldNumber;
const int SendRegisterSmsCodeResponse::kFailTextFieldNumber;
const int SendRegisterSmsCodeResponse::kCompanyIdFieldNumber;
#endif  // !_MSC_VER

SendRegisterSmsCodeResponse::SendRegisterSmsCodeResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:weizhu.login.SendRegisterSmsCodeResponse)
}

void SendRegisterSmsCodeResponse::InitAsDefaultInstance() {
}

SendRegisterSmsCodeResponse::SendRegisterSmsCodeResponse(const SendRegisterSmsCodeResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:weizhu.login.SendRegisterSmsCodeResponse)
}

void SendRegisterSmsCodeResponse::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  result_ = 99;
  fail_text_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  company_id_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SendRegisterSmsCodeResponse::~SendRegisterSmsCodeResponse() {
  // @@protoc_insertion_point(destructor:weizhu.login.SendRegisterSmsCodeResponse)
  SharedDtor();
}

void SendRegisterSmsCodeResponse::SharedDtor() {
  if (fail_text_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete fail_text_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void SendRegisterSmsCodeResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const SendRegisterSmsCodeResponse& SendRegisterSmsCodeResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_login_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_login_2eproto();
#endif
  return *default_instance_;
}

SendRegisterSmsCodeResponse* SendRegisterSmsCodeResponse::default_instance_ = NULL;

SendRegisterSmsCodeResponse* SendRegisterSmsCodeResponse::New() const {
  return new SendRegisterSmsCodeResponse;
}

void SendRegisterSmsCodeResponse::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    result_ = 99;
    if (has_fail_text()) {
      if (fail_text_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        fail_text_->clear();
      }
    }
    company_id_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool SendRegisterSmsCodeResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:weizhu.login.SendRegisterSmsCodeResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .weizhu.login.SendRegisterSmsCodeResponse.Result result = 1 [default = FAIL_UNKNOWN];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::weizhu::login::SendRegisterSmsCodeResponse_Result_IsValid(value)) {
            set_result(static_cast< ::weizhu::login::SendRegisterSmsCodeResponse_Result >(value));
          } else {
            unknown_fields_stream.WriteVarint32(tag);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_fail_text;
        break;
      }

      // optional string fail_text = 2;
      case 2: {
        if (tag == 18) {
         parse_fail_text:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fail_text()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_company_id;
        break;
      }

      // optional int64 company_id = 3;
      case 3: {
        if (tag == 24) {
         parse_company_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &company_id_)));
          set_has_company_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:weizhu.login.SendRegisterSmsCodeResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:weizhu.login.SendRegisterSmsCodeResponse)
  return false;
#undef DO_
}

void SendRegisterSmsCodeResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:weizhu.login.SendRegisterSmsCodeResponse)
  // optional .weizhu.login.SendRegisterSmsCodeResponse.Result result = 1 [default = FAIL_UNKNOWN];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  // optional string fail_text = 2;
  if (has_fail_text()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->fail_text(), output);
  }

  // optional int64 company_id = 3;
  if (has_company_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->company_id(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:weizhu.login.SendRegisterSmsCodeResponse)
}

int SendRegisterSmsCodeResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .weizhu.login.SendRegisterSmsCodeResponse.Result result = 1 [default = FAIL_UNKNOWN];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

    // optional string fail_text = 2;
    if (has_fail_text()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->fail_text());
    }

    // optional int64 company_id = 3;
    if (has_company_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->company_id());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SendRegisterSmsCodeResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const SendRegisterSmsCodeResponse*>(&from));
}

void SendRegisterSmsCodeResponse::MergeFrom(const SendRegisterSmsCodeResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_fail_text()) {
      set_fail_text(from.fail_text());
    }
    if (from.has_company_id()) {
      set_company_id(from.company_id());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void SendRegisterSmsCodeResponse::CopyFrom(const SendRegisterSmsCodeResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SendRegisterSmsCodeResponse::IsInitialized() const {

  return true;
}

void SendRegisterSmsCodeResponse::Swap(SendRegisterSmsCodeResponse* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(fail_text_, other->fail_text_);
    std::swap(company_id_, other->company_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string SendRegisterSmsCodeResponse::GetTypeName() const {
  return "weizhu.login.SendRegisterSmsCodeResponse";
}


// ===================================================================

#ifndef _MSC_VER
const int RegisterBySmsCodeRequest::kCompanyKeyFieldNumber;
const int RegisterBySmsCodeRequest::kUserNameFieldNumber;
const int RegisterBySmsCodeRequest::kGenderFieldNumber;
const int RegisterBySmsCodeRequest::kEmailFieldNumber;
const int RegisterBySmsCodeRequest::kTeamFieldNumber;
const int RegisterBySmsCodeRequest::kPositionFieldNumber;
const int RegisterBySmsCodeRequest::kMobileNoFieldNumber;
const int RegisterBySmsCodeRequest::kSmsCodeFieldNumber;
const int RegisterBySmsCodeRequest::kExtsNameFieldNumber;
const int RegisterBySmsCodeRequest::kExtsValueFieldNumber;
const int RegisterBySmsCodeRequest::kLevelFieldNumber;
const int RegisterBySmsCodeRequest::kPhoneNoFieldNumber;
#endif  // !_MSC_VER

RegisterBySmsCodeRequest::RegisterBySmsCodeRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:weizhu.login.RegisterBySmsCodeRequest)
}

void RegisterBySmsCodeRequest::InitAsDefaultInstance() {
}

RegisterBySmsCodeRequest::RegisterBySmsCodeRequest(const RegisterBySmsCodeRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:weizhu.login.RegisterBySmsCodeRequest)
}

void RegisterBySmsCodeRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  company_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  gender_ = 0;
  email_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  position_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mobile_no_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sms_code_ = 0;
  level_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  phone_no_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RegisterBySmsCodeRequest::~RegisterBySmsCodeRequest() {
  // @@protoc_insertion_point(destructor:weizhu.login.RegisterBySmsCodeRequest)
  SharedDtor();
}

void RegisterBySmsCodeRequest::SharedDtor() {
  if (company_key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete company_key_;
  }
  if (user_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete user_name_;
  }
  if (email_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete email_;
  }
  if (position_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete position_;
  }
  if (mobile_no_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete mobile_no_;
  }
  if (level_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete level_;
  }
  if (phone_no_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete phone_no_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void RegisterBySmsCodeRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const RegisterBySmsCodeRequest& RegisterBySmsCodeRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_login_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_login_2eproto();
#endif
  return *default_instance_;
}

RegisterBySmsCodeRequest* RegisterBySmsCodeRequest::default_instance_ = NULL;

RegisterBySmsCodeRequest* RegisterBySmsCodeRequest::New() const {
  return new RegisterBySmsCodeRequest;
}

void RegisterBySmsCodeRequest::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<RegisterBySmsCodeRequest*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 239) {
    ZR_(gender_, sms_code_);
    if (has_company_key()) {
      if (company_key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        company_key_->clear();
      }
    }
    if (has_user_name()) {
      if (user_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        user_name_->clear();
      }
    }
    if (has_email()) {
      if (email_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        email_->clear();
      }
    }
    if (has_position()) {
      if (position_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        position_->clear();
      }
    }
    if (has_mobile_no()) {
      if (mobile_no_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        mobile_no_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 3072) {
    if (has_level()) {
      if (level_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        level_->clear();
      }
    }
    if (has_phone_no()) {
      if (phone_no_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        phone_no_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  team_.Clear();
  exts_name_.Clear();
  exts_value_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool RegisterBySmsCodeRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:weizhu.login.RegisterBySmsCodeRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string company_key = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_company_key()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_user_name;
        break;
      }

      // required string user_name = 2;
      case 2: {
        if (tag == 18) {
         parse_user_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_gender;
        break;
      }

      // optional .weizhu.user.UserBase.Gender gender = 3;
      case 3: {
        if (tag == 24) {
         parse_gender:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::weizhu::user::UserBase_Gender_IsValid(value)) {
            set_gender(static_cast< ::weizhu::user::UserBase_Gender >(value));
          } else {
            unknown_fields_stream.WriteVarint32(tag);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_email;
        break;
      }

      // optional string email = 4;
      case 4: {
        if (tag == 34) {
         parse_email:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_email()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_team;
        break;
      }

      // repeated string team = 5;
      case 5: {
        if (tag == 42) {
         parse_team:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_team()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_team;
        if (input->ExpectTag(50)) goto parse_position;
        break;
      }

      // optional string position = 6;
      case 6: {
        if (tag == 50) {
         parse_position:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_position()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_mobile_no;
        break;
      }

      // required string mobile_no = 7;
      case 7: {
        if (tag == 58) {
         parse_mobile_no:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mobile_no()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_sms_code;
        break;
      }

      // required int32 sms_code = 8;
      case 8: {
        if (tag == 64) {
         parse_sms_code:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sms_code_)));
          set_has_sms_code();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_exts_name;
        break;
      }

      // repeated string exts_name = 9;
      case 9: {
        if (tag == 74) {
         parse_exts_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_exts_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_exts_name;
        if (input->ExpectTag(82)) goto parse_exts_value;
        break;
      }

      // repeated string exts_value = 10;
      case 10: {
        if (tag == 82) {
         parse_exts_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_exts_value()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_exts_value;
        if (input->ExpectTag(90)) goto parse_level;
        break;
      }

      // optional string level = 11;
      case 11: {
        if (tag == 90) {
         parse_level:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_level()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_phone_no;
        break;
      }

      // optional string phone_no = 12;
      case 12: {
        if (tag == 98) {
         parse_phone_no:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_phone_no()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:weizhu.login.RegisterBySmsCodeRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:weizhu.login.RegisterBySmsCodeRequest)
  return false;
#undef DO_
}

void RegisterBySmsCodeRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:weizhu.login.RegisterBySmsCodeRequest)
  // required string company_key = 1;
  if (has_company_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->company_key(), output);
  }

  // required string user_name = 2;
  if (has_user_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->user_name(), output);
  }

  // optional .weizhu.user.UserBase.Gender gender = 3;
  if (has_gender()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->gender(), output);
  }

  // optional string email = 4;
  if (has_email()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->email(), output);
  }

  // repeated string team = 5;
  for (int i = 0; i < this->team_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->team(i), output);
  }

  // optional string position = 6;
  if (has_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->position(), output);
  }

  // required string mobile_no = 7;
  if (has_mobile_no()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->mobile_no(), output);
  }

  // required int32 sms_code = 8;
  if (has_sms_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->sms_code(), output);
  }

  // repeated string exts_name = 9;
  for (int i = 0; i < this->exts_name_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->exts_name(i), output);
  }

  // repeated string exts_value = 10;
  for (int i = 0; i < this->exts_value_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->exts_value(i), output);
  }

  // optional string level = 11;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->level(), output);
  }

  // optional string phone_no = 12;
  if (has_phone_no()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      12, this->phone_no(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:weizhu.login.RegisterBySmsCodeRequest)
}

int RegisterBySmsCodeRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string company_key = 1;
    if (has_company_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->company_key());
    }

    // required string user_name = 2;
    if (has_user_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->user_name());
    }

    // optional .weizhu.user.UserBase.Gender gender = 3;
    if (has_gender()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->gender());
    }

    // optional string email = 4;
    if (has_email()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->email());
    }

    // optional string position = 6;
    if (has_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->position());
    }

    // required string mobile_no = 7;
    if (has_mobile_no()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->mobile_no());
    }

    // required int32 sms_code = 8;
    if (has_sms_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sms_code());
    }

  }
  if (_has_bits_[10 / 32] & (0xffu << (10 % 32))) {
    // optional string level = 11;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->level());
    }

    // optional string phone_no = 12;
    if (has_phone_no()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->phone_no());
    }

  }
  // repeated string team = 5;
  total_size += 1 * this->team_size();
  for (int i = 0; i < this->team_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->team(i));
  }

  // repeated string exts_name = 9;
  total_size += 1 * this->exts_name_size();
  for (int i = 0; i < this->exts_name_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->exts_name(i));
  }

  // repeated string exts_value = 10;
  total_size += 1 * this->exts_value_size();
  for (int i = 0; i < this->exts_value_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->exts_value(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RegisterBySmsCodeRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const RegisterBySmsCodeRequest*>(&from));
}

void RegisterBySmsCodeRequest::MergeFrom(const RegisterBySmsCodeRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  team_.MergeFrom(from.team_);
  exts_name_.MergeFrom(from.exts_name_);
  exts_value_.MergeFrom(from.exts_value_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_company_key()) {
      set_company_key(from.company_key());
    }
    if (from.has_user_name()) {
      set_user_name(from.user_name());
    }
    if (from.has_gender()) {
      set_gender(from.gender());
    }
    if (from.has_email()) {
      set_email(from.email());
    }
    if (from.has_position()) {
      set_position(from.position());
    }
    if (from.has_mobile_no()) {
      set_mobile_no(from.mobile_no());
    }
    if (from.has_sms_code()) {
      set_sms_code(from.sms_code());
    }
  }
  if (from._has_bits_[10 / 32] & (0xffu << (10 % 32))) {
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_phone_no()) {
      set_phone_no(from.phone_no());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void RegisterBySmsCodeRequest::CopyFrom(const RegisterBySmsCodeRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegisterBySmsCodeRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x000000c3) != 0x000000c3) return false;

  return true;
}

void RegisterBySmsCodeRequest::Swap(RegisterBySmsCodeRequest* other) {
  if (other != this) {
    std::swap(company_key_, other->company_key_);
    std::swap(user_name_, other->user_name_);
    std::swap(gender_, other->gender_);
    std::swap(email_, other->email_);
    team_.Swap(&other->team_);
    std::swap(position_, other->position_);
    std::swap(mobile_no_, other->mobile_no_);
    std::swap(sms_code_, other->sms_code_);
    exts_name_.Swap(&other->exts_name_);
    exts_value_.Swap(&other->exts_value_);
    std::swap(level_, other->level_);
    std::swap(phone_no_, other->phone_no_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string RegisterBySmsCodeRequest::GetTypeName() const {
  return "weizhu.login.RegisterBySmsCodeRequest";
}


// ===================================================================

bool RegisterBySmsCodeResponse_Result_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 99:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const RegisterBySmsCodeResponse_Result RegisterBySmsCodeResponse::SUCC;
const RegisterBySmsCodeResponse_Result RegisterBySmsCodeResponse::FAIL_NAME_INVALID;
const RegisterBySmsCodeResponse_Result RegisterBySmsCodeResponse::FAIL_EMAIL_INVALID;
const RegisterBySmsCodeResponse_Result RegisterBySmsCodeResponse::FAIL_TEAM_INVALID;
const RegisterBySmsCodeResponse_Result RegisterBySmsCodeResponse::FAIL_POSITION_INVALID;
const RegisterBySmsCodeResponse_Result RegisterBySmsCodeResponse::FAIL_MOBILE_NO_INVALID;
const RegisterBySmsCodeResponse_Result RegisterBySmsCodeResponse::FAIL_SMS_CODE_INVALID;
const RegisterBySmsCodeResponse_Result RegisterBySmsCodeResponse::FAIL_SMS_CODE_EXPIRED;
const RegisterBySmsCodeResponse_Result RegisterBySmsCodeResponse::FAIL_LEVEL_INVALID;
const RegisterBySmsCodeResponse_Result RegisterBySmsCodeResponse::FAIL_UNKNOWN;
const RegisterBySmsCodeResponse_Result RegisterBySmsCodeResponse::Result_MIN;
const RegisterBySmsCodeResponse_Result RegisterBySmsCodeResponse::Result_MAX;
const int RegisterBySmsCodeResponse::Result_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int RegisterBySmsCodeResponse::kResultFieldNumber;
const int RegisterBySmsCodeResponse::kFailTextFieldNumber;
const int RegisterBySmsCodeResponse::kCompanyIdFieldNumber;
#endif  // !_MSC_VER

RegisterBySmsCodeResponse::RegisterBySmsCodeResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:weizhu.login.RegisterBySmsCodeResponse)
}

void RegisterBySmsCodeResponse::InitAsDefaultInstance() {
}

RegisterBySmsCodeResponse::RegisterBySmsCodeResponse(const RegisterBySmsCodeResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:weizhu.login.RegisterBySmsCodeResponse)
}

void RegisterBySmsCodeResponse::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  result_ = 99;
  fail_text_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  company_id_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RegisterBySmsCodeResponse::~RegisterBySmsCodeResponse() {
  // @@protoc_insertion_point(destructor:weizhu.login.RegisterBySmsCodeResponse)
  SharedDtor();
}

void RegisterBySmsCodeResponse::SharedDtor() {
  if (fail_text_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete fail_text_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void RegisterBySmsCodeResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const RegisterBySmsCodeResponse& RegisterBySmsCodeResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_login_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_login_2eproto();
#endif
  return *default_instance_;
}

RegisterBySmsCodeResponse* RegisterBySmsCodeResponse::default_instance_ = NULL;

RegisterBySmsCodeResponse* RegisterBySmsCodeResponse::New() const {
  return new RegisterBySmsCodeResponse;
}

void RegisterBySmsCodeResponse::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    result_ = 99;
    if (has_fail_text()) {
      if (fail_text_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        fail_text_->clear();
      }
    }
    company_id_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool RegisterBySmsCodeResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:weizhu.login.RegisterBySmsCodeResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .weizhu.login.RegisterBySmsCodeResponse.Result result = 1 [default = FAIL_UNKNOWN];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::weizhu::login::RegisterBySmsCodeResponse_Result_IsValid(value)) {
            set_result(static_cast< ::weizhu::login::RegisterBySmsCodeResponse_Result >(value));
          } else {
            unknown_fields_stream.WriteVarint32(tag);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_fail_text;
        break;
      }

      // optional string fail_text = 2;
      case 2: {
        if (tag == 18) {
         parse_fail_text:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fail_text()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_company_id;
        break;
      }

      // optional int64 company_id = 3;
      case 3: {
        if (tag == 24) {
         parse_company_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &company_id_)));
          set_has_company_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:weizhu.login.RegisterBySmsCodeResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:weizhu.login.RegisterBySmsCodeResponse)
  return false;
#undef DO_
}

void RegisterBySmsCodeResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:weizhu.login.RegisterBySmsCodeResponse)
  // optional .weizhu.login.RegisterBySmsCodeResponse.Result result = 1 [default = FAIL_UNKNOWN];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  // optional string fail_text = 2;
  if (has_fail_text()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->fail_text(), output);
  }

  // optional int64 company_id = 3;
  if (has_company_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->company_id(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:weizhu.login.RegisterBySmsCodeResponse)
}

int RegisterBySmsCodeResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .weizhu.login.RegisterBySmsCodeResponse.Result result = 1 [default = FAIL_UNKNOWN];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

    // optional string fail_text = 2;
    if (has_fail_text()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->fail_text());
    }

    // optional int64 company_id = 3;
    if (has_company_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->company_id());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RegisterBySmsCodeResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const RegisterBySmsCodeResponse*>(&from));
}

void RegisterBySmsCodeResponse::MergeFrom(const RegisterBySmsCodeResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_fail_text()) {
      set_fail_text(from.fail_text());
    }
    if (from.has_company_id()) {
      set_company_id(from.company_id());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void RegisterBySmsCodeResponse::CopyFrom(const RegisterBySmsCodeResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegisterBySmsCodeResponse::IsInitialized() const {

  return true;
}

void RegisterBySmsCodeResponse::Swap(RegisterBySmsCodeResponse* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(fail_text_, other->fail_text_);
    std::swap(company_id_, other->company_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string RegisterBySmsCodeResponse::GetTypeName() const {
  return "weizhu.login.RegisterBySmsCodeResponse";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace login
}  // namespace weizhu

// @@protoc_insertion_point(global_scope)
