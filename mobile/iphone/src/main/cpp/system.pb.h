// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: system.proto

#ifndef PROTOBUF_system_2eproto__INCLUDED
#define PROTOBUF_system_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include "weizhu.pb.h"
// @@protoc_insertion_point(includes)

namespace weizhu {
namespace system {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_system_2eproto();
void protobuf_AssignDesc_system_2eproto();
void protobuf_ShutdownFile_system_2eproto();

class SystemConfigStatePush;
class SystemNewVersionStatePush;
class UserConfig;
class AdminConfig;
class BossConfig;
class ImageConfig;
class DynamicConfig;
class VideoConfig;
class NewVersion;
class GetUserConfigResponse;
class GetAdminConfigResponse;
class GetBossConfigResponse;
class CheckNewVersionResponse;
class SendFeedbackRequest;
class UpdateBadgeNumberRequest;
class GetAuthUrlRequest;
class GetAuthUrlResponse;
class GetAuthUrlResponse_AuthCookie;
class Config;
class ConfigV2;
class GetConfigResponse;
class GetConfigV2Response;

enum GetAuthUrlResponse_Result {
  GetAuthUrlResponse_Result_SUCC = 0,
  GetAuthUrlResponse_Result_FAIL_UNKNOWN = 99
};
bool GetAuthUrlResponse_Result_IsValid(int value);
const GetAuthUrlResponse_Result GetAuthUrlResponse_Result_Result_MIN = GetAuthUrlResponse_Result_SUCC;
const GetAuthUrlResponse_Result GetAuthUrlResponse_Result_Result_MAX = GetAuthUrlResponse_Result_FAIL_UNKNOWN;
const int GetAuthUrlResponse_Result_Result_ARRAYSIZE = GetAuthUrlResponse_Result_Result_MAX + 1;

// ===================================================================

class SystemConfigStatePush : public ::google::protobuf::MessageLite {
 public:
  SystemConfigStatePush();
  virtual ~SystemConfigStatePush();

  SystemConfigStatePush(const SystemConfigStatePush& from);

  inline SystemConfigStatePush& operator=(const SystemConfigStatePush& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const SystemConfigStatePush& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const SystemConfigStatePush* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(SystemConfigStatePush* other);

  // implements Message ----------------------------------------------

  SystemConfigStatePush* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const SystemConfigStatePush& from);
  void MergeFrom(const SystemConfigStatePush& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:weizhu.system.SystemConfigStatePush)
 private:

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_system_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_system_2eproto();
  #endif
  friend void protobuf_AssignDesc_system_2eproto();
  friend void protobuf_ShutdownFile_system_2eproto();

  void InitAsDefaultInstance();
  static SystemConfigStatePush* default_instance_;
};
// -------------------------------------------------------------------

class SystemNewVersionStatePush : public ::google::protobuf::MessageLite {
 public:
  SystemNewVersionStatePush();
  virtual ~SystemNewVersionStatePush();

  SystemNewVersionStatePush(const SystemNewVersionStatePush& from);

  inline SystemNewVersionStatePush& operator=(const SystemNewVersionStatePush& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const SystemNewVersionStatePush& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const SystemNewVersionStatePush* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(SystemNewVersionStatePush* other);

  // implements Message ----------------------------------------------

  SystemNewVersionStatePush* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const SystemNewVersionStatePush& from);
  void MergeFrom(const SystemNewVersionStatePush& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:weizhu.system.SystemNewVersionStatePush)
 private:

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_system_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_system_2eproto();
  #endif
  friend void protobuf_AssignDesc_system_2eproto();
  friend void protobuf_ShutdownFile_system_2eproto();

  void InitAsDefaultInstance();
  static SystemNewVersionStatePush* default_instance_;
};
// -------------------------------------------------------------------

class UserConfig : public ::google::protobuf::MessageLite {
 public:
  UserConfig();
  virtual ~UserConfig();

  UserConfig(const UserConfig& from);

  inline UserConfig& operator=(const UserConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const UserConfig& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const UserConfig* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(UserConfig* other);

  // implements Message ----------------------------------------------

  UserConfig* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const UserConfig& from);
  void MergeFrom(const UserConfig& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string http_api_url = 1;
  inline bool has_http_api_url() const;
  inline void clear_http_api_url();
  static const int kHttpApiUrlFieldNumber = 1;
  inline const ::std::string& http_api_url() const;
  inline void set_http_api_url(const ::std::string& value);
  inline void set_http_api_url(const char* value);
  inline void set_http_api_url(const char* value, size_t size);
  inline ::std::string* mutable_http_api_url();
  inline ::std::string* release_http_api_url();
  inline void set_allocated_http_api_url(::std::string* http_api_url);

  // required string socket_conn_addr = 2;
  inline bool has_socket_conn_addr() const;
  inline void clear_socket_conn_addr();
  static const int kSocketConnAddrFieldNumber = 2;
  inline const ::std::string& socket_conn_addr() const;
  inline void set_socket_conn_addr(const ::std::string& value);
  inline void set_socket_conn_addr(const char* value);
  inline void set_socket_conn_addr(const char* value, size_t size);
  inline ::std::string* mutable_socket_conn_addr();
  inline ::std::string* release_socket_conn_addr();
  inline void set_allocated_socket_conn_addr(::std::string* socket_conn_addr);

  // required string image_upload_url = 3;
  inline bool has_image_upload_url() const;
  inline void clear_image_upload_url();
  static const int kImageUploadUrlFieldNumber = 3;
  inline const ::std::string& image_upload_url() const;
  inline void set_image_upload_url(const ::std::string& value);
  inline void set_image_upload_url(const char* value);
  inline void set_image_upload_url(const char* value, size_t size);
  inline ::std::string* mutable_image_upload_url();
  inline ::std::string* release_image_upload_url();
  inline void set_allocated_image_upload_url(::std::string* image_upload_url);

  // optional string video_upload_url = 4;
  inline bool has_video_upload_url() const;
  inline void clear_video_upload_url();
  static const int kVideoUploadUrlFieldNumber = 4;
  inline const ::std::string& video_upload_url() const;
  inline void set_video_upload_url(const ::std::string& value);
  inline void set_video_upload_url(const char* value);
  inline void set_video_upload_url(const char* value, size_t size);
  inline ::std::string* mutable_video_upload_url();
  inline ::std::string* release_video_upload_url();
  inline void set_allocated_video_upload_url(::std::string* video_upload_url);

  // repeated string webrtc_ice_server_addr = 5;
  inline int webrtc_ice_server_addr_size() const;
  inline void clear_webrtc_ice_server_addr();
  static const int kWebrtcIceServerAddrFieldNumber = 5;
  inline const ::std::string& webrtc_ice_server_addr(int index) const;
  inline ::std::string* mutable_webrtc_ice_server_addr(int index);
  inline void set_webrtc_ice_server_addr(int index, const ::std::string& value);
  inline void set_webrtc_ice_server_addr(int index, const char* value);
  inline void set_webrtc_ice_server_addr(int index, const char* value, size_t size);
  inline ::std::string* add_webrtc_ice_server_addr();
  inline void add_webrtc_ice_server_addr(const ::std::string& value);
  inline void add_webrtc_ice_server_addr(const char* value);
  inline void add_webrtc_ice_server_addr(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& webrtc_ice_server_addr() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_webrtc_ice_server_addr();

  // repeated string weizhu_url_prefix = 6;
  inline int weizhu_url_prefix_size() const;
  inline void clear_weizhu_url_prefix();
  static const int kWeizhuUrlPrefixFieldNumber = 6;
  inline const ::std::string& weizhu_url_prefix(int index) const;
  inline ::std::string* mutable_weizhu_url_prefix(int index);
  inline void set_weizhu_url_prefix(int index, const ::std::string& value);
  inline void set_weizhu_url_prefix(int index, const char* value);
  inline void set_weizhu_url_prefix(int index, const char* value, size_t size);
  inline ::std::string* add_weizhu_url_prefix();
  inline void add_weizhu_url_prefix(const ::std::string& value);
  inline void add_weizhu_url_prefix(const char* value);
  inline void add_weizhu_url_prefix(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& weizhu_url_prefix() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_weizhu_url_prefix();

  // @@protoc_insertion_point(class_scope:weizhu.system.UserConfig)
 private:
  inline void set_has_http_api_url();
  inline void clear_has_http_api_url();
  inline void set_has_socket_conn_addr();
  inline void clear_has_socket_conn_addr();
  inline void set_has_image_upload_url();
  inline void clear_has_image_upload_url();
  inline void set_has_video_upload_url();
  inline void clear_has_video_upload_url();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* http_api_url_;
  ::std::string* socket_conn_addr_;
  ::std::string* image_upload_url_;
  ::std::string* video_upload_url_;
  ::google::protobuf::RepeatedPtrField< ::std::string> webrtc_ice_server_addr_;
  ::google::protobuf::RepeatedPtrField< ::std::string> weizhu_url_prefix_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_system_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_system_2eproto();
  #endif
  friend void protobuf_AssignDesc_system_2eproto();
  friend void protobuf_ShutdownFile_system_2eproto();

  void InitAsDefaultInstance();
  static UserConfig* default_instance_;
};
// -------------------------------------------------------------------

class AdminConfig : public ::google::protobuf::MessageLite {
 public:
  AdminConfig();
  virtual ~AdminConfig();

  AdminConfig(const AdminConfig& from);

  inline AdminConfig& operator=(const AdminConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const AdminConfig& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const AdminConfig* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(AdminConfig* other);

  // implements Message ----------------------------------------------

  AdminConfig* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const AdminConfig& from);
  void MergeFrom(const AdminConfig& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string webapp_mobile_url_prefix = 1;
  inline bool has_webapp_mobile_url_prefix() const;
  inline void clear_webapp_mobile_url_prefix();
  static const int kWebappMobileUrlPrefixFieldNumber = 1;
  inline const ::std::string& webapp_mobile_url_prefix() const;
  inline void set_webapp_mobile_url_prefix(const ::std::string& value);
  inline void set_webapp_mobile_url_prefix(const char* value);
  inline void set_webapp_mobile_url_prefix(const char* value, size_t size);
  inline ::std::string* mutable_webapp_mobile_url_prefix();
  inline ::std::string* release_webapp_mobile_url_prefix();
  inline void set_allocated_webapp_mobile_url_prefix(::std::string* webapp_mobile_url_prefix);

  // required string webapp_web_url_prefix = 2;
  inline bool has_webapp_web_url_prefix() const;
  inline void clear_webapp_web_url_prefix();
  static const int kWebappWebUrlPrefixFieldNumber = 2;
  inline const ::std::string& webapp_web_url_prefix() const;
  inline void set_webapp_web_url_prefix(const ::std::string& value);
  inline void set_webapp_web_url_prefix(const char* value);
  inline void set_webapp_web_url_prefix(const char* value, size_t size);
  inline ::std::string* mutable_webapp_web_url_prefix();
  inline ::std::string* release_webapp_web_url_prefix();
  inline void set_allocated_webapp_web_url_prefix(::std::string* webapp_web_url_prefix);

  // required string webapp_upload_url_prefix = 3;
  inline bool has_webapp_upload_url_prefix() const;
  inline void clear_webapp_upload_url_prefix();
  static const int kWebappUploadUrlPrefixFieldNumber = 3;
  inline const ::std::string& webapp_upload_url_prefix() const;
  inline void set_webapp_upload_url_prefix(const ::std::string& value);
  inline void set_webapp_upload_url_prefix(const char* value);
  inline void set_webapp_upload_url_prefix(const char* value, size_t size);
  inline ::std::string* mutable_webapp_upload_url_prefix();
  inline ::std::string* release_webapp_upload_url_prefix();
  inline void set_allocated_webapp_upload_url_prefix(::std::string* webapp_upload_url_prefix);

  // @@protoc_insertion_point(class_scope:weizhu.system.AdminConfig)
 private:
  inline void set_has_webapp_mobile_url_prefix();
  inline void clear_has_webapp_mobile_url_prefix();
  inline void set_has_webapp_web_url_prefix();
  inline void clear_has_webapp_web_url_prefix();
  inline void set_has_webapp_upload_url_prefix();
  inline void clear_has_webapp_upload_url_prefix();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* webapp_mobile_url_prefix_;
  ::std::string* webapp_web_url_prefix_;
  ::std::string* webapp_upload_url_prefix_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_system_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_system_2eproto();
  #endif
  friend void protobuf_AssignDesc_system_2eproto();
  friend void protobuf_ShutdownFile_system_2eproto();

  void InitAsDefaultInstance();
  static AdminConfig* default_instance_;
};
// -------------------------------------------------------------------

class BossConfig : public ::google::protobuf::MessageLite {
 public:
  BossConfig();
  virtual ~BossConfig();

  BossConfig(const BossConfig& from);

  inline BossConfig& operator=(const BossConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const BossConfig& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const BossConfig* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(BossConfig* other);

  // implements Message ----------------------------------------------

  BossConfig* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const BossConfig& from);
  void MergeFrom(const BossConfig& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string webapp_admin_url_prefix = 1;
  inline bool has_webapp_admin_url_prefix() const;
  inline void clear_webapp_admin_url_prefix();
  static const int kWebappAdminUrlPrefixFieldNumber = 1;
  inline const ::std::string& webapp_admin_url_prefix() const;
  inline void set_webapp_admin_url_prefix(const ::std::string& value);
  inline void set_webapp_admin_url_prefix(const char* value);
  inline void set_webapp_admin_url_prefix(const char* value, size_t size);
  inline ::std::string* mutable_webapp_admin_url_prefix();
  inline ::std::string* release_webapp_admin_url_prefix();
  inline void set_allocated_webapp_admin_url_prefix(::std::string* webapp_admin_url_prefix);

  // required string webapp_mobile_url_prefix = 2;
  inline bool has_webapp_mobile_url_prefix() const;
  inline void clear_webapp_mobile_url_prefix();
  static const int kWebappMobileUrlPrefixFieldNumber = 2;
  inline const ::std::string& webapp_mobile_url_prefix() const;
  inline void set_webapp_mobile_url_prefix(const ::std::string& value);
  inline void set_webapp_mobile_url_prefix(const char* value);
  inline void set_webapp_mobile_url_prefix(const char* value, size_t size);
  inline ::std::string* mutable_webapp_mobile_url_prefix();
  inline ::std::string* release_webapp_mobile_url_prefix();
  inline void set_allocated_webapp_mobile_url_prefix(::std::string* webapp_mobile_url_prefix);

  // required string webapp_web_url_prefix = 3;
  inline bool has_webapp_web_url_prefix() const;
  inline void clear_webapp_web_url_prefix();
  static const int kWebappWebUrlPrefixFieldNumber = 3;
  inline const ::std::string& webapp_web_url_prefix() const;
  inline void set_webapp_web_url_prefix(const ::std::string& value);
  inline void set_webapp_web_url_prefix(const char* value);
  inline void set_webapp_web_url_prefix(const char* value, size_t size);
  inline ::std::string* mutable_webapp_web_url_prefix();
  inline ::std::string* release_webapp_web_url_prefix();
  inline void set_allocated_webapp_web_url_prefix(::std::string* webapp_web_url_prefix);

  // required string webapp_upload_url_prefix = 4;
  inline bool has_webapp_upload_url_prefix() const;
  inline void clear_webapp_upload_url_prefix();
  static const int kWebappUploadUrlPrefixFieldNumber = 4;
  inline const ::std::string& webapp_upload_url_prefix() const;
  inline void set_webapp_upload_url_prefix(const ::std::string& value);
  inline void set_webapp_upload_url_prefix(const char* value);
  inline void set_webapp_upload_url_prefix(const char* value, size_t size);
  inline ::std::string* mutable_webapp_upload_url_prefix();
  inline ::std::string* release_webapp_upload_url_prefix();
  inline void set_allocated_webapp_upload_url_prefix(::std::string* webapp_upload_url_prefix);

  // @@protoc_insertion_point(class_scope:weizhu.system.BossConfig)
 private:
  inline void set_has_webapp_admin_url_prefix();
  inline void clear_has_webapp_admin_url_prefix();
  inline void set_has_webapp_mobile_url_prefix();
  inline void clear_has_webapp_mobile_url_prefix();
  inline void set_has_webapp_web_url_prefix();
  inline void clear_has_webapp_web_url_prefix();
  inline void set_has_webapp_upload_url_prefix();
  inline void clear_has_webapp_upload_url_prefix();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* webapp_admin_url_prefix_;
  ::std::string* webapp_mobile_url_prefix_;
  ::std::string* webapp_web_url_prefix_;
  ::std::string* webapp_upload_url_prefix_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_system_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_system_2eproto();
  #endif
  friend void protobuf_AssignDesc_system_2eproto();
  friend void protobuf_ShutdownFile_system_2eproto();

  void InitAsDefaultInstance();
  static BossConfig* default_instance_;
};
// -------------------------------------------------------------------

class ImageConfig : public ::google::protobuf::MessageLite {
 public:
  ImageConfig();
  virtual ~ImageConfig();

  ImageConfig(const ImageConfig& from);

  inline ImageConfig& operator=(const ImageConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ImageConfig& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const ImageConfig* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(ImageConfig* other);

  // implements Message ----------------------------------------------

  ImageConfig* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const ImageConfig& from);
  void MergeFrom(const ImageConfig& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string image_url_prefix = 1;
  inline bool has_image_url_prefix() const;
  inline void clear_image_url_prefix();
  static const int kImageUrlPrefixFieldNumber = 1;
  inline const ::std::string& image_url_prefix() const;
  inline void set_image_url_prefix(const ::std::string& value);
  inline void set_image_url_prefix(const char* value);
  inline void set_image_url_prefix(const char* value, size_t size);
  inline ::std::string* mutable_image_url_prefix();
  inline ::std::string* release_image_url_prefix();
  inline void set_allocated_image_url_prefix(::std::string* image_url_prefix);

  // required string image_60_url_prefix = 2;
  inline bool has_image_60_url_prefix() const;
  inline void clear_image_60_url_prefix();
  static const int kImage60UrlPrefixFieldNumber = 2;
  inline const ::std::string& image_60_url_prefix() const;
  inline void set_image_60_url_prefix(const ::std::string& value);
  inline void set_image_60_url_prefix(const char* value);
  inline void set_image_60_url_prefix(const char* value, size_t size);
  inline ::std::string* mutable_image_60_url_prefix();
  inline ::std::string* release_image_60_url_prefix();
  inline void set_allocated_image_60_url_prefix(::std::string* image_60_url_prefix);

  // required string image_120_url_prefix = 3;
  inline bool has_image_120_url_prefix() const;
  inline void clear_image_120_url_prefix();
  static const int kImage120UrlPrefixFieldNumber = 3;
  inline const ::std::string& image_120_url_prefix() const;
  inline void set_image_120_url_prefix(const ::std::string& value);
  inline void set_image_120_url_prefix(const char* value);
  inline void set_image_120_url_prefix(const char* value, size_t size);
  inline ::std::string* mutable_image_120_url_prefix();
  inline ::std::string* release_image_120_url_prefix();
  inline void set_allocated_image_120_url_prefix(::std::string* image_120_url_prefix);

  // required string image_240_url_prefix = 4;
  inline bool has_image_240_url_prefix() const;
  inline void clear_image_240_url_prefix();
  static const int kImage240UrlPrefixFieldNumber = 4;
  inline const ::std::string& image_240_url_prefix() const;
  inline void set_image_240_url_prefix(const ::std::string& value);
  inline void set_image_240_url_prefix(const char* value);
  inline void set_image_240_url_prefix(const char* value, size_t size);
  inline ::std::string* mutable_image_240_url_prefix();
  inline ::std::string* release_image_240_url_prefix();
  inline void set_allocated_image_240_url_prefix(::std::string* image_240_url_prefix);

  // required string image_480_url_prefix = 5;
  inline bool has_image_480_url_prefix() const;
  inline void clear_image_480_url_prefix();
  static const int kImage480UrlPrefixFieldNumber = 5;
  inline const ::std::string& image_480_url_prefix() const;
  inline void set_image_480_url_prefix(const ::std::string& value);
  inline void set_image_480_url_prefix(const char* value);
  inline void set_image_480_url_prefix(const char* value, size_t size);
  inline ::std::string* mutable_image_480_url_prefix();
  inline ::std::string* release_image_480_url_prefix();
  inline void set_allocated_image_480_url_prefix(::std::string* image_480_url_prefix);

  // @@protoc_insertion_point(class_scope:weizhu.system.ImageConfig)
 private:
  inline void set_has_image_url_prefix();
  inline void clear_has_image_url_prefix();
  inline void set_has_image_60_url_prefix();
  inline void clear_has_image_60_url_prefix();
  inline void set_has_image_120_url_prefix();
  inline void clear_has_image_120_url_prefix();
  inline void set_has_image_240_url_prefix();
  inline void clear_has_image_240_url_prefix();
  inline void set_has_image_480_url_prefix();
  inline void clear_has_image_480_url_prefix();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* image_url_prefix_;
  ::std::string* image_60_url_prefix_;
  ::std::string* image_120_url_prefix_;
  ::std::string* image_240_url_prefix_;
  ::std::string* image_480_url_prefix_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_system_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_system_2eproto();
  #endif
  friend void protobuf_AssignDesc_system_2eproto();
  friend void protobuf_ShutdownFile_system_2eproto();

  void InitAsDefaultInstance();
  static ImageConfig* default_instance_;
};
// -------------------------------------------------------------------

class DynamicConfig : public ::google::protobuf::MessageLite {
 public:
  DynamicConfig();
  virtual ~DynamicConfig();

  DynamicConfig(const DynamicConfig& from);

  inline DynamicConfig& operator=(const DynamicConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const DynamicConfig& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const DynamicConfig* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(DynamicConfig* other);

  // implements Message ----------------------------------------------

  DynamicConfig* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const DynamicConfig& from);
  void MergeFrom(const DynamicConfig& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // required string value = 2;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 2;
  inline const ::std::string& value() const;
  inline void set_value(const ::std::string& value);
  inline void set_value(const char* value);
  inline void set_value(const char* value, size_t size);
  inline ::std::string* mutable_value();
  inline ::std::string* release_value();
  inline void set_allocated_value(::std::string* value);

  // @@protoc_insertion_point(class_scope:weizhu.system.DynamicConfig)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_value();
  inline void clear_has_value();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* name_;
  ::std::string* value_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_system_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_system_2eproto();
  #endif
  friend void protobuf_AssignDesc_system_2eproto();
  friend void protobuf_ShutdownFile_system_2eproto();

  void InitAsDefaultInstance();
  static DynamicConfig* default_instance_;
};
// -------------------------------------------------------------------

class VideoConfig : public ::google::protobuf::MessageLite {
 public:
  VideoConfig();
  virtual ~VideoConfig();

  VideoConfig(const VideoConfig& from);

  inline VideoConfig& operator=(const VideoConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const VideoConfig& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const VideoConfig* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(VideoConfig* other);

  // implements Message ----------------------------------------------

  VideoConfig* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const VideoConfig& from);
  void MergeFrom(const VideoConfig& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string video_url_prefix = 1;
  inline bool has_video_url_prefix() const;
  inline void clear_video_url_prefix();
  static const int kVideoUrlPrefixFieldNumber = 1;
  inline const ::std::string& video_url_prefix() const;
  inline void set_video_url_prefix(const ::std::string& value);
  inline void set_video_url_prefix(const char* value);
  inline void set_video_url_prefix(const char* value, size_t size);
  inline ::std::string* mutable_video_url_prefix();
  inline ::std::string* release_video_url_prefix();
  inline void set_allocated_video_url_prefix(::std::string* video_url_prefix);

  // @@protoc_insertion_point(class_scope:weizhu.system.VideoConfig)
 private:
  inline void set_has_video_url_prefix();
  inline void clear_has_video_url_prefix();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* video_url_prefix_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_system_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_system_2eproto();
  #endif
  friend void protobuf_AssignDesc_system_2eproto();
  friend void protobuf_ShutdownFile_system_2eproto();

  void InitAsDefaultInstance();
  static VideoConfig* default_instance_;
};
// -------------------------------------------------------------------

class NewVersion : public ::google::protobuf::MessageLite {
 public:
  NewVersion();
  virtual ~NewVersion();

  NewVersion(const NewVersion& from);

  inline NewVersion& operator=(const NewVersion& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const NewVersion& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const NewVersion* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(NewVersion* other);

  // implements Message ----------------------------------------------

  NewVersion* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const NewVersion& from);
  void MergeFrom(const NewVersion& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string version_name = 1;
  inline bool has_version_name() const;
  inline void clear_version_name();
  static const int kVersionNameFieldNumber = 1;
  inline const ::std::string& version_name() const;
  inline void set_version_name(const ::std::string& value);
  inline void set_version_name(const char* value);
  inline void set_version_name(const char* value, size_t size);
  inline ::std::string* mutable_version_name();
  inline ::std::string* release_version_name();
  inline void set_allocated_version_name(::std::string* version_name);

  // required string feature_text = 2;
  inline bool has_feature_text() const;
  inline void clear_feature_text();
  static const int kFeatureTextFieldNumber = 2;
  inline const ::std::string& feature_text() const;
  inline void set_feature_text(const ::std::string& value);
  inline void set_feature_text(const char* value);
  inline void set_feature_text(const char* value, size_t size);
  inline ::std::string* mutable_feature_text();
  inline ::std::string* release_feature_text();
  inline void set_allocated_feature_text(::std::string* feature_text);

  // required string download_url = 3;
  inline bool has_download_url() const;
  inline void clear_download_url();
  static const int kDownloadUrlFieldNumber = 3;
  inline const ::std::string& download_url() const;
  inline void set_download_url(const ::std::string& value);
  inline void set_download_url(const char* value);
  inline void set_download_url(const char* value, size_t size);
  inline ::std::string* mutable_download_url();
  inline ::std::string* release_download_url();
  inline void set_allocated_download_url(::std::string* download_url);

  // optional int32 version_code = 4;
  inline bool has_version_code() const;
  inline void clear_version_code();
  static const int kVersionCodeFieldNumber = 4;
  inline ::google::protobuf::int32 version_code() const;
  inline void set_version_code(::google::protobuf::int32 value);

  // optional string check_md5 = 5;
  inline bool has_check_md5() const;
  inline void clear_check_md5();
  static const int kCheckMd5FieldNumber = 5;
  inline const ::std::string& check_md5() const;
  inline void set_check_md5(const ::std::string& value);
  inline void set_check_md5(const char* value);
  inline void set_check_md5(const char* value, size_t size);
  inline ::std::string* mutable_check_md5();
  inline ::std::string* release_check_md5();
  inline void set_allocated_check_md5(::std::string* check_md5);

  // @@protoc_insertion_point(class_scope:weizhu.system.NewVersion)
 private:
  inline void set_has_version_name();
  inline void clear_has_version_name();
  inline void set_has_feature_text();
  inline void clear_has_feature_text();
  inline void set_has_download_url();
  inline void clear_has_download_url();
  inline void set_has_version_code();
  inline void clear_has_version_code();
  inline void set_has_check_md5();
  inline void clear_has_check_md5();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* version_name_;
  ::std::string* feature_text_;
  ::std::string* download_url_;
  ::std::string* check_md5_;
  ::google::protobuf::int32 version_code_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_system_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_system_2eproto();
  #endif
  friend void protobuf_AssignDesc_system_2eproto();
  friend void protobuf_ShutdownFile_system_2eproto();

  void InitAsDefaultInstance();
  static NewVersion* default_instance_;
};
// -------------------------------------------------------------------

class GetUserConfigResponse : public ::google::protobuf::MessageLite {
 public:
  GetUserConfigResponse();
  virtual ~GetUserConfigResponse();

  GetUserConfigResponse(const GetUserConfigResponse& from);

  inline GetUserConfigResponse& operator=(const GetUserConfigResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const GetUserConfigResponse& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const GetUserConfigResponse* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(GetUserConfigResponse* other);

  // implements Message ----------------------------------------------

  GetUserConfigResponse* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const GetUserConfigResponse& from);
  void MergeFrom(const GetUserConfigResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .weizhu.system.UserConfig user = 1;
  inline bool has_user() const;
  inline void clear_user();
  static const int kUserFieldNumber = 1;
  inline const ::weizhu::system::UserConfig& user() const;
  inline ::weizhu::system::UserConfig* mutable_user();
  inline ::weizhu::system::UserConfig* release_user();
  inline void set_allocated_user(::weizhu::system::UserConfig* user);

  // required .weizhu.system.ImageConfig image = 2;
  inline bool has_image() const;
  inline void clear_image();
  static const int kImageFieldNumber = 2;
  inline const ::weizhu::system::ImageConfig& image() const;
  inline ::weizhu::system::ImageConfig* mutable_image();
  inline ::weizhu::system::ImageConfig* release_image();
  inline void set_allocated_image(::weizhu::system::ImageConfig* image);

  // repeated .weizhu.system.DynamicConfig dynamic = 3;
  inline int dynamic_size() const;
  inline void clear_dynamic();
  static const int kDynamicFieldNumber = 3;
  inline const ::weizhu::system::DynamicConfig& dynamic(int index) const;
  inline ::weizhu::system::DynamicConfig* mutable_dynamic(int index);
  inline ::weizhu::system::DynamicConfig* add_dynamic();
  inline const ::google::protobuf::RepeatedPtrField< ::weizhu::system::DynamicConfig >&
      dynamic() const;
  inline ::google::protobuf::RepeatedPtrField< ::weizhu::system::DynamicConfig >*
      mutable_dynamic();

  // optional .weizhu.system.VideoConfig video = 4;
  inline bool has_video() const;
  inline void clear_video();
  static const int kVideoFieldNumber = 4;
  inline const ::weizhu::system::VideoConfig& video() const;
  inline ::weizhu::system::VideoConfig* mutable_video();
  inline ::weizhu::system::VideoConfig* release_video();
  inline void set_allocated_video(::weizhu::system::VideoConfig* video);

  // @@protoc_insertion_point(class_scope:weizhu.system.GetUserConfigResponse)
 private:
  inline void set_has_user();
  inline void clear_has_user();
  inline void set_has_image();
  inline void clear_has_image();
  inline void set_has_video();
  inline void clear_has_video();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::weizhu::system::UserConfig* user_;
  ::weizhu::system::ImageConfig* image_;
  ::google::protobuf::RepeatedPtrField< ::weizhu::system::DynamicConfig > dynamic_;
  ::weizhu::system::VideoConfig* video_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_system_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_system_2eproto();
  #endif
  friend void protobuf_AssignDesc_system_2eproto();
  friend void protobuf_ShutdownFile_system_2eproto();

  void InitAsDefaultInstance();
  static GetUserConfigResponse* default_instance_;
};
// -------------------------------------------------------------------

class GetAdminConfigResponse : public ::google::protobuf::MessageLite {
 public:
  GetAdminConfigResponse();
  virtual ~GetAdminConfigResponse();

  GetAdminConfigResponse(const GetAdminConfigResponse& from);

  inline GetAdminConfigResponse& operator=(const GetAdminConfigResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const GetAdminConfigResponse& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const GetAdminConfigResponse* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(GetAdminConfigResponse* other);

  // implements Message ----------------------------------------------

  GetAdminConfigResponse* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const GetAdminConfigResponse& from);
  void MergeFrom(const GetAdminConfigResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .weizhu.system.AdminConfig admin = 1;
  inline bool has_admin() const;
  inline void clear_admin();
  static const int kAdminFieldNumber = 1;
  inline const ::weizhu::system::AdminConfig& admin() const;
  inline ::weizhu::system::AdminConfig* mutable_admin();
  inline ::weizhu::system::AdminConfig* release_admin();
  inline void set_allocated_admin(::weizhu::system::AdminConfig* admin);

  // required .weizhu.system.ImageConfig image = 2;
  inline bool has_image() const;
  inline void clear_image();
  static const int kImageFieldNumber = 2;
  inline const ::weizhu::system::ImageConfig& image() const;
  inline ::weizhu::system::ImageConfig* mutable_image();
  inline ::weizhu::system::ImageConfig* release_image();
  inline void set_allocated_image(::weizhu::system::ImageConfig* image);

  // repeated .weizhu.system.DynamicConfig dynamic = 3;
  inline int dynamic_size() const;
  inline void clear_dynamic();
  static const int kDynamicFieldNumber = 3;
  inline const ::weizhu::system::DynamicConfig& dynamic(int index) const;
  inline ::weizhu::system::DynamicConfig* mutable_dynamic(int index);
  inline ::weizhu::system::DynamicConfig* add_dynamic();
  inline const ::google::protobuf::RepeatedPtrField< ::weizhu::system::DynamicConfig >&
      dynamic() const;
  inline ::google::protobuf::RepeatedPtrField< ::weizhu::system::DynamicConfig >*
      mutable_dynamic();

  // optional .weizhu.system.VideoConfig video = 4;
  inline bool has_video() const;
  inline void clear_video();
  static const int kVideoFieldNumber = 4;
  inline const ::weizhu::system::VideoConfig& video() const;
  inline ::weizhu::system::VideoConfig* mutable_video();
  inline ::weizhu::system::VideoConfig* release_video();
  inline void set_allocated_video(::weizhu::system::VideoConfig* video);

  // @@protoc_insertion_point(class_scope:weizhu.system.GetAdminConfigResponse)
 private:
  inline void set_has_admin();
  inline void clear_has_admin();
  inline void set_has_image();
  inline void clear_has_image();
  inline void set_has_video();
  inline void clear_has_video();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::weizhu::system::AdminConfig* admin_;
  ::weizhu::system::ImageConfig* image_;
  ::google::protobuf::RepeatedPtrField< ::weizhu::system::DynamicConfig > dynamic_;
  ::weizhu::system::VideoConfig* video_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_system_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_system_2eproto();
  #endif
  friend void protobuf_AssignDesc_system_2eproto();
  friend void protobuf_ShutdownFile_system_2eproto();

  void InitAsDefaultInstance();
  static GetAdminConfigResponse* default_instance_;
};
// -------------------------------------------------------------------

class GetBossConfigResponse : public ::google::protobuf::MessageLite {
 public:
  GetBossConfigResponse();
  virtual ~GetBossConfigResponse();

  GetBossConfigResponse(const GetBossConfigResponse& from);

  inline GetBossConfigResponse& operator=(const GetBossConfigResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const GetBossConfigResponse& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const GetBossConfigResponse* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(GetBossConfigResponse* other);

  // implements Message ----------------------------------------------

  GetBossConfigResponse* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const GetBossConfigResponse& from);
  void MergeFrom(const GetBossConfigResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .weizhu.system.BossConfig boss = 1;
  inline bool has_boss() const;
  inline void clear_boss();
  static const int kBossFieldNumber = 1;
  inline const ::weizhu::system::BossConfig& boss() const;
  inline ::weizhu::system::BossConfig* mutable_boss();
  inline ::weizhu::system::BossConfig* release_boss();
  inline void set_allocated_boss(::weizhu::system::BossConfig* boss);

  // required .weizhu.system.ImageConfig image = 2;
  inline bool has_image() const;
  inline void clear_image();
  static const int kImageFieldNumber = 2;
  inline const ::weizhu::system::ImageConfig& image() const;
  inline ::weizhu::system::ImageConfig* mutable_image();
  inline ::weizhu::system::ImageConfig* release_image();
  inline void set_allocated_image(::weizhu::system::ImageConfig* image);

  // optional .weizhu.system.VideoConfig video = 3;
  inline bool has_video() const;
  inline void clear_video();
  static const int kVideoFieldNumber = 3;
  inline const ::weizhu::system::VideoConfig& video() const;
  inline ::weizhu::system::VideoConfig* mutable_video();
  inline ::weizhu::system::VideoConfig* release_video();
  inline void set_allocated_video(::weizhu::system::VideoConfig* video);

  // @@protoc_insertion_point(class_scope:weizhu.system.GetBossConfigResponse)
 private:
  inline void set_has_boss();
  inline void clear_has_boss();
  inline void set_has_image();
  inline void clear_has_image();
  inline void set_has_video();
  inline void clear_has_video();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::weizhu::system::BossConfig* boss_;
  ::weizhu::system::ImageConfig* image_;
  ::weizhu::system::VideoConfig* video_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_system_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_system_2eproto();
  #endif
  friend void protobuf_AssignDesc_system_2eproto();
  friend void protobuf_ShutdownFile_system_2eproto();

  void InitAsDefaultInstance();
  static GetBossConfigResponse* default_instance_;
};
// -------------------------------------------------------------------

class CheckNewVersionResponse : public ::google::protobuf::MessageLite {
 public:
  CheckNewVersionResponse();
  virtual ~CheckNewVersionResponse();

  CheckNewVersionResponse(const CheckNewVersionResponse& from);

  inline CheckNewVersionResponse& operator=(const CheckNewVersionResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const CheckNewVersionResponse& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const CheckNewVersionResponse* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(CheckNewVersionResponse* other);

  // implements Message ----------------------------------------------

  CheckNewVersionResponse* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const CheckNewVersionResponse& from);
  void MergeFrom(const CheckNewVersionResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .weizhu.system.NewVersion new_version = 1;
  inline bool has_new_version() const;
  inline void clear_new_version();
  static const int kNewVersionFieldNumber = 1;
  inline const ::weizhu::system::NewVersion& new_version() const;
  inline ::weizhu::system::NewVersion* mutable_new_version();
  inline ::weizhu::system::NewVersion* release_new_version();
  inline void set_allocated_new_version(::weizhu::system::NewVersion* new_version);

  // @@protoc_insertion_point(class_scope:weizhu.system.CheckNewVersionResponse)
 private:
  inline void set_has_new_version();
  inline void clear_has_new_version();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::weizhu::system::NewVersion* new_version_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_system_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_system_2eproto();
  #endif
  friend void protobuf_AssignDesc_system_2eproto();
  friend void protobuf_ShutdownFile_system_2eproto();

  void InitAsDefaultInstance();
  static CheckNewVersionResponse* default_instance_;
};
// -------------------------------------------------------------------

class SendFeedbackRequest : public ::google::protobuf::MessageLite {
 public:
  SendFeedbackRequest();
  virtual ~SendFeedbackRequest();

  SendFeedbackRequest(const SendFeedbackRequest& from);

  inline SendFeedbackRequest& operator=(const SendFeedbackRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const SendFeedbackRequest& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const SendFeedbackRequest* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(SendFeedbackRequest* other);

  // implements Message ----------------------------------------------

  SendFeedbackRequest* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const SendFeedbackRequest& from);
  void MergeFrom(const SendFeedbackRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string feedback_content = 1;
  inline bool has_feedback_content() const;
  inline void clear_feedback_content();
  static const int kFeedbackContentFieldNumber = 1;
  inline const ::std::string& feedback_content() const;
  inline void set_feedback_content(const ::std::string& value);
  inline void set_feedback_content(const char* value);
  inline void set_feedback_content(const char* value, size_t size);
  inline ::std::string* mutable_feedback_content();
  inline ::std::string* release_feedback_content();
  inline void set_allocated_feedback_content(::std::string* feedback_content);

  // @@protoc_insertion_point(class_scope:weizhu.system.SendFeedbackRequest)
 private:
  inline void set_has_feedback_content();
  inline void clear_has_feedback_content();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* feedback_content_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_system_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_system_2eproto();
  #endif
  friend void protobuf_AssignDesc_system_2eproto();
  friend void protobuf_ShutdownFile_system_2eproto();

  void InitAsDefaultInstance();
  static SendFeedbackRequest* default_instance_;
};
// -------------------------------------------------------------------

class UpdateBadgeNumberRequest : public ::google::protobuf::MessageLite {
 public:
  UpdateBadgeNumberRequest();
  virtual ~UpdateBadgeNumberRequest();

  UpdateBadgeNumberRequest(const UpdateBadgeNumberRequest& from);

  inline UpdateBadgeNumberRequest& operator=(const UpdateBadgeNumberRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const UpdateBadgeNumberRequest& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const UpdateBadgeNumberRequest* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(UpdateBadgeNumberRequest* other);

  // implements Message ----------------------------------------------

  UpdateBadgeNumberRequest* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const UpdateBadgeNumberRequest& from);
  void MergeFrom(const UpdateBadgeNumberRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 badge_number = 1;
  inline bool has_badge_number() const;
  inline void clear_badge_number();
  static const int kBadgeNumberFieldNumber = 1;
  inline ::google::protobuf::int32 badge_number() const;
  inline void set_badge_number(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:weizhu.system.UpdateBadgeNumberRequest)
 private:
  inline void set_has_badge_number();
  inline void clear_has_badge_number();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 badge_number_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_system_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_system_2eproto();
  #endif
  friend void protobuf_AssignDesc_system_2eproto();
  friend void protobuf_ShutdownFile_system_2eproto();

  void InitAsDefaultInstance();
  static UpdateBadgeNumberRequest* default_instance_;
};
// -------------------------------------------------------------------

class GetAuthUrlRequest : public ::google::protobuf::MessageLite {
 public:
  GetAuthUrlRequest();
  virtual ~GetAuthUrlRequest();

  GetAuthUrlRequest(const GetAuthUrlRequest& from);

  inline GetAuthUrlRequest& operator=(const GetAuthUrlRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const GetAuthUrlRequest& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const GetAuthUrlRequest* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(GetAuthUrlRequest* other);

  // implements Message ----------------------------------------------

  GetAuthUrlRequest* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const GetAuthUrlRequest& from);
  void MergeFrom(const GetAuthUrlRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string url = 1;
  inline bool has_url() const;
  inline void clear_url();
  static const int kUrlFieldNumber = 1;
  inline const ::std::string& url() const;
  inline void set_url(const ::std::string& value);
  inline void set_url(const char* value);
  inline void set_url(const char* value, size_t size);
  inline ::std::string* mutable_url();
  inline ::std::string* release_url();
  inline void set_allocated_url(::std::string* url);

  // @@protoc_insertion_point(class_scope:weizhu.system.GetAuthUrlRequest)
 private:
  inline void set_has_url();
  inline void clear_has_url();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* url_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_system_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_system_2eproto();
  #endif
  friend void protobuf_AssignDesc_system_2eproto();
  friend void protobuf_ShutdownFile_system_2eproto();

  void InitAsDefaultInstance();
  static GetAuthUrlRequest* default_instance_;
};
// -------------------------------------------------------------------

class GetAuthUrlResponse_AuthCookie : public ::google::protobuf::MessageLite {
 public:
  GetAuthUrlResponse_AuthCookie();
  virtual ~GetAuthUrlResponse_AuthCookie();

  GetAuthUrlResponse_AuthCookie(const GetAuthUrlResponse_AuthCookie& from);

  inline GetAuthUrlResponse_AuthCookie& operator=(const GetAuthUrlResponse_AuthCookie& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const GetAuthUrlResponse_AuthCookie& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const GetAuthUrlResponse_AuthCookie* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(GetAuthUrlResponse_AuthCookie* other);

  // implements Message ----------------------------------------------

  GetAuthUrlResponse_AuthCookie* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const GetAuthUrlResponse_AuthCookie& from);
  void MergeFrom(const GetAuthUrlResponse_AuthCookie& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // required string value = 2;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 2;
  inline const ::std::string& value() const;
  inline void set_value(const ::std::string& value);
  inline void set_value(const char* value);
  inline void set_value(const char* value, size_t size);
  inline ::std::string* mutable_value();
  inline ::std::string* release_value();
  inline void set_allocated_value(::std::string* value);

  // @@protoc_insertion_point(class_scope:weizhu.system.GetAuthUrlResponse.AuthCookie)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_value();
  inline void clear_has_value();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* name_;
  ::std::string* value_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_system_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_system_2eproto();
  #endif
  friend void protobuf_AssignDesc_system_2eproto();
  friend void protobuf_ShutdownFile_system_2eproto();

  void InitAsDefaultInstance();
  static GetAuthUrlResponse_AuthCookie* default_instance_;
};
// -------------------------------------------------------------------

class GetAuthUrlResponse : public ::google::protobuf::MessageLite {
 public:
  GetAuthUrlResponse();
  virtual ~GetAuthUrlResponse();

  GetAuthUrlResponse(const GetAuthUrlResponse& from);

  inline GetAuthUrlResponse& operator=(const GetAuthUrlResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const GetAuthUrlResponse& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const GetAuthUrlResponse* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(GetAuthUrlResponse* other);

  // implements Message ----------------------------------------------

  GetAuthUrlResponse* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const GetAuthUrlResponse& from);
  void MergeFrom(const GetAuthUrlResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  typedef GetAuthUrlResponse_AuthCookie AuthCookie;

  typedef GetAuthUrlResponse_Result Result;
  static const Result SUCC = GetAuthUrlResponse_Result_SUCC;
  static const Result FAIL_UNKNOWN = GetAuthUrlResponse_Result_FAIL_UNKNOWN;
  static inline bool Result_IsValid(int value) {
    return GetAuthUrlResponse_Result_IsValid(value);
  }
  static const Result Result_MIN =
    GetAuthUrlResponse_Result_Result_MIN;
  static const Result Result_MAX =
    GetAuthUrlResponse_Result_Result_MAX;
  static const int Result_ARRAYSIZE =
    GetAuthUrlResponse_Result_Result_ARRAYSIZE;

  // accessors -------------------------------------------------------

  // optional .weizhu.system.GetAuthUrlResponse.Result result = 1 [default = FAIL_UNKNOWN];
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::weizhu::system::GetAuthUrlResponse_Result result() const;
  inline void set_result(::weizhu::system::GetAuthUrlResponse_Result value);

  // optional string fail_text = 2;
  inline bool has_fail_text() const;
  inline void clear_fail_text();
  static const int kFailTextFieldNumber = 2;
  inline const ::std::string& fail_text() const;
  inline void set_fail_text(const ::std::string& value);
  inline void set_fail_text(const char* value);
  inline void set_fail_text(const char* value, size_t size);
  inline ::std::string* mutable_fail_text();
  inline ::std::string* release_fail_text();
  inline void set_allocated_fail_text(::std::string* fail_text);

  // optional string auth_url = 3;
  inline bool has_auth_url() const;
  inline void clear_auth_url();
  static const int kAuthUrlFieldNumber = 3;
  inline const ::std::string& auth_url() const;
  inline void set_auth_url(const ::std::string& value);
  inline void set_auth_url(const char* value);
  inline void set_auth_url(const char* value, size_t size);
  inline ::std::string* mutable_auth_url();
  inline ::std::string* release_auth_url();
  inline void set_allocated_auth_url(::std::string* auth_url);

  // repeated .weizhu.system.GetAuthUrlResponse.AuthCookie auth_cookie = 4;
  inline int auth_cookie_size() const;
  inline void clear_auth_cookie();
  static const int kAuthCookieFieldNumber = 4;
  inline const ::weizhu::system::GetAuthUrlResponse_AuthCookie& auth_cookie(int index) const;
  inline ::weizhu::system::GetAuthUrlResponse_AuthCookie* mutable_auth_cookie(int index);
  inline ::weizhu::system::GetAuthUrlResponse_AuthCookie* add_auth_cookie();
  inline const ::google::protobuf::RepeatedPtrField< ::weizhu::system::GetAuthUrlResponse_AuthCookie >&
      auth_cookie() const;
  inline ::google::protobuf::RepeatedPtrField< ::weizhu::system::GetAuthUrlResponse_AuthCookie >*
      mutable_auth_cookie();

  // @@protoc_insertion_point(class_scope:weizhu.system.GetAuthUrlResponse)
 private:
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_fail_text();
  inline void clear_has_fail_text();
  inline void set_has_auth_url();
  inline void clear_has_auth_url();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* fail_text_;
  ::std::string* auth_url_;
  ::google::protobuf::RepeatedPtrField< ::weizhu::system::GetAuthUrlResponse_AuthCookie > auth_cookie_;
  int result_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_system_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_system_2eproto();
  #endif
  friend void protobuf_AssignDesc_system_2eproto();
  friend void protobuf_ShutdownFile_system_2eproto();

  void InitAsDefaultInstance();
  static GetAuthUrlResponse* default_instance_;
};
// -------------------------------------------------------------------

class Config : public ::google::protobuf::MessageLite {
 public:
  Config();
  virtual ~Config();

  Config(const Config& from);

  inline Config& operator=(const Config& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const Config& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const Config* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(Config* other);

  // implements Message ----------------------------------------------

  Config* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const Config& from);
  void MergeFrom(const Config& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string http_api_url = 1;
  inline bool has_http_api_url() const;
  inline void clear_http_api_url();
  static const int kHttpApiUrlFieldNumber = 1;
  inline const ::std::string& http_api_url() const;
  inline void set_http_api_url(const ::std::string& value);
  inline void set_http_api_url(const char* value);
  inline void set_http_api_url(const char* value, size_t size);
  inline ::std::string* mutable_http_api_url();
  inline ::std::string* release_http_api_url();
  inline void set_allocated_http_api_url(::std::string* http_api_url);

  // required string socket_conn_host = 2;
  inline bool has_socket_conn_host() const;
  inline void clear_socket_conn_host();
  static const int kSocketConnHostFieldNumber = 2;
  inline const ::std::string& socket_conn_host() const;
  inline void set_socket_conn_host(const ::std::string& value);
  inline void set_socket_conn_host(const char* value);
  inline void set_socket_conn_host(const char* value, size_t size);
  inline ::std::string* mutable_socket_conn_host();
  inline ::std::string* release_socket_conn_host();
  inline void set_allocated_socket_conn_host(::std::string* socket_conn_host);

  // required int32 socket_conn_port = 3;
  inline bool has_socket_conn_port() const;
  inline void clear_socket_conn_port();
  static const int kSocketConnPortFieldNumber = 3;
  inline ::google::protobuf::int32 socket_conn_port() const;
  inline void set_socket_conn_port(::google::protobuf::int32 value);

  // required string upload_avatar_url = 4;
  inline bool has_upload_avatar_url() const;
  inline void clear_upload_avatar_url();
  static const int kUploadAvatarUrlFieldNumber = 4;
  inline const ::std::string& upload_avatar_url() const;
  inline void set_upload_avatar_url(const ::std::string& value);
  inline void set_upload_avatar_url(const char* value);
  inline void set_upload_avatar_url(const char* value, size_t size);
  inline ::std::string* mutable_upload_avatar_url();
  inline ::std::string* release_upload_avatar_url();
  inline void set_allocated_upload_avatar_url(::std::string* upload_avatar_url);

  // required string upload_im_image_url = 5;
  inline bool has_upload_im_image_url() const;
  inline void clear_upload_im_image_url();
  static const int kUploadImImageUrlFieldNumber = 5;
  inline const ::std::string& upload_im_image_url() const;
  inline void set_upload_im_image_url(const ::std::string& value);
  inline void set_upload_im_image_url(const char* value);
  inline void set_upload_im_image_url(const char* value, size_t size);
  inline ::std::string* mutable_upload_im_image_url();
  inline ::std::string* release_upload_im_image_url();
  inline void set_allocated_upload_im_image_url(::std::string* upload_im_image_url);

  // required string upload_im_file_url = 6;
  inline bool has_upload_im_file_url() const;
  inline void clear_upload_im_file_url();
  static const int kUploadImFileUrlFieldNumber = 6;
  inline const ::std::string& upload_im_file_url() const;
  inline void set_upload_im_file_url(const ::std::string& value);
  inline void set_upload_im_file_url(const char* value);
  inline void set_upload_im_file_url(const char* value, size_t size);
  inline ::std::string* mutable_upload_im_file_url();
  inline ::std::string* release_upload_im_file_url();
  inline void set_allocated_upload_im_file_url(::std::string* upload_im_file_url);

  // required string avatar_url = 7;
  inline bool has_avatar_url() const;
  inline void clear_avatar_url();
  static const int kAvatarUrlFieldNumber = 7;
  inline const ::std::string& avatar_url() const;
  inline void set_avatar_url(const ::std::string& value);
  inline void set_avatar_url(const char* value);
  inline void set_avatar_url(const char* value, size_t size);
  inline ::std::string* mutable_avatar_url();
  inline ::std::string* release_avatar_url();
  inline void set_allocated_avatar_url(::std::string* avatar_url);

  // required string im_image_url = 8;
  inline bool has_im_image_url() const;
  inline void clear_im_image_url();
  static const int kImImageUrlFieldNumber = 8;
  inline const ::std::string& im_image_url() const;
  inline void set_im_image_url(const ::std::string& value);
  inline void set_im_image_url(const char* value);
  inline void set_im_image_url(const char* value, size_t size);
  inline ::std::string* mutable_im_image_url();
  inline ::std::string* release_im_image_url();
  inline void set_allocated_im_image_url(::std::string* im_image_url);

  // required string im_file_url = 9;
  inline bool has_im_file_url() const;
  inline void clear_im_file_url();
  static const int kImFileUrlFieldNumber = 9;
  inline const ::std::string& im_file_url() const;
  inline void set_im_file_url(const ::std::string& value);
  inline void set_im_file_url(const char* value);
  inline void set_im_file_url(const char* value, size_t size);
  inline ::std::string* mutable_im_file_url();
  inline ::std::string* release_im_file_url();
  inline void set_allocated_im_file_url(::std::string* im_file_url);

  // required string discover_image_url = 10;
  inline bool has_discover_image_url() const;
  inline void clear_discover_image_url();
  static const int kDiscoverImageUrlFieldNumber = 10;
  inline const ::std::string& discover_image_url() const;
  inline void set_discover_image_url(const ::std::string& value);
  inline void set_discover_image_url(const char* value);
  inline void set_discover_image_url(const char* value, size_t size);
  inline ::std::string* mutable_discover_image_url();
  inline ::std::string* release_discover_image_url();
  inline void set_allocated_discover_image_url(::std::string* discover_image_url);

  // required string discover_icon_url = 11;
  inline bool has_discover_icon_url() const;
  inline void clear_discover_icon_url();
  static const int kDiscoverIconUrlFieldNumber = 11;
  inline const ::std::string& discover_icon_url() const;
  inline void set_discover_icon_url(const ::std::string& value);
  inline void set_discover_icon_url(const char* value);
  inline void set_discover_icon_url(const char* value, size_t size);
  inline ::std::string* mutable_discover_icon_url();
  inline ::std::string* release_discover_icon_url();
  inline void set_allocated_discover_icon_url(::std::string* discover_icon_url);

  // required string discover_item_url = 12;
  inline bool has_discover_item_url() const;
  inline void clear_discover_item_url();
  static const int kDiscoverItemUrlFieldNumber = 12;
  inline const ::std::string& discover_item_url() const;
  inline void set_discover_item_url(const ::std::string& value);
  inline void set_discover_item_url(const char* value);
  inline void set_discover_item_url(const char* value, size_t size);
  inline ::std::string* mutable_discover_item_url();
  inline ::std::string* release_discover_item_url();
  inline void set_allocated_discover_item_url(::std::string* discover_item_url);

  // required string upload_community_image_url = 13;
  inline bool has_upload_community_image_url() const;
  inline void clear_upload_community_image_url();
  static const int kUploadCommunityImageUrlFieldNumber = 13;
  inline const ::std::string& upload_community_image_url() const;
  inline void set_upload_community_image_url(const ::std::string& value);
  inline void set_upload_community_image_url(const char* value);
  inline void set_upload_community_image_url(const char* value, size_t size);
  inline ::std::string* mutable_upload_community_image_url();
  inline ::std::string* release_upload_community_image_url();
  inline void set_allocated_upload_community_image_url(::std::string* upload_community_image_url);

  // required string community_image_url = 14;
  inline bool has_community_image_url() const;
  inline void clear_community_image_url();
  static const int kCommunityImageUrlFieldNumber = 14;
  inline const ::std::string& community_image_url() const;
  inline void set_community_image_url(const ::std::string& value);
  inline void set_community_image_url(const char* value);
  inline void set_community_image_url(const char* value, size_t size);
  inline ::std::string* mutable_community_image_url();
  inline ::std::string* release_community_image_url();
  inline void set_allocated_community_image_url(::std::string* community_image_url);

  // @@protoc_insertion_point(class_scope:weizhu.system.Config)
 private:
  inline void set_has_http_api_url();
  inline void clear_has_http_api_url();
  inline void set_has_socket_conn_host();
  inline void clear_has_socket_conn_host();
  inline void set_has_socket_conn_port();
  inline void clear_has_socket_conn_port();
  inline void set_has_upload_avatar_url();
  inline void clear_has_upload_avatar_url();
  inline void set_has_upload_im_image_url();
  inline void clear_has_upload_im_image_url();
  inline void set_has_upload_im_file_url();
  inline void clear_has_upload_im_file_url();
  inline void set_has_avatar_url();
  inline void clear_has_avatar_url();
  inline void set_has_im_image_url();
  inline void clear_has_im_image_url();
  inline void set_has_im_file_url();
  inline void clear_has_im_file_url();
  inline void set_has_discover_image_url();
  inline void clear_has_discover_image_url();
  inline void set_has_discover_icon_url();
  inline void clear_has_discover_icon_url();
  inline void set_has_discover_item_url();
  inline void clear_has_discover_item_url();
  inline void set_has_upload_community_image_url();
  inline void clear_has_upload_community_image_url();
  inline void set_has_community_image_url();
  inline void clear_has_community_image_url();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* http_api_url_;
  ::std::string* socket_conn_host_;
  ::std::string* upload_avatar_url_;
  ::std::string* upload_im_image_url_;
  ::std::string* upload_im_file_url_;
  ::std::string* avatar_url_;
  ::std::string* im_image_url_;
  ::std::string* im_file_url_;
  ::std::string* discover_image_url_;
  ::std::string* discover_icon_url_;
  ::std::string* discover_item_url_;
  ::std::string* upload_community_image_url_;
  ::std::string* community_image_url_;
  ::google::protobuf::int32 socket_conn_port_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_system_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_system_2eproto();
  #endif
  friend void protobuf_AssignDesc_system_2eproto();
  friend void protobuf_ShutdownFile_system_2eproto();

  void InitAsDefaultInstance();
  static Config* default_instance_;
};
// -------------------------------------------------------------------

class ConfigV2 : public ::google::protobuf::MessageLite {
 public:
  ConfigV2();
  virtual ~ConfigV2();

  ConfigV2(const ConfigV2& from);

  inline ConfigV2& operator=(const ConfigV2& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ConfigV2& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const ConfigV2* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(ConfigV2* other);

  // implements Message ----------------------------------------------

  ConfigV2* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const ConfigV2& from);
  void MergeFrom(const ConfigV2& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string http_api_url = 1;
  inline bool has_http_api_url() const;
  inline void clear_http_api_url();
  static const int kHttpApiUrlFieldNumber = 1;
  inline const ::std::string& http_api_url() const;
  inline void set_http_api_url(const ::std::string& value);
  inline void set_http_api_url(const char* value);
  inline void set_http_api_url(const char* value, size_t size);
  inline ::std::string* mutable_http_api_url();
  inline ::std::string* release_http_api_url();
  inline void set_allocated_http_api_url(::std::string* http_api_url);

  // required string socket_conn_addr = 2;
  inline bool has_socket_conn_addr() const;
  inline void clear_socket_conn_addr();
  static const int kSocketConnAddrFieldNumber = 2;
  inline const ::std::string& socket_conn_addr() const;
  inline void set_socket_conn_addr(const ::std::string& value);
  inline void set_socket_conn_addr(const char* value);
  inline void set_socket_conn_addr(const char* value, size_t size);
  inline ::std::string* mutable_socket_conn_addr();
  inline ::std::string* release_socket_conn_addr();
  inline void set_allocated_socket_conn_addr(::std::string* socket_conn_addr);

  // required string avatar_url_prefix = 3;
  inline bool has_avatar_url_prefix() const;
  inline void clear_avatar_url_prefix();
  static const int kAvatarUrlPrefixFieldNumber = 3;
  inline const ::std::string& avatar_url_prefix() const;
  inline void set_avatar_url_prefix(const ::std::string& value);
  inline void set_avatar_url_prefix(const char* value);
  inline void set_avatar_url_prefix(const char* value, size_t size);
  inline ::std::string* mutable_avatar_url_prefix();
  inline ::std::string* release_avatar_url_prefix();
  inline void set_allocated_avatar_url_prefix(::std::string* avatar_url_prefix);

  // required string avatar_upload_url = 4;
  inline bool has_avatar_upload_url() const;
  inline void clear_avatar_upload_url();
  static const int kAvatarUploadUrlFieldNumber = 4;
  inline const ::std::string& avatar_upload_url() const;
  inline void set_avatar_upload_url(const ::std::string& value);
  inline void set_avatar_upload_url(const char* value);
  inline void set_avatar_upload_url(const char* value, size_t size);
  inline ::std::string* mutable_avatar_upload_url();
  inline ::std::string* release_avatar_upload_url();
  inline void set_allocated_avatar_upload_url(::std::string* avatar_upload_url);

  // required string im_image_url_prefix = 5;
  inline bool has_im_image_url_prefix() const;
  inline void clear_im_image_url_prefix();
  static const int kImImageUrlPrefixFieldNumber = 5;
  inline const ::std::string& im_image_url_prefix() const;
  inline void set_im_image_url_prefix(const ::std::string& value);
  inline void set_im_image_url_prefix(const char* value);
  inline void set_im_image_url_prefix(const char* value, size_t size);
  inline ::std::string* mutable_im_image_url_prefix();
  inline ::std::string* release_im_image_url_prefix();
  inline void set_allocated_im_image_url_prefix(::std::string* im_image_url_prefix);

  // required string im_image_upload_url = 6;
  inline bool has_im_image_upload_url() const;
  inline void clear_im_image_upload_url();
  static const int kImImageUploadUrlFieldNumber = 6;
  inline const ::std::string& im_image_upload_url() const;
  inline void set_im_image_upload_url(const ::std::string& value);
  inline void set_im_image_upload_url(const char* value);
  inline void set_im_image_upload_url(const char* value, size_t size);
  inline ::std::string* mutable_im_image_upload_url();
  inline ::std::string* release_im_image_upload_url();
  inline void set_allocated_im_image_upload_url(::std::string* im_image_upload_url);

  // required string discover_image_url_prefix = 7;
  inline bool has_discover_image_url_prefix() const;
  inline void clear_discover_image_url_prefix();
  static const int kDiscoverImageUrlPrefixFieldNumber = 7;
  inline const ::std::string& discover_image_url_prefix() const;
  inline void set_discover_image_url_prefix(const ::std::string& value);
  inline void set_discover_image_url_prefix(const char* value);
  inline void set_discover_image_url_prefix(const char* value, size_t size);
  inline ::std::string* mutable_discover_image_url_prefix();
  inline ::std::string* release_discover_image_url_prefix();
  inline void set_allocated_discover_image_url_prefix(::std::string* discover_image_url_prefix);

  // required string discover_image_upload_url = 8;
  inline bool has_discover_image_upload_url() const;
  inline void clear_discover_image_upload_url();
  static const int kDiscoverImageUploadUrlFieldNumber = 8;
  inline const ::std::string& discover_image_upload_url() const;
  inline void set_discover_image_upload_url(const ::std::string& value);
  inline void set_discover_image_upload_url(const char* value);
  inline void set_discover_image_upload_url(const char* value, size_t size);
  inline ::std::string* mutable_discover_image_upload_url();
  inline ::std::string* release_discover_image_upload_url();
  inline void set_allocated_discover_image_upload_url(::std::string* discover_image_upload_url);

  // required string discover_item_url_prefix = 9;
  inline bool has_discover_item_url_prefix() const;
  inline void clear_discover_item_url_prefix();
  static const int kDiscoverItemUrlPrefixFieldNumber = 9;
  inline const ::std::string& discover_item_url_prefix() const;
  inline void set_discover_item_url_prefix(const ::std::string& value);
  inline void set_discover_item_url_prefix(const char* value);
  inline void set_discover_item_url_prefix(const char* value, size_t size);
  inline ::std::string* mutable_discover_item_url_prefix();
  inline ::std::string* release_discover_item_url_prefix();
  inline void set_allocated_discover_item_url_prefix(::std::string* discover_item_url_prefix);

  // required string community_image_url_prefix = 10;
  inline bool has_community_image_url_prefix() const;
  inline void clear_community_image_url_prefix();
  static const int kCommunityImageUrlPrefixFieldNumber = 10;
  inline const ::std::string& community_image_url_prefix() const;
  inline void set_community_image_url_prefix(const ::std::string& value);
  inline void set_community_image_url_prefix(const char* value);
  inline void set_community_image_url_prefix(const char* value, size_t size);
  inline ::std::string* mutable_community_image_url_prefix();
  inline ::std::string* release_community_image_url_prefix();
  inline void set_allocated_community_image_url_prefix(::std::string* community_image_url_prefix);

  // required string community_image_upload_url = 11;
  inline bool has_community_image_upload_url() const;
  inline void clear_community_image_upload_url();
  static const int kCommunityImageUploadUrlFieldNumber = 11;
  inline const ::std::string& community_image_upload_url() const;
  inline void set_community_image_upload_url(const ::std::string& value);
  inline void set_community_image_upload_url(const char* value);
  inline void set_community_image_upload_url(const char* value, size_t size);
  inline ::std::string* mutable_community_image_upload_url();
  inline ::std::string* release_community_image_upload_url();
  inline void set_allocated_community_image_upload_url(::std::string* community_image_upload_url);

  // optional string scene_home_url = 12;
  inline bool has_scene_home_url() const;
  inline void clear_scene_home_url();
  static const int kSceneHomeUrlFieldNumber = 12;
  inline const ::std::string& scene_home_url() const;
  inline void set_scene_home_url(const ::std::string& value);
  inline void set_scene_home_url(const char* value);
  inline void set_scene_home_url(const char* value, size_t size);
  inline ::std::string* mutable_scene_home_url();
  inline ::std::string* release_scene_home_url();
  inline void set_allocated_scene_home_url(::std::string* scene_home_url);

  // required string scene_image_url_prefix = 13;
  inline bool has_scene_image_url_prefix() const;
  inline void clear_scene_image_url_prefix();
  static const int kSceneImageUrlPrefixFieldNumber = 13;
  inline const ::std::string& scene_image_url_prefix() const;
  inline void set_scene_image_url_prefix(const ::std::string& value);
  inline void set_scene_image_url_prefix(const char* value);
  inline void set_scene_image_url_prefix(const char* value, size_t size);
  inline ::std::string* mutable_scene_image_url_prefix();
  inline ::std::string* release_scene_image_url_prefix();
  inline void set_allocated_scene_image_url_prefix(::std::string* scene_image_url_prefix);

  // optional string recommend_image_url = 14;
  inline bool has_recommend_image_url() const;
  inline void clear_recommend_image_url();
  static const int kRecommendImageUrlFieldNumber = 14;
  inline const ::std::string& recommend_image_url() const;
  inline void set_recommend_image_url(const ::std::string& value);
  inline void set_recommend_image_url(const char* value);
  inline void set_recommend_image_url(const char* value, size_t size);
  inline ::std::string* mutable_recommend_image_url();
  inline ::std::string* release_recommend_image_url();
  inline void set_allocated_recommend_image_url(::std::string* recommend_image_url);

  // required string image_upload_url = 15;
  inline bool has_image_upload_url() const;
  inline void clear_image_upload_url();
  static const int kImageUploadUrlFieldNumber = 15;
  inline const ::std::string& image_upload_url() const;
  inline void set_image_upload_url(const ::std::string& value);
  inline void set_image_upload_url(const char* value);
  inline void set_image_upload_url(const char* value, size_t size);
  inline ::std::string* mutable_image_upload_url();
  inline ::std::string* release_image_upload_url();
  inline void set_allocated_image_upload_url(::std::string* image_upload_url);

  // required string image_url_prefix = 16;
  inline bool has_image_url_prefix() const;
  inline void clear_image_url_prefix();
  static const int kImageUrlPrefixFieldNumber = 16;
  inline const ::std::string& image_url_prefix() const;
  inline void set_image_url_prefix(const ::std::string& value);
  inline void set_image_url_prefix(const char* value);
  inline void set_image_url_prefix(const char* value, size_t size);
  inline ::std::string* mutable_image_url_prefix();
  inline ::std::string* release_image_url_prefix();
  inline void set_allocated_image_url_prefix(::std::string* image_url_prefix);

  // required string image_60_url_prefix = 17;
  inline bool has_image_60_url_prefix() const;
  inline void clear_image_60_url_prefix();
  static const int kImage60UrlPrefixFieldNumber = 17;
  inline const ::std::string& image_60_url_prefix() const;
  inline void set_image_60_url_prefix(const ::std::string& value);
  inline void set_image_60_url_prefix(const char* value);
  inline void set_image_60_url_prefix(const char* value, size_t size);
  inline ::std::string* mutable_image_60_url_prefix();
  inline ::std::string* release_image_60_url_prefix();
  inline void set_allocated_image_60_url_prefix(::std::string* image_60_url_prefix);

  // required string image_120_url_prefix = 18;
  inline bool has_image_120_url_prefix() const;
  inline void clear_image_120_url_prefix();
  static const int kImage120UrlPrefixFieldNumber = 18;
  inline const ::std::string& image_120_url_prefix() const;
  inline void set_image_120_url_prefix(const ::std::string& value);
  inline void set_image_120_url_prefix(const char* value);
  inline void set_image_120_url_prefix(const char* value, size_t size);
  inline ::std::string* mutable_image_120_url_prefix();
  inline ::std::string* release_image_120_url_prefix();
  inline void set_allocated_image_120_url_prefix(::std::string* image_120_url_prefix);

  // required string image_240_url_prefix = 19;
  inline bool has_image_240_url_prefix() const;
  inline void clear_image_240_url_prefix();
  static const int kImage240UrlPrefixFieldNumber = 19;
  inline const ::std::string& image_240_url_prefix() const;
  inline void set_image_240_url_prefix(const ::std::string& value);
  inline void set_image_240_url_prefix(const char* value);
  inline void set_image_240_url_prefix(const char* value, size_t size);
  inline ::std::string* mutable_image_240_url_prefix();
  inline ::std::string* release_image_240_url_prefix();
  inline void set_allocated_image_240_url_prefix(::std::string* image_240_url_prefix);

  // required string image_480_url_prefix = 20;
  inline bool has_image_480_url_prefix() const;
  inline void clear_image_480_url_prefix();
  static const int kImage480UrlPrefixFieldNumber = 20;
  inline const ::std::string& image_480_url_prefix() const;
  inline void set_image_480_url_prefix(const ::std::string& value);
  inline void set_image_480_url_prefix(const char* value);
  inline void set_image_480_url_prefix(const char* value, size_t size);
  inline ::std::string* mutable_image_480_url_prefix();
  inline ::std::string* release_image_480_url_prefix();
  inline void set_allocated_image_480_url_prefix(::std::string* image_480_url_prefix);

  // @@protoc_insertion_point(class_scope:weizhu.system.ConfigV2)
 private:
  inline void set_has_http_api_url();
  inline void clear_has_http_api_url();
  inline void set_has_socket_conn_addr();
  inline void clear_has_socket_conn_addr();
  inline void set_has_avatar_url_prefix();
  inline void clear_has_avatar_url_prefix();
  inline void set_has_avatar_upload_url();
  inline void clear_has_avatar_upload_url();
  inline void set_has_im_image_url_prefix();
  inline void clear_has_im_image_url_prefix();
  inline void set_has_im_image_upload_url();
  inline void clear_has_im_image_upload_url();
  inline void set_has_discover_image_url_prefix();
  inline void clear_has_discover_image_url_prefix();
  inline void set_has_discover_image_upload_url();
  inline void clear_has_discover_image_upload_url();
  inline void set_has_discover_item_url_prefix();
  inline void clear_has_discover_item_url_prefix();
  inline void set_has_community_image_url_prefix();
  inline void clear_has_community_image_url_prefix();
  inline void set_has_community_image_upload_url();
  inline void clear_has_community_image_upload_url();
  inline void set_has_scene_home_url();
  inline void clear_has_scene_home_url();
  inline void set_has_scene_image_url_prefix();
  inline void clear_has_scene_image_url_prefix();
  inline void set_has_recommend_image_url();
  inline void clear_has_recommend_image_url();
  inline void set_has_image_upload_url();
  inline void clear_has_image_upload_url();
  inline void set_has_image_url_prefix();
  inline void clear_has_image_url_prefix();
  inline void set_has_image_60_url_prefix();
  inline void clear_has_image_60_url_prefix();
  inline void set_has_image_120_url_prefix();
  inline void clear_has_image_120_url_prefix();
  inline void set_has_image_240_url_prefix();
  inline void clear_has_image_240_url_prefix();
  inline void set_has_image_480_url_prefix();
  inline void clear_has_image_480_url_prefix();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* http_api_url_;
  ::std::string* socket_conn_addr_;
  ::std::string* avatar_url_prefix_;
  ::std::string* avatar_upload_url_;
  ::std::string* im_image_url_prefix_;
  ::std::string* im_image_upload_url_;
  ::std::string* discover_image_url_prefix_;
  ::std::string* discover_image_upload_url_;
  ::std::string* discover_item_url_prefix_;
  ::std::string* community_image_url_prefix_;
  ::std::string* community_image_upload_url_;
  ::std::string* scene_home_url_;
  ::std::string* scene_image_url_prefix_;
  ::std::string* recommend_image_url_;
  ::std::string* image_upload_url_;
  ::std::string* image_url_prefix_;
  ::std::string* image_60_url_prefix_;
  ::std::string* image_120_url_prefix_;
  ::std::string* image_240_url_prefix_;
  ::std::string* image_480_url_prefix_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_system_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_system_2eproto();
  #endif
  friend void protobuf_AssignDesc_system_2eproto();
  friend void protobuf_ShutdownFile_system_2eproto();

  void InitAsDefaultInstance();
  static ConfigV2* default_instance_;
};
// -------------------------------------------------------------------

class GetConfigResponse : public ::google::protobuf::MessageLite {
 public:
  GetConfigResponse();
  virtual ~GetConfigResponse();

  GetConfigResponse(const GetConfigResponse& from);

  inline GetConfigResponse& operator=(const GetConfigResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const GetConfigResponse& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const GetConfigResponse* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(GetConfigResponse* other);

  // implements Message ----------------------------------------------

  GetConfigResponse* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const GetConfigResponse& from);
  void MergeFrom(const GetConfigResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .weizhu.system.Config config = 1;
  inline bool has_config() const;
  inline void clear_config();
  static const int kConfigFieldNumber = 1;
  inline const ::weizhu::system::Config& config() const;
  inline ::weizhu::system::Config* mutable_config();
  inline ::weizhu::system::Config* release_config();
  inline void set_allocated_config(::weizhu::system::Config* config);

  // @@protoc_insertion_point(class_scope:weizhu.system.GetConfigResponse)
 private:
  inline void set_has_config();
  inline void clear_has_config();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::weizhu::system::Config* config_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_system_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_system_2eproto();
  #endif
  friend void protobuf_AssignDesc_system_2eproto();
  friend void protobuf_ShutdownFile_system_2eproto();

  void InitAsDefaultInstance();
  static GetConfigResponse* default_instance_;
};
// -------------------------------------------------------------------

class GetConfigV2Response : public ::google::protobuf::MessageLite {
 public:
  GetConfigV2Response();
  virtual ~GetConfigV2Response();

  GetConfigV2Response(const GetConfigV2Response& from);

  inline GetConfigV2Response& operator=(const GetConfigV2Response& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const GetConfigV2Response& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const GetConfigV2Response* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(GetConfigV2Response* other);

  // implements Message ----------------------------------------------

  GetConfigV2Response* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const GetConfigV2Response& from);
  void MergeFrom(const GetConfigV2Response& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .weizhu.system.ConfigV2 config = 2;
  inline bool has_config() const;
  inline void clear_config();
  static const int kConfigFieldNumber = 2;
  inline const ::weizhu::system::ConfigV2& config() const;
  inline ::weizhu::system::ConfigV2* mutable_config();
  inline ::weizhu::system::ConfigV2* release_config();
  inline void set_allocated_config(::weizhu::system::ConfigV2* config);

  // @@protoc_insertion_point(class_scope:weizhu.system.GetConfigV2Response)
 private:
  inline void set_has_config();
  inline void clear_has_config();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::weizhu::system::ConfigV2* config_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_system_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_system_2eproto();
  #endif
  friend void protobuf_AssignDesc_system_2eproto();
  friend void protobuf_ShutdownFile_system_2eproto();

  void InitAsDefaultInstance();
  static GetConfigV2Response* default_instance_;
};
// ===================================================================


// ===================================================================

// SystemConfigStatePush

// -------------------------------------------------------------------

// SystemNewVersionStatePush

// -------------------------------------------------------------------

// UserConfig

// required string http_api_url = 1;
inline bool UserConfig::has_http_api_url() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UserConfig::set_has_http_api_url() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UserConfig::clear_has_http_api_url() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UserConfig::clear_http_api_url() {
  if (http_api_url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    http_api_url_->clear();
  }
  clear_has_http_api_url();
}
inline const ::std::string& UserConfig::http_api_url() const {
  // @@protoc_insertion_point(field_get:weizhu.system.UserConfig.http_api_url)
  return *http_api_url_;
}
inline void UserConfig::set_http_api_url(const ::std::string& value) {
  set_has_http_api_url();
  if (http_api_url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    http_api_url_ = new ::std::string;
  }
  http_api_url_->assign(value);
  // @@protoc_insertion_point(field_set:weizhu.system.UserConfig.http_api_url)
}
inline void UserConfig::set_http_api_url(const char* value) {
  set_has_http_api_url();
  if (http_api_url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    http_api_url_ = new ::std::string;
  }
  http_api_url_->assign(value);
  // @@protoc_insertion_point(field_set_char:weizhu.system.UserConfig.http_api_url)
}
inline void UserConfig::set_http_api_url(const char* value, size_t size) {
  set_has_http_api_url();
  if (http_api_url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    http_api_url_ = new ::std::string;
  }
  http_api_url_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:weizhu.system.UserConfig.http_api_url)
}
inline ::std::string* UserConfig::mutable_http_api_url() {
  set_has_http_api_url();
  if (http_api_url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    http_api_url_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:weizhu.system.UserConfig.http_api_url)
  return http_api_url_;
}
inline ::std::string* UserConfig::release_http_api_url() {
  clear_has_http_api_url();
  if (http_api_url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = http_api_url_;
    http_api_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void UserConfig::set_allocated_http_api_url(::std::string* http_api_url) {
  if (http_api_url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete http_api_url_;
  }
  if (http_api_url) {
    set_has_http_api_url();
    http_api_url_ = http_api_url;
  } else {
    clear_has_http_api_url();
    http_api_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:weizhu.system.UserConfig.http_api_url)
}

// required string socket_conn_addr = 2;
inline bool UserConfig::has_socket_conn_addr() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UserConfig::set_has_socket_conn_addr() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UserConfig::clear_has_socket_conn_addr() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UserConfig::clear_socket_conn_addr() {
  if (socket_conn_addr_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    socket_conn_addr_->clear();
  }
  clear_has_socket_conn_addr();
}
inline const ::std::string& UserConfig::socket_conn_addr() const {
  // @@protoc_insertion_point(field_get:weizhu.system.UserConfig.socket_conn_addr)
  return *socket_conn_addr_;
}
inline void UserConfig::set_socket_conn_addr(const ::std::string& value) {
  set_has_socket_conn_addr();
  if (socket_conn_addr_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    socket_conn_addr_ = new ::std::string;
  }
  socket_conn_addr_->assign(value);
  // @@protoc_insertion_point(field_set:weizhu.system.UserConfig.socket_conn_addr)
}
inline void UserConfig::set_socket_conn_addr(const char* value) {
  set_has_socket_conn_addr();
  if (socket_conn_addr_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    socket_conn_addr_ = new ::std::string;
  }
  socket_conn_addr_->assign(value);
  // @@protoc_insertion_point(field_set_char:weizhu.system.UserConfig.socket_conn_addr)
}
inline void UserConfig::set_socket_conn_addr(const char* value, size_t size) {
  set_has_socket_conn_addr();
  if (socket_conn_addr_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    socket_conn_addr_ = new ::std::string;
  }
  socket_conn_addr_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:weizhu.system.UserConfig.socket_conn_addr)
}
inline ::std::string* UserConfig::mutable_socket_conn_addr() {
  set_has_socket_conn_addr();
  if (socket_conn_addr_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    socket_conn_addr_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:weizhu.system.UserConfig.socket_conn_addr)
  return socket_conn_addr_;
}
inline ::std::string* UserConfig::release_socket_conn_addr() {
  clear_has_socket_conn_addr();
  if (socket_conn_addr_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = socket_conn_addr_;
    socket_conn_addr_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void UserConfig::set_allocated_socket_conn_addr(::std::string* socket_conn_addr) {
  if (socket_conn_addr_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete socket_conn_addr_;
  }
  if (socket_conn_addr) {
    set_has_socket_conn_addr();
    socket_conn_addr_ = socket_conn_addr;
  } else {
    clear_has_socket_conn_addr();
    socket_conn_addr_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:weizhu.system.UserConfig.socket_conn_addr)
}

// required string image_upload_url = 3;
inline bool UserConfig::has_image_upload_url() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void UserConfig::set_has_image_upload_url() {
  _has_bits_[0] |= 0x00000004u;
}
inline void UserConfig::clear_has_image_upload_url() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void UserConfig::clear_image_upload_url() {
  if (image_upload_url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    image_upload_url_->clear();
  }
  clear_has_image_upload_url();
}
inline const ::std::string& UserConfig::image_upload_url() const {
  // @@protoc_insertion_point(field_get:weizhu.system.UserConfig.image_upload_url)
  return *image_upload_url_;
}
inline void UserConfig::set_image_upload_url(const ::std::string& value) {
  set_has_image_upload_url();
  if (image_upload_url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    image_upload_url_ = new ::std::string;
  }
  image_upload_url_->assign(value);
  // @@protoc_insertion_point(field_set:weizhu.system.UserConfig.image_upload_url)
}
inline void UserConfig::set_image_upload_url(const char* value) {
  set_has_image_upload_url();
  if (image_upload_url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    image_upload_url_ = new ::std::string;
  }
  image_upload_url_->assign(value);
  // @@protoc_insertion_point(field_set_char:weizhu.system.UserConfig.image_upload_url)
}
inline void UserConfig::set_image_upload_url(const char* value, size_t size) {
  set_has_image_upload_url();
  if (image_upload_url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    image_upload_url_ = new ::std::string;
  }
  image_upload_url_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:weizhu.system.UserConfig.image_upload_url)
}
inline ::std::string* UserConfig::mutable_image_upload_url() {
  set_has_image_upload_url();
  if (image_upload_url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    image_upload_url_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:weizhu.system.UserConfig.image_upload_url)
  return image_upload_url_;
}
inline ::std::string* UserConfig::release_image_upload_url() {
  clear_has_image_upload_url();
  if (image_upload_url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = image_upload_url_;
    image_upload_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void UserConfig::set_allocated_image_upload_url(::std::string* image_upload_url) {
  if (image_upload_url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete image_upload_url_;
  }
  if (image_upload_url) {
    set_has_image_upload_url();
    image_upload_url_ = image_upload_url;
  } else {
    clear_has_image_upload_url();
    image_upload_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:weizhu.system.UserConfig.image_upload_url)
}

// optional string video_upload_url = 4;
inline bool UserConfig::has_video_upload_url() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void UserConfig::set_has_video_upload_url() {
  _has_bits_[0] |= 0x00000008u;
}
inline void UserConfig::clear_has_video_upload_url() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void UserConfig::clear_video_upload_url() {
  if (video_upload_url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    video_upload_url_->clear();
  }
  clear_has_video_upload_url();
}
inline const ::std::string& UserConfig::video_upload_url() const {
  // @@protoc_insertion_point(field_get:weizhu.system.UserConfig.video_upload_url)
  return *video_upload_url_;
}
inline void UserConfig::set_video_upload_url(const ::std::string& value) {
  set_has_video_upload_url();
  if (video_upload_url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    video_upload_url_ = new ::std::string;
  }
  video_upload_url_->assign(value);
  // @@protoc_insertion_point(field_set:weizhu.system.UserConfig.video_upload_url)
}
inline void UserConfig::set_video_upload_url(const char* value) {
  set_has_video_upload_url();
  if (video_upload_url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    video_upload_url_ = new ::std::string;
  }
  video_upload_url_->assign(value);
  // @@protoc_insertion_point(field_set_char:weizhu.system.UserConfig.video_upload_url)
}
inline void UserConfig::set_video_upload_url(const char* value, size_t size) {
  set_has_video_upload_url();
  if (video_upload_url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    video_upload_url_ = new ::std::string;
  }
  video_upload_url_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:weizhu.system.UserConfig.video_upload_url)
}
inline ::std::string* UserConfig::mutable_video_upload_url() {
  set_has_video_upload_url();
  if (video_upload_url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    video_upload_url_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:weizhu.system.UserConfig.video_upload_url)
  return video_upload_url_;
}
inline ::std::string* UserConfig::release_video_upload_url() {
  clear_has_video_upload_url();
  if (video_upload_url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = video_upload_url_;
    video_upload_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void UserConfig::set_allocated_video_upload_url(::std::string* video_upload_url) {
  if (video_upload_url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete video_upload_url_;
  }
  if (video_upload_url) {
    set_has_video_upload_url();
    video_upload_url_ = video_upload_url;
  } else {
    clear_has_video_upload_url();
    video_upload_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:weizhu.system.UserConfig.video_upload_url)
}

// repeated string webrtc_ice_server_addr = 5;
inline int UserConfig::webrtc_ice_server_addr_size() const {
  return webrtc_ice_server_addr_.size();
}
inline void UserConfig::clear_webrtc_ice_server_addr() {
  webrtc_ice_server_addr_.Clear();
}
inline const ::std::string& UserConfig::webrtc_ice_server_addr(int index) const {
  // @@protoc_insertion_point(field_get:weizhu.system.UserConfig.webrtc_ice_server_addr)
  return webrtc_ice_server_addr_.Get(index);
}
inline ::std::string* UserConfig::mutable_webrtc_ice_server_addr(int index) {
  // @@protoc_insertion_point(field_mutable:weizhu.system.UserConfig.webrtc_ice_server_addr)
  return webrtc_ice_server_addr_.Mutable(index);
}
inline void UserConfig::set_webrtc_ice_server_addr(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:weizhu.system.UserConfig.webrtc_ice_server_addr)
  webrtc_ice_server_addr_.Mutable(index)->assign(value);
}
inline void UserConfig::set_webrtc_ice_server_addr(int index, const char* value) {
  webrtc_ice_server_addr_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:weizhu.system.UserConfig.webrtc_ice_server_addr)
}
inline void UserConfig::set_webrtc_ice_server_addr(int index, const char* value, size_t size) {
  webrtc_ice_server_addr_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:weizhu.system.UserConfig.webrtc_ice_server_addr)
}
inline ::std::string* UserConfig::add_webrtc_ice_server_addr() {
  return webrtc_ice_server_addr_.Add();
}
inline void UserConfig::add_webrtc_ice_server_addr(const ::std::string& value) {
  webrtc_ice_server_addr_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:weizhu.system.UserConfig.webrtc_ice_server_addr)
}
inline void UserConfig::add_webrtc_ice_server_addr(const char* value) {
  webrtc_ice_server_addr_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:weizhu.system.UserConfig.webrtc_ice_server_addr)
}
inline void UserConfig::add_webrtc_ice_server_addr(const char* value, size_t size) {
  webrtc_ice_server_addr_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:weizhu.system.UserConfig.webrtc_ice_server_addr)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
UserConfig::webrtc_ice_server_addr() const {
  // @@protoc_insertion_point(field_list:weizhu.system.UserConfig.webrtc_ice_server_addr)
  return webrtc_ice_server_addr_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
UserConfig::mutable_webrtc_ice_server_addr() {
  // @@protoc_insertion_point(field_mutable_list:weizhu.system.UserConfig.webrtc_ice_server_addr)
  return &webrtc_ice_server_addr_;
}

// repeated string weizhu_url_prefix = 6;
inline int UserConfig::weizhu_url_prefix_size() const {
  return weizhu_url_prefix_.size();
}
inline void UserConfig::clear_weizhu_url_prefix() {
  weizhu_url_prefix_.Clear();
}
inline const ::std::string& UserConfig::weizhu_url_prefix(int index) const {
  // @@protoc_insertion_point(field_get:weizhu.system.UserConfig.weizhu_url_prefix)
  return weizhu_url_prefix_.Get(index);
}
inline ::std::string* UserConfig::mutable_weizhu_url_prefix(int index) {
  // @@protoc_insertion_point(field_mutable:weizhu.system.UserConfig.weizhu_url_prefix)
  return weizhu_url_prefix_.Mutable(index);
}
inline void UserConfig::set_weizhu_url_prefix(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:weizhu.system.UserConfig.weizhu_url_prefix)
  weizhu_url_prefix_.Mutable(index)->assign(value);
}
inline void UserConfig::set_weizhu_url_prefix(int index, const char* value) {
  weizhu_url_prefix_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:weizhu.system.UserConfig.weizhu_url_prefix)
}
inline void UserConfig::set_weizhu_url_prefix(int index, const char* value, size_t size) {
  weizhu_url_prefix_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:weizhu.system.UserConfig.weizhu_url_prefix)
}
inline ::std::string* UserConfig::add_weizhu_url_prefix() {
  return weizhu_url_prefix_.Add();
}
inline void UserConfig::add_weizhu_url_prefix(const ::std::string& value) {
  weizhu_url_prefix_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:weizhu.system.UserConfig.weizhu_url_prefix)
}
inline void UserConfig::add_weizhu_url_prefix(const char* value) {
  weizhu_url_prefix_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:weizhu.system.UserConfig.weizhu_url_prefix)
}
inline void UserConfig::add_weizhu_url_prefix(const char* value, size_t size) {
  weizhu_url_prefix_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:weizhu.system.UserConfig.weizhu_url_prefix)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
UserConfig::weizhu_url_prefix() const {
  // @@protoc_insertion_point(field_list:weizhu.system.UserConfig.weizhu_url_prefix)
  return weizhu_url_prefix_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
UserConfig::mutable_weizhu_url_prefix() {
  // @@protoc_insertion_point(field_mutable_list:weizhu.system.UserConfig.weizhu_url_prefix)
  return &weizhu_url_prefix_;
}

// -------------------------------------------------------------------

// AdminConfig

// required string webapp_mobile_url_prefix = 1;
inline bool AdminConfig::has_webapp_mobile_url_prefix() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AdminConfig::set_has_webapp_mobile_url_prefix() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AdminConfig::clear_has_webapp_mobile_url_prefix() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AdminConfig::clear_webapp_mobile_url_prefix() {
  if (webapp_mobile_url_prefix_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    webapp_mobile_url_prefix_->clear();
  }
  clear_has_webapp_mobile_url_prefix();
}
inline const ::std::string& AdminConfig::webapp_mobile_url_prefix() const {
  // @@protoc_insertion_point(field_get:weizhu.system.AdminConfig.webapp_mobile_url_prefix)
  return *webapp_mobile_url_prefix_;
}
inline void AdminConfig::set_webapp_mobile_url_prefix(const ::std::string& value) {
  set_has_webapp_mobile_url_prefix();
  if (webapp_mobile_url_prefix_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    webapp_mobile_url_prefix_ = new ::std::string;
  }
  webapp_mobile_url_prefix_->assign(value);
  // @@protoc_insertion_point(field_set:weizhu.system.AdminConfig.webapp_mobile_url_prefix)
}
inline void AdminConfig::set_webapp_mobile_url_prefix(const char* value) {
  set_has_webapp_mobile_url_prefix();
  if (webapp_mobile_url_prefix_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    webapp_mobile_url_prefix_ = new ::std::string;
  }
  webapp_mobile_url_prefix_->assign(value);
  // @@protoc_insertion_point(field_set_char:weizhu.system.AdminConfig.webapp_mobile_url_prefix)
}
inline void AdminConfig::set_webapp_mobile_url_prefix(const char* value, size_t size) {
  set_has_webapp_mobile_url_prefix();
  if (webapp_mobile_url_prefix_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    webapp_mobile_url_prefix_ = new ::std::string;
  }
  webapp_mobile_url_prefix_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:weizhu.system.AdminConfig.webapp_mobile_url_prefix)
}
inline ::std::string* AdminConfig::mutable_webapp_mobile_url_prefix() {
  set_has_webapp_mobile_url_prefix();
  if (webapp_mobile_url_prefix_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    webapp_mobile_url_prefix_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:weizhu.system.AdminConfig.webapp_mobile_url_prefix)
  return webapp_mobile_url_prefix_;
}
inline ::std::string* AdminConfig::release_webapp_mobile_url_prefix() {
  clear_has_webapp_mobile_url_prefix();
  if (webapp_mobile_url_prefix_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = webapp_mobile_url_prefix_;
    webapp_mobile_url_prefix_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void AdminConfig::set_allocated_webapp_mobile_url_prefix(::std::string* webapp_mobile_url_prefix) {
  if (webapp_mobile_url_prefix_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete webapp_mobile_url_prefix_;
  }
  if (webapp_mobile_url_prefix) {
    set_has_webapp_mobile_url_prefix();
    webapp_mobile_url_prefix_ = webapp_mobile_url_prefix;
  } else {
    clear_has_webapp_mobile_url_prefix();
    webapp_mobile_url_prefix_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:weizhu.system.AdminConfig.webapp_mobile_url_prefix)
}

// required string webapp_web_url_prefix = 2;
inline bool AdminConfig::has_webapp_web_url_prefix() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AdminConfig::set_has_webapp_web_url_prefix() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AdminConfig::clear_has_webapp_web_url_prefix() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AdminConfig::clear_webapp_web_url_prefix() {
  if (webapp_web_url_prefix_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    webapp_web_url_prefix_->clear();
  }
  clear_has_webapp_web_url_prefix();
}
inline const ::std::string& AdminConfig::webapp_web_url_prefix() const {
  // @@protoc_insertion_point(field_get:weizhu.system.AdminConfig.webapp_web_url_prefix)
  return *webapp_web_url_prefix_;
}
inline void AdminConfig::set_webapp_web_url_prefix(const ::std::string& value) {
  set_has_webapp_web_url_prefix();
  if (webapp_web_url_prefix_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    webapp_web_url_prefix_ = new ::std::string;
  }
  webapp_web_url_prefix_->assign(value);
  // @@protoc_insertion_point(field_set:weizhu.system.AdminConfig.webapp_web_url_prefix)
}
inline void AdminConfig::set_webapp_web_url_prefix(const char* value) {
  set_has_webapp_web_url_prefix();
  if (webapp_web_url_prefix_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    webapp_web_url_prefix_ = new ::std::string;
  }
  webapp_web_url_prefix_->assign(value);
  // @@protoc_insertion_point(field_set_char:weizhu.system.AdminConfig.webapp_web_url_prefix)
}
inline void AdminConfig::set_webapp_web_url_prefix(const char* value, size_t size) {
  set_has_webapp_web_url_prefix();
  if (webapp_web_url_prefix_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    webapp_web_url_prefix_ = new ::std::string;
  }
  webapp_web_url_prefix_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:weizhu.system.AdminConfig.webapp_web_url_prefix)
}
inline ::std::string* AdminConfig::mutable_webapp_web_url_prefix() {
  set_has_webapp_web_url_prefix();
  if (webapp_web_url_prefix_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    webapp_web_url_prefix_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:weizhu.system.AdminConfig.webapp_web_url_prefix)
  return webapp_web_url_prefix_;
}
inline ::std::string* AdminConfig::release_webapp_web_url_prefix() {
  clear_has_webapp_web_url_prefix();
  if (webapp_web_url_prefix_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = webapp_web_url_prefix_;
    webapp_web_url_prefix_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void AdminConfig::set_allocated_webapp_web_url_prefix(::std::string* webapp_web_url_prefix) {
  if (webapp_web_url_prefix_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete webapp_web_url_prefix_;
  }
  if (webapp_web_url_prefix) {
    set_has_webapp_web_url_prefix();
    webapp_web_url_prefix_ = webapp_web_url_prefix;
  } else {
    clear_has_webapp_web_url_prefix();
    webapp_web_url_prefix_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:weizhu.system.AdminConfig.webapp_web_url_prefix)
}

// required string webapp_upload_url_prefix = 3;
inline bool AdminConfig::has_webapp_upload_url_prefix() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AdminConfig::set_has_webapp_upload_url_prefix() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AdminConfig::clear_has_webapp_upload_url_prefix() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AdminConfig::clear_webapp_upload_url_prefix() {
  if (webapp_upload_url_prefix_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    webapp_upload_url_prefix_->clear();
  }
  clear_has_webapp_upload_url_prefix();
}
inline const ::std::string& AdminConfig::webapp_upload_url_prefix() const {
  // @@protoc_insertion_point(field_get:weizhu.system.AdminConfig.webapp_upload_url_prefix)
  return *webapp_upload_url_prefix_;
}
inline void AdminConfig::set_webapp_upload_url_prefix(const ::std::string& value) {
  set_has_webapp_upload_url_prefix();
  if (webapp_upload_url_prefix_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    webapp_upload_url_prefix_ = new ::std::string;
  }
  webapp_upload_url_prefix_->assign(value);
  // @@protoc_insertion_point(field_set:weizhu.system.AdminConfig.webapp_upload_url_prefix)
}
inline void AdminConfig::set_webapp_upload_url_prefix(const char* value) {
  set_has_webapp_upload_url_prefix();
  if (webapp_upload_url_prefix_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    webapp_upload_url_prefix_ = new ::std::string;
  }
  webapp_upload_url_prefix_->assign(value);
  // @@protoc_insertion_point(field_set_char:weizhu.system.AdminConfig.webapp_upload_url_prefix)
}
inline void AdminConfig::set_webapp_upload_url_prefix(const char* value, size_t size) {
  set_has_webapp_upload_url_prefix();
  if (webapp_upload_url_prefix_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    webapp_upload_url_prefix_ = new ::std::string;
  }
  webapp_upload_url_prefix_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:weizhu.system.AdminConfig.webapp_upload_url_prefix)
}
inline ::std::string* AdminConfig::mutable_webapp_upload_url_prefix() {
  set_has_webapp_upload_url_prefix();
  if (webapp_upload_url_prefix_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    webapp_upload_url_prefix_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:weizhu.system.AdminConfig.webapp_upload_url_prefix)
  return webapp_upload_url_prefix_;
}
inline ::std::string* AdminConfig::release_webapp_upload_url_prefix() {
  clear_has_webapp_upload_url_prefix();
  if (webapp_upload_url_prefix_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = webapp_upload_url_prefix_;
    webapp_upload_url_prefix_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void AdminConfig::set_allocated_webapp_upload_url_prefix(::std::string* webapp_upload_url_prefix) {
  if (webapp_upload_url_prefix_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete webapp_upload_url_prefix_;
  }
  if (webapp_upload_url_prefix) {
    set_has_webapp_upload_url_prefix();
    webapp_upload_url_prefix_ = webapp_upload_url_prefix;
  } else {
    clear_has_webapp_upload_url_prefix();
    webapp_upload_url_prefix_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:weizhu.system.AdminConfig.webapp_upload_url_prefix)
}

// -------------------------------------------------------------------

// BossConfig

// required string webapp_admin_url_prefix = 1;
inline bool BossConfig::has_webapp_admin_url_prefix() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BossConfig::set_has_webapp_admin_url_prefix() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BossConfig::clear_has_webapp_admin_url_prefix() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BossConfig::clear_webapp_admin_url_prefix() {
  if (webapp_admin_url_prefix_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    webapp_admin_url_prefix_->clear();
  }
  clear_has_webapp_admin_url_prefix();
}
inline const ::std::string& BossConfig::webapp_admin_url_prefix() const {
  // @@protoc_insertion_point(field_get:weizhu.system.BossConfig.webapp_admin_url_prefix)
  return *webapp_admin_url_prefix_;
}
inline void BossConfig::set_webapp_admin_url_prefix(const ::std::string& value) {
  set_has_webapp_admin_url_prefix();
  if (webapp_admin_url_prefix_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    webapp_admin_url_prefix_ = new ::std::string;
  }
  webapp_admin_url_prefix_->assign(value);
  // @@protoc_insertion_point(field_set:weizhu.system.BossConfig.webapp_admin_url_prefix)
}
inline void BossConfig::set_webapp_admin_url_prefix(const char* value) {
  set_has_webapp_admin_url_prefix();
  if (webapp_admin_url_prefix_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    webapp_admin_url_prefix_ = new ::std::string;
  }
  webapp_admin_url_prefix_->assign(value);
  // @@protoc_insertion_point(field_set_char:weizhu.system.BossConfig.webapp_admin_url_prefix)
}
inline void BossConfig::set_webapp_admin_url_prefix(const char* value, size_t size) {
  set_has_webapp_admin_url_prefix();
  if (webapp_admin_url_prefix_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    webapp_admin_url_prefix_ = new ::std::string;
  }
  webapp_admin_url_prefix_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:weizhu.system.BossConfig.webapp_admin_url_prefix)
}
inline ::std::string* BossConfig::mutable_webapp_admin_url_prefix() {
  set_has_webapp_admin_url_prefix();
  if (webapp_admin_url_prefix_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    webapp_admin_url_prefix_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:weizhu.system.BossConfig.webapp_admin_url_prefix)
  return webapp_admin_url_prefix_;
}
inline ::std::string* BossConfig::release_webapp_admin_url_prefix() {
  clear_has_webapp_admin_url_prefix();
  if (webapp_admin_url_prefix_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = webapp_admin_url_prefix_;
    webapp_admin_url_prefix_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void BossConfig::set_allocated_webapp_admin_url_prefix(::std::string* webapp_admin_url_prefix) {
  if (webapp_admin_url_prefix_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete webapp_admin_url_prefix_;
  }
  if (webapp_admin_url_prefix) {
    set_has_webapp_admin_url_prefix();
    webapp_admin_url_prefix_ = webapp_admin_url_prefix;
  } else {
    clear_has_webapp_admin_url_prefix();
    webapp_admin_url_prefix_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:weizhu.system.BossConfig.webapp_admin_url_prefix)
}

// required string webapp_mobile_url_prefix = 2;
inline bool BossConfig::has_webapp_mobile_url_prefix() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BossConfig::set_has_webapp_mobile_url_prefix() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BossConfig::clear_has_webapp_mobile_url_prefix() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BossConfig::clear_webapp_mobile_url_prefix() {
  if (webapp_mobile_url_prefix_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    webapp_mobile_url_prefix_->clear();
  }
  clear_has_webapp_mobile_url_prefix();
}
inline const ::std::string& BossConfig::webapp_mobile_url_prefix() const {
  // @@protoc_insertion_point(field_get:weizhu.system.BossConfig.webapp_mobile_url_prefix)
  return *webapp_mobile_url_prefix_;
}
inline void BossConfig::set_webapp_mobile_url_prefix(const ::std::string& value) {
  set_has_webapp_mobile_url_prefix();
  if (webapp_mobile_url_prefix_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    webapp_mobile_url_prefix_ = new ::std::string;
  }
  webapp_mobile_url_prefix_->assign(value);
  // @@protoc_insertion_point(field_set:weizhu.system.BossConfig.webapp_mobile_url_prefix)
}
inline void BossConfig::set_webapp_mobile_url_prefix(const char* value) {
  set_has_webapp_mobile_url_prefix();
  if (webapp_mobile_url_prefix_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    webapp_mobile_url_prefix_ = new ::std::string;
  }
  webapp_mobile_url_prefix_->assign(value);
  // @@protoc_insertion_point(field_set_char:weizhu.system.BossConfig.webapp_mobile_url_prefix)
}
inline void BossConfig::set_webapp_mobile_url_prefix(const char* value, size_t size) {
  set_has_webapp_mobile_url_prefix();
  if (webapp_mobile_url_prefix_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    webapp_mobile_url_prefix_ = new ::std::string;
  }
  webapp_mobile_url_prefix_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:weizhu.system.BossConfig.webapp_mobile_url_prefix)
}
inline ::std::string* BossConfig::mutable_webapp_mobile_url_prefix() {
  set_has_webapp_mobile_url_prefix();
  if (webapp_mobile_url_prefix_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    webapp_mobile_url_prefix_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:weizhu.system.BossConfig.webapp_mobile_url_prefix)
  return webapp_mobile_url_prefix_;
}
inline ::std::string* BossConfig::release_webapp_mobile_url_prefix() {
  clear_has_webapp_mobile_url_prefix();
  if (webapp_mobile_url_prefix_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = webapp_mobile_url_prefix_;
    webapp_mobile_url_prefix_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void BossConfig::set_allocated_webapp_mobile_url_prefix(::std::string* webapp_mobile_url_prefix) {
  if (webapp_mobile_url_prefix_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete webapp_mobile_url_prefix_;
  }
  if (webapp_mobile_url_prefix) {
    set_has_webapp_mobile_url_prefix();
    webapp_mobile_url_prefix_ = webapp_mobile_url_prefix;
  } else {
    clear_has_webapp_mobile_url_prefix();
    webapp_mobile_url_prefix_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:weizhu.system.BossConfig.webapp_mobile_url_prefix)
}

// required string webapp_web_url_prefix = 3;
inline bool BossConfig::has_webapp_web_url_prefix() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BossConfig::set_has_webapp_web_url_prefix() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BossConfig::clear_has_webapp_web_url_prefix() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BossConfig::clear_webapp_web_url_prefix() {
  if (webapp_web_url_prefix_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    webapp_web_url_prefix_->clear();
  }
  clear_has_webapp_web_url_prefix();
}
inline const ::std::string& BossConfig::webapp_web_url_prefix() const {
  // @@protoc_insertion_point(field_get:weizhu.system.BossConfig.webapp_web_url_prefix)
  return *webapp_web_url_prefix_;
}
inline void BossConfig::set_webapp_web_url_prefix(const ::std::string& value) {
  set_has_webapp_web_url_prefix();
  if (webapp_web_url_prefix_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    webapp_web_url_prefix_ = new ::std::string;
  }
  webapp_web_url_prefix_->assign(value);
  // @@protoc_insertion_point(field_set:weizhu.system.BossConfig.webapp_web_url_prefix)
}
inline void BossConfig::set_webapp_web_url_prefix(const char* value) {
  set_has_webapp_web_url_prefix();
  if (webapp_web_url_prefix_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    webapp_web_url_prefix_ = new ::std::string;
  }
  webapp_web_url_prefix_->assign(value);
  // @@protoc_insertion_point(field_set_char:weizhu.system.BossConfig.webapp_web_url_prefix)
}
inline void BossConfig::set_webapp_web_url_prefix(const char* value, size_t size) {
  set_has_webapp_web_url_prefix();
  if (webapp_web_url_prefix_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    webapp_web_url_prefix_ = new ::std::string;
  }
  webapp_web_url_prefix_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:weizhu.system.BossConfig.webapp_web_url_prefix)
}
inline ::std::string* BossConfig::mutable_webapp_web_url_prefix() {
  set_has_webapp_web_url_prefix();
  if (webapp_web_url_prefix_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    webapp_web_url_prefix_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:weizhu.system.BossConfig.webapp_web_url_prefix)
  return webapp_web_url_prefix_;
}
inline ::std::string* BossConfig::release_webapp_web_url_prefix() {
  clear_has_webapp_web_url_prefix();
  if (webapp_web_url_prefix_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = webapp_web_url_prefix_;
    webapp_web_url_prefix_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void BossConfig::set_allocated_webapp_web_url_prefix(::std::string* webapp_web_url_prefix) {
  if (webapp_web_url_prefix_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete webapp_web_url_prefix_;
  }
  if (webapp_web_url_prefix) {
    set_has_webapp_web_url_prefix();
    webapp_web_url_prefix_ = webapp_web_url_prefix;
  } else {
    clear_has_webapp_web_url_prefix();
    webapp_web_url_prefix_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:weizhu.system.BossConfig.webapp_web_url_prefix)
}

// required string webapp_upload_url_prefix = 4;
inline bool BossConfig::has_webapp_upload_url_prefix() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BossConfig::set_has_webapp_upload_url_prefix() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BossConfig::clear_has_webapp_upload_url_prefix() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BossConfig::clear_webapp_upload_url_prefix() {
  if (webapp_upload_url_prefix_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    webapp_upload_url_prefix_->clear();
  }
  clear_has_webapp_upload_url_prefix();
}
inline const ::std::string& BossConfig::webapp_upload_url_prefix() const {
  // @@protoc_insertion_point(field_get:weizhu.system.BossConfig.webapp_upload_url_prefix)
  return *webapp_upload_url_prefix_;
}
inline void BossConfig::set_webapp_upload_url_prefix(const ::std::string& value) {
  set_has_webapp_upload_url_prefix();
  if (webapp_upload_url_prefix_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    webapp_upload_url_prefix_ = new ::std::string;
  }
  webapp_upload_url_prefix_->assign(value);
  // @@protoc_insertion_point(field_set:weizhu.system.BossConfig.webapp_upload_url_prefix)
}
inline void BossConfig::set_webapp_upload_url_prefix(const char* value) {
  set_has_webapp_upload_url_prefix();
  if (webapp_upload_url_prefix_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    webapp_upload_url_prefix_ = new ::std::string;
  }
  webapp_upload_url_prefix_->assign(value);
  // @@protoc_insertion_point(field_set_char:weizhu.system.BossConfig.webapp_upload_url_prefix)
}
inline void BossConfig::set_webapp_upload_url_prefix(const char* value, size_t size) {
  set_has_webapp_upload_url_prefix();
  if (webapp_upload_url_prefix_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    webapp_upload_url_prefix_ = new ::std::string;
  }
  webapp_upload_url_prefix_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:weizhu.system.BossConfig.webapp_upload_url_prefix)
}
inline ::std::string* BossConfig::mutable_webapp_upload_url_prefix() {
  set_has_webapp_upload_url_prefix();
  if (webapp_upload_url_prefix_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    webapp_upload_url_prefix_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:weizhu.system.BossConfig.webapp_upload_url_prefix)
  return webapp_upload_url_prefix_;
}
inline ::std::string* BossConfig::release_webapp_upload_url_prefix() {
  clear_has_webapp_upload_url_prefix();
  if (webapp_upload_url_prefix_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = webapp_upload_url_prefix_;
    webapp_upload_url_prefix_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void BossConfig::set_allocated_webapp_upload_url_prefix(::std::string* webapp_upload_url_prefix) {
  if (webapp_upload_url_prefix_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete webapp_upload_url_prefix_;
  }
  if (webapp_upload_url_prefix) {
    set_has_webapp_upload_url_prefix();
    webapp_upload_url_prefix_ = webapp_upload_url_prefix;
  } else {
    clear_has_webapp_upload_url_prefix();
    webapp_upload_url_prefix_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:weizhu.system.BossConfig.webapp_upload_url_prefix)
}

// -------------------------------------------------------------------

// ImageConfig

// required string image_url_prefix = 1;
inline bool ImageConfig::has_image_url_prefix() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ImageConfig::set_has_image_url_prefix() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ImageConfig::clear_has_image_url_prefix() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ImageConfig::clear_image_url_prefix() {
  if (image_url_prefix_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    image_url_prefix_->clear();
  }
  clear_has_image_url_prefix();
}
inline const ::std::string& ImageConfig::image_url_prefix() const {
  // @@protoc_insertion_point(field_get:weizhu.system.ImageConfig.image_url_prefix)
  return *image_url_prefix_;
}
inline void ImageConfig::set_image_url_prefix(const ::std::string& value) {
  set_has_image_url_prefix();
  if (image_url_prefix_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    image_url_prefix_ = new ::std::string;
  }
  image_url_prefix_->assign(value);
  // @@protoc_insertion_point(field_set:weizhu.system.ImageConfig.image_url_prefix)
}
inline void ImageConfig::set_image_url_prefix(const char* value) {
  set_has_image_url_prefix();
  if (image_url_prefix_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    image_url_prefix_ = new ::std::string;
  }
  image_url_prefix_->assign(value);
  // @@protoc_insertion_point(field_set_char:weizhu.system.ImageConfig.image_url_prefix)
}
inline void ImageConfig::set_image_url_prefix(const char* value, size_t size) {
  set_has_image_url_prefix();
  if (image_url_prefix_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    image_url_prefix_ = new ::std::string;
  }
  image_url_prefix_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:weizhu.system.ImageConfig.image_url_prefix)
}
inline ::std::string* ImageConfig::mutable_image_url_prefix() {
  set_has_image_url_prefix();
  if (image_url_prefix_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    image_url_prefix_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:weizhu.system.ImageConfig.image_url_prefix)
  return image_url_prefix_;
}
inline ::std::string* ImageConfig::release_image_url_prefix() {
  clear_has_image_url_prefix();
  if (image_url_prefix_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = image_url_prefix_;
    image_url_prefix_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ImageConfig::set_allocated_image_url_prefix(::std::string* image_url_prefix) {
  if (image_url_prefix_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete image_url_prefix_;
  }
  if (image_url_prefix) {
    set_has_image_url_prefix();
    image_url_prefix_ = image_url_prefix;
  } else {
    clear_has_image_url_prefix();
    image_url_prefix_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:weizhu.system.ImageConfig.image_url_prefix)
}

// required string image_60_url_prefix = 2;
inline bool ImageConfig::has_image_60_url_prefix() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ImageConfig::set_has_image_60_url_prefix() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ImageConfig::clear_has_image_60_url_prefix() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ImageConfig::clear_image_60_url_prefix() {
  if (image_60_url_prefix_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    image_60_url_prefix_->clear();
  }
  clear_has_image_60_url_prefix();
}
inline const ::std::string& ImageConfig::image_60_url_prefix() const {
  // @@protoc_insertion_point(field_get:weizhu.system.ImageConfig.image_60_url_prefix)
  return *image_60_url_prefix_;
}
inline void ImageConfig::set_image_60_url_prefix(const ::std::string& value) {
  set_has_image_60_url_prefix();
  if (image_60_url_prefix_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    image_60_url_prefix_ = new ::std::string;
  }
  image_60_url_prefix_->assign(value);
  // @@protoc_insertion_point(field_set:weizhu.system.ImageConfig.image_60_url_prefix)
}
inline void ImageConfig::set_image_60_url_prefix(const char* value) {
  set_has_image_60_url_prefix();
  if (image_60_url_prefix_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    image_60_url_prefix_ = new ::std::string;
  }
  image_60_url_prefix_->assign(value);
  // @@protoc_insertion_point(field_set_char:weizhu.system.ImageConfig.image_60_url_prefix)
}
inline void ImageConfig::set_image_60_url_prefix(const char* value, size_t size) {
  set_has_image_60_url_prefix();
  if (image_60_url_prefix_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    image_60_url_prefix_ = new ::std::string;
  }
  image_60_url_prefix_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:weizhu.system.ImageConfig.image_60_url_prefix)
}
inline ::std::string* ImageConfig::mutable_image_60_url_prefix() {
  set_has_image_60_url_prefix();
  if (image_60_url_prefix_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    image_60_url_prefix_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:weizhu.system.ImageConfig.image_60_url_prefix)
  return image_60_url_prefix_;
}
inline ::std::string* ImageConfig::release_image_60_url_prefix() {
  clear_has_image_60_url_prefix();
  if (image_60_url_prefix_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = image_60_url_prefix_;
    image_60_url_prefix_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ImageConfig::set_allocated_image_60_url_prefix(::std::string* image_60_url_prefix) {
  if (image_60_url_prefix_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete image_60_url_prefix_;
  }
  if (image_60_url_prefix) {
    set_has_image_60_url_prefix();
    image_60_url_prefix_ = image_60_url_prefix;
  } else {
    clear_has_image_60_url_prefix();
    image_60_url_prefix_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:weizhu.system.ImageConfig.image_60_url_prefix)
}

// required string image_120_url_prefix = 3;
inline bool ImageConfig::has_image_120_url_prefix() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ImageConfig::set_has_image_120_url_prefix() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ImageConfig::clear_has_image_120_url_prefix() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ImageConfig::clear_image_120_url_prefix() {
  if (image_120_url_prefix_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    image_120_url_prefix_->clear();
  }
  clear_has_image_120_url_prefix();
}
inline const ::std::string& ImageConfig::image_120_url_prefix() const {
  // @@protoc_insertion_point(field_get:weizhu.system.ImageConfig.image_120_url_prefix)
  return *image_120_url_prefix_;
}
inline void ImageConfig::set_image_120_url_prefix(const ::std::string& value) {
  set_has_image_120_url_prefix();
  if (image_120_url_prefix_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    image_120_url_prefix_ = new ::std::string;
  }
  image_120_url_prefix_->assign(value);
  // @@protoc_insertion_point(field_set:weizhu.system.ImageConfig.image_120_url_prefix)
}
inline void ImageConfig::set_image_120_url_prefix(const char* value) {
  set_has_image_120_url_prefix();
  if (image_120_url_prefix_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    image_120_url_prefix_ = new ::std::string;
  }
  image_120_url_prefix_->assign(value);
  // @@protoc_insertion_point(field_set_char:weizhu.system.ImageConfig.image_120_url_prefix)
}
inline void ImageConfig::set_image_120_url_prefix(const char* value, size_t size) {
  set_has_image_120_url_prefix();
  if (image_120_url_prefix_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    image_120_url_prefix_ = new ::std::string;
  }
  image_120_url_prefix_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:weizhu.system.ImageConfig.image_120_url_prefix)
}
inline ::std::string* ImageConfig::mutable_image_120_url_prefix() {
  set_has_image_120_url_prefix();
  if (image_120_url_prefix_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    image_120_url_prefix_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:weizhu.system.ImageConfig.image_120_url_prefix)
  return image_120_url_prefix_;
}
inline ::std::string* ImageConfig::release_image_120_url_prefix() {
  clear_has_image_120_url_prefix();
  if (image_120_url_prefix_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = image_120_url_prefix_;
    image_120_url_prefix_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ImageConfig::set_allocated_image_120_url_prefix(::std::string* image_120_url_prefix) {
  if (image_120_url_prefix_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete image_120_url_prefix_;
  }
  if (image_120_url_prefix) {
    set_has_image_120_url_prefix();
    image_120_url_prefix_ = image_120_url_prefix;
  } else {
    clear_has_image_120_url_prefix();
    image_120_url_prefix_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:weizhu.system.ImageConfig.image_120_url_prefix)
}

// required string image_240_url_prefix = 4;
inline bool ImageConfig::has_image_240_url_prefix() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ImageConfig::set_has_image_240_url_prefix() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ImageConfig::clear_has_image_240_url_prefix() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ImageConfig::clear_image_240_url_prefix() {
  if (image_240_url_prefix_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    image_240_url_prefix_->clear();
  }
  clear_has_image_240_url_prefix();
}
inline const ::std::string& ImageConfig::image_240_url_prefix() const {
  // @@protoc_insertion_point(field_get:weizhu.system.ImageConfig.image_240_url_prefix)
  return *image_240_url_prefix_;
}
inline void ImageConfig::set_image_240_url_prefix(const ::std::string& value) {
  set_has_image_240_url_prefix();
  if (image_240_url_prefix_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    image_240_url_prefix_ = new ::std::string;
  }
  image_240_url_prefix_->assign(value);
  // @@protoc_insertion_point(field_set:weizhu.system.ImageConfig.image_240_url_prefix)
}
inline void ImageConfig::set_image_240_url_prefix(const char* value) {
  set_has_image_240_url_prefix();
  if (image_240_url_prefix_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    image_240_url_prefix_ = new ::std::string;
  }
  image_240_url_prefix_->assign(value);
  // @@protoc_insertion_point(field_set_char:weizhu.system.ImageConfig.image_240_url_prefix)
}
inline void ImageConfig::set_image_240_url_prefix(const char* value, size_t size) {
  set_has_image_240_url_prefix();
  if (image_240_url_prefix_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    image_240_url_prefix_ = new ::std::string;
  }
  image_240_url_prefix_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:weizhu.system.ImageConfig.image_240_url_prefix)
}
inline ::std::string* ImageConfig::mutable_image_240_url_prefix() {
  set_has_image_240_url_prefix();
  if (image_240_url_prefix_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    image_240_url_prefix_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:weizhu.system.ImageConfig.image_240_url_prefix)
  return image_240_url_prefix_;
}
inline ::std::string* ImageConfig::release_image_240_url_prefix() {
  clear_has_image_240_url_prefix();
  if (image_240_url_prefix_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = image_240_url_prefix_;
    image_240_url_prefix_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ImageConfig::set_allocated_image_240_url_prefix(::std::string* image_240_url_prefix) {
  if (image_240_url_prefix_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete image_240_url_prefix_;
  }
  if (image_240_url_prefix) {
    set_has_image_240_url_prefix();
    image_240_url_prefix_ = image_240_url_prefix;
  } else {
    clear_has_image_240_url_prefix();
    image_240_url_prefix_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:weizhu.system.ImageConfig.image_240_url_prefix)
}

// required string image_480_url_prefix = 5;
inline bool ImageConfig::has_image_480_url_prefix() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ImageConfig::set_has_image_480_url_prefix() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ImageConfig::clear_has_image_480_url_prefix() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ImageConfig::clear_image_480_url_prefix() {
  if (image_480_url_prefix_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    image_480_url_prefix_->clear();
  }
  clear_has_image_480_url_prefix();
}
inline const ::std::string& ImageConfig::image_480_url_prefix() const {
  // @@protoc_insertion_point(field_get:weizhu.system.ImageConfig.image_480_url_prefix)
  return *image_480_url_prefix_;
}
inline void ImageConfig::set_image_480_url_prefix(const ::std::string& value) {
  set_has_image_480_url_prefix();
  if (image_480_url_prefix_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    image_480_url_prefix_ = new ::std::string;
  }
  image_480_url_prefix_->assign(value);
  // @@protoc_insertion_point(field_set:weizhu.system.ImageConfig.image_480_url_prefix)
}
inline void ImageConfig::set_image_480_url_prefix(const char* value) {
  set_has_image_480_url_prefix();
  if (image_480_url_prefix_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    image_480_url_prefix_ = new ::std::string;
  }
  image_480_url_prefix_->assign(value);
  // @@protoc_insertion_point(field_set_char:weizhu.system.ImageConfig.image_480_url_prefix)
}
inline void ImageConfig::set_image_480_url_prefix(const char* value, size_t size) {
  set_has_image_480_url_prefix();
  if (image_480_url_prefix_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    image_480_url_prefix_ = new ::std::string;
  }
  image_480_url_prefix_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:weizhu.system.ImageConfig.image_480_url_prefix)
}
inline ::std::string* ImageConfig::mutable_image_480_url_prefix() {
  set_has_image_480_url_prefix();
  if (image_480_url_prefix_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    image_480_url_prefix_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:weizhu.system.ImageConfig.image_480_url_prefix)
  return image_480_url_prefix_;
}
inline ::std::string* ImageConfig::release_image_480_url_prefix() {
  clear_has_image_480_url_prefix();
  if (image_480_url_prefix_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = image_480_url_prefix_;
    image_480_url_prefix_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ImageConfig::set_allocated_image_480_url_prefix(::std::string* image_480_url_prefix) {
  if (image_480_url_prefix_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete image_480_url_prefix_;
  }
  if (image_480_url_prefix) {
    set_has_image_480_url_prefix();
    image_480_url_prefix_ = image_480_url_prefix;
  } else {
    clear_has_image_480_url_prefix();
    image_480_url_prefix_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:weizhu.system.ImageConfig.image_480_url_prefix)
}

// -------------------------------------------------------------------

// DynamicConfig

// required string name = 1;
inline bool DynamicConfig::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DynamicConfig::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DynamicConfig::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DynamicConfig::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& DynamicConfig::name() const {
  // @@protoc_insertion_point(field_get:weizhu.system.DynamicConfig.name)
  return *name_;
}
inline void DynamicConfig::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:weizhu.system.DynamicConfig.name)
}
inline void DynamicConfig::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:weizhu.system.DynamicConfig.name)
}
inline void DynamicConfig::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:weizhu.system.DynamicConfig.name)
}
inline ::std::string* DynamicConfig::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:weizhu.system.DynamicConfig.name)
  return name_;
}
inline ::std::string* DynamicConfig::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void DynamicConfig::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:weizhu.system.DynamicConfig.name)
}

// required string value = 2;
inline bool DynamicConfig::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DynamicConfig::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DynamicConfig::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DynamicConfig::clear_value() {
  if (value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    value_->clear();
  }
  clear_has_value();
}
inline const ::std::string& DynamicConfig::value() const {
  // @@protoc_insertion_point(field_get:weizhu.system.DynamicConfig.value)
  return *value_;
}
inline void DynamicConfig::set_value(const ::std::string& value) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    value_ = new ::std::string;
  }
  value_->assign(value);
  // @@protoc_insertion_point(field_set:weizhu.system.DynamicConfig.value)
}
inline void DynamicConfig::set_value(const char* value) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    value_ = new ::std::string;
  }
  value_->assign(value);
  // @@protoc_insertion_point(field_set_char:weizhu.system.DynamicConfig.value)
}
inline void DynamicConfig::set_value(const char* value, size_t size) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    value_ = new ::std::string;
  }
  value_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:weizhu.system.DynamicConfig.value)
}
inline ::std::string* DynamicConfig::mutable_value() {
  set_has_value();
  if (value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    value_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:weizhu.system.DynamicConfig.value)
  return value_;
}
inline ::std::string* DynamicConfig::release_value() {
  clear_has_value();
  if (value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = value_;
    value_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void DynamicConfig::set_allocated_value(::std::string* value) {
  if (value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete value_;
  }
  if (value) {
    set_has_value();
    value_ = value;
  } else {
    clear_has_value();
    value_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:weizhu.system.DynamicConfig.value)
}

// -------------------------------------------------------------------

// VideoConfig

// required string video_url_prefix = 1;
inline bool VideoConfig::has_video_url_prefix() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void VideoConfig::set_has_video_url_prefix() {
  _has_bits_[0] |= 0x00000001u;
}
inline void VideoConfig::clear_has_video_url_prefix() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void VideoConfig::clear_video_url_prefix() {
  if (video_url_prefix_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    video_url_prefix_->clear();
  }
  clear_has_video_url_prefix();
}
inline const ::std::string& VideoConfig::video_url_prefix() const {
  // @@protoc_insertion_point(field_get:weizhu.system.VideoConfig.video_url_prefix)
  return *video_url_prefix_;
}
inline void VideoConfig::set_video_url_prefix(const ::std::string& value) {
  set_has_video_url_prefix();
  if (video_url_prefix_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    video_url_prefix_ = new ::std::string;
  }
  video_url_prefix_->assign(value);
  // @@protoc_insertion_point(field_set:weizhu.system.VideoConfig.video_url_prefix)
}
inline void VideoConfig::set_video_url_prefix(const char* value) {
  set_has_video_url_prefix();
  if (video_url_prefix_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    video_url_prefix_ = new ::std::string;
  }
  video_url_prefix_->assign(value);
  // @@protoc_insertion_point(field_set_char:weizhu.system.VideoConfig.video_url_prefix)
}
inline void VideoConfig::set_video_url_prefix(const char* value, size_t size) {
  set_has_video_url_prefix();
  if (video_url_prefix_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    video_url_prefix_ = new ::std::string;
  }
  video_url_prefix_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:weizhu.system.VideoConfig.video_url_prefix)
}
inline ::std::string* VideoConfig::mutable_video_url_prefix() {
  set_has_video_url_prefix();
  if (video_url_prefix_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    video_url_prefix_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:weizhu.system.VideoConfig.video_url_prefix)
  return video_url_prefix_;
}
inline ::std::string* VideoConfig::release_video_url_prefix() {
  clear_has_video_url_prefix();
  if (video_url_prefix_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = video_url_prefix_;
    video_url_prefix_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void VideoConfig::set_allocated_video_url_prefix(::std::string* video_url_prefix) {
  if (video_url_prefix_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete video_url_prefix_;
  }
  if (video_url_prefix) {
    set_has_video_url_prefix();
    video_url_prefix_ = video_url_prefix;
  } else {
    clear_has_video_url_prefix();
    video_url_prefix_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:weizhu.system.VideoConfig.video_url_prefix)
}

// -------------------------------------------------------------------

// NewVersion

// required string version_name = 1;
inline bool NewVersion::has_version_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NewVersion::set_has_version_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NewVersion::clear_has_version_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NewVersion::clear_version_name() {
  if (version_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    version_name_->clear();
  }
  clear_has_version_name();
}
inline const ::std::string& NewVersion::version_name() const {
  // @@protoc_insertion_point(field_get:weizhu.system.NewVersion.version_name)
  return *version_name_;
}
inline void NewVersion::set_version_name(const ::std::string& value) {
  set_has_version_name();
  if (version_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    version_name_ = new ::std::string;
  }
  version_name_->assign(value);
  // @@protoc_insertion_point(field_set:weizhu.system.NewVersion.version_name)
}
inline void NewVersion::set_version_name(const char* value) {
  set_has_version_name();
  if (version_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    version_name_ = new ::std::string;
  }
  version_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:weizhu.system.NewVersion.version_name)
}
inline void NewVersion::set_version_name(const char* value, size_t size) {
  set_has_version_name();
  if (version_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    version_name_ = new ::std::string;
  }
  version_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:weizhu.system.NewVersion.version_name)
}
inline ::std::string* NewVersion::mutable_version_name() {
  set_has_version_name();
  if (version_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    version_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:weizhu.system.NewVersion.version_name)
  return version_name_;
}
inline ::std::string* NewVersion::release_version_name() {
  clear_has_version_name();
  if (version_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = version_name_;
    version_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void NewVersion::set_allocated_version_name(::std::string* version_name) {
  if (version_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete version_name_;
  }
  if (version_name) {
    set_has_version_name();
    version_name_ = version_name;
  } else {
    clear_has_version_name();
    version_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:weizhu.system.NewVersion.version_name)
}

// required string feature_text = 2;
inline bool NewVersion::has_feature_text() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NewVersion::set_has_feature_text() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NewVersion::clear_has_feature_text() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NewVersion::clear_feature_text() {
  if (feature_text_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    feature_text_->clear();
  }
  clear_has_feature_text();
}
inline const ::std::string& NewVersion::feature_text() const {
  // @@protoc_insertion_point(field_get:weizhu.system.NewVersion.feature_text)
  return *feature_text_;
}
inline void NewVersion::set_feature_text(const ::std::string& value) {
  set_has_feature_text();
  if (feature_text_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    feature_text_ = new ::std::string;
  }
  feature_text_->assign(value);
  // @@protoc_insertion_point(field_set:weizhu.system.NewVersion.feature_text)
}
inline void NewVersion::set_feature_text(const char* value) {
  set_has_feature_text();
  if (feature_text_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    feature_text_ = new ::std::string;
  }
  feature_text_->assign(value);
  // @@protoc_insertion_point(field_set_char:weizhu.system.NewVersion.feature_text)
}
inline void NewVersion::set_feature_text(const char* value, size_t size) {
  set_has_feature_text();
  if (feature_text_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    feature_text_ = new ::std::string;
  }
  feature_text_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:weizhu.system.NewVersion.feature_text)
}
inline ::std::string* NewVersion::mutable_feature_text() {
  set_has_feature_text();
  if (feature_text_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    feature_text_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:weizhu.system.NewVersion.feature_text)
  return feature_text_;
}
inline ::std::string* NewVersion::release_feature_text() {
  clear_has_feature_text();
  if (feature_text_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = feature_text_;
    feature_text_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void NewVersion::set_allocated_feature_text(::std::string* feature_text) {
  if (feature_text_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete feature_text_;
  }
  if (feature_text) {
    set_has_feature_text();
    feature_text_ = feature_text;
  } else {
    clear_has_feature_text();
    feature_text_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:weizhu.system.NewVersion.feature_text)
}

// required string download_url = 3;
inline bool NewVersion::has_download_url() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void NewVersion::set_has_download_url() {
  _has_bits_[0] |= 0x00000004u;
}
inline void NewVersion::clear_has_download_url() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void NewVersion::clear_download_url() {
  if (download_url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    download_url_->clear();
  }
  clear_has_download_url();
}
inline const ::std::string& NewVersion::download_url() const {
  // @@protoc_insertion_point(field_get:weizhu.system.NewVersion.download_url)
  return *download_url_;
}
inline void NewVersion::set_download_url(const ::std::string& value) {
  set_has_download_url();
  if (download_url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    download_url_ = new ::std::string;
  }
  download_url_->assign(value);
  // @@protoc_insertion_point(field_set:weizhu.system.NewVersion.download_url)
}
inline void NewVersion::set_download_url(const char* value) {
  set_has_download_url();
  if (download_url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    download_url_ = new ::std::string;
  }
  download_url_->assign(value);
  // @@protoc_insertion_point(field_set_char:weizhu.system.NewVersion.download_url)
}
inline void NewVersion::set_download_url(const char* value, size_t size) {
  set_has_download_url();
  if (download_url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    download_url_ = new ::std::string;
  }
  download_url_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:weizhu.system.NewVersion.download_url)
}
inline ::std::string* NewVersion::mutable_download_url() {
  set_has_download_url();
  if (download_url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    download_url_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:weizhu.system.NewVersion.download_url)
  return download_url_;
}
inline ::std::string* NewVersion::release_download_url() {
  clear_has_download_url();
  if (download_url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = download_url_;
    download_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void NewVersion::set_allocated_download_url(::std::string* download_url) {
  if (download_url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete download_url_;
  }
  if (download_url) {
    set_has_download_url();
    download_url_ = download_url;
  } else {
    clear_has_download_url();
    download_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:weizhu.system.NewVersion.download_url)
}

// optional int32 version_code = 4;
inline bool NewVersion::has_version_code() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void NewVersion::set_has_version_code() {
  _has_bits_[0] |= 0x00000008u;
}
inline void NewVersion::clear_has_version_code() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void NewVersion::clear_version_code() {
  version_code_ = 0;
  clear_has_version_code();
}
inline ::google::protobuf::int32 NewVersion::version_code() const {
  // @@protoc_insertion_point(field_get:weizhu.system.NewVersion.version_code)
  return version_code_;
}
inline void NewVersion::set_version_code(::google::protobuf::int32 value) {
  set_has_version_code();
  version_code_ = value;
  // @@protoc_insertion_point(field_set:weizhu.system.NewVersion.version_code)
}

// optional string check_md5 = 5;
inline bool NewVersion::has_check_md5() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void NewVersion::set_has_check_md5() {
  _has_bits_[0] |= 0x00000010u;
}
inline void NewVersion::clear_has_check_md5() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void NewVersion::clear_check_md5() {
  if (check_md5_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    check_md5_->clear();
  }
  clear_has_check_md5();
}
inline const ::std::string& NewVersion::check_md5() const {
  // @@protoc_insertion_point(field_get:weizhu.system.NewVersion.check_md5)
  return *check_md5_;
}
inline void NewVersion::set_check_md5(const ::std::string& value) {
  set_has_check_md5();
  if (check_md5_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    check_md5_ = new ::std::string;
  }
  check_md5_->assign(value);
  // @@protoc_insertion_point(field_set:weizhu.system.NewVersion.check_md5)
}
inline void NewVersion::set_check_md5(const char* value) {
  set_has_check_md5();
  if (check_md5_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    check_md5_ = new ::std::string;
  }
  check_md5_->assign(value);
  // @@protoc_insertion_point(field_set_char:weizhu.system.NewVersion.check_md5)
}
inline void NewVersion::set_check_md5(const char* value, size_t size) {
  set_has_check_md5();
  if (check_md5_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    check_md5_ = new ::std::string;
  }
  check_md5_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:weizhu.system.NewVersion.check_md5)
}
inline ::std::string* NewVersion::mutable_check_md5() {
  set_has_check_md5();
  if (check_md5_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    check_md5_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:weizhu.system.NewVersion.check_md5)
  return check_md5_;
}
inline ::std::string* NewVersion::release_check_md5() {
  clear_has_check_md5();
  if (check_md5_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = check_md5_;
    check_md5_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void NewVersion::set_allocated_check_md5(::std::string* check_md5) {
  if (check_md5_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete check_md5_;
  }
  if (check_md5) {
    set_has_check_md5();
    check_md5_ = check_md5;
  } else {
    clear_has_check_md5();
    check_md5_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:weizhu.system.NewVersion.check_md5)
}

// -------------------------------------------------------------------

// GetUserConfigResponse

// required .weizhu.system.UserConfig user = 1;
inline bool GetUserConfigResponse::has_user() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GetUserConfigResponse::set_has_user() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GetUserConfigResponse::clear_has_user() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GetUserConfigResponse::clear_user() {
  if (user_ != NULL) user_->::weizhu::system::UserConfig::Clear();
  clear_has_user();
}
inline const ::weizhu::system::UserConfig& GetUserConfigResponse::user() const {
  // @@protoc_insertion_point(field_get:weizhu.system.GetUserConfigResponse.user)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return user_ != NULL ? *user_ : *default_instance().user_;
#else
  return user_ != NULL ? *user_ : *default_instance_->user_;
#endif
}
inline ::weizhu::system::UserConfig* GetUserConfigResponse::mutable_user() {
  set_has_user();
  if (user_ == NULL) user_ = new ::weizhu::system::UserConfig;
  // @@protoc_insertion_point(field_mutable:weizhu.system.GetUserConfigResponse.user)
  return user_;
}
inline ::weizhu::system::UserConfig* GetUserConfigResponse::release_user() {
  clear_has_user();
  ::weizhu::system::UserConfig* temp = user_;
  user_ = NULL;
  return temp;
}
inline void GetUserConfigResponse::set_allocated_user(::weizhu::system::UserConfig* user) {
  delete user_;
  user_ = user;
  if (user) {
    set_has_user();
  } else {
    clear_has_user();
  }
  // @@protoc_insertion_point(field_set_allocated:weizhu.system.GetUserConfigResponse.user)
}

// required .weizhu.system.ImageConfig image = 2;
inline bool GetUserConfigResponse::has_image() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GetUserConfigResponse::set_has_image() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GetUserConfigResponse::clear_has_image() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GetUserConfigResponse::clear_image() {
  if (image_ != NULL) image_->::weizhu::system::ImageConfig::Clear();
  clear_has_image();
}
inline const ::weizhu::system::ImageConfig& GetUserConfigResponse::image() const {
  // @@protoc_insertion_point(field_get:weizhu.system.GetUserConfigResponse.image)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return image_ != NULL ? *image_ : *default_instance().image_;
#else
  return image_ != NULL ? *image_ : *default_instance_->image_;
#endif
}
inline ::weizhu::system::ImageConfig* GetUserConfigResponse::mutable_image() {
  set_has_image();
  if (image_ == NULL) image_ = new ::weizhu::system::ImageConfig;
  // @@protoc_insertion_point(field_mutable:weizhu.system.GetUserConfigResponse.image)
  return image_;
}
inline ::weizhu::system::ImageConfig* GetUserConfigResponse::release_image() {
  clear_has_image();
  ::weizhu::system::ImageConfig* temp = image_;
  image_ = NULL;
  return temp;
}
inline void GetUserConfigResponse::set_allocated_image(::weizhu::system::ImageConfig* image) {
  delete image_;
  image_ = image;
  if (image) {
    set_has_image();
  } else {
    clear_has_image();
  }
  // @@protoc_insertion_point(field_set_allocated:weizhu.system.GetUserConfigResponse.image)
}

// repeated .weizhu.system.DynamicConfig dynamic = 3;
inline int GetUserConfigResponse::dynamic_size() const {
  return dynamic_.size();
}
inline void GetUserConfigResponse::clear_dynamic() {
  dynamic_.Clear();
}
inline const ::weizhu::system::DynamicConfig& GetUserConfigResponse::dynamic(int index) const {
  // @@protoc_insertion_point(field_get:weizhu.system.GetUserConfigResponse.dynamic)
  return dynamic_.Get(index);
}
inline ::weizhu::system::DynamicConfig* GetUserConfigResponse::mutable_dynamic(int index) {
  // @@protoc_insertion_point(field_mutable:weizhu.system.GetUserConfigResponse.dynamic)
  return dynamic_.Mutable(index);
}
inline ::weizhu::system::DynamicConfig* GetUserConfigResponse::add_dynamic() {
  // @@protoc_insertion_point(field_add:weizhu.system.GetUserConfigResponse.dynamic)
  return dynamic_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::weizhu::system::DynamicConfig >&
GetUserConfigResponse::dynamic() const {
  // @@protoc_insertion_point(field_list:weizhu.system.GetUserConfigResponse.dynamic)
  return dynamic_;
}
inline ::google::protobuf::RepeatedPtrField< ::weizhu::system::DynamicConfig >*
GetUserConfigResponse::mutable_dynamic() {
  // @@protoc_insertion_point(field_mutable_list:weizhu.system.GetUserConfigResponse.dynamic)
  return &dynamic_;
}

// optional .weizhu.system.VideoConfig video = 4;
inline bool GetUserConfigResponse::has_video() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GetUserConfigResponse::set_has_video() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GetUserConfigResponse::clear_has_video() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GetUserConfigResponse::clear_video() {
  if (video_ != NULL) video_->::weizhu::system::VideoConfig::Clear();
  clear_has_video();
}
inline const ::weizhu::system::VideoConfig& GetUserConfigResponse::video() const {
  // @@protoc_insertion_point(field_get:weizhu.system.GetUserConfigResponse.video)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return video_ != NULL ? *video_ : *default_instance().video_;
#else
  return video_ != NULL ? *video_ : *default_instance_->video_;
#endif
}
inline ::weizhu::system::VideoConfig* GetUserConfigResponse::mutable_video() {
  set_has_video();
  if (video_ == NULL) video_ = new ::weizhu::system::VideoConfig;
  // @@protoc_insertion_point(field_mutable:weizhu.system.GetUserConfigResponse.video)
  return video_;
}
inline ::weizhu::system::VideoConfig* GetUserConfigResponse::release_video() {
  clear_has_video();
  ::weizhu::system::VideoConfig* temp = video_;
  video_ = NULL;
  return temp;
}
inline void GetUserConfigResponse::set_allocated_video(::weizhu::system::VideoConfig* video) {
  delete video_;
  video_ = video;
  if (video) {
    set_has_video();
  } else {
    clear_has_video();
  }
  // @@protoc_insertion_point(field_set_allocated:weizhu.system.GetUserConfigResponse.video)
}

// -------------------------------------------------------------------

// GetAdminConfigResponse

// required .weizhu.system.AdminConfig admin = 1;
inline bool GetAdminConfigResponse::has_admin() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GetAdminConfigResponse::set_has_admin() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GetAdminConfigResponse::clear_has_admin() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GetAdminConfigResponse::clear_admin() {
  if (admin_ != NULL) admin_->::weizhu::system::AdminConfig::Clear();
  clear_has_admin();
}
inline const ::weizhu::system::AdminConfig& GetAdminConfigResponse::admin() const {
  // @@protoc_insertion_point(field_get:weizhu.system.GetAdminConfigResponse.admin)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return admin_ != NULL ? *admin_ : *default_instance().admin_;
#else
  return admin_ != NULL ? *admin_ : *default_instance_->admin_;
#endif
}
inline ::weizhu::system::AdminConfig* GetAdminConfigResponse::mutable_admin() {
  set_has_admin();
  if (admin_ == NULL) admin_ = new ::weizhu::system::AdminConfig;
  // @@protoc_insertion_point(field_mutable:weizhu.system.GetAdminConfigResponse.admin)
  return admin_;
}
inline ::weizhu::system::AdminConfig* GetAdminConfigResponse::release_admin() {
  clear_has_admin();
  ::weizhu::system::AdminConfig* temp = admin_;
  admin_ = NULL;
  return temp;
}
inline void GetAdminConfigResponse::set_allocated_admin(::weizhu::system::AdminConfig* admin) {
  delete admin_;
  admin_ = admin;
  if (admin) {
    set_has_admin();
  } else {
    clear_has_admin();
  }
  // @@protoc_insertion_point(field_set_allocated:weizhu.system.GetAdminConfigResponse.admin)
}

// required .weizhu.system.ImageConfig image = 2;
inline bool GetAdminConfigResponse::has_image() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GetAdminConfigResponse::set_has_image() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GetAdminConfigResponse::clear_has_image() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GetAdminConfigResponse::clear_image() {
  if (image_ != NULL) image_->::weizhu::system::ImageConfig::Clear();
  clear_has_image();
}
inline const ::weizhu::system::ImageConfig& GetAdminConfigResponse::image() const {
  // @@protoc_insertion_point(field_get:weizhu.system.GetAdminConfigResponse.image)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return image_ != NULL ? *image_ : *default_instance().image_;
#else
  return image_ != NULL ? *image_ : *default_instance_->image_;
#endif
}
inline ::weizhu::system::ImageConfig* GetAdminConfigResponse::mutable_image() {
  set_has_image();
  if (image_ == NULL) image_ = new ::weizhu::system::ImageConfig;
  // @@protoc_insertion_point(field_mutable:weizhu.system.GetAdminConfigResponse.image)
  return image_;
}
inline ::weizhu::system::ImageConfig* GetAdminConfigResponse::release_image() {
  clear_has_image();
  ::weizhu::system::ImageConfig* temp = image_;
  image_ = NULL;
  return temp;
}
inline void GetAdminConfigResponse::set_allocated_image(::weizhu::system::ImageConfig* image) {
  delete image_;
  image_ = image;
  if (image) {
    set_has_image();
  } else {
    clear_has_image();
  }
  // @@protoc_insertion_point(field_set_allocated:weizhu.system.GetAdminConfigResponse.image)
}

// repeated .weizhu.system.DynamicConfig dynamic = 3;
inline int GetAdminConfigResponse::dynamic_size() const {
  return dynamic_.size();
}
inline void GetAdminConfigResponse::clear_dynamic() {
  dynamic_.Clear();
}
inline const ::weizhu::system::DynamicConfig& GetAdminConfigResponse::dynamic(int index) const {
  // @@protoc_insertion_point(field_get:weizhu.system.GetAdminConfigResponse.dynamic)
  return dynamic_.Get(index);
}
inline ::weizhu::system::DynamicConfig* GetAdminConfigResponse::mutable_dynamic(int index) {
  // @@protoc_insertion_point(field_mutable:weizhu.system.GetAdminConfigResponse.dynamic)
  return dynamic_.Mutable(index);
}
inline ::weizhu::system::DynamicConfig* GetAdminConfigResponse::add_dynamic() {
  // @@protoc_insertion_point(field_add:weizhu.system.GetAdminConfigResponse.dynamic)
  return dynamic_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::weizhu::system::DynamicConfig >&
GetAdminConfigResponse::dynamic() const {
  // @@protoc_insertion_point(field_list:weizhu.system.GetAdminConfigResponse.dynamic)
  return dynamic_;
}
inline ::google::protobuf::RepeatedPtrField< ::weizhu::system::DynamicConfig >*
GetAdminConfigResponse::mutable_dynamic() {
  // @@protoc_insertion_point(field_mutable_list:weizhu.system.GetAdminConfigResponse.dynamic)
  return &dynamic_;
}

// optional .weizhu.system.VideoConfig video = 4;
inline bool GetAdminConfigResponse::has_video() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GetAdminConfigResponse::set_has_video() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GetAdminConfigResponse::clear_has_video() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GetAdminConfigResponse::clear_video() {
  if (video_ != NULL) video_->::weizhu::system::VideoConfig::Clear();
  clear_has_video();
}
inline const ::weizhu::system::VideoConfig& GetAdminConfigResponse::video() const {
  // @@protoc_insertion_point(field_get:weizhu.system.GetAdminConfigResponse.video)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return video_ != NULL ? *video_ : *default_instance().video_;
#else
  return video_ != NULL ? *video_ : *default_instance_->video_;
#endif
}
inline ::weizhu::system::VideoConfig* GetAdminConfigResponse::mutable_video() {
  set_has_video();
  if (video_ == NULL) video_ = new ::weizhu::system::VideoConfig;
  // @@protoc_insertion_point(field_mutable:weizhu.system.GetAdminConfigResponse.video)
  return video_;
}
inline ::weizhu::system::VideoConfig* GetAdminConfigResponse::release_video() {
  clear_has_video();
  ::weizhu::system::VideoConfig* temp = video_;
  video_ = NULL;
  return temp;
}
inline void GetAdminConfigResponse::set_allocated_video(::weizhu::system::VideoConfig* video) {
  delete video_;
  video_ = video;
  if (video) {
    set_has_video();
  } else {
    clear_has_video();
  }
  // @@protoc_insertion_point(field_set_allocated:weizhu.system.GetAdminConfigResponse.video)
}

// -------------------------------------------------------------------

// GetBossConfigResponse

// required .weizhu.system.BossConfig boss = 1;
inline bool GetBossConfigResponse::has_boss() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GetBossConfigResponse::set_has_boss() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GetBossConfigResponse::clear_has_boss() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GetBossConfigResponse::clear_boss() {
  if (boss_ != NULL) boss_->::weizhu::system::BossConfig::Clear();
  clear_has_boss();
}
inline const ::weizhu::system::BossConfig& GetBossConfigResponse::boss() const {
  // @@protoc_insertion_point(field_get:weizhu.system.GetBossConfigResponse.boss)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return boss_ != NULL ? *boss_ : *default_instance().boss_;
#else
  return boss_ != NULL ? *boss_ : *default_instance_->boss_;
#endif
}
inline ::weizhu::system::BossConfig* GetBossConfigResponse::mutable_boss() {
  set_has_boss();
  if (boss_ == NULL) boss_ = new ::weizhu::system::BossConfig;
  // @@protoc_insertion_point(field_mutable:weizhu.system.GetBossConfigResponse.boss)
  return boss_;
}
inline ::weizhu::system::BossConfig* GetBossConfigResponse::release_boss() {
  clear_has_boss();
  ::weizhu::system::BossConfig* temp = boss_;
  boss_ = NULL;
  return temp;
}
inline void GetBossConfigResponse::set_allocated_boss(::weizhu::system::BossConfig* boss) {
  delete boss_;
  boss_ = boss;
  if (boss) {
    set_has_boss();
  } else {
    clear_has_boss();
  }
  // @@protoc_insertion_point(field_set_allocated:weizhu.system.GetBossConfigResponse.boss)
}

// required .weizhu.system.ImageConfig image = 2;
inline bool GetBossConfigResponse::has_image() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GetBossConfigResponse::set_has_image() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GetBossConfigResponse::clear_has_image() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GetBossConfigResponse::clear_image() {
  if (image_ != NULL) image_->::weizhu::system::ImageConfig::Clear();
  clear_has_image();
}
inline const ::weizhu::system::ImageConfig& GetBossConfigResponse::image() const {
  // @@protoc_insertion_point(field_get:weizhu.system.GetBossConfigResponse.image)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return image_ != NULL ? *image_ : *default_instance().image_;
#else
  return image_ != NULL ? *image_ : *default_instance_->image_;
#endif
}
inline ::weizhu::system::ImageConfig* GetBossConfigResponse::mutable_image() {
  set_has_image();
  if (image_ == NULL) image_ = new ::weizhu::system::ImageConfig;
  // @@protoc_insertion_point(field_mutable:weizhu.system.GetBossConfigResponse.image)
  return image_;
}
inline ::weizhu::system::ImageConfig* GetBossConfigResponse::release_image() {
  clear_has_image();
  ::weizhu::system::ImageConfig* temp = image_;
  image_ = NULL;
  return temp;
}
inline void GetBossConfigResponse::set_allocated_image(::weizhu::system::ImageConfig* image) {
  delete image_;
  image_ = image;
  if (image) {
    set_has_image();
  } else {
    clear_has_image();
  }
  // @@protoc_insertion_point(field_set_allocated:weizhu.system.GetBossConfigResponse.image)
}

// optional .weizhu.system.VideoConfig video = 3;
inline bool GetBossConfigResponse::has_video() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GetBossConfigResponse::set_has_video() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GetBossConfigResponse::clear_has_video() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GetBossConfigResponse::clear_video() {
  if (video_ != NULL) video_->::weizhu::system::VideoConfig::Clear();
  clear_has_video();
}
inline const ::weizhu::system::VideoConfig& GetBossConfigResponse::video() const {
  // @@protoc_insertion_point(field_get:weizhu.system.GetBossConfigResponse.video)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return video_ != NULL ? *video_ : *default_instance().video_;
#else
  return video_ != NULL ? *video_ : *default_instance_->video_;
#endif
}
inline ::weizhu::system::VideoConfig* GetBossConfigResponse::mutable_video() {
  set_has_video();
  if (video_ == NULL) video_ = new ::weizhu::system::VideoConfig;
  // @@protoc_insertion_point(field_mutable:weizhu.system.GetBossConfigResponse.video)
  return video_;
}
inline ::weizhu::system::VideoConfig* GetBossConfigResponse::release_video() {
  clear_has_video();
  ::weizhu::system::VideoConfig* temp = video_;
  video_ = NULL;
  return temp;
}
inline void GetBossConfigResponse::set_allocated_video(::weizhu::system::VideoConfig* video) {
  delete video_;
  video_ = video;
  if (video) {
    set_has_video();
  } else {
    clear_has_video();
  }
  // @@protoc_insertion_point(field_set_allocated:weizhu.system.GetBossConfigResponse.video)
}

// -------------------------------------------------------------------

// CheckNewVersionResponse

// optional .weizhu.system.NewVersion new_version = 1;
inline bool CheckNewVersionResponse::has_new_version() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CheckNewVersionResponse::set_has_new_version() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CheckNewVersionResponse::clear_has_new_version() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CheckNewVersionResponse::clear_new_version() {
  if (new_version_ != NULL) new_version_->::weizhu::system::NewVersion::Clear();
  clear_has_new_version();
}
inline const ::weizhu::system::NewVersion& CheckNewVersionResponse::new_version() const {
  // @@protoc_insertion_point(field_get:weizhu.system.CheckNewVersionResponse.new_version)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return new_version_ != NULL ? *new_version_ : *default_instance().new_version_;
#else
  return new_version_ != NULL ? *new_version_ : *default_instance_->new_version_;
#endif
}
inline ::weizhu::system::NewVersion* CheckNewVersionResponse::mutable_new_version() {
  set_has_new_version();
  if (new_version_ == NULL) new_version_ = new ::weizhu::system::NewVersion;
  // @@protoc_insertion_point(field_mutable:weizhu.system.CheckNewVersionResponse.new_version)
  return new_version_;
}
inline ::weizhu::system::NewVersion* CheckNewVersionResponse::release_new_version() {
  clear_has_new_version();
  ::weizhu::system::NewVersion* temp = new_version_;
  new_version_ = NULL;
  return temp;
}
inline void CheckNewVersionResponse::set_allocated_new_version(::weizhu::system::NewVersion* new_version) {
  delete new_version_;
  new_version_ = new_version;
  if (new_version) {
    set_has_new_version();
  } else {
    clear_has_new_version();
  }
  // @@protoc_insertion_point(field_set_allocated:weizhu.system.CheckNewVersionResponse.new_version)
}

// -------------------------------------------------------------------

// SendFeedbackRequest

// required string feedback_content = 1;
inline bool SendFeedbackRequest::has_feedback_content() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SendFeedbackRequest::set_has_feedback_content() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SendFeedbackRequest::clear_has_feedback_content() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SendFeedbackRequest::clear_feedback_content() {
  if (feedback_content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    feedback_content_->clear();
  }
  clear_has_feedback_content();
}
inline const ::std::string& SendFeedbackRequest::feedback_content() const {
  // @@protoc_insertion_point(field_get:weizhu.system.SendFeedbackRequest.feedback_content)
  return *feedback_content_;
}
inline void SendFeedbackRequest::set_feedback_content(const ::std::string& value) {
  set_has_feedback_content();
  if (feedback_content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    feedback_content_ = new ::std::string;
  }
  feedback_content_->assign(value);
  // @@protoc_insertion_point(field_set:weizhu.system.SendFeedbackRequest.feedback_content)
}
inline void SendFeedbackRequest::set_feedback_content(const char* value) {
  set_has_feedback_content();
  if (feedback_content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    feedback_content_ = new ::std::string;
  }
  feedback_content_->assign(value);
  // @@protoc_insertion_point(field_set_char:weizhu.system.SendFeedbackRequest.feedback_content)
}
inline void SendFeedbackRequest::set_feedback_content(const char* value, size_t size) {
  set_has_feedback_content();
  if (feedback_content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    feedback_content_ = new ::std::string;
  }
  feedback_content_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:weizhu.system.SendFeedbackRequest.feedback_content)
}
inline ::std::string* SendFeedbackRequest::mutable_feedback_content() {
  set_has_feedback_content();
  if (feedback_content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    feedback_content_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:weizhu.system.SendFeedbackRequest.feedback_content)
  return feedback_content_;
}
inline ::std::string* SendFeedbackRequest::release_feedback_content() {
  clear_has_feedback_content();
  if (feedback_content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = feedback_content_;
    feedback_content_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void SendFeedbackRequest::set_allocated_feedback_content(::std::string* feedback_content) {
  if (feedback_content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete feedback_content_;
  }
  if (feedback_content) {
    set_has_feedback_content();
    feedback_content_ = feedback_content;
  } else {
    clear_has_feedback_content();
    feedback_content_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:weizhu.system.SendFeedbackRequest.feedback_content)
}

// -------------------------------------------------------------------

// UpdateBadgeNumberRequest

// required int32 badge_number = 1;
inline bool UpdateBadgeNumberRequest::has_badge_number() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UpdateBadgeNumberRequest::set_has_badge_number() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UpdateBadgeNumberRequest::clear_has_badge_number() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UpdateBadgeNumberRequest::clear_badge_number() {
  badge_number_ = 0;
  clear_has_badge_number();
}
inline ::google::protobuf::int32 UpdateBadgeNumberRequest::badge_number() const {
  // @@protoc_insertion_point(field_get:weizhu.system.UpdateBadgeNumberRequest.badge_number)
  return badge_number_;
}
inline void UpdateBadgeNumberRequest::set_badge_number(::google::protobuf::int32 value) {
  set_has_badge_number();
  badge_number_ = value;
  // @@protoc_insertion_point(field_set:weizhu.system.UpdateBadgeNumberRequest.badge_number)
}

// -------------------------------------------------------------------

// GetAuthUrlRequest

// required string url = 1;
inline bool GetAuthUrlRequest::has_url() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GetAuthUrlRequest::set_has_url() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GetAuthUrlRequest::clear_has_url() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GetAuthUrlRequest::clear_url() {
  if (url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    url_->clear();
  }
  clear_has_url();
}
inline const ::std::string& GetAuthUrlRequest::url() const {
  // @@protoc_insertion_point(field_get:weizhu.system.GetAuthUrlRequest.url)
  return *url_;
}
inline void GetAuthUrlRequest::set_url(const ::std::string& value) {
  set_has_url();
  if (url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    url_ = new ::std::string;
  }
  url_->assign(value);
  // @@protoc_insertion_point(field_set:weizhu.system.GetAuthUrlRequest.url)
}
inline void GetAuthUrlRequest::set_url(const char* value) {
  set_has_url();
  if (url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    url_ = new ::std::string;
  }
  url_->assign(value);
  // @@protoc_insertion_point(field_set_char:weizhu.system.GetAuthUrlRequest.url)
}
inline void GetAuthUrlRequest::set_url(const char* value, size_t size) {
  set_has_url();
  if (url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    url_ = new ::std::string;
  }
  url_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:weizhu.system.GetAuthUrlRequest.url)
}
inline ::std::string* GetAuthUrlRequest::mutable_url() {
  set_has_url();
  if (url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    url_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:weizhu.system.GetAuthUrlRequest.url)
  return url_;
}
inline ::std::string* GetAuthUrlRequest::release_url() {
  clear_has_url();
  if (url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = url_;
    url_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void GetAuthUrlRequest::set_allocated_url(::std::string* url) {
  if (url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete url_;
  }
  if (url) {
    set_has_url();
    url_ = url;
  } else {
    clear_has_url();
    url_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:weizhu.system.GetAuthUrlRequest.url)
}

// -------------------------------------------------------------------

// GetAuthUrlResponse_AuthCookie

// required string name = 1;
inline bool GetAuthUrlResponse_AuthCookie::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GetAuthUrlResponse_AuthCookie::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GetAuthUrlResponse_AuthCookie::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GetAuthUrlResponse_AuthCookie::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& GetAuthUrlResponse_AuthCookie::name() const {
  // @@protoc_insertion_point(field_get:weizhu.system.GetAuthUrlResponse.AuthCookie.name)
  return *name_;
}
inline void GetAuthUrlResponse_AuthCookie::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:weizhu.system.GetAuthUrlResponse.AuthCookie.name)
}
inline void GetAuthUrlResponse_AuthCookie::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:weizhu.system.GetAuthUrlResponse.AuthCookie.name)
}
inline void GetAuthUrlResponse_AuthCookie::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:weizhu.system.GetAuthUrlResponse.AuthCookie.name)
}
inline ::std::string* GetAuthUrlResponse_AuthCookie::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:weizhu.system.GetAuthUrlResponse.AuthCookie.name)
  return name_;
}
inline ::std::string* GetAuthUrlResponse_AuthCookie::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void GetAuthUrlResponse_AuthCookie::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:weizhu.system.GetAuthUrlResponse.AuthCookie.name)
}

// required string value = 2;
inline bool GetAuthUrlResponse_AuthCookie::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GetAuthUrlResponse_AuthCookie::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GetAuthUrlResponse_AuthCookie::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GetAuthUrlResponse_AuthCookie::clear_value() {
  if (value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    value_->clear();
  }
  clear_has_value();
}
inline const ::std::string& GetAuthUrlResponse_AuthCookie::value() const {
  // @@protoc_insertion_point(field_get:weizhu.system.GetAuthUrlResponse.AuthCookie.value)
  return *value_;
}
inline void GetAuthUrlResponse_AuthCookie::set_value(const ::std::string& value) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    value_ = new ::std::string;
  }
  value_->assign(value);
  // @@protoc_insertion_point(field_set:weizhu.system.GetAuthUrlResponse.AuthCookie.value)
}
inline void GetAuthUrlResponse_AuthCookie::set_value(const char* value) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    value_ = new ::std::string;
  }
  value_->assign(value);
  // @@protoc_insertion_point(field_set_char:weizhu.system.GetAuthUrlResponse.AuthCookie.value)
}
inline void GetAuthUrlResponse_AuthCookie::set_value(const char* value, size_t size) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    value_ = new ::std::string;
  }
  value_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:weizhu.system.GetAuthUrlResponse.AuthCookie.value)
}
inline ::std::string* GetAuthUrlResponse_AuthCookie::mutable_value() {
  set_has_value();
  if (value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    value_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:weizhu.system.GetAuthUrlResponse.AuthCookie.value)
  return value_;
}
inline ::std::string* GetAuthUrlResponse_AuthCookie::release_value() {
  clear_has_value();
  if (value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = value_;
    value_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void GetAuthUrlResponse_AuthCookie::set_allocated_value(::std::string* value) {
  if (value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete value_;
  }
  if (value) {
    set_has_value();
    value_ = value;
  } else {
    clear_has_value();
    value_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:weizhu.system.GetAuthUrlResponse.AuthCookie.value)
}

// -------------------------------------------------------------------

// GetAuthUrlResponse

// optional .weizhu.system.GetAuthUrlResponse.Result result = 1 [default = FAIL_UNKNOWN];
inline bool GetAuthUrlResponse::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GetAuthUrlResponse::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GetAuthUrlResponse::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GetAuthUrlResponse::clear_result() {
  result_ = 99;
  clear_has_result();
}
inline ::weizhu::system::GetAuthUrlResponse_Result GetAuthUrlResponse::result() const {
  // @@protoc_insertion_point(field_get:weizhu.system.GetAuthUrlResponse.result)
  return static_cast< ::weizhu::system::GetAuthUrlResponse_Result >(result_);
}
inline void GetAuthUrlResponse::set_result(::weizhu::system::GetAuthUrlResponse_Result value) {
  assert(::weizhu::system::GetAuthUrlResponse_Result_IsValid(value));
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:weizhu.system.GetAuthUrlResponse.result)
}

// optional string fail_text = 2;
inline bool GetAuthUrlResponse::has_fail_text() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GetAuthUrlResponse::set_has_fail_text() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GetAuthUrlResponse::clear_has_fail_text() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GetAuthUrlResponse::clear_fail_text() {
  if (fail_text_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    fail_text_->clear();
  }
  clear_has_fail_text();
}
inline const ::std::string& GetAuthUrlResponse::fail_text() const {
  // @@protoc_insertion_point(field_get:weizhu.system.GetAuthUrlResponse.fail_text)
  return *fail_text_;
}
inline void GetAuthUrlResponse::set_fail_text(const ::std::string& value) {
  set_has_fail_text();
  if (fail_text_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    fail_text_ = new ::std::string;
  }
  fail_text_->assign(value);
  // @@protoc_insertion_point(field_set:weizhu.system.GetAuthUrlResponse.fail_text)
}
inline void GetAuthUrlResponse::set_fail_text(const char* value) {
  set_has_fail_text();
  if (fail_text_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    fail_text_ = new ::std::string;
  }
  fail_text_->assign(value);
  // @@protoc_insertion_point(field_set_char:weizhu.system.GetAuthUrlResponse.fail_text)
}
inline void GetAuthUrlResponse::set_fail_text(const char* value, size_t size) {
  set_has_fail_text();
  if (fail_text_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    fail_text_ = new ::std::string;
  }
  fail_text_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:weizhu.system.GetAuthUrlResponse.fail_text)
}
inline ::std::string* GetAuthUrlResponse::mutable_fail_text() {
  set_has_fail_text();
  if (fail_text_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    fail_text_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:weizhu.system.GetAuthUrlResponse.fail_text)
  return fail_text_;
}
inline ::std::string* GetAuthUrlResponse::release_fail_text() {
  clear_has_fail_text();
  if (fail_text_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = fail_text_;
    fail_text_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void GetAuthUrlResponse::set_allocated_fail_text(::std::string* fail_text) {
  if (fail_text_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete fail_text_;
  }
  if (fail_text) {
    set_has_fail_text();
    fail_text_ = fail_text;
  } else {
    clear_has_fail_text();
    fail_text_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:weizhu.system.GetAuthUrlResponse.fail_text)
}

// optional string auth_url = 3;
inline bool GetAuthUrlResponse::has_auth_url() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GetAuthUrlResponse::set_has_auth_url() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GetAuthUrlResponse::clear_has_auth_url() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GetAuthUrlResponse::clear_auth_url() {
  if (auth_url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    auth_url_->clear();
  }
  clear_has_auth_url();
}
inline const ::std::string& GetAuthUrlResponse::auth_url() const {
  // @@protoc_insertion_point(field_get:weizhu.system.GetAuthUrlResponse.auth_url)
  return *auth_url_;
}
inline void GetAuthUrlResponse::set_auth_url(const ::std::string& value) {
  set_has_auth_url();
  if (auth_url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    auth_url_ = new ::std::string;
  }
  auth_url_->assign(value);
  // @@protoc_insertion_point(field_set:weizhu.system.GetAuthUrlResponse.auth_url)
}
inline void GetAuthUrlResponse::set_auth_url(const char* value) {
  set_has_auth_url();
  if (auth_url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    auth_url_ = new ::std::string;
  }
  auth_url_->assign(value);
  // @@protoc_insertion_point(field_set_char:weizhu.system.GetAuthUrlResponse.auth_url)
}
inline void GetAuthUrlResponse::set_auth_url(const char* value, size_t size) {
  set_has_auth_url();
  if (auth_url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    auth_url_ = new ::std::string;
  }
  auth_url_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:weizhu.system.GetAuthUrlResponse.auth_url)
}
inline ::std::string* GetAuthUrlResponse::mutable_auth_url() {
  set_has_auth_url();
  if (auth_url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    auth_url_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:weizhu.system.GetAuthUrlResponse.auth_url)
  return auth_url_;
}
inline ::std::string* GetAuthUrlResponse::release_auth_url() {
  clear_has_auth_url();
  if (auth_url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = auth_url_;
    auth_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void GetAuthUrlResponse::set_allocated_auth_url(::std::string* auth_url) {
  if (auth_url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete auth_url_;
  }
  if (auth_url) {
    set_has_auth_url();
    auth_url_ = auth_url;
  } else {
    clear_has_auth_url();
    auth_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:weizhu.system.GetAuthUrlResponse.auth_url)
}

// repeated .weizhu.system.GetAuthUrlResponse.AuthCookie auth_cookie = 4;
inline int GetAuthUrlResponse::auth_cookie_size() const {
  return auth_cookie_.size();
}
inline void GetAuthUrlResponse::clear_auth_cookie() {
  auth_cookie_.Clear();
}
inline const ::weizhu::system::GetAuthUrlResponse_AuthCookie& GetAuthUrlResponse::auth_cookie(int index) const {
  // @@protoc_insertion_point(field_get:weizhu.system.GetAuthUrlResponse.auth_cookie)
  return auth_cookie_.Get(index);
}
inline ::weizhu::system::GetAuthUrlResponse_AuthCookie* GetAuthUrlResponse::mutable_auth_cookie(int index) {
  // @@protoc_insertion_point(field_mutable:weizhu.system.GetAuthUrlResponse.auth_cookie)
  return auth_cookie_.Mutable(index);
}
inline ::weizhu::system::GetAuthUrlResponse_AuthCookie* GetAuthUrlResponse::add_auth_cookie() {
  // @@protoc_insertion_point(field_add:weizhu.system.GetAuthUrlResponse.auth_cookie)
  return auth_cookie_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::weizhu::system::GetAuthUrlResponse_AuthCookie >&
GetAuthUrlResponse::auth_cookie() const {
  // @@protoc_insertion_point(field_list:weizhu.system.GetAuthUrlResponse.auth_cookie)
  return auth_cookie_;
}
inline ::google::protobuf::RepeatedPtrField< ::weizhu::system::GetAuthUrlResponse_AuthCookie >*
GetAuthUrlResponse::mutable_auth_cookie() {
  // @@protoc_insertion_point(field_mutable_list:weizhu.system.GetAuthUrlResponse.auth_cookie)
  return &auth_cookie_;
}

// -------------------------------------------------------------------

// Config

// required string http_api_url = 1;
inline bool Config::has_http_api_url() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Config::set_has_http_api_url() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Config::clear_has_http_api_url() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Config::clear_http_api_url() {
  if (http_api_url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    http_api_url_->clear();
  }
  clear_has_http_api_url();
}
inline const ::std::string& Config::http_api_url() const {
  // @@protoc_insertion_point(field_get:weizhu.system.Config.http_api_url)
  return *http_api_url_;
}
inline void Config::set_http_api_url(const ::std::string& value) {
  set_has_http_api_url();
  if (http_api_url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    http_api_url_ = new ::std::string;
  }
  http_api_url_->assign(value);
  // @@protoc_insertion_point(field_set:weizhu.system.Config.http_api_url)
}
inline void Config::set_http_api_url(const char* value) {
  set_has_http_api_url();
  if (http_api_url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    http_api_url_ = new ::std::string;
  }
  http_api_url_->assign(value);
  // @@protoc_insertion_point(field_set_char:weizhu.system.Config.http_api_url)
}
inline void Config::set_http_api_url(const char* value, size_t size) {
  set_has_http_api_url();
  if (http_api_url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    http_api_url_ = new ::std::string;
  }
  http_api_url_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:weizhu.system.Config.http_api_url)
}
inline ::std::string* Config::mutable_http_api_url() {
  set_has_http_api_url();
  if (http_api_url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    http_api_url_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:weizhu.system.Config.http_api_url)
  return http_api_url_;
}
inline ::std::string* Config::release_http_api_url() {
  clear_has_http_api_url();
  if (http_api_url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = http_api_url_;
    http_api_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Config::set_allocated_http_api_url(::std::string* http_api_url) {
  if (http_api_url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete http_api_url_;
  }
  if (http_api_url) {
    set_has_http_api_url();
    http_api_url_ = http_api_url;
  } else {
    clear_has_http_api_url();
    http_api_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:weizhu.system.Config.http_api_url)
}

// required string socket_conn_host = 2;
inline bool Config::has_socket_conn_host() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Config::set_has_socket_conn_host() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Config::clear_has_socket_conn_host() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Config::clear_socket_conn_host() {
  if (socket_conn_host_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    socket_conn_host_->clear();
  }
  clear_has_socket_conn_host();
}
inline const ::std::string& Config::socket_conn_host() const {
  // @@protoc_insertion_point(field_get:weizhu.system.Config.socket_conn_host)
  return *socket_conn_host_;
}
inline void Config::set_socket_conn_host(const ::std::string& value) {
  set_has_socket_conn_host();
  if (socket_conn_host_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    socket_conn_host_ = new ::std::string;
  }
  socket_conn_host_->assign(value);
  // @@protoc_insertion_point(field_set:weizhu.system.Config.socket_conn_host)
}
inline void Config::set_socket_conn_host(const char* value) {
  set_has_socket_conn_host();
  if (socket_conn_host_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    socket_conn_host_ = new ::std::string;
  }
  socket_conn_host_->assign(value);
  // @@protoc_insertion_point(field_set_char:weizhu.system.Config.socket_conn_host)
}
inline void Config::set_socket_conn_host(const char* value, size_t size) {
  set_has_socket_conn_host();
  if (socket_conn_host_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    socket_conn_host_ = new ::std::string;
  }
  socket_conn_host_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:weizhu.system.Config.socket_conn_host)
}
inline ::std::string* Config::mutable_socket_conn_host() {
  set_has_socket_conn_host();
  if (socket_conn_host_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    socket_conn_host_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:weizhu.system.Config.socket_conn_host)
  return socket_conn_host_;
}
inline ::std::string* Config::release_socket_conn_host() {
  clear_has_socket_conn_host();
  if (socket_conn_host_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = socket_conn_host_;
    socket_conn_host_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Config::set_allocated_socket_conn_host(::std::string* socket_conn_host) {
  if (socket_conn_host_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete socket_conn_host_;
  }
  if (socket_conn_host) {
    set_has_socket_conn_host();
    socket_conn_host_ = socket_conn_host;
  } else {
    clear_has_socket_conn_host();
    socket_conn_host_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:weizhu.system.Config.socket_conn_host)
}

// required int32 socket_conn_port = 3;
inline bool Config::has_socket_conn_port() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Config::set_has_socket_conn_port() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Config::clear_has_socket_conn_port() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Config::clear_socket_conn_port() {
  socket_conn_port_ = 0;
  clear_has_socket_conn_port();
}
inline ::google::protobuf::int32 Config::socket_conn_port() const {
  // @@protoc_insertion_point(field_get:weizhu.system.Config.socket_conn_port)
  return socket_conn_port_;
}
inline void Config::set_socket_conn_port(::google::protobuf::int32 value) {
  set_has_socket_conn_port();
  socket_conn_port_ = value;
  // @@protoc_insertion_point(field_set:weizhu.system.Config.socket_conn_port)
}

// required string upload_avatar_url = 4;
inline bool Config::has_upload_avatar_url() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Config::set_has_upload_avatar_url() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Config::clear_has_upload_avatar_url() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Config::clear_upload_avatar_url() {
  if (upload_avatar_url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    upload_avatar_url_->clear();
  }
  clear_has_upload_avatar_url();
}
inline const ::std::string& Config::upload_avatar_url() const {
  // @@protoc_insertion_point(field_get:weizhu.system.Config.upload_avatar_url)
  return *upload_avatar_url_;
}
inline void Config::set_upload_avatar_url(const ::std::string& value) {
  set_has_upload_avatar_url();
  if (upload_avatar_url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    upload_avatar_url_ = new ::std::string;
  }
  upload_avatar_url_->assign(value);
  // @@protoc_insertion_point(field_set:weizhu.system.Config.upload_avatar_url)
}
inline void Config::set_upload_avatar_url(const char* value) {
  set_has_upload_avatar_url();
  if (upload_avatar_url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    upload_avatar_url_ = new ::std::string;
  }
  upload_avatar_url_->assign(value);
  // @@protoc_insertion_point(field_set_char:weizhu.system.Config.upload_avatar_url)
}
inline void Config::set_upload_avatar_url(const char* value, size_t size) {
  set_has_upload_avatar_url();
  if (upload_avatar_url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    upload_avatar_url_ = new ::std::string;
  }
  upload_avatar_url_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:weizhu.system.Config.upload_avatar_url)
}
inline ::std::string* Config::mutable_upload_avatar_url() {
  set_has_upload_avatar_url();
  if (upload_avatar_url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    upload_avatar_url_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:weizhu.system.Config.upload_avatar_url)
  return upload_avatar_url_;
}
inline ::std::string* Config::release_upload_avatar_url() {
  clear_has_upload_avatar_url();
  if (upload_avatar_url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = upload_avatar_url_;
    upload_avatar_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Config::set_allocated_upload_avatar_url(::std::string* upload_avatar_url) {
  if (upload_avatar_url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete upload_avatar_url_;
  }
  if (upload_avatar_url) {
    set_has_upload_avatar_url();
    upload_avatar_url_ = upload_avatar_url;
  } else {
    clear_has_upload_avatar_url();
    upload_avatar_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:weizhu.system.Config.upload_avatar_url)
}

// required string upload_im_image_url = 5;
inline bool Config::has_upload_im_image_url() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Config::set_has_upload_im_image_url() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Config::clear_has_upload_im_image_url() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Config::clear_upload_im_image_url() {
  if (upload_im_image_url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    upload_im_image_url_->clear();
  }
  clear_has_upload_im_image_url();
}
inline const ::std::string& Config::upload_im_image_url() const {
  // @@protoc_insertion_point(field_get:weizhu.system.Config.upload_im_image_url)
  return *upload_im_image_url_;
}
inline void Config::set_upload_im_image_url(const ::std::string& value) {
  set_has_upload_im_image_url();
  if (upload_im_image_url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    upload_im_image_url_ = new ::std::string;
  }
  upload_im_image_url_->assign(value);
  // @@protoc_insertion_point(field_set:weizhu.system.Config.upload_im_image_url)
}
inline void Config::set_upload_im_image_url(const char* value) {
  set_has_upload_im_image_url();
  if (upload_im_image_url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    upload_im_image_url_ = new ::std::string;
  }
  upload_im_image_url_->assign(value);
  // @@protoc_insertion_point(field_set_char:weizhu.system.Config.upload_im_image_url)
}
inline void Config::set_upload_im_image_url(const char* value, size_t size) {
  set_has_upload_im_image_url();
  if (upload_im_image_url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    upload_im_image_url_ = new ::std::string;
  }
  upload_im_image_url_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:weizhu.system.Config.upload_im_image_url)
}
inline ::std::string* Config::mutable_upload_im_image_url() {
  set_has_upload_im_image_url();
  if (upload_im_image_url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    upload_im_image_url_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:weizhu.system.Config.upload_im_image_url)
  return upload_im_image_url_;
}
inline ::std::string* Config::release_upload_im_image_url() {
  clear_has_upload_im_image_url();
  if (upload_im_image_url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = upload_im_image_url_;
    upload_im_image_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Config::set_allocated_upload_im_image_url(::std::string* upload_im_image_url) {
  if (upload_im_image_url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete upload_im_image_url_;
  }
  if (upload_im_image_url) {
    set_has_upload_im_image_url();
    upload_im_image_url_ = upload_im_image_url;
  } else {
    clear_has_upload_im_image_url();
    upload_im_image_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:weizhu.system.Config.upload_im_image_url)
}

// required string upload_im_file_url = 6;
inline bool Config::has_upload_im_file_url() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Config::set_has_upload_im_file_url() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Config::clear_has_upload_im_file_url() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Config::clear_upload_im_file_url() {
  if (upload_im_file_url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    upload_im_file_url_->clear();
  }
  clear_has_upload_im_file_url();
}
inline const ::std::string& Config::upload_im_file_url() const {
  // @@protoc_insertion_point(field_get:weizhu.system.Config.upload_im_file_url)
  return *upload_im_file_url_;
}
inline void Config::set_upload_im_file_url(const ::std::string& value) {
  set_has_upload_im_file_url();
  if (upload_im_file_url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    upload_im_file_url_ = new ::std::string;
  }
  upload_im_file_url_->assign(value);
  // @@protoc_insertion_point(field_set:weizhu.system.Config.upload_im_file_url)
}
inline void Config::set_upload_im_file_url(const char* value) {
  set_has_upload_im_file_url();
  if (upload_im_file_url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    upload_im_file_url_ = new ::std::string;
  }
  upload_im_file_url_->assign(value);
  // @@protoc_insertion_point(field_set_char:weizhu.system.Config.upload_im_file_url)
}
inline void Config::set_upload_im_file_url(const char* value, size_t size) {
  set_has_upload_im_file_url();
  if (upload_im_file_url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    upload_im_file_url_ = new ::std::string;
  }
  upload_im_file_url_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:weizhu.system.Config.upload_im_file_url)
}
inline ::std::string* Config::mutable_upload_im_file_url() {
  set_has_upload_im_file_url();
  if (upload_im_file_url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    upload_im_file_url_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:weizhu.system.Config.upload_im_file_url)
  return upload_im_file_url_;
}
inline ::std::string* Config::release_upload_im_file_url() {
  clear_has_upload_im_file_url();
  if (upload_im_file_url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = upload_im_file_url_;
    upload_im_file_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Config::set_allocated_upload_im_file_url(::std::string* upload_im_file_url) {
  if (upload_im_file_url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete upload_im_file_url_;
  }
  if (upload_im_file_url) {
    set_has_upload_im_file_url();
    upload_im_file_url_ = upload_im_file_url;
  } else {
    clear_has_upload_im_file_url();
    upload_im_file_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:weizhu.system.Config.upload_im_file_url)
}

// required string avatar_url = 7;
inline bool Config::has_avatar_url() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Config::set_has_avatar_url() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Config::clear_has_avatar_url() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Config::clear_avatar_url() {
  if (avatar_url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    avatar_url_->clear();
  }
  clear_has_avatar_url();
}
inline const ::std::string& Config::avatar_url() const {
  // @@protoc_insertion_point(field_get:weizhu.system.Config.avatar_url)
  return *avatar_url_;
}
inline void Config::set_avatar_url(const ::std::string& value) {
  set_has_avatar_url();
  if (avatar_url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    avatar_url_ = new ::std::string;
  }
  avatar_url_->assign(value);
  // @@protoc_insertion_point(field_set:weizhu.system.Config.avatar_url)
}
inline void Config::set_avatar_url(const char* value) {
  set_has_avatar_url();
  if (avatar_url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    avatar_url_ = new ::std::string;
  }
  avatar_url_->assign(value);
  // @@protoc_insertion_point(field_set_char:weizhu.system.Config.avatar_url)
}
inline void Config::set_avatar_url(const char* value, size_t size) {
  set_has_avatar_url();
  if (avatar_url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    avatar_url_ = new ::std::string;
  }
  avatar_url_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:weizhu.system.Config.avatar_url)
}
inline ::std::string* Config::mutable_avatar_url() {
  set_has_avatar_url();
  if (avatar_url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    avatar_url_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:weizhu.system.Config.avatar_url)
  return avatar_url_;
}
inline ::std::string* Config::release_avatar_url() {
  clear_has_avatar_url();
  if (avatar_url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = avatar_url_;
    avatar_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Config::set_allocated_avatar_url(::std::string* avatar_url) {
  if (avatar_url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete avatar_url_;
  }
  if (avatar_url) {
    set_has_avatar_url();
    avatar_url_ = avatar_url;
  } else {
    clear_has_avatar_url();
    avatar_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:weizhu.system.Config.avatar_url)
}

// required string im_image_url = 8;
inline bool Config::has_im_image_url() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Config::set_has_im_image_url() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Config::clear_has_im_image_url() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Config::clear_im_image_url() {
  if (im_image_url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    im_image_url_->clear();
  }
  clear_has_im_image_url();
}
inline const ::std::string& Config::im_image_url() const {
  // @@protoc_insertion_point(field_get:weizhu.system.Config.im_image_url)
  return *im_image_url_;
}
inline void Config::set_im_image_url(const ::std::string& value) {
  set_has_im_image_url();
  if (im_image_url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    im_image_url_ = new ::std::string;
  }
  im_image_url_->assign(value);
  // @@protoc_insertion_point(field_set:weizhu.system.Config.im_image_url)
}
inline void Config::set_im_image_url(const char* value) {
  set_has_im_image_url();
  if (im_image_url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    im_image_url_ = new ::std::string;
  }
  im_image_url_->assign(value);
  // @@protoc_insertion_point(field_set_char:weizhu.system.Config.im_image_url)
}
inline void Config::set_im_image_url(const char* value, size_t size) {
  set_has_im_image_url();
  if (im_image_url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    im_image_url_ = new ::std::string;
  }
  im_image_url_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:weizhu.system.Config.im_image_url)
}
inline ::std::string* Config::mutable_im_image_url() {
  set_has_im_image_url();
  if (im_image_url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    im_image_url_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:weizhu.system.Config.im_image_url)
  return im_image_url_;
}
inline ::std::string* Config::release_im_image_url() {
  clear_has_im_image_url();
  if (im_image_url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = im_image_url_;
    im_image_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Config::set_allocated_im_image_url(::std::string* im_image_url) {
  if (im_image_url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete im_image_url_;
  }
  if (im_image_url) {
    set_has_im_image_url();
    im_image_url_ = im_image_url;
  } else {
    clear_has_im_image_url();
    im_image_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:weizhu.system.Config.im_image_url)
}

// required string im_file_url = 9;
inline bool Config::has_im_file_url() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Config::set_has_im_file_url() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Config::clear_has_im_file_url() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Config::clear_im_file_url() {
  if (im_file_url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    im_file_url_->clear();
  }
  clear_has_im_file_url();
}
inline const ::std::string& Config::im_file_url() const {
  // @@protoc_insertion_point(field_get:weizhu.system.Config.im_file_url)
  return *im_file_url_;
}
inline void Config::set_im_file_url(const ::std::string& value) {
  set_has_im_file_url();
  if (im_file_url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    im_file_url_ = new ::std::string;
  }
  im_file_url_->assign(value);
  // @@protoc_insertion_point(field_set:weizhu.system.Config.im_file_url)
}
inline void Config::set_im_file_url(const char* value) {
  set_has_im_file_url();
  if (im_file_url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    im_file_url_ = new ::std::string;
  }
  im_file_url_->assign(value);
  // @@protoc_insertion_point(field_set_char:weizhu.system.Config.im_file_url)
}
inline void Config::set_im_file_url(const char* value, size_t size) {
  set_has_im_file_url();
  if (im_file_url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    im_file_url_ = new ::std::string;
  }
  im_file_url_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:weizhu.system.Config.im_file_url)
}
inline ::std::string* Config::mutable_im_file_url() {
  set_has_im_file_url();
  if (im_file_url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    im_file_url_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:weizhu.system.Config.im_file_url)
  return im_file_url_;
}
inline ::std::string* Config::release_im_file_url() {
  clear_has_im_file_url();
  if (im_file_url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = im_file_url_;
    im_file_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Config::set_allocated_im_file_url(::std::string* im_file_url) {
  if (im_file_url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete im_file_url_;
  }
  if (im_file_url) {
    set_has_im_file_url();
    im_file_url_ = im_file_url;
  } else {
    clear_has_im_file_url();
    im_file_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:weizhu.system.Config.im_file_url)
}

// required string discover_image_url = 10;
inline bool Config::has_discover_image_url() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Config::set_has_discover_image_url() {
  _has_bits_[0] |= 0x00000200u;
}
inline void Config::clear_has_discover_image_url() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void Config::clear_discover_image_url() {
  if (discover_image_url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    discover_image_url_->clear();
  }
  clear_has_discover_image_url();
}
inline const ::std::string& Config::discover_image_url() const {
  // @@protoc_insertion_point(field_get:weizhu.system.Config.discover_image_url)
  return *discover_image_url_;
}
inline void Config::set_discover_image_url(const ::std::string& value) {
  set_has_discover_image_url();
  if (discover_image_url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    discover_image_url_ = new ::std::string;
  }
  discover_image_url_->assign(value);
  // @@protoc_insertion_point(field_set:weizhu.system.Config.discover_image_url)
}
inline void Config::set_discover_image_url(const char* value) {
  set_has_discover_image_url();
  if (discover_image_url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    discover_image_url_ = new ::std::string;
  }
  discover_image_url_->assign(value);
  // @@protoc_insertion_point(field_set_char:weizhu.system.Config.discover_image_url)
}
inline void Config::set_discover_image_url(const char* value, size_t size) {
  set_has_discover_image_url();
  if (discover_image_url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    discover_image_url_ = new ::std::string;
  }
  discover_image_url_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:weizhu.system.Config.discover_image_url)
}
inline ::std::string* Config::mutable_discover_image_url() {
  set_has_discover_image_url();
  if (discover_image_url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    discover_image_url_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:weizhu.system.Config.discover_image_url)
  return discover_image_url_;
}
inline ::std::string* Config::release_discover_image_url() {
  clear_has_discover_image_url();
  if (discover_image_url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = discover_image_url_;
    discover_image_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Config::set_allocated_discover_image_url(::std::string* discover_image_url) {
  if (discover_image_url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete discover_image_url_;
  }
  if (discover_image_url) {
    set_has_discover_image_url();
    discover_image_url_ = discover_image_url;
  } else {
    clear_has_discover_image_url();
    discover_image_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:weizhu.system.Config.discover_image_url)
}

// required string discover_icon_url = 11;
inline bool Config::has_discover_icon_url() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void Config::set_has_discover_icon_url() {
  _has_bits_[0] |= 0x00000400u;
}
inline void Config::clear_has_discover_icon_url() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void Config::clear_discover_icon_url() {
  if (discover_icon_url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    discover_icon_url_->clear();
  }
  clear_has_discover_icon_url();
}
inline const ::std::string& Config::discover_icon_url() const {
  // @@protoc_insertion_point(field_get:weizhu.system.Config.discover_icon_url)
  return *discover_icon_url_;
}
inline void Config::set_discover_icon_url(const ::std::string& value) {
  set_has_discover_icon_url();
  if (discover_icon_url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    discover_icon_url_ = new ::std::string;
  }
  discover_icon_url_->assign(value);
  // @@protoc_insertion_point(field_set:weizhu.system.Config.discover_icon_url)
}
inline void Config::set_discover_icon_url(const char* value) {
  set_has_discover_icon_url();
  if (discover_icon_url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    discover_icon_url_ = new ::std::string;
  }
  discover_icon_url_->assign(value);
  // @@protoc_insertion_point(field_set_char:weizhu.system.Config.discover_icon_url)
}
inline void Config::set_discover_icon_url(const char* value, size_t size) {
  set_has_discover_icon_url();
  if (discover_icon_url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    discover_icon_url_ = new ::std::string;
  }
  discover_icon_url_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:weizhu.system.Config.discover_icon_url)
}
inline ::std::string* Config::mutable_discover_icon_url() {
  set_has_discover_icon_url();
  if (discover_icon_url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    discover_icon_url_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:weizhu.system.Config.discover_icon_url)
  return discover_icon_url_;
}
inline ::std::string* Config::release_discover_icon_url() {
  clear_has_discover_icon_url();
  if (discover_icon_url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = discover_icon_url_;
    discover_icon_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Config::set_allocated_discover_icon_url(::std::string* discover_icon_url) {
  if (discover_icon_url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete discover_icon_url_;
  }
  if (discover_icon_url) {
    set_has_discover_icon_url();
    discover_icon_url_ = discover_icon_url;
  } else {
    clear_has_discover_icon_url();
    discover_icon_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:weizhu.system.Config.discover_icon_url)
}

// required string discover_item_url = 12;
inline bool Config::has_discover_item_url() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void Config::set_has_discover_item_url() {
  _has_bits_[0] |= 0x00000800u;
}
inline void Config::clear_has_discover_item_url() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void Config::clear_discover_item_url() {
  if (discover_item_url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    discover_item_url_->clear();
  }
  clear_has_discover_item_url();
}
inline const ::std::string& Config::discover_item_url() const {
  // @@protoc_insertion_point(field_get:weizhu.system.Config.discover_item_url)
  return *discover_item_url_;
}
inline void Config::set_discover_item_url(const ::std::string& value) {
  set_has_discover_item_url();
  if (discover_item_url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    discover_item_url_ = new ::std::string;
  }
  discover_item_url_->assign(value);
  // @@protoc_insertion_point(field_set:weizhu.system.Config.discover_item_url)
}
inline void Config::set_discover_item_url(const char* value) {
  set_has_discover_item_url();
  if (discover_item_url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    discover_item_url_ = new ::std::string;
  }
  discover_item_url_->assign(value);
  // @@protoc_insertion_point(field_set_char:weizhu.system.Config.discover_item_url)
}
inline void Config::set_discover_item_url(const char* value, size_t size) {
  set_has_discover_item_url();
  if (discover_item_url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    discover_item_url_ = new ::std::string;
  }
  discover_item_url_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:weizhu.system.Config.discover_item_url)
}
inline ::std::string* Config::mutable_discover_item_url() {
  set_has_discover_item_url();
  if (discover_item_url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    discover_item_url_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:weizhu.system.Config.discover_item_url)
  return discover_item_url_;
}
inline ::std::string* Config::release_discover_item_url() {
  clear_has_discover_item_url();
  if (discover_item_url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = discover_item_url_;
    discover_item_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Config::set_allocated_discover_item_url(::std::string* discover_item_url) {
  if (discover_item_url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete discover_item_url_;
  }
  if (discover_item_url) {
    set_has_discover_item_url();
    discover_item_url_ = discover_item_url;
  } else {
    clear_has_discover_item_url();
    discover_item_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:weizhu.system.Config.discover_item_url)
}

// required string upload_community_image_url = 13;
inline bool Config::has_upload_community_image_url() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void Config::set_has_upload_community_image_url() {
  _has_bits_[0] |= 0x00001000u;
}
inline void Config::clear_has_upload_community_image_url() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void Config::clear_upload_community_image_url() {
  if (upload_community_image_url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    upload_community_image_url_->clear();
  }
  clear_has_upload_community_image_url();
}
inline const ::std::string& Config::upload_community_image_url() const {
  // @@protoc_insertion_point(field_get:weizhu.system.Config.upload_community_image_url)
  return *upload_community_image_url_;
}
inline void Config::set_upload_community_image_url(const ::std::string& value) {
  set_has_upload_community_image_url();
  if (upload_community_image_url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    upload_community_image_url_ = new ::std::string;
  }
  upload_community_image_url_->assign(value);
  // @@protoc_insertion_point(field_set:weizhu.system.Config.upload_community_image_url)
}
inline void Config::set_upload_community_image_url(const char* value) {
  set_has_upload_community_image_url();
  if (upload_community_image_url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    upload_community_image_url_ = new ::std::string;
  }
  upload_community_image_url_->assign(value);
  // @@protoc_insertion_point(field_set_char:weizhu.system.Config.upload_community_image_url)
}
inline void Config::set_upload_community_image_url(const char* value, size_t size) {
  set_has_upload_community_image_url();
  if (upload_community_image_url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    upload_community_image_url_ = new ::std::string;
  }
  upload_community_image_url_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:weizhu.system.Config.upload_community_image_url)
}
inline ::std::string* Config::mutable_upload_community_image_url() {
  set_has_upload_community_image_url();
  if (upload_community_image_url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    upload_community_image_url_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:weizhu.system.Config.upload_community_image_url)
  return upload_community_image_url_;
}
inline ::std::string* Config::release_upload_community_image_url() {
  clear_has_upload_community_image_url();
  if (upload_community_image_url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = upload_community_image_url_;
    upload_community_image_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Config::set_allocated_upload_community_image_url(::std::string* upload_community_image_url) {
  if (upload_community_image_url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete upload_community_image_url_;
  }
  if (upload_community_image_url) {
    set_has_upload_community_image_url();
    upload_community_image_url_ = upload_community_image_url;
  } else {
    clear_has_upload_community_image_url();
    upload_community_image_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:weizhu.system.Config.upload_community_image_url)
}

// required string community_image_url = 14;
inline bool Config::has_community_image_url() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void Config::set_has_community_image_url() {
  _has_bits_[0] |= 0x00002000u;
}
inline void Config::clear_has_community_image_url() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void Config::clear_community_image_url() {
  if (community_image_url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    community_image_url_->clear();
  }
  clear_has_community_image_url();
}
inline const ::std::string& Config::community_image_url() const {
  // @@protoc_insertion_point(field_get:weizhu.system.Config.community_image_url)
  return *community_image_url_;
}
inline void Config::set_community_image_url(const ::std::string& value) {
  set_has_community_image_url();
  if (community_image_url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    community_image_url_ = new ::std::string;
  }
  community_image_url_->assign(value);
  // @@protoc_insertion_point(field_set:weizhu.system.Config.community_image_url)
}
inline void Config::set_community_image_url(const char* value) {
  set_has_community_image_url();
  if (community_image_url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    community_image_url_ = new ::std::string;
  }
  community_image_url_->assign(value);
  // @@protoc_insertion_point(field_set_char:weizhu.system.Config.community_image_url)
}
inline void Config::set_community_image_url(const char* value, size_t size) {
  set_has_community_image_url();
  if (community_image_url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    community_image_url_ = new ::std::string;
  }
  community_image_url_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:weizhu.system.Config.community_image_url)
}
inline ::std::string* Config::mutable_community_image_url() {
  set_has_community_image_url();
  if (community_image_url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    community_image_url_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:weizhu.system.Config.community_image_url)
  return community_image_url_;
}
inline ::std::string* Config::release_community_image_url() {
  clear_has_community_image_url();
  if (community_image_url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = community_image_url_;
    community_image_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Config::set_allocated_community_image_url(::std::string* community_image_url) {
  if (community_image_url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete community_image_url_;
  }
  if (community_image_url) {
    set_has_community_image_url();
    community_image_url_ = community_image_url;
  } else {
    clear_has_community_image_url();
    community_image_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:weizhu.system.Config.community_image_url)
}

// -------------------------------------------------------------------

// ConfigV2

// required string http_api_url = 1;
inline bool ConfigV2::has_http_api_url() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ConfigV2::set_has_http_api_url() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ConfigV2::clear_has_http_api_url() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ConfigV2::clear_http_api_url() {
  if (http_api_url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    http_api_url_->clear();
  }
  clear_has_http_api_url();
}
inline const ::std::string& ConfigV2::http_api_url() const {
  // @@protoc_insertion_point(field_get:weizhu.system.ConfigV2.http_api_url)
  return *http_api_url_;
}
inline void ConfigV2::set_http_api_url(const ::std::string& value) {
  set_has_http_api_url();
  if (http_api_url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    http_api_url_ = new ::std::string;
  }
  http_api_url_->assign(value);
  // @@protoc_insertion_point(field_set:weizhu.system.ConfigV2.http_api_url)
}
inline void ConfigV2::set_http_api_url(const char* value) {
  set_has_http_api_url();
  if (http_api_url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    http_api_url_ = new ::std::string;
  }
  http_api_url_->assign(value);
  // @@protoc_insertion_point(field_set_char:weizhu.system.ConfigV2.http_api_url)
}
inline void ConfigV2::set_http_api_url(const char* value, size_t size) {
  set_has_http_api_url();
  if (http_api_url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    http_api_url_ = new ::std::string;
  }
  http_api_url_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:weizhu.system.ConfigV2.http_api_url)
}
inline ::std::string* ConfigV2::mutable_http_api_url() {
  set_has_http_api_url();
  if (http_api_url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    http_api_url_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:weizhu.system.ConfigV2.http_api_url)
  return http_api_url_;
}
inline ::std::string* ConfigV2::release_http_api_url() {
  clear_has_http_api_url();
  if (http_api_url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = http_api_url_;
    http_api_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ConfigV2::set_allocated_http_api_url(::std::string* http_api_url) {
  if (http_api_url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete http_api_url_;
  }
  if (http_api_url) {
    set_has_http_api_url();
    http_api_url_ = http_api_url;
  } else {
    clear_has_http_api_url();
    http_api_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:weizhu.system.ConfigV2.http_api_url)
}

// required string socket_conn_addr = 2;
inline bool ConfigV2::has_socket_conn_addr() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ConfigV2::set_has_socket_conn_addr() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ConfigV2::clear_has_socket_conn_addr() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ConfigV2::clear_socket_conn_addr() {
  if (socket_conn_addr_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    socket_conn_addr_->clear();
  }
  clear_has_socket_conn_addr();
}
inline const ::std::string& ConfigV2::socket_conn_addr() const {
  // @@protoc_insertion_point(field_get:weizhu.system.ConfigV2.socket_conn_addr)
  return *socket_conn_addr_;
}
inline void ConfigV2::set_socket_conn_addr(const ::std::string& value) {
  set_has_socket_conn_addr();
  if (socket_conn_addr_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    socket_conn_addr_ = new ::std::string;
  }
  socket_conn_addr_->assign(value);
  // @@protoc_insertion_point(field_set:weizhu.system.ConfigV2.socket_conn_addr)
}
inline void ConfigV2::set_socket_conn_addr(const char* value) {
  set_has_socket_conn_addr();
  if (socket_conn_addr_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    socket_conn_addr_ = new ::std::string;
  }
  socket_conn_addr_->assign(value);
  // @@protoc_insertion_point(field_set_char:weizhu.system.ConfigV2.socket_conn_addr)
}
inline void ConfigV2::set_socket_conn_addr(const char* value, size_t size) {
  set_has_socket_conn_addr();
  if (socket_conn_addr_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    socket_conn_addr_ = new ::std::string;
  }
  socket_conn_addr_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:weizhu.system.ConfigV2.socket_conn_addr)
}
inline ::std::string* ConfigV2::mutable_socket_conn_addr() {
  set_has_socket_conn_addr();
  if (socket_conn_addr_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    socket_conn_addr_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:weizhu.system.ConfigV2.socket_conn_addr)
  return socket_conn_addr_;
}
inline ::std::string* ConfigV2::release_socket_conn_addr() {
  clear_has_socket_conn_addr();
  if (socket_conn_addr_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = socket_conn_addr_;
    socket_conn_addr_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ConfigV2::set_allocated_socket_conn_addr(::std::string* socket_conn_addr) {
  if (socket_conn_addr_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete socket_conn_addr_;
  }
  if (socket_conn_addr) {
    set_has_socket_conn_addr();
    socket_conn_addr_ = socket_conn_addr;
  } else {
    clear_has_socket_conn_addr();
    socket_conn_addr_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:weizhu.system.ConfigV2.socket_conn_addr)
}

// required string avatar_url_prefix = 3;
inline bool ConfigV2::has_avatar_url_prefix() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ConfigV2::set_has_avatar_url_prefix() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ConfigV2::clear_has_avatar_url_prefix() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ConfigV2::clear_avatar_url_prefix() {
  if (avatar_url_prefix_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    avatar_url_prefix_->clear();
  }
  clear_has_avatar_url_prefix();
}
inline const ::std::string& ConfigV2::avatar_url_prefix() const {
  // @@protoc_insertion_point(field_get:weizhu.system.ConfigV2.avatar_url_prefix)
  return *avatar_url_prefix_;
}
inline void ConfigV2::set_avatar_url_prefix(const ::std::string& value) {
  set_has_avatar_url_prefix();
  if (avatar_url_prefix_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    avatar_url_prefix_ = new ::std::string;
  }
  avatar_url_prefix_->assign(value);
  // @@protoc_insertion_point(field_set:weizhu.system.ConfigV2.avatar_url_prefix)
}
inline void ConfigV2::set_avatar_url_prefix(const char* value) {
  set_has_avatar_url_prefix();
  if (avatar_url_prefix_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    avatar_url_prefix_ = new ::std::string;
  }
  avatar_url_prefix_->assign(value);
  // @@protoc_insertion_point(field_set_char:weizhu.system.ConfigV2.avatar_url_prefix)
}
inline void ConfigV2::set_avatar_url_prefix(const char* value, size_t size) {
  set_has_avatar_url_prefix();
  if (avatar_url_prefix_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    avatar_url_prefix_ = new ::std::string;
  }
  avatar_url_prefix_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:weizhu.system.ConfigV2.avatar_url_prefix)
}
inline ::std::string* ConfigV2::mutable_avatar_url_prefix() {
  set_has_avatar_url_prefix();
  if (avatar_url_prefix_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    avatar_url_prefix_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:weizhu.system.ConfigV2.avatar_url_prefix)
  return avatar_url_prefix_;
}
inline ::std::string* ConfigV2::release_avatar_url_prefix() {
  clear_has_avatar_url_prefix();
  if (avatar_url_prefix_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = avatar_url_prefix_;
    avatar_url_prefix_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ConfigV2::set_allocated_avatar_url_prefix(::std::string* avatar_url_prefix) {
  if (avatar_url_prefix_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete avatar_url_prefix_;
  }
  if (avatar_url_prefix) {
    set_has_avatar_url_prefix();
    avatar_url_prefix_ = avatar_url_prefix;
  } else {
    clear_has_avatar_url_prefix();
    avatar_url_prefix_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:weizhu.system.ConfigV2.avatar_url_prefix)
}

// required string avatar_upload_url = 4;
inline bool ConfigV2::has_avatar_upload_url() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ConfigV2::set_has_avatar_upload_url() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ConfigV2::clear_has_avatar_upload_url() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ConfigV2::clear_avatar_upload_url() {
  if (avatar_upload_url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    avatar_upload_url_->clear();
  }
  clear_has_avatar_upload_url();
}
inline const ::std::string& ConfigV2::avatar_upload_url() const {
  // @@protoc_insertion_point(field_get:weizhu.system.ConfigV2.avatar_upload_url)
  return *avatar_upload_url_;
}
inline void ConfigV2::set_avatar_upload_url(const ::std::string& value) {
  set_has_avatar_upload_url();
  if (avatar_upload_url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    avatar_upload_url_ = new ::std::string;
  }
  avatar_upload_url_->assign(value);
  // @@protoc_insertion_point(field_set:weizhu.system.ConfigV2.avatar_upload_url)
}
inline void ConfigV2::set_avatar_upload_url(const char* value) {
  set_has_avatar_upload_url();
  if (avatar_upload_url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    avatar_upload_url_ = new ::std::string;
  }
  avatar_upload_url_->assign(value);
  // @@protoc_insertion_point(field_set_char:weizhu.system.ConfigV2.avatar_upload_url)
}
inline void ConfigV2::set_avatar_upload_url(const char* value, size_t size) {
  set_has_avatar_upload_url();
  if (avatar_upload_url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    avatar_upload_url_ = new ::std::string;
  }
  avatar_upload_url_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:weizhu.system.ConfigV2.avatar_upload_url)
}
inline ::std::string* ConfigV2::mutable_avatar_upload_url() {
  set_has_avatar_upload_url();
  if (avatar_upload_url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    avatar_upload_url_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:weizhu.system.ConfigV2.avatar_upload_url)
  return avatar_upload_url_;
}
inline ::std::string* ConfigV2::release_avatar_upload_url() {
  clear_has_avatar_upload_url();
  if (avatar_upload_url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = avatar_upload_url_;
    avatar_upload_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ConfigV2::set_allocated_avatar_upload_url(::std::string* avatar_upload_url) {
  if (avatar_upload_url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete avatar_upload_url_;
  }
  if (avatar_upload_url) {
    set_has_avatar_upload_url();
    avatar_upload_url_ = avatar_upload_url;
  } else {
    clear_has_avatar_upload_url();
    avatar_upload_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:weizhu.system.ConfigV2.avatar_upload_url)
}

// required string im_image_url_prefix = 5;
inline bool ConfigV2::has_im_image_url_prefix() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ConfigV2::set_has_im_image_url_prefix() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ConfigV2::clear_has_im_image_url_prefix() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ConfigV2::clear_im_image_url_prefix() {
  if (im_image_url_prefix_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    im_image_url_prefix_->clear();
  }
  clear_has_im_image_url_prefix();
}
inline const ::std::string& ConfigV2::im_image_url_prefix() const {
  // @@protoc_insertion_point(field_get:weizhu.system.ConfigV2.im_image_url_prefix)
  return *im_image_url_prefix_;
}
inline void ConfigV2::set_im_image_url_prefix(const ::std::string& value) {
  set_has_im_image_url_prefix();
  if (im_image_url_prefix_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    im_image_url_prefix_ = new ::std::string;
  }
  im_image_url_prefix_->assign(value);
  // @@protoc_insertion_point(field_set:weizhu.system.ConfigV2.im_image_url_prefix)
}
inline void ConfigV2::set_im_image_url_prefix(const char* value) {
  set_has_im_image_url_prefix();
  if (im_image_url_prefix_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    im_image_url_prefix_ = new ::std::string;
  }
  im_image_url_prefix_->assign(value);
  // @@protoc_insertion_point(field_set_char:weizhu.system.ConfigV2.im_image_url_prefix)
}
inline void ConfigV2::set_im_image_url_prefix(const char* value, size_t size) {
  set_has_im_image_url_prefix();
  if (im_image_url_prefix_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    im_image_url_prefix_ = new ::std::string;
  }
  im_image_url_prefix_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:weizhu.system.ConfigV2.im_image_url_prefix)
}
inline ::std::string* ConfigV2::mutable_im_image_url_prefix() {
  set_has_im_image_url_prefix();
  if (im_image_url_prefix_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    im_image_url_prefix_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:weizhu.system.ConfigV2.im_image_url_prefix)
  return im_image_url_prefix_;
}
inline ::std::string* ConfigV2::release_im_image_url_prefix() {
  clear_has_im_image_url_prefix();
  if (im_image_url_prefix_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = im_image_url_prefix_;
    im_image_url_prefix_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ConfigV2::set_allocated_im_image_url_prefix(::std::string* im_image_url_prefix) {
  if (im_image_url_prefix_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete im_image_url_prefix_;
  }
  if (im_image_url_prefix) {
    set_has_im_image_url_prefix();
    im_image_url_prefix_ = im_image_url_prefix;
  } else {
    clear_has_im_image_url_prefix();
    im_image_url_prefix_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:weizhu.system.ConfigV2.im_image_url_prefix)
}

// required string im_image_upload_url = 6;
inline bool ConfigV2::has_im_image_upload_url() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ConfigV2::set_has_im_image_upload_url() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ConfigV2::clear_has_im_image_upload_url() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ConfigV2::clear_im_image_upload_url() {
  if (im_image_upload_url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    im_image_upload_url_->clear();
  }
  clear_has_im_image_upload_url();
}
inline const ::std::string& ConfigV2::im_image_upload_url() const {
  // @@protoc_insertion_point(field_get:weizhu.system.ConfigV2.im_image_upload_url)
  return *im_image_upload_url_;
}
inline void ConfigV2::set_im_image_upload_url(const ::std::string& value) {
  set_has_im_image_upload_url();
  if (im_image_upload_url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    im_image_upload_url_ = new ::std::string;
  }
  im_image_upload_url_->assign(value);
  // @@protoc_insertion_point(field_set:weizhu.system.ConfigV2.im_image_upload_url)
}
inline void ConfigV2::set_im_image_upload_url(const char* value) {
  set_has_im_image_upload_url();
  if (im_image_upload_url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    im_image_upload_url_ = new ::std::string;
  }
  im_image_upload_url_->assign(value);
  // @@protoc_insertion_point(field_set_char:weizhu.system.ConfigV2.im_image_upload_url)
}
inline void ConfigV2::set_im_image_upload_url(const char* value, size_t size) {
  set_has_im_image_upload_url();
  if (im_image_upload_url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    im_image_upload_url_ = new ::std::string;
  }
  im_image_upload_url_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:weizhu.system.ConfigV2.im_image_upload_url)
}
inline ::std::string* ConfigV2::mutable_im_image_upload_url() {
  set_has_im_image_upload_url();
  if (im_image_upload_url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    im_image_upload_url_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:weizhu.system.ConfigV2.im_image_upload_url)
  return im_image_upload_url_;
}
inline ::std::string* ConfigV2::release_im_image_upload_url() {
  clear_has_im_image_upload_url();
  if (im_image_upload_url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = im_image_upload_url_;
    im_image_upload_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ConfigV2::set_allocated_im_image_upload_url(::std::string* im_image_upload_url) {
  if (im_image_upload_url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete im_image_upload_url_;
  }
  if (im_image_upload_url) {
    set_has_im_image_upload_url();
    im_image_upload_url_ = im_image_upload_url;
  } else {
    clear_has_im_image_upload_url();
    im_image_upload_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:weizhu.system.ConfigV2.im_image_upload_url)
}

// required string discover_image_url_prefix = 7;
inline bool ConfigV2::has_discover_image_url_prefix() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ConfigV2::set_has_discover_image_url_prefix() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ConfigV2::clear_has_discover_image_url_prefix() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ConfigV2::clear_discover_image_url_prefix() {
  if (discover_image_url_prefix_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    discover_image_url_prefix_->clear();
  }
  clear_has_discover_image_url_prefix();
}
inline const ::std::string& ConfigV2::discover_image_url_prefix() const {
  // @@protoc_insertion_point(field_get:weizhu.system.ConfigV2.discover_image_url_prefix)
  return *discover_image_url_prefix_;
}
inline void ConfigV2::set_discover_image_url_prefix(const ::std::string& value) {
  set_has_discover_image_url_prefix();
  if (discover_image_url_prefix_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    discover_image_url_prefix_ = new ::std::string;
  }
  discover_image_url_prefix_->assign(value);
  // @@protoc_insertion_point(field_set:weizhu.system.ConfigV2.discover_image_url_prefix)
}
inline void ConfigV2::set_discover_image_url_prefix(const char* value) {
  set_has_discover_image_url_prefix();
  if (discover_image_url_prefix_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    discover_image_url_prefix_ = new ::std::string;
  }
  discover_image_url_prefix_->assign(value);
  // @@protoc_insertion_point(field_set_char:weizhu.system.ConfigV2.discover_image_url_prefix)
}
inline void ConfigV2::set_discover_image_url_prefix(const char* value, size_t size) {
  set_has_discover_image_url_prefix();
  if (discover_image_url_prefix_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    discover_image_url_prefix_ = new ::std::string;
  }
  discover_image_url_prefix_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:weizhu.system.ConfigV2.discover_image_url_prefix)
}
inline ::std::string* ConfigV2::mutable_discover_image_url_prefix() {
  set_has_discover_image_url_prefix();
  if (discover_image_url_prefix_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    discover_image_url_prefix_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:weizhu.system.ConfigV2.discover_image_url_prefix)
  return discover_image_url_prefix_;
}
inline ::std::string* ConfigV2::release_discover_image_url_prefix() {
  clear_has_discover_image_url_prefix();
  if (discover_image_url_prefix_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = discover_image_url_prefix_;
    discover_image_url_prefix_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ConfigV2::set_allocated_discover_image_url_prefix(::std::string* discover_image_url_prefix) {
  if (discover_image_url_prefix_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete discover_image_url_prefix_;
  }
  if (discover_image_url_prefix) {
    set_has_discover_image_url_prefix();
    discover_image_url_prefix_ = discover_image_url_prefix;
  } else {
    clear_has_discover_image_url_prefix();
    discover_image_url_prefix_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:weizhu.system.ConfigV2.discover_image_url_prefix)
}

// required string discover_image_upload_url = 8;
inline bool ConfigV2::has_discover_image_upload_url() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ConfigV2::set_has_discover_image_upload_url() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ConfigV2::clear_has_discover_image_upload_url() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ConfigV2::clear_discover_image_upload_url() {
  if (discover_image_upload_url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    discover_image_upload_url_->clear();
  }
  clear_has_discover_image_upload_url();
}
inline const ::std::string& ConfigV2::discover_image_upload_url() const {
  // @@protoc_insertion_point(field_get:weizhu.system.ConfigV2.discover_image_upload_url)
  return *discover_image_upload_url_;
}
inline void ConfigV2::set_discover_image_upload_url(const ::std::string& value) {
  set_has_discover_image_upload_url();
  if (discover_image_upload_url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    discover_image_upload_url_ = new ::std::string;
  }
  discover_image_upload_url_->assign(value);
  // @@protoc_insertion_point(field_set:weizhu.system.ConfigV2.discover_image_upload_url)
}
inline void ConfigV2::set_discover_image_upload_url(const char* value) {
  set_has_discover_image_upload_url();
  if (discover_image_upload_url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    discover_image_upload_url_ = new ::std::string;
  }
  discover_image_upload_url_->assign(value);
  // @@protoc_insertion_point(field_set_char:weizhu.system.ConfigV2.discover_image_upload_url)
}
inline void ConfigV2::set_discover_image_upload_url(const char* value, size_t size) {
  set_has_discover_image_upload_url();
  if (discover_image_upload_url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    discover_image_upload_url_ = new ::std::string;
  }
  discover_image_upload_url_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:weizhu.system.ConfigV2.discover_image_upload_url)
}
inline ::std::string* ConfigV2::mutable_discover_image_upload_url() {
  set_has_discover_image_upload_url();
  if (discover_image_upload_url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    discover_image_upload_url_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:weizhu.system.ConfigV2.discover_image_upload_url)
  return discover_image_upload_url_;
}
inline ::std::string* ConfigV2::release_discover_image_upload_url() {
  clear_has_discover_image_upload_url();
  if (discover_image_upload_url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = discover_image_upload_url_;
    discover_image_upload_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ConfigV2::set_allocated_discover_image_upload_url(::std::string* discover_image_upload_url) {
  if (discover_image_upload_url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete discover_image_upload_url_;
  }
  if (discover_image_upload_url) {
    set_has_discover_image_upload_url();
    discover_image_upload_url_ = discover_image_upload_url;
  } else {
    clear_has_discover_image_upload_url();
    discover_image_upload_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:weizhu.system.ConfigV2.discover_image_upload_url)
}

// required string discover_item_url_prefix = 9;
inline bool ConfigV2::has_discover_item_url_prefix() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ConfigV2::set_has_discover_item_url_prefix() {
  _has_bits_[0] |= 0x00000100u;
}
inline void ConfigV2::clear_has_discover_item_url_prefix() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void ConfigV2::clear_discover_item_url_prefix() {
  if (discover_item_url_prefix_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    discover_item_url_prefix_->clear();
  }
  clear_has_discover_item_url_prefix();
}
inline const ::std::string& ConfigV2::discover_item_url_prefix() const {
  // @@protoc_insertion_point(field_get:weizhu.system.ConfigV2.discover_item_url_prefix)
  return *discover_item_url_prefix_;
}
inline void ConfigV2::set_discover_item_url_prefix(const ::std::string& value) {
  set_has_discover_item_url_prefix();
  if (discover_item_url_prefix_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    discover_item_url_prefix_ = new ::std::string;
  }
  discover_item_url_prefix_->assign(value);
  // @@protoc_insertion_point(field_set:weizhu.system.ConfigV2.discover_item_url_prefix)
}
inline void ConfigV2::set_discover_item_url_prefix(const char* value) {
  set_has_discover_item_url_prefix();
  if (discover_item_url_prefix_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    discover_item_url_prefix_ = new ::std::string;
  }
  discover_item_url_prefix_->assign(value);
  // @@protoc_insertion_point(field_set_char:weizhu.system.ConfigV2.discover_item_url_prefix)
}
inline void ConfigV2::set_discover_item_url_prefix(const char* value, size_t size) {
  set_has_discover_item_url_prefix();
  if (discover_item_url_prefix_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    discover_item_url_prefix_ = new ::std::string;
  }
  discover_item_url_prefix_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:weizhu.system.ConfigV2.discover_item_url_prefix)
}
inline ::std::string* ConfigV2::mutable_discover_item_url_prefix() {
  set_has_discover_item_url_prefix();
  if (discover_item_url_prefix_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    discover_item_url_prefix_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:weizhu.system.ConfigV2.discover_item_url_prefix)
  return discover_item_url_prefix_;
}
inline ::std::string* ConfigV2::release_discover_item_url_prefix() {
  clear_has_discover_item_url_prefix();
  if (discover_item_url_prefix_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = discover_item_url_prefix_;
    discover_item_url_prefix_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ConfigV2::set_allocated_discover_item_url_prefix(::std::string* discover_item_url_prefix) {
  if (discover_item_url_prefix_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete discover_item_url_prefix_;
  }
  if (discover_item_url_prefix) {
    set_has_discover_item_url_prefix();
    discover_item_url_prefix_ = discover_item_url_prefix;
  } else {
    clear_has_discover_item_url_prefix();
    discover_item_url_prefix_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:weizhu.system.ConfigV2.discover_item_url_prefix)
}

// required string community_image_url_prefix = 10;
inline bool ConfigV2::has_community_image_url_prefix() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void ConfigV2::set_has_community_image_url_prefix() {
  _has_bits_[0] |= 0x00000200u;
}
inline void ConfigV2::clear_has_community_image_url_prefix() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void ConfigV2::clear_community_image_url_prefix() {
  if (community_image_url_prefix_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    community_image_url_prefix_->clear();
  }
  clear_has_community_image_url_prefix();
}
inline const ::std::string& ConfigV2::community_image_url_prefix() const {
  // @@protoc_insertion_point(field_get:weizhu.system.ConfigV2.community_image_url_prefix)
  return *community_image_url_prefix_;
}
inline void ConfigV2::set_community_image_url_prefix(const ::std::string& value) {
  set_has_community_image_url_prefix();
  if (community_image_url_prefix_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    community_image_url_prefix_ = new ::std::string;
  }
  community_image_url_prefix_->assign(value);
  // @@protoc_insertion_point(field_set:weizhu.system.ConfigV2.community_image_url_prefix)
}
inline void ConfigV2::set_community_image_url_prefix(const char* value) {
  set_has_community_image_url_prefix();
  if (community_image_url_prefix_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    community_image_url_prefix_ = new ::std::string;
  }
  community_image_url_prefix_->assign(value);
  // @@protoc_insertion_point(field_set_char:weizhu.system.ConfigV2.community_image_url_prefix)
}
inline void ConfigV2::set_community_image_url_prefix(const char* value, size_t size) {
  set_has_community_image_url_prefix();
  if (community_image_url_prefix_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    community_image_url_prefix_ = new ::std::string;
  }
  community_image_url_prefix_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:weizhu.system.ConfigV2.community_image_url_prefix)
}
inline ::std::string* ConfigV2::mutable_community_image_url_prefix() {
  set_has_community_image_url_prefix();
  if (community_image_url_prefix_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    community_image_url_prefix_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:weizhu.system.ConfigV2.community_image_url_prefix)
  return community_image_url_prefix_;
}
inline ::std::string* ConfigV2::release_community_image_url_prefix() {
  clear_has_community_image_url_prefix();
  if (community_image_url_prefix_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = community_image_url_prefix_;
    community_image_url_prefix_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ConfigV2::set_allocated_community_image_url_prefix(::std::string* community_image_url_prefix) {
  if (community_image_url_prefix_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete community_image_url_prefix_;
  }
  if (community_image_url_prefix) {
    set_has_community_image_url_prefix();
    community_image_url_prefix_ = community_image_url_prefix;
  } else {
    clear_has_community_image_url_prefix();
    community_image_url_prefix_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:weizhu.system.ConfigV2.community_image_url_prefix)
}

// required string community_image_upload_url = 11;
inline bool ConfigV2::has_community_image_upload_url() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void ConfigV2::set_has_community_image_upload_url() {
  _has_bits_[0] |= 0x00000400u;
}
inline void ConfigV2::clear_has_community_image_upload_url() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void ConfigV2::clear_community_image_upload_url() {
  if (community_image_upload_url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    community_image_upload_url_->clear();
  }
  clear_has_community_image_upload_url();
}
inline const ::std::string& ConfigV2::community_image_upload_url() const {
  // @@protoc_insertion_point(field_get:weizhu.system.ConfigV2.community_image_upload_url)
  return *community_image_upload_url_;
}
inline void ConfigV2::set_community_image_upload_url(const ::std::string& value) {
  set_has_community_image_upload_url();
  if (community_image_upload_url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    community_image_upload_url_ = new ::std::string;
  }
  community_image_upload_url_->assign(value);
  // @@protoc_insertion_point(field_set:weizhu.system.ConfigV2.community_image_upload_url)
}
inline void ConfigV2::set_community_image_upload_url(const char* value) {
  set_has_community_image_upload_url();
  if (community_image_upload_url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    community_image_upload_url_ = new ::std::string;
  }
  community_image_upload_url_->assign(value);
  // @@protoc_insertion_point(field_set_char:weizhu.system.ConfigV2.community_image_upload_url)
}
inline void ConfigV2::set_community_image_upload_url(const char* value, size_t size) {
  set_has_community_image_upload_url();
  if (community_image_upload_url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    community_image_upload_url_ = new ::std::string;
  }
  community_image_upload_url_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:weizhu.system.ConfigV2.community_image_upload_url)
}
inline ::std::string* ConfigV2::mutable_community_image_upload_url() {
  set_has_community_image_upload_url();
  if (community_image_upload_url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    community_image_upload_url_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:weizhu.system.ConfigV2.community_image_upload_url)
  return community_image_upload_url_;
}
inline ::std::string* ConfigV2::release_community_image_upload_url() {
  clear_has_community_image_upload_url();
  if (community_image_upload_url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = community_image_upload_url_;
    community_image_upload_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ConfigV2::set_allocated_community_image_upload_url(::std::string* community_image_upload_url) {
  if (community_image_upload_url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete community_image_upload_url_;
  }
  if (community_image_upload_url) {
    set_has_community_image_upload_url();
    community_image_upload_url_ = community_image_upload_url;
  } else {
    clear_has_community_image_upload_url();
    community_image_upload_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:weizhu.system.ConfigV2.community_image_upload_url)
}

// optional string scene_home_url = 12;
inline bool ConfigV2::has_scene_home_url() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void ConfigV2::set_has_scene_home_url() {
  _has_bits_[0] |= 0x00000800u;
}
inline void ConfigV2::clear_has_scene_home_url() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void ConfigV2::clear_scene_home_url() {
  if (scene_home_url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    scene_home_url_->clear();
  }
  clear_has_scene_home_url();
}
inline const ::std::string& ConfigV2::scene_home_url() const {
  // @@protoc_insertion_point(field_get:weizhu.system.ConfigV2.scene_home_url)
  return *scene_home_url_;
}
inline void ConfigV2::set_scene_home_url(const ::std::string& value) {
  set_has_scene_home_url();
  if (scene_home_url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    scene_home_url_ = new ::std::string;
  }
  scene_home_url_->assign(value);
  // @@protoc_insertion_point(field_set:weizhu.system.ConfigV2.scene_home_url)
}
inline void ConfigV2::set_scene_home_url(const char* value) {
  set_has_scene_home_url();
  if (scene_home_url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    scene_home_url_ = new ::std::string;
  }
  scene_home_url_->assign(value);
  // @@protoc_insertion_point(field_set_char:weizhu.system.ConfigV2.scene_home_url)
}
inline void ConfigV2::set_scene_home_url(const char* value, size_t size) {
  set_has_scene_home_url();
  if (scene_home_url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    scene_home_url_ = new ::std::string;
  }
  scene_home_url_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:weizhu.system.ConfigV2.scene_home_url)
}
inline ::std::string* ConfigV2::mutable_scene_home_url() {
  set_has_scene_home_url();
  if (scene_home_url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    scene_home_url_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:weizhu.system.ConfigV2.scene_home_url)
  return scene_home_url_;
}
inline ::std::string* ConfigV2::release_scene_home_url() {
  clear_has_scene_home_url();
  if (scene_home_url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = scene_home_url_;
    scene_home_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ConfigV2::set_allocated_scene_home_url(::std::string* scene_home_url) {
  if (scene_home_url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete scene_home_url_;
  }
  if (scene_home_url) {
    set_has_scene_home_url();
    scene_home_url_ = scene_home_url;
  } else {
    clear_has_scene_home_url();
    scene_home_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:weizhu.system.ConfigV2.scene_home_url)
}

// required string scene_image_url_prefix = 13;
inline bool ConfigV2::has_scene_image_url_prefix() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void ConfigV2::set_has_scene_image_url_prefix() {
  _has_bits_[0] |= 0x00001000u;
}
inline void ConfigV2::clear_has_scene_image_url_prefix() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void ConfigV2::clear_scene_image_url_prefix() {
  if (scene_image_url_prefix_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    scene_image_url_prefix_->clear();
  }
  clear_has_scene_image_url_prefix();
}
inline const ::std::string& ConfigV2::scene_image_url_prefix() const {
  // @@protoc_insertion_point(field_get:weizhu.system.ConfigV2.scene_image_url_prefix)
  return *scene_image_url_prefix_;
}
inline void ConfigV2::set_scene_image_url_prefix(const ::std::string& value) {
  set_has_scene_image_url_prefix();
  if (scene_image_url_prefix_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    scene_image_url_prefix_ = new ::std::string;
  }
  scene_image_url_prefix_->assign(value);
  // @@protoc_insertion_point(field_set:weizhu.system.ConfigV2.scene_image_url_prefix)
}
inline void ConfigV2::set_scene_image_url_prefix(const char* value) {
  set_has_scene_image_url_prefix();
  if (scene_image_url_prefix_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    scene_image_url_prefix_ = new ::std::string;
  }
  scene_image_url_prefix_->assign(value);
  // @@protoc_insertion_point(field_set_char:weizhu.system.ConfigV2.scene_image_url_prefix)
}
inline void ConfigV2::set_scene_image_url_prefix(const char* value, size_t size) {
  set_has_scene_image_url_prefix();
  if (scene_image_url_prefix_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    scene_image_url_prefix_ = new ::std::string;
  }
  scene_image_url_prefix_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:weizhu.system.ConfigV2.scene_image_url_prefix)
}
inline ::std::string* ConfigV2::mutable_scene_image_url_prefix() {
  set_has_scene_image_url_prefix();
  if (scene_image_url_prefix_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    scene_image_url_prefix_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:weizhu.system.ConfigV2.scene_image_url_prefix)
  return scene_image_url_prefix_;
}
inline ::std::string* ConfigV2::release_scene_image_url_prefix() {
  clear_has_scene_image_url_prefix();
  if (scene_image_url_prefix_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = scene_image_url_prefix_;
    scene_image_url_prefix_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ConfigV2::set_allocated_scene_image_url_prefix(::std::string* scene_image_url_prefix) {
  if (scene_image_url_prefix_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete scene_image_url_prefix_;
  }
  if (scene_image_url_prefix) {
    set_has_scene_image_url_prefix();
    scene_image_url_prefix_ = scene_image_url_prefix;
  } else {
    clear_has_scene_image_url_prefix();
    scene_image_url_prefix_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:weizhu.system.ConfigV2.scene_image_url_prefix)
}

// optional string recommend_image_url = 14;
inline bool ConfigV2::has_recommend_image_url() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void ConfigV2::set_has_recommend_image_url() {
  _has_bits_[0] |= 0x00002000u;
}
inline void ConfigV2::clear_has_recommend_image_url() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void ConfigV2::clear_recommend_image_url() {
  if (recommend_image_url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    recommend_image_url_->clear();
  }
  clear_has_recommend_image_url();
}
inline const ::std::string& ConfigV2::recommend_image_url() const {
  // @@protoc_insertion_point(field_get:weizhu.system.ConfigV2.recommend_image_url)
  return *recommend_image_url_;
}
inline void ConfigV2::set_recommend_image_url(const ::std::string& value) {
  set_has_recommend_image_url();
  if (recommend_image_url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    recommend_image_url_ = new ::std::string;
  }
  recommend_image_url_->assign(value);
  // @@protoc_insertion_point(field_set:weizhu.system.ConfigV2.recommend_image_url)
}
inline void ConfigV2::set_recommend_image_url(const char* value) {
  set_has_recommend_image_url();
  if (recommend_image_url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    recommend_image_url_ = new ::std::string;
  }
  recommend_image_url_->assign(value);
  // @@protoc_insertion_point(field_set_char:weizhu.system.ConfigV2.recommend_image_url)
}
inline void ConfigV2::set_recommend_image_url(const char* value, size_t size) {
  set_has_recommend_image_url();
  if (recommend_image_url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    recommend_image_url_ = new ::std::string;
  }
  recommend_image_url_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:weizhu.system.ConfigV2.recommend_image_url)
}
inline ::std::string* ConfigV2::mutable_recommend_image_url() {
  set_has_recommend_image_url();
  if (recommend_image_url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    recommend_image_url_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:weizhu.system.ConfigV2.recommend_image_url)
  return recommend_image_url_;
}
inline ::std::string* ConfigV2::release_recommend_image_url() {
  clear_has_recommend_image_url();
  if (recommend_image_url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = recommend_image_url_;
    recommend_image_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ConfigV2::set_allocated_recommend_image_url(::std::string* recommend_image_url) {
  if (recommend_image_url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete recommend_image_url_;
  }
  if (recommend_image_url) {
    set_has_recommend_image_url();
    recommend_image_url_ = recommend_image_url;
  } else {
    clear_has_recommend_image_url();
    recommend_image_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:weizhu.system.ConfigV2.recommend_image_url)
}

// required string image_upload_url = 15;
inline bool ConfigV2::has_image_upload_url() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void ConfigV2::set_has_image_upload_url() {
  _has_bits_[0] |= 0x00004000u;
}
inline void ConfigV2::clear_has_image_upload_url() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void ConfigV2::clear_image_upload_url() {
  if (image_upload_url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    image_upload_url_->clear();
  }
  clear_has_image_upload_url();
}
inline const ::std::string& ConfigV2::image_upload_url() const {
  // @@protoc_insertion_point(field_get:weizhu.system.ConfigV2.image_upload_url)
  return *image_upload_url_;
}
inline void ConfigV2::set_image_upload_url(const ::std::string& value) {
  set_has_image_upload_url();
  if (image_upload_url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    image_upload_url_ = new ::std::string;
  }
  image_upload_url_->assign(value);
  // @@protoc_insertion_point(field_set:weizhu.system.ConfigV2.image_upload_url)
}
inline void ConfigV2::set_image_upload_url(const char* value) {
  set_has_image_upload_url();
  if (image_upload_url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    image_upload_url_ = new ::std::string;
  }
  image_upload_url_->assign(value);
  // @@protoc_insertion_point(field_set_char:weizhu.system.ConfigV2.image_upload_url)
}
inline void ConfigV2::set_image_upload_url(const char* value, size_t size) {
  set_has_image_upload_url();
  if (image_upload_url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    image_upload_url_ = new ::std::string;
  }
  image_upload_url_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:weizhu.system.ConfigV2.image_upload_url)
}
inline ::std::string* ConfigV2::mutable_image_upload_url() {
  set_has_image_upload_url();
  if (image_upload_url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    image_upload_url_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:weizhu.system.ConfigV2.image_upload_url)
  return image_upload_url_;
}
inline ::std::string* ConfigV2::release_image_upload_url() {
  clear_has_image_upload_url();
  if (image_upload_url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = image_upload_url_;
    image_upload_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ConfigV2::set_allocated_image_upload_url(::std::string* image_upload_url) {
  if (image_upload_url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete image_upload_url_;
  }
  if (image_upload_url) {
    set_has_image_upload_url();
    image_upload_url_ = image_upload_url;
  } else {
    clear_has_image_upload_url();
    image_upload_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:weizhu.system.ConfigV2.image_upload_url)
}

// required string image_url_prefix = 16;
inline bool ConfigV2::has_image_url_prefix() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void ConfigV2::set_has_image_url_prefix() {
  _has_bits_[0] |= 0x00008000u;
}
inline void ConfigV2::clear_has_image_url_prefix() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void ConfigV2::clear_image_url_prefix() {
  if (image_url_prefix_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    image_url_prefix_->clear();
  }
  clear_has_image_url_prefix();
}
inline const ::std::string& ConfigV2::image_url_prefix() const {
  // @@protoc_insertion_point(field_get:weizhu.system.ConfigV2.image_url_prefix)
  return *image_url_prefix_;
}
inline void ConfigV2::set_image_url_prefix(const ::std::string& value) {
  set_has_image_url_prefix();
  if (image_url_prefix_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    image_url_prefix_ = new ::std::string;
  }
  image_url_prefix_->assign(value);
  // @@protoc_insertion_point(field_set:weizhu.system.ConfigV2.image_url_prefix)
}
inline void ConfigV2::set_image_url_prefix(const char* value) {
  set_has_image_url_prefix();
  if (image_url_prefix_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    image_url_prefix_ = new ::std::string;
  }
  image_url_prefix_->assign(value);
  // @@protoc_insertion_point(field_set_char:weizhu.system.ConfigV2.image_url_prefix)
}
inline void ConfigV2::set_image_url_prefix(const char* value, size_t size) {
  set_has_image_url_prefix();
  if (image_url_prefix_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    image_url_prefix_ = new ::std::string;
  }
  image_url_prefix_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:weizhu.system.ConfigV2.image_url_prefix)
}
inline ::std::string* ConfigV2::mutable_image_url_prefix() {
  set_has_image_url_prefix();
  if (image_url_prefix_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    image_url_prefix_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:weizhu.system.ConfigV2.image_url_prefix)
  return image_url_prefix_;
}
inline ::std::string* ConfigV2::release_image_url_prefix() {
  clear_has_image_url_prefix();
  if (image_url_prefix_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = image_url_prefix_;
    image_url_prefix_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ConfigV2::set_allocated_image_url_prefix(::std::string* image_url_prefix) {
  if (image_url_prefix_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete image_url_prefix_;
  }
  if (image_url_prefix) {
    set_has_image_url_prefix();
    image_url_prefix_ = image_url_prefix;
  } else {
    clear_has_image_url_prefix();
    image_url_prefix_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:weizhu.system.ConfigV2.image_url_prefix)
}

// required string image_60_url_prefix = 17;
inline bool ConfigV2::has_image_60_url_prefix() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void ConfigV2::set_has_image_60_url_prefix() {
  _has_bits_[0] |= 0x00010000u;
}
inline void ConfigV2::clear_has_image_60_url_prefix() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void ConfigV2::clear_image_60_url_prefix() {
  if (image_60_url_prefix_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    image_60_url_prefix_->clear();
  }
  clear_has_image_60_url_prefix();
}
inline const ::std::string& ConfigV2::image_60_url_prefix() const {
  // @@protoc_insertion_point(field_get:weizhu.system.ConfigV2.image_60_url_prefix)
  return *image_60_url_prefix_;
}
inline void ConfigV2::set_image_60_url_prefix(const ::std::string& value) {
  set_has_image_60_url_prefix();
  if (image_60_url_prefix_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    image_60_url_prefix_ = new ::std::string;
  }
  image_60_url_prefix_->assign(value);
  // @@protoc_insertion_point(field_set:weizhu.system.ConfigV2.image_60_url_prefix)
}
inline void ConfigV2::set_image_60_url_prefix(const char* value) {
  set_has_image_60_url_prefix();
  if (image_60_url_prefix_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    image_60_url_prefix_ = new ::std::string;
  }
  image_60_url_prefix_->assign(value);
  // @@protoc_insertion_point(field_set_char:weizhu.system.ConfigV2.image_60_url_prefix)
}
inline void ConfigV2::set_image_60_url_prefix(const char* value, size_t size) {
  set_has_image_60_url_prefix();
  if (image_60_url_prefix_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    image_60_url_prefix_ = new ::std::string;
  }
  image_60_url_prefix_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:weizhu.system.ConfigV2.image_60_url_prefix)
}
inline ::std::string* ConfigV2::mutable_image_60_url_prefix() {
  set_has_image_60_url_prefix();
  if (image_60_url_prefix_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    image_60_url_prefix_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:weizhu.system.ConfigV2.image_60_url_prefix)
  return image_60_url_prefix_;
}
inline ::std::string* ConfigV2::release_image_60_url_prefix() {
  clear_has_image_60_url_prefix();
  if (image_60_url_prefix_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = image_60_url_prefix_;
    image_60_url_prefix_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ConfigV2::set_allocated_image_60_url_prefix(::std::string* image_60_url_prefix) {
  if (image_60_url_prefix_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete image_60_url_prefix_;
  }
  if (image_60_url_prefix) {
    set_has_image_60_url_prefix();
    image_60_url_prefix_ = image_60_url_prefix;
  } else {
    clear_has_image_60_url_prefix();
    image_60_url_prefix_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:weizhu.system.ConfigV2.image_60_url_prefix)
}

// required string image_120_url_prefix = 18;
inline bool ConfigV2::has_image_120_url_prefix() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void ConfigV2::set_has_image_120_url_prefix() {
  _has_bits_[0] |= 0x00020000u;
}
inline void ConfigV2::clear_has_image_120_url_prefix() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void ConfigV2::clear_image_120_url_prefix() {
  if (image_120_url_prefix_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    image_120_url_prefix_->clear();
  }
  clear_has_image_120_url_prefix();
}
inline const ::std::string& ConfigV2::image_120_url_prefix() const {
  // @@protoc_insertion_point(field_get:weizhu.system.ConfigV2.image_120_url_prefix)
  return *image_120_url_prefix_;
}
inline void ConfigV2::set_image_120_url_prefix(const ::std::string& value) {
  set_has_image_120_url_prefix();
  if (image_120_url_prefix_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    image_120_url_prefix_ = new ::std::string;
  }
  image_120_url_prefix_->assign(value);
  // @@protoc_insertion_point(field_set:weizhu.system.ConfigV2.image_120_url_prefix)
}
inline void ConfigV2::set_image_120_url_prefix(const char* value) {
  set_has_image_120_url_prefix();
  if (image_120_url_prefix_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    image_120_url_prefix_ = new ::std::string;
  }
  image_120_url_prefix_->assign(value);
  // @@protoc_insertion_point(field_set_char:weizhu.system.ConfigV2.image_120_url_prefix)
}
inline void ConfigV2::set_image_120_url_prefix(const char* value, size_t size) {
  set_has_image_120_url_prefix();
  if (image_120_url_prefix_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    image_120_url_prefix_ = new ::std::string;
  }
  image_120_url_prefix_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:weizhu.system.ConfigV2.image_120_url_prefix)
}
inline ::std::string* ConfigV2::mutable_image_120_url_prefix() {
  set_has_image_120_url_prefix();
  if (image_120_url_prefix_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    image_120_url_prefix_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:weizhu.system.ConfigV2.image_120_url_prefix)
  return image_120_url_prefix_;
}
inline ::std::string* ConfigV2::release_image_120_url_prefix() {
  clear_has_image_120_url_prefix();
  if (image_120_url_prefix_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = image_120_url_prefix_;
    image_120_url_prefix_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ConfigV2::set_allocated_image_120_url_prefix(::std::string* image_120_url_prefix) {
  if (image_120_url_prefix_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete image_120_url_prefix_;
  }
  if (image_120_url_prefix) {
    set_has_image_120_url_prefix();
    image_120_url_prefix_ = image_120_url_prefix;
  } else {
    clear_has_image_120_url_prefix();
    image_120_url_prefix_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:weizhu.system.ConfigV2.image_120_url_prefix)
}

// required string image_240_url_prefix = 19;
inline bool ConfigV2::has_image_240_url_prefix() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void ConfigV2::set_has_image_240_url_prefix() {
  _has_bits_[0] |= 0x00040000u;
}
inline void ConfigV2::clear_has_image_240_url_prefix() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void ConfigV2::clear_image_240_url_prefix() {
  if (image_240_url_prefix_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    image_240_url_prefix_->clear();
  }
  clear_has_image_240_url_prefix();
}
inline const ::std::string& ConfigV2::image_240_url_prefix() const {
  // @@protoc_insertion_point(field_get:weizhu.system.ConfigV2.image_240_url_prefix)
  return *image_240_url_prefix_;
}
inline void ConfigV2::set_image_240_url_prefix(const ::std::string& value) {
  set_has_image_240_url_prefix();
  if (image_240_url_prefix_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    image_240_url_prefix_ = new ::std::string;
  }
  image_240_url_prefix_->assign(value);
  // @@protoc_insertion_point(field_set:weizhu.system.ConfigV2.image_240_url_prefix)
}
inline void ConfigV2::set_image_240_url_prefix(const char* value) {
  set_has_image_240_url_prefix();
  if (image_240_url_prefix_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    image_240_url_prefix_ = new ::std::string;
  }
  image_240_url_prefix_->assign(value);
  // @@protoc_insertion_point(field_set_char:weizhu.system.ConfigV2.image_240_url_prefix)
}
inline void ConfigV2::set_image_240_url_prefix(const char* value, size_t size) {
  set_has_image_240_url_prefix();
  if (image_240_url_prefix_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    image_240_url_prefix_ = new ::std::string;
  }
  image_240_url_prefix_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:weizhu.system.ConfigV2.image_240_url_prefix)
}
inline ::std::string* ConfigV2::mutable_image_240_url_prefix() {
  set_has_image_240_url_prefix();
  if (image_240_url_prefix_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    image_240_url_prefix_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:weizhu.system.ConfigV2.image_240_url_prefix)
  return image_240_url_prefix_;
}
inline ::std::string* ConfigV2::release_image_240_url_prefix() {
  clear_has_image_240_url_prefix();
  if (image_240_url_prefix_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = image_240_url_prefix_;
    image_240_url_prefix_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ConfigV2::set_allocated_image_240_url_prefix(::std::string* image_240_url_prefix) {
  if (image_240_url_prefix_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete image_240_url_prefix_;
  }
  if (image_240_url_prefix) {
    set_has_image_240_url_prefix();
    image_240_url_prefix_ = image_240_url_prefix;
  } else {
    clear_has_image_240_url_prefix();
    image_240_url_prefix_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:weizhu.system.ConfigV2.image_240_url_prefix)
}

// required string image_480_url_prefix = 20;
inline bool ConfigV2::has_image_480_url_prefix() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void ConfigV2::set_has_image_480_url_prefix() {
  _has_bits_[0] |= 0x00080000u;
}
inline void ConfigV2::clear_has_image_480_url_prefix() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void ConfigV2::clear_image_480_url_prefix() {
  if (image_480_url_prefix_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    image_480_url_prefix_->clear();
  }
  clear_has_image_480_url_prefix();
}
inline const ::std::string& ConfigV2::image_480_url_prefix() const {
  // @@protoc_insertion_point(field_get:weizhu.system.ConfigV2.image_480_url_prefix)
  return *image_480_url_prefix_;
}
inline void ConfigV2::set_image_480_url_prefix(const ::std::string& value) {
  set_has_image_480_url_prefix();
  if (image_480_url_prefix_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    image_480_url_prefix_ = new ::std::string;
  }
  image_480_url_prefix_->assign(value);
  // @@protoc_insertion_point(field_set:weizhu.system.ConfigV2.image_480_url_prefix)
}
inline void ConfigV2::set_image_480_url_prefix(const char* value) {
  set_has_image_480_url_prefix();
  if (image_480_url_prefix_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    image_480_url_prefix_ = new ::std::string;
  }
  image_480_url_prefix_->assign(value);
  // @@protoc_insertion_point(field_set_char:weizhu.system.ConfigV2.image_480_url_prefix)
}
inline void ConfigV2::set_image_480_url_prefix(const char* value, size_t size) {
  set_has_image_480_url_prefix();
  if (image_480_url_prefix_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    image_480_url_prefix_ = new ::std::string;
  }
  image_480_url_prefix_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:weizhu.system.ConfigV2.image_480_url_prefix)
}
inline ::std::string* ConfigV2::mutable_image_480_url_prefix() {
  set_has_image_480_url_prefix();
  if (image_480_url_prefix_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    image_480_url_prefix_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:weizhu.system.ConfigV2.image_480_url_prefix)
  return image_480_url_prefix_;
}
inline ::std::string* ConfigV2::release_image_480_url_prefix() {
  clear_has_image_480_url_prefix();
  if (image_480_url_prefix_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = image_480_url_prefix_;
    image_480_url_prefix_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ConfigV2::set_allocated_image_480_url_prefix(::std::string* image_480_url_prefix) {
  if (image_480_url_prefix_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete image_480_url_prefix_;
  }
  if (image_480_url_prefix) {
    set_has_image_480_url_prefix();
    image_480_url_prefix_ = image_480_url_prefix;
  } else {
    clear_has_image_480_url_prefix();
    image_480_url_prefix_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:weizhu.system.ConfigV2.image_480_url_prefix)
}

// -------------------------------------------------------------------

// GetConfigResponse

// required .weizhu.system.Config config = 1;
inline bool GetConfigResponse::has_config() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GetConfigResponse::set_has_config() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GetConfigResponse::clear_has_config() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GetConfigResponse::clear_config() {
  if (config_ != NULL) config_->::weizhu::system::Config::Clear();
  clear_has_config();
}
inline const ::weizhu::system::Config& GetConfigResponse::config() const {
  // @@protoc_insertion_point(field_get:weizhu.system.GetConfigResponse.config)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return config_ != NULL ? *config_ : *default_instance().config_;
#else
  return config_ != NULL ? *config_ : *default_instance_->config_;
#endif
}
inline ::weizhu::system::Config* GetConfigResponse::mutable_config() {
  set_has_config();
  if (config_ == NULL) config_ = new ::weizhu::system::Config;
  // @@protoc_insertion_point(field_mutable:weizhu.system.GetConfigResponse.config)
  return config_;
}
inline ::weizhu::system::Config* GetConfigResponse::release_config() {
  clear_has_config();
  ::weizhu::system::Config* temp = config_;
  config_ = NULL;
  return temp;
}
inline void GetConfigResponse::set_allocated_config(::weizhu::system::Config* config) {
  delete config_;
  config_ = config;
  if (config) {
    set_has_config();
  } else {
    clear_has_config();
  }
  // @@protoc_insertion_point(field_set_allocated:weizhu.system.GetConfigResponse.config)
}

// -------------------------------------------------------------------

// GetConfigV2Response

// required .weizhu.system.ConfigV2 config = 2;
inline bool GetConfigV2Response::has_config() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GetConfigV2Response::set_has_config() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GetConfigV2Response::clear_has_config() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GetConfigV2Response::clear_config() {
  if (config_ != NULL) config_->::weizhu::system::ConfigV2::Clear();
  clear_has_config();
}
inline const ::weizhu::system::ConfigV2& GetConfigV2Response::config() const {
  // @@protoc_insertion_point(field_get:weizhu.system.GetConfigV2Response.config)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return config_ != NULL ? *config_ : *default_instance().config_;
#else
  return config_ != NULL ? *config_ : *default_instance_->config_;
#endif
}
inline ::weizhu::system::ConfigV2* GetConfigV2Response::mutable_config() {
  set_has_config();
  if (config_ == NULL) config_ = new ::weizhu::system::ConfigV2;
  // @@protoc_insertion_point(field_mutable:weizhu.system.GetConfigV2Response.config)
  return config_;
}
inline ::weizhu::system::ConfigV2* GetConfigV2Response::release_config() {
  clear_has_config();
  ::weizhu::system::ConfigV2* temp = config_;
  config_ = NULL;
  return temp;
}
inline void GetConfigV2Response::set_allocated_config(::weizhu::system::ConfigV2* config) {
  delete config_;
  config_ = config;
  if (config) {
    set_has_config();
  } else {
    clear_has_config();
  }
  // @@protoc_insertion_point(field_set_allocated:weizhu.system.GetConfigV2Response.config)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace system
}  // namespace weizhu

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_system_2eproto__INCLUDED
